
gun3_checksum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fcc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800516c  0800516c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800516c  0800516c  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005174  08005174  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800517c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000464  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000047c  2000047c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015798  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000305f  00000000  00000000  000357e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00038840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001040  00000000  00000000  00039990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d31  00000000  00000000  0003a9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ed2  00000000  00000000  0005d701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc5e1  00000000  00000000  000745d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140bb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048f4  00000000  00000000  00140c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800513c 	.word	0x0800513c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	0800513c 	.word	0x0800513c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <button>:

extern UART_HandleTypeDef huart2;


void button (void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	for(i=0;i<9;i++)
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <button+0x5c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	e010      	b.n	80004fa <button+0x2e>
	{
		toplam += tbuffer[i];
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <button+0x5c>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <button+0x60>)
 80004e0:	5c9a      	ldrb	r2, [r3, r2]
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <button+0x64>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <button+0x64>)
 80004ec:	701a      	strb	r2, [r3, #0]
	for(i=0;i<9;i++)
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <button+0x5c>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	3301      	adds	r3, #1
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <button+0x5c>)
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <button+0x5c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b08      	cmp	r3, #8
 8000500:	d9ea      	bls.n	80004d8 <button+0xc>
	}

	checksum = toplam % 256;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <button+0x64>)
 8000504:	781a      	ldrb	r2, [r3, #0]
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <button+0x68>)
 8000508:	701a      	strb	r2, [r3, #0]

	tbuffer[9] = checksum;
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <button+0x68>)
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <button+0x60>)
 8000510:	725a      	strb	r2, [r3, #9]

	HAL_Delay(150);
 8000512:	2096      	movs	r0, #150	; 0x96
 8000514:	f000 fd2a 	bl	8000f6c <HAL_Delay>
	HAL_UART_Transmit(&huart2,(uint8_t*)tbuffer,10,100);
 8000518:	2364      	movs	r3, #100	; 0x64
 800051a:	220a      	movs	r2, #10
 800051c:	4903      	ldr	r1, [pc, #12]	; (800052c <button+0x60>)
 800051e:	4806      	ldr	r0, [pc, #24]	; (8000538 <button+0x6c>)
 8000520:	f003 fdb8 	bl	8004094 <HAL_UART_Transmit>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000016d 	.word	0x2000016d
 800052c:	20000000 	.word	0x20000000
 8000530:	2000016e 	.word	0x2000016e
 8000534:	2000016f 	.word	0x2000016f
 8000538:	20000128 	.word	0x20000128

0800053c <led>:

extern uint8_t rbuffer[1];
extern UART_HandleTypeDef huart2;

void led (void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0

	if(rbuffer[0] == 45)
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <led+0x38>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b2d      	cmp	r3, #45	; 0x2d
 8000546:	d113      	bne.n	8000570 <led+0x34>
	{

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054e:	480a      	ldr	r0, [pc, #40]	; (8000578 <led+0x3c>)
 8000550:	f000 ffca 	bl	80014e8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000554:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000558:	f000 fd08 	bl	8000f6c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <led+0x3c>)
 8000564:	f000 ffc0 	bl	80014e8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056c:	f000 fcfe 	bl	8000f6c <HAL_Delay>

	}

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000170 	.word	0x20000170
 8000578:	40020c00 	.word	0x40020c00

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fc82 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f864 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f98a 	bl	80008a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800058c:	f000 f8ca 	bl	8000724 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000590:	f000 f8f6 	bl	8000780 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000594:	f000 f924 	bl	80007e0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000598:	f000 f958 	bl	800084c <MX_USART2_UART_Init>
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */

	  HAL_Delay(100);
 800059c:	2064      	movs	r0, #100	; 0x64
 800059e:	f000 fce5 	bl	8000f6c <HAL_Delay>

	  	  	if (status==0 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_RESET))
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <main+0xc0>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d10a      	bne.n	80005c0 <main+0x44>
 80005aa:	2101      	movs	r1, #1
 80005ac:	4824      	ldr	r0, [pc, #144]	; (8000640 <main+0xc4>)
 80005ae:	f000 ff83 	bl	80014b8 <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d103      	bne.n	80005c0 <main+0x44>
	  	  	{
	  	  		//while((HAL_GPIO_ReadPin(GPIOA,button6Stream_Pin)==GPIO_PIN_SET));

	  	  		status=0;
 80005b8:	4b20      	ldr	r3, [pc, #128]	; (800063c <main+0xc0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
 80005be:	e030      	b.n	8000622 <main+0xa6>
	  	  	}
	  	  	//sadece buton low olduğunda ve status=0 olduğunda buton flagini 1 yapıyoruz ve buton okuması gerçekleştiriyoruz
	  	  	else if( (status==0 &&  HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET) )
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <main+0xc0>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d10f      	bne.n	80005e8 <main+0x6c>
 80005c8:	2101      	movs	r1, #1
 80005ca:	481d      	ldr	r0, [pc, #116]	; (8000640 <main+0xc4>)
 80005cc:	f000 ff74 	bl	80014b8 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d108      	bne.n	80005e8 <main+0x6c>
	  	  	{
	  	  		status=1;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <main+0xc0>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]

	  	  		button();
 80005dc:	f7ff ff76 	bl	80004cc <button>
	  	  		toplam = 0;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <main+0xc8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e01c      	b.n	8000622 <main+0xa6>
	  	  	}
	  	  	else if (status==1 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_RESET))
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <main+0xc0>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d10a      	bne.n	8000606 <main+0x8a>
 80005f0:	2101      	movs	r1, #1
 80005f2:	4813      	ldr	r0, [pc, #76]	; (8000640 <main+0xc4>)
 80005f4:	f000 ff60 	bl	80014b8 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d103      	bne.n	8000606 <main+0x8a>
	  	  	{
	  	  		status=0;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <main+0xc0>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
 8000604:	e00d      	b.n	8000622 <main+0xa6>
	  	  	}
	  	  	else if (status==1 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET))
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <main+0xc0>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d109      	bne.n	8000622 <main+0xa6>
 800060e:	2101      	movs	r1, #1
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <main+0xc4>)
 8000612:	f000 ff51 	bl	80014b8 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b01      	cmp	r3, #1
 800061a:	d102      	bne.n	8000622 <main+0xa6>
	  	  	{
	  	  		status=1;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <main+0xc0>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
	  	  	}
	  	  	else {}

	   	   HAL_UART_Receive(&huart2, (uint8_t*)rbuffer, 1 , 100);
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	2201      	movs	r2, #1
 8000626:	4908      	ldr	r1, [pc, #32]	; (8000648 <main+0xcc>)
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <main+0xd0>)
 800062a:	f003 fdc5 	bl	80041b8 <HAL_UART_Receive>

	  	  	if (rbuffer[0] != '\0')
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <main+0xcc>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0b2      	beq.n	800059c <main+0x20>
	  	  	{
	  	  		led();
 8000636:	f7ff ff81 	bl	800053c <led>
	  HAL_Delay(100);
 800063a:	e7af      	b.n	800059c <main+0x20>
 800063c:	2000016c 	.word	0x2000016c
 8000640:	40020000 	.word	0x40020000
 8000644:	2000016e 	.word	0x2000016e
 8000648:	20000170 	.word	0x20000170
 800064c:	20000128 	.word	0x20000128

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fd64 	bl	800512c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fe2e 	bl	8003338 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f9db 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2105      	movs	r1, #5
 8000704:	4618      	mov	r0, r3
 8000706:	f003 f88f 	bl	8003828 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000710:	f000 f9c4 	bl	8000a9c <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C1_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <MX_I2C1_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C1_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_I2C1_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_I2C1_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_I2C1_Init+0x50>)
 8000762:	f002 f805 	bl	8002770 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f996 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000034 	.word	0x20000034
 8000778:	40005400 	.word	0x40005400
 800077c:	000186a0 	.word	0x000186a0

08000780 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_I2S3_Init+0x54>)
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <MX_I2S3_Init+0x58>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2S3_Init+0x54>)
 800078c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000790:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_I2S3_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_I2S3_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007a8:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <MX_I2S3_Init+0x5c>)
 80007aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007c0:	f002 f91a 	bl	80029f8 <HAL_I2S_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ca:	f000 f967 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000088 	.word	0x20000088
 80007d8:	40003c00 	.word	0x40003c00
 80007dc:	00017700 	.word	0x00017700

080007e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_SPI1_Init+0x64>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <MX_SPI1_Init+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_SPI1_Init+0x64>)
 800080c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000810:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_SPI1_Init+0x64>)
 800082c:	220a      	movs	r2, #10
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_SPI1_Init+0x64>)
 8000832:	f003 fb59 	bl	8003ee8 <HAL_SPI_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800083c:	f000 f92e 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000d0 	.word	0x200000d0
 8000848:	40013000 	.word	0x40013000

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_USART2_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000884:	f003 fbb9 	bl	8003ffa <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 f905 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000128 	.word	0x20000128
 800089c:	40004400 	.word	0x40004400

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	4b72      	ldr	r3, [pc, #456]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a71      	ldr	r2, [pc, #452]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b6f      	ldr	r3, [pc, #444]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	4b6b      	ldr	r3, [pc, #428]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a6a      	ldr	r2, [pc, #424]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b68      	ldr	r3, [pc, #416]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b64      	ldr	r3, [pc, #400]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a63      	ldr	r2, [pc, #396]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b61      	ldr	r3, [pc, #388]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b5d      	ldr	r3, [pc, #372]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a5c      	ldr	r2, [pc, #368]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b5a      	ldr	r3, [pc, #360]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b56      	ldr	r3, [pc, #344]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a55      	ldr	r2, [pc, #340]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b53      	ldr	r3, [pc, #332]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b4f      	ldr	r3, [pc, #316]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a4e      	ldr	r2, [pc, #312]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b4c      	ldr	r3, [pc, #304]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2108      	movs	r1, #8
 8000962:	4849      	ldr	r0, [pc, #292]	; (8000a88 <MX_GPIO_Init+0x1e8>)
 8000964:	f000 fdc0 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2101      	movs	r1, #1
 800096c:	4847      	ldr	r0, [pc, #284]	; (8000a8c <MX_GPIO_Init+0x1ec>)
 800096e:	f000 fdbb 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000972:	2200      	movs	r2, #0
 8000974:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000978:	4845      	ldr	r0, [pc, #276]	; (8000a90 <MX_GPIO_Init+0x1f0>)
 800097a:	f000 fdb5 	bl	80014e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800097e:	2308      	movs	r3, #8
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	483c      	ldr	r0, [pc, #240]	; (8000a88 <MX_GPIO_Init+0x1e8>)
 8000996:	f000 fbf3 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4836      	ldr	r0, [pc, #216]	; (8000a8c <MX_GPIO_Init+0x1ec>)
 80009b2:	f000 fbe5 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009b6:	2308      	movs	r3, #8
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c6:	2305      	movs	r3, #5
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	482e      	ldr	r0, [pc, #184]	; (8000a8c <MX_GPIO_Init+0x1ec>)
 80009d2:	f000 fbd5 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	482a      	ldr	r0, [pc, #168]	; (8000a94 <MX_GPIO_Init+0x1f4>)
 80009ec:	f000 fbc8 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009f0:	2304      	movs	r3, #4
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4825      	ldr	r0, [pc, #148]	; (8000a98 <MX_GPIO_Init+0x1f8>)
 8000a04:	f000 fbbc 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	481c      	ldr	r0, [pc, #112]	; (8000a98 <MX_GPIO_Init+0x1f8>)
 8000a26:	f000 fbab 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a2a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a2e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <MX_GPIO_Init+0x1f0>)
 8000a44:	f000 fb9c 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a48:	2320      	movs	r3, #32
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_GPIO_Init+0x1f0>)
 8000a5c:	f000 fb90 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a64:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0x1e8>)
 8000a76:	f000 fb83 	bl	8001180 <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3730      	adds	r7, #48	; 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae6:	2007      	movs	r0, #7
 8000ae8:	f000 fb16 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <HAL_I2C_MspInit+0x84>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d12c      	bne.n	8000b74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3c:	2312      	movs	r3, #18
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <HAL_I2C_MspInit+0x8c>)
 8000b54:	f000 fb14 	bl	8001180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400

08000b88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	; 0x38
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a31      	ldr	r2, [pc, #196]	; (8000c78 <HAL_I2S_MspInit+0xf0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d15a      	bne.n	8000c6e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bbc:	23c0      	movs	r3, #192	; 0xc0
 8000bbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 f84d 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bd4:	f7ff ff62 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <HAL_I2S_MspInit+0xf4>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a26      	ldr	r2, [pc, #152]	; (8000c7c <HAL_I2S_MspInit+0xf4>)
 8000be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <HAL_I2S_MspInit+0xf4>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <HAL_I2S_MspInit+0xf4>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <HAL_I2S_MspInit+0xf4>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <HAL_I2S_MspInit+0xf4>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_I2S_MspInit+0xf4>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <HAL_I2S_MspInit+0xf4>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_I2S_MspInit+0xf4>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c3c:	2306      	movs	r3, #6
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	480e      	ldr	r0, [pc, #56]	; (8000c80 <HAL_I2S_MspInit+0xf8>)
 8000c48:	f000 fa9a 	bl	8001180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c4c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c5e:	2306      	movs	r3, #6
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4806      	ldr	r0, [pc, #24]	; (8000c84 <HAL_I2S_MspInit+0xfc>)
 8000c6a:	f000 fa89 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3738      	adds	r7, #56	; 0x38
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40003c00 	.word	0x40003c00
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020800 	.word	0x40020800

08000c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_SPI_MspInit+0x84>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d12b      	bne.n	8000d02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_SPI_MspInit+0x88>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <HAL_SPI_MspInit+0x88>)
 8000cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_SPI_MspInit+0x88>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_SPI_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_SPI_MspInit+0x88>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_SPI_MspInit+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ce2:	23e0      	movs	r3, #224	; 0xe0
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_SPI_MspInit+0x8c>)
 8000cfe:	f000 fa3f 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	; 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40013000 	.word	0x40013000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_UART_MspInit+0x84>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12b      	bne.n	8000d92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d72:	230c      	movs	r3, #12
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d82:	2307      	movs	r3, #7
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_UART_MspInit+0x8c>)
 8000d8e:	f000 f9f7 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40004400 	.word	0x40004400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f89a 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <OTG_FS_IRQHandler+0x10>)
 8000e02:	f000 fb8a 	bl	800151a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000178 	.word	0x20000178

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e50:	4c0b      	ldr	r4, [pc, #44]	; (8000e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5e:	f7ff ffd7 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f004 f93f 	bl	80050e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff fb89 	bl	800057c <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e78:	0800517c 	.word	0x0800517c
  ldr r2, =_sbss
 8000e7c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e80:	2000047c 	.word	0x2000047c

08000e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <HAL_Init+0x40>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_Init+0x40>)
 8000e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_Init+0x40>)
 8000eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f931 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f808 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fdf4 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023c00 	.word	0x40023c00

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f93b 	bl	8001166 <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f911 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000000c 	.word	0x2000000c
 8000f24:	20000014 	.word	0x20000014
 8000f28:	20000010 	.word	0x20000010

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000014 	.word	0x20000014
 8000f50:	20000174 	.word	0x20000174

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000174 	.word	0x20000174

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffde 	bl	8000f54 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000014 	.word	0x20000014

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff47 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff5c 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffb0 	bl	80010d4 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e16b      	b.n	8001474 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 815a 	bne.w	800146e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d005      	beq.n	80011d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d130      	bne.n	8001234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 0201 	and.w	r2, r3, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b03      	cmp	r3, #3
 800123e:	d017      	beq.n	8001270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d123      	bne.n	80012c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80b4 	beq.w	800146e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b60      	ldr	r3, [pc, #384]	; (800148c <HAL_GPIO_Init+0x30c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a5f      	ldr	r2, [pc, #380]	; (800148c <HAL_GPIO_Init+0x30c>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b5d      	ldr	r3, [pc, #372]	; (800148c <HAL_GPIO_Init+0x30c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	4a5b      	ldr	r2, [pc, #364]	; (8001490 <HAL_GPIO_Init+0x310>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a52      	ldr	r2, [pc, #328]	; (8001494 <HAL_GPIO_Init+0x314>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d02b      	beq.n	80013a6 <HAL_GPIO_Init+0x226>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a51      	ldr	r2, [pc, #324]	; (8001498 <HAL_GPIO_Init+0x318>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d025      	beq.n	80013a2 <HAL_GPIO_Init+0x222>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a50      	ldr	r2, [pc, #320]	; (800149c <HAL_GPIO_Init+0x31c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d01f      	beq.n	800139e <HAL_GPIO_Init+0x21e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <HAL_GPIO_Init+0x320>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d019      	beq.n	800139a <HAL_GPIO_Init+0x21a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4e      	ldr	r2, [pc, #312]	; (80014a4 <HAL_GPIO_Init+0x324>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d013      	beq.n	8001396 <HAL_GPIO_Init+0x216>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4d      	ldr	r2, [pc, #308]	; (80014a8 <HAL_GPIO_Init+0x328>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d00d      	beq.n	8001392 <HAL_GPIO_Init+0x212>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4c      	ldr	r2, [pc, #304]	; (80014ac <HAL_GPIO_Init+0x32c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d007      	beq.n	800138e <HAL_GPIO_Init+0x20e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4b      	ldr	r2, [pc, #300]	; (80014b0 <HAL_GPIO_Init+0x330>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d101      	bne.n	800138a <HAL_GPIO_Init+0x20a>
 8001386:	2307      	movs	r3, #7
 8001388:	e00e      	b.n	80013a8 <HAL_GPIO_Init+0x228>
 800138a:	2308      	movs	r3, #8
 800138c:	e00c      	b.n	80013a8 <HAL_GPIO_Init+0x228>
 800138e:	2306      	movs	r3, #6
 8001390:	e00a      	b.n	80013a8 <HAL_GPIO_Init+0x228>
 8001392:	2305      	movs	r3, #5
 8001394:	e008      	b.n	80013a8 <HAL_GPIO_Init+0x228>
 8001396:	2304      	movs	r3, #4
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x228>
 800139a:	2303      	movs	r3, #3
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x228>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x228>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x228>
 80013a6:	2300      	movs	r3, #0
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b8:	4935      	ldr	r1, [pc, #212]	; (8001490 <HAL_GPIO_Init+0x310>)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c6:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <HAL_GPIO_Init+0x334>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ea:	4a32      	ldr	r2, [pc, #200]	; (80014b4 <HAL_GPIO_Init+0x334>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f0:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <HAL_GPIO_Init+0x334>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001414:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <HAL_GPIO_Init+0x334>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_GPIO_Init+0x334>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143e:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <HAL_GPIO_Init+0x334>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_GPIO_Init+0x334>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <HAL_GPIO_Init+0x334>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	f67f ae90 	bls.w	800119c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40013800 	.word	0x40013800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40021400 	.word	0x40021400
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40021c00 	.word	0x40021c00
 80014b4:	40013c00 	.word	0x40013c00

080014b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691a      	ldr	r2, [r3, #16]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e001      	b.n	80014da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fab6 	bl	8004aa2 <USB_GetMode>
 8001536:	4603      	mov	r3, r0
 8001538:	2b01      	cmp	r3, #1
 800153a:	f040 80f6 	bne.w	800172a <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f003 fa9a 	bl	8004a7c <USB_ReadInterrupts>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80ec 	beq.w	8001728 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fa91 	bl	8004a7c <USB_ReadInterrupts>
 800155a:	4603      	mov	r3, r0
 800155c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001564:	d104      	bne.n	8001570 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800156e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fa81 	bl	8004a7c <USB_ReadInterrupts>
 800157a:	4603      	mov	r3, r0
 800157c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001584:	d104      	bne.n	8001590 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800158e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fa71 	bl	8004a7c <USB_ReadInterrupts>
 800159a:	4603      	mov	r3, r0
 800159c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015a4:	d104      	bne.n	80015b0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015ae:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 fa61 	bl	8004a7c <USB_ReadInterrupts>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d103      	bne.n	80015cc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fa53 	bl	8004a7c <USB_ReadInterrupts>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015e0:	d11c      	bne.n	800161c <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015ea:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10f      	bne.n	800161c <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80015fc:	2110      	movs	r1, #16
 80015fe:	6938      	ldr	r0, [r7, #16]
 8001600:	f003 f980 	bl	8004904 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001604:	6938      	ldr	r0, [r7, #16]
 8001606:	f003 f9b1 	bl	800496c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2101      	movs	r1, #1
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fa54 	bl	8004abe <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f003 fce5 	bl	8004fe6 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f003 fa2b 	bl	8004a7c <USB_ReadInterrupts>
 8001626:	4603      	mov	r3, r0
 8001628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001630:	d102      	bne.n	8001638 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f001 f829 	bl	800268a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fa1d 	bl	8004a7c <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b08      	cmp	r3, #8
 800164a:	d106      	bne.n	800165a <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f003 fcae 	bl	8004fae <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2208      	movs	r2, #8
 8001658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fa0c 	bl	8004a7c <USB_ReadInterrupts>
 8001664:	4603      	mov	r3, r0
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b10      	cmp	r3, #16
 800166c:	d101      	bne.n	8001672 <HAL_HCD_IRQHandler+0x158>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_HCD_IRQHandler+0x15a>
 8001672:	2300      	movs	r3, #0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d012      	beq.n	800169e <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699a      	ldr	r2, [r3, #24]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0210 	bic.w	r2, r2, #16
 8001686:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 ff2c 	bl	80024e6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0210 	orr.w	r2, r2, #16
 800169c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 f9ea 	bl	8004a7c <USB_ReadInterrupts>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016b2:	d13a      	bne.n	800172a <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 fa3a 	bl	8004b32 <USB_HC_ReadInterrupt>
 80016be:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e025      	b.n	8001712 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	fa22 f303 	lsr.w	r3, r2, r3
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d018      	beq.n	800170c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016f0:	d106      	bne.n	8001700 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f836 	bl	800176a <HCD_HC_IN_IRQHandler>
 80016fe:	e005      	b.n	800170c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4619      	mov	r1, r3
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fb84 	bl	8001e14 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	429a      	cmp	r2, r3
 800171a:	d3d4      	bcc.n	80016c6 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001724:	615a      	str	r2, [r3, #20]
 8001726:	e000      	b.n	800172a <HAL_HCD_IRQHandler+0x210>
      return;
 8001728:	bf00      	nop
    }
  }
}
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_HCD_Stop+0x16>
 8001742:	2302      	movs	r3, #2
 8001744:	e00d      	b.n	8001762 <HAL_HCD_Stop+0x32>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fafa 	bl	8004d4c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4413      	add	r3, r2
 800178c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b04      	cmp	r3, #4
 8001798:	d11a      	bne.n	80017d0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a6:	461a      	mov	r2, r3
 80017a8:	2304      	movs	r3, #4
 80017aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	212c      	movs	r1, #44	; 0x2c
 80017b2:	fb01 f303 	mul.w	r3, r1, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	3361      	adds	r3, #97	; 0x61
 80017ba:	2206      	movs	r2, #6
 80017bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 f9c3 	bl	8004b54 <USB_HC_Halt>
 80017ce:	e0af      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	015a      	lsls	r2, r3, #5
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e6:	d11b      	bne.n	8001820 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	015a      	lsls	r2, r3, #5
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f4:	461a      	mov	r2, r3
 80017f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	212c      	movs	r1, #44	; 0x2c
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	3361      	adds	r3, #97	; 0x61
 800180a:	2207      	movs	r2, #7
 800180c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f003 f99b 	bl	8004b54 <USB_HC_Halt>
 800181e:	e087      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4413      	add	r3, r2
 8001828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b20      	cmp	r3, #32
 8001834:	d109      	bne.n	800184a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4413      	add	r3, r2
 800183e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001842:	461a      	mov	r2, r3
 8001844:	2320      	movs	r3, #32
 8001846:	6093      	str	r3, [r2, #8]
 8001848:	e072      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	015a      	lsls	r2, r3, #5
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4413      	add	r3, r2
 8001852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b08      	cmp	r3, #8
 800185e:	d11a      	bne.n	8001896 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	015a      	lsls	r2, r3, #5
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4413      	add	r3, r2
 8001868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800186c:	461a      	mov	r2, r3
 800186e:	2308      	movs	r3, #8
 8001870:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	212c      	movs	r1, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	3361      	adds	r3, #97	; 0x61
 8001880:	2205      	movs	r2, #5
 8001882:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f003 f960 	bl	8004b54 <USB_HC_Halt>
 8001894:	e04c      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4413      	add	r3, r2
 800189e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ac:	d11b      	bne.n	80018e6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ba:	461a      	mov	r2, r3
 80018bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	212c      	movs	r1, #44	; 0x2c
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3361      	adds	r3, #97	; 0x61
 80018d0:	2208      	movs	r2, #8
 80018d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 f938 	bl	8004b54 <USB_HC_Halt>
 80018e4:	e024      	b.n	8001930 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f8:	2b80      	cmp	r3, #128	; 0x80
 80018fa:	d119      	bne.n	8001930 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	015a      	lsls	r2, r3, #5
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4413      	add	r3, r2
 8001904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001908:	461a      	mov	r2, r3
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3361      	adds	r3, #97	; 0x61
 800191c:	2206      	movs	r2, #6
 800191e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f912 	bl	8004b54 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	015a      	lsls	r2, r3, #5
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4413      	add	r3, r2
 8001938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001946:	d112      	bne.n	800196e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f003 f8fe 	bl	8004b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4413      	add	r3, r2
 8001960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001964:	461a      	mov	r2, r3
 8001966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800196c:	e24e      	b.n	8001e0c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4413      	add	r3, r2
 8001976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	f040 80df 	bne.w	8001b44 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d019      	beq.n	80019c2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3348      	adds	r3, #72	; 0x48
 800199c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	0159      	lsls	r1, r3, #5
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	440b      	add	r3, r1
 80019a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80019b0:	1ad2      	subs	r2, r2, r3
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	202c      	movs	r0, #44	; 0x2c
 80019b8:	fb00 f303 	mul.w	r3, r0, r3
 80019bc:	440b      	add	r3, r1
 80019be:	3350      	adds	r3, #80	; 0x50
 80019c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3361      	adds	r3, #97	; 0x61
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	335c      	adds	r3, #92	; 0x5c
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f2:	461a      	mov	r2, r3
 80019f4:	2301      	movs	r3, #1
 80019f6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	333f      	adds	r3, #63	; 0x3f
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d009      	beq.n	8001a20 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	333f      	adds	r3, #63	; 0x3f
 8001a1a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d111      	bne.n	8001a44 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 f892 	bl	8004b54 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2310      	movs	r3, #16
 8001a40:	6093      	str	r3, [r2, #8]
 8001a42:	e03a      	b.n	8001aba <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	212c      	movs	r1, #44	; 0x2c
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	333f      	adds	r3, #63	; 0x3f
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d009      	beq.n	8001a6c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	333f      	adds	r3, #63	; 0x3f
 8001a66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d126      	bne.n	8001aba <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	015a      	lsls	r2, r3, #5
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4413      	add	r3, r2
 8001a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	0151      	lsls	r1, r2, #5
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	440a      	add	r2, r1
 8001a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a8a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	3360      	adds	r3, #96	; 0x60
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	b2d9      	uxtb	r1, r3
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	202c      	movs	r0, #44	; 0x2c
 8001aa8:	fb00 f303 	mul.w	r3, r0, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	3360      	adds	r3, #96	; 0x60
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f003 faa4 	bl	8005002 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d12b      	bne.n	8001b1a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	212c      	movs	r1, #44	; 0x2c
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	3348      	adds	r3, #72	; 0x48
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	202c      	movs	r0, #44	; 0x2c
 8001ad8:	fb00 f202 	mul.w	r2, r0, r2
 8001adc:	440a      	add	r2, r1
 8001ade:	3240      	adds	r2, #64	; 0x40
 8001ae0:	8812      	ldrh	r2, [r2, #0]
 8001ae2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 818e 	beq.w	8001e0c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	212c      	movs	r1, #44	; 0x2c
 8001af6:	fb01 f303 	mul.w	r3, r1, r3
 8001afa:	4413      	add	r3, r2
 8001afc:	3354      	adds	r3, #84	; 0x54
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	f083 0301 	eor.w	r3, r3, #1
 8001b04:	b2d8      	uxtb	r0, r3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	212c      	movs	r1, #44	; 0x2c
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	3354      	adds	r3, #84	; 0x54
 8001b14:	4602      	mov	r2, r0
 8001b16:	701a      	strb	r2, [r3, #0]
}
 8001b18:	e178      	b.n	8001e0c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	212c      	movs	r1, #44	; 0x2c
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	3354      	adds	r3, #84	; 0x54
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	f083 0301 	eor.w	r3, r3, #1
 8001b2e:	b2d8      	uxtb	r0, r3
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	212c      	movs	r1, #44	; 0x2c
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3354      	adds	r3, #84	; 0x54
 8001b3e:	4602      	mov	r2, r0
 8001b40:	701a      	strb	r2, [r3, #0]
}
 8001b42:	e163      	b.n	8001e0c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	015a      	lsls	r2, r3, #5
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	f040 80f6 	bne.w	8001d48 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	3361      	adds	r3, #97	; 0x61
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d109      	bne.n	8001b84 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	212c      	movs	r1, #44	; 0x2c
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3360      	adds	r3, #96	; 0x60
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	e0c9      	b.n	8001d18 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	212c      	movs	r1, #44	; 0x2c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3361      	adds	r3, #97	; 0x61
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d109      	bne.n	8001bac <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3360      	adds	r3, #96	; 0x60
 8001ba6:	2205      	movs	r2, #5
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e0b5      	b.n	8001d18 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3361      	adds	r3, #97	; 0x61
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b06      	cmp	r3, #6
 8001bbe:	d009      	beq.n	8001bd4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3361      	adds	r3, #97	; 0x61
 8001bce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d150      	bne.n	8001c76 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	335c      	adds	r3, #92	; 0x5c
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	202c      	movs	r0, #44	; 0x2c
 8001bec:	fb00 f303 	mul.w	r3, r0, r3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	335c      	adds	r3, #92	; 0x5c
 8001bf4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	335c      	adds	r3, #92	; 0x5c
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d912      	bls.n	8001c30 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	335c      	adds	r3, #92	; 0x5c
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	212c      	movs	r1, #44	; 0x2c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	3360      	adds	r3, #96	; 0x60
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c2e:	e073      	b.n	8001d18 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	212c      	movs	r1, #44	; 0x2c
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3360      	adds	r3, #96	; 0x60
 8001c3e:	2202      	movs	r2, #2
 8001c40:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c58:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c60:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c74:	e050      	b.n	8001d18 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	212c      	movs	r1, #44	; 0x2c
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	3361      	adds	r3, #97	; 0x61
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d122      	bne.n	8001cd0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	212c      	movs	r1, #44	; 0x2c
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	3360      	adds	r3, #96	; 0x60
 8001c98:	2202      	movs	r2, #2
 8001c9a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cb2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e023      	b.n	8001d18 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3361      	adds	r3, #97	; 0x61
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b07      	cmp	r3, #7
 8001ce2:	d119      	bne.n	8001d18 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	212c      	movs	r1, #44	; 0x2c
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	335c      	adds	r3, #92	; 0x5c
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	202c      	movs	r0, #44	; 0x2c
 8001cfc:	fb00 f303 	mul.w	r3, r0, r3
 8001d00:	440b      	add	r3, r1
 8001d02:	335c      	adds	r3, #92	; 0x5c
 8001d04:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	3360      	adds	r3, #96	; 0x60
 8001d14:	2204      	movs	r2, #4
 8001d16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d24:	461a      	mov	r2, r3
 8001d26:	2302      	movs	r3, #2
 8001d28:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	b2d9      	uxtb	r1, r3
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	202c      	movs	r0, #44	; 0x2c
 8001d34:	fb00 f303 	mul.w	r3, r0, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3360      	adds	r3, #96	; 0x60
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f003 f95e 	bl	8005002 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001d46:	e061      	b.n	8001e0c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d156      	bne.n	8001e0c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	333f      	adds	r3, #63	; 0x3f
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d111      	bne.n	8001d96 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	335c      	adds	r3, #92	; 0x5c
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 fee0 	bl	8004b54 <USB_HC_Halt>
 8001d94:	e031      	b.n	8001dfa <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	333f      	adds	r3, #63	; 0x3f
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	333f      	adds	r3, #63	; 0x3f
 8001db8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d11d      	bne.n	8001dfa <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	212c      	movs	r1, #44	; 0x2c
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	335c      	adds	r3, #92	; 0x5c
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d110      	bne.n	8001dfa <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3361      	adds	r3, #97	; 0x61
 8001de6:	2203      	movs	r2, #3
 8001de8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 fead 	bl	8004b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	015a      	lsls	r2, r3, #5
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e06:	461a      	mov	r2, r3
 8001e08:	2310      	movs	r3, #16
 8001e0a:	6093      	str	r3, [r2, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d11a      	bne.n	8001e7a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	2304      	movs	r3, #4
 8001e54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	212c      	movs	r1, #44	; 0x2c
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	3361      	adds	r3, #97	; 0x61
 8001e64:	2206      	movs	r2, #6
 8001e66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 fe6e 	bl	8004b54 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001e78:	e331      	b.n	80024de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d12e      	bne.n	8001eee <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	333d      	adds	r3, #61	; 0x3d
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	f040 8313 	bne.w	80024de <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	212c      	movs	r1, #44	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	333d      	adds	r3, #61	; 0x3d
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3360      	adds	r3, #96	; 0x60
 8001ed8:	2202      	movs	r2, #2
 8001eda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 fe34 	bl	8004b54 <USB_HC_Halt>
}
 8001eec:	e2f7      	b.n	80024de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f04:	d112      	bne.n	8001f2c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f12:	461a      	mov	r2, r3
 8001f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f18:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f002 fe15 	bl	8004b54 <USB_HC_Halt>
}
 8001f2a:	e2d8      	b.n	80024de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d140      	bne.n	8001fc4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	335c      	adds	r3, #92	; 0x5c
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	d111      	bne.n	8001f8e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	333d      	adds	r3, #61	; 0x3d
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2340      	movs	r3, #64	; 0x40
 8001f8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	212c      	movs	r1, #44	; 0x2c
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	3361      	adds	r3, #97	; 0x61
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f002 fdc9 	bl	8004b54 <USB_HC_Halt>
}
 8001fc2:	e28c      	b.n	80024de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd6:	2b40      	cmp	r3, #64	; 0x40
 8001fd8:	d12c      	bne.n	8002034 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3361      	adds	r3, #97	; 0x61
 8001fe8:	2204      	movs	r2, #4
 8001fea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	212c      	movs	r1, #44	; 0x2c
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	333d      	adds	r3, #61	; 0x3d
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	335c      	adds	r3, #92	; 0x5c
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f002 fd9a 	bl	8004b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	461a      	mov	r2, r3
 800202e:	2340      	movs	r3, #64	; 0x40
 8002030:	6093      	str	r3, [r2, #8]
}
 8002032:	e254      	b.n	80024de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b08      	cmp	r3, #8
 8002048:	d11a      	bne.n	8002080 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4413      	add	r3, r2
 8002052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002056:	461a      	mov	r2, r3
 8002058:	2308      	movs	r3, #8
 800205a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	3361      	adds	r3, #97	; 0x61
 800206a:	2205      	movs	r2, #5
 800206c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f002 fd6b 	bl	8004b54 <USB_HC_Halt>
}
 800207e:	e22e      	b.n	80024de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	4413      	add	r3, r2
 8002088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b10      	cmp	r3, #16
 8002094:	d140      	bne.n	8002118 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	212c      	movs	r1, #44	; 0x2c
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	335c      	adds	r3, #92	; 0x5c
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3361      	adds	r3, #97	; 0x61
 80020b6:	2203      	movs	r2, #3
 80020b8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	333d      	adds	r3, #61	; 0x3d
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d112      	bne.n	80020f4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	333c      	adds	r3, #60	; 0x3c
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d108      	bne.n	80020f4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	333d      	adds	r3, #61	; 0x3d
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	4611      	mov	r1, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 fd28 	bl	8004b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	461a      	mov	r2, r3
 8002112:	2310      	movs	r3, #16
 8002114:	6093      	str	r3, [r2, #8]
}
 8002116:	e1e2      	b.n	80024de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	4413      	add	r3, r2
 8002120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b80      	cmp	r3, #128	; 0x80
 800212c:	d164      	bne.n	80021f8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d111      	bne.n	800215a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3361      	adds	r3, #97	; 0x61
 8002144:	2206      	movs	r2, #6
 8002146:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f002 fcfe 	bl	8004b54 <USB_HC_Halt>
 8002158:	e044      	b.n	80021e4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	335c      	adds	r3, #92	; 0x5c
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	202c      	movs	r0, #44	; 0x2c
 8002172:	fb00 f303 	mul.w	r3, r0, r3
 8002176:	440b      	add	r3, r1
 8002178:	335c      	adds	r3, #92	; 0x5c
 800217a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	335c      	adds	r3, #92	; 0x5c
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d920      	bls.n	80021d2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	335c      	adds	r3, #92	; 0x5c
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3360      	adds	r3, #96	; 0x60
 80021b0:	2204      	movs	r2, #4
 80021b2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	b2d9      	uxtb	r1, r3
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	202c      	movs	r0, #44	; 0x2c
 80021be:	fb00 f303 	mul.w	r3, r0, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3360      	adds	r3, #96	; 0x60
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f002 ff19 	bl	8005002 <HAL_HCD_HC_NotifyURBChange_Callback>
 80021d0:	e008      	b.n	80021e4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	3360      	adds	r3, #96	; 0x60
 80021e0:	2202      	movs	r2, #2
 80021e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f0:	461a      	mov	r2, r3
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	6093      	str	r3, [r2, #8]
}
 80021f6:	e172      	b.n	80024de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	d11b      	bne.n	8002248 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3361      	adds	r3, #97	; 0x61
 800221e:	2208      	movs	r2, #8
 8002220:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f002 fc91 	bl	8004b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	461a      	mov	r2, r3
 8002240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002244:	6093      	str	r3, [r2, #8]
}
 8002246:	e14a      	b.n	80024de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b02      	cmp	r3, #2
 800225c:	f040 813f 	bne.w	80024de <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3361      	adds	r3, #97	; 0x61
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d17d      	bne.n	8002370 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3360      	adds	r3, #96	; 0x60
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	333f      	adds	r3, #63	; 0x3f
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d00a      	beq.n	80022b0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	333f      	adds	r3, #63	; 0x3f
 80022a8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	f040 8100 	bne.w	80024b0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d113      	bne.n	80022e0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3355      	adds	r3, #85	; 0x55
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	f083 0301 	eor.w	r3, r3, #1
 80022cc:	b2d8      	uxtb	r0, r3
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3355      	adds	r3, #85	; 0x55
 80022dc:	4602      	mov	r2, r0
 80022de:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	f040 80e3 	bne.w	80024b0 <HCD_HC_OUT_IRQHandler+0x69c>
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	334c      	adds	r3, #76	; 0x4c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80d8 	beq.w	80024b0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	334c      	adds	r3, #76	; 0x4c
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	202c      	movs	r0, #44	; 0x2c
 8002316:	fb00 f202 	mul.w	r2, r0, r2
 800231a:	440a      	add	r2, r1
 800231c:	3240      	adds	r2, #64	; 0x40
 800231e:	8812      	ldrh	r2, [r2, #0]
 8002320:	4413      	add	r3, r2
 8002322:	3b01      	subs	r3, #1
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	202c      	movs	r0, #44	; 0x2c
 800232a:	fb00 f202 	mul.w	r2, r0, r2
 800232e:	440a      	add	r2, r1
 8002330:	3240      	adds	r2, #64	; 0x40
 8002332:	8812      	ldrh	r2, [r2, #0]
 8002334:	fbb3 f3f2 	udiv	r3, r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80b5 	beq.w	80024b0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3355      	adds	r3, #85	; 0x55
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	f083 0301 	eor.w	r3, r3, #1
 800235a:	b2d8      	uxtb	r0, r3
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3355      	adds	r3, #85	; 0x55
 800236a:	4602      	mov	r2, r0
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e09f      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	3361      	adds	r3, #97	; 0x61
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d109      	bne.n	8002398 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3360      	adds	r3, #96	; 0x60
 8002392:	2202      	movs	r2, #2
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	e08b      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	3361      	adds	r3, #97	; 0x61
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d109      	bne.n	80023c0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3360      	adds	r3, #96	; 0x60
 80023ba:	2202      	movs	r2, #2
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e077      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3361      	adds	r3, #97	; 0x61
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d109      	bne.n	80023e8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3360      	adds	r3, #96	; 0x60
 80023e2:	2205      	movs	r2, #5
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	e063      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3361      	adds	r3, #97	; 0x61
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d009      	beq.n	8002410 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3361      	adds	r3, #97	; 0x61
 800240a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800240c:	2b08      	cmp	r3, #8
 800240e:	d14f      	bne.n	80024b0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	335c      	adds	r3, #92	; 0x5c
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	202c      	movs	r0, #44	; 0x2c
 8002428:	fb00 f303 	mul.w	r3, r0, r3
 800242c:	440b      	add	r3, r1
 800242e:	335c      	adds	r3, #92	; 0x5c
 8002430:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	335c      	adds	r3, #92	; 0x5c
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d912      	bls.n	800246c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	335c      	adds	r3, #92	; 0x5c
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3360      	adds	r3, #96	; 0x60
 8002466:	2204      	movs	r2, #4
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e021      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	3360      	adds	r3, #96	; 0x60
 800247a:	2202      	movs	r2, #2
 800247c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002494:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800249c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	461a      	mov	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	461a      	mov	r2, r3
 80024be:	2302      	movs	r3, #2
 80024c0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	b2d9      	uxtb	r1, r3
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	202c      	movs	r0, #44	; 0x2c
 80024cc:	fb00 f303 	mul.w	r3, r0, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3360      	adds	r3, #96	; 0x60
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f002 fd92 	bl	8005002 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024de:	bf00      	nop
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b08a      	sub	sp, #40	; 0x28
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	0c5b      	lsrs	r3, r3, #17
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800251a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d004      	beq.n	800252c <HCD_RXQLVL_IRQHandler+0x46>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b05      	cmp	r3, #5
 8002526:	f000 80a9 	beq.w	800267c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800252a:	e0aa      	b.n	8002682 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80a6 	beq.w	8002680 <HCD_RXQLVL_IRQHandler+0x19a>
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	3344      	adds	r3, #68	; 0x44
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 809b 	beq.w	8002680 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3350      	adds	r3, #80	; 0x50
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	441a      	add	r2, r3
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	202c      	movs	r0, #44	; 0x2c
 8002564:	fb00 f303 	mul.w	r3, r0, r3
 8002568:	440b      	add	r3, r1
 800256a:	334c      	adds	r3, #76	; 0x4c
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d87a      	bhi.n	8002668 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	3344      	adds	r3, #68	; 0x44
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	b292      	uxth	r2, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f002 fa1e 	bl	80049cc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3344      	adds	r3, #68	; 0x44
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	441a      	add	r2, r3
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	202c      	movs	r0, #44	; 0x2c
 80025aa:	fb00 f303 	mul.w	r3, r0, r3
 80025ae:	440b      	add	r3, r1
 80025b0:	3344      	adds	r3, #68	; 0x44
 80025b2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3350      	adds	r3, #80	; 0x50
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	441a      	add	r2, r3
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	202c      	movs	r0, #44	; 0x2c
 80025ce:	fb00 f303 	mul.w	r3, r0, r3
 80025d2:	440b      	add	r3, r1
 80025d4:	3350      	adds	r3, #80	; 0x50
 80025d6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	0cdb      	lsrs	r3, r3, #19
 80025e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ec:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	3340      	adds	r3, #64	; 0x40
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4293      	cmp	r3, r2
 8002604:	d13c      	bne.n	8002680 <HCD_RXQLVL_IRQHandler+0x19a>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d039      	beq.n	8002680 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002622:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800262a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3354      	adds	r3, #84	; 0x54
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f083 0301 	eor.w	r3, r3, #1
 8002652:	b2d8      	uxtb	r0, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3354      	adds	r3, #84	; 0x54
 8002662:	4602      	mov	r2, r0
 8002664:	701a      	strb	r2, [r3, #0]
      break;
 8002666:	e00b      	b.n	8002680 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	3360      	adds	r3, #96	; 0x60
 8002676:	2204      	movs	r2, #4
 8002678:	701a      	strb	r2, [r3, #0]
      break;
 800267a:	e001      	b.n	8002680 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800267c:	bf00      	nop
 800267e:	e000      	b.n	8002682 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002680:	bf00      	nop
  }
}
 8002682:	bf00      	nop
 8002684:	3728      	adds	r7, #40	; 0x28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026b6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d10b      	bne.n	80026da <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d102      	bne.n	80026d2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f002 fc7c 	bl	8004fca <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d132      	bne.n	800274a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d126      	bne.n	8002744 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d113      	bne.n	8002726 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002704:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002708:	d106      	bne.n	8002718 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2102      	movs	r1, #2
 8002710:	4618      	mov	r0, r3
 8002712:	f002 f9d4 	bl	8004abe <USB_InitFSLSPClkSel>
 8002716:	e011      	b.n	800273c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2101      	movs	r1, #1
 800271e:	4618      	mov	r0, r3
 8002720:	f002 f9cd 	bl	8004abe <USB_InitFSLSPClkSel>
 8002724:	e00a      	b.n	800273c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d106      	bne.n	800273c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002734:	461a      	mov	r2, r3
 8002736:	f64e 2360 	movw	r3, #60000	; 0xea60
 800273a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f002 fc6e 	bl	800501e <HAL_HCD_PortEnabled_Callback>
 8002742:	e002      	b.n	800274a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f002 fc78 	bl	800503a <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b20      	cmp	r3, #32
 8002752:	d103      	bne.n	800275c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f043 0320 	orr.w	r3, r3, #32
 800275a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e12b      	b.n	80029da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe f9ae 	bl	8000af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d4:	f001 fa20 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a81      	ldr	r2, [pc, #516]	; (80029e4 <HAL_I2C_Init+0x274>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d807      	bhi.n	80027f4 <HAL_I2C_Init+0x84>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a80      	ldr	r2, [pc, #512]	; (80029e8 <HAL_I2C_Init+0x278>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	bf94      	ite	ls
 80027ec:	2301      	movls	r3, #1
 80027ee:	2300      	movhi	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e006      	b.n	8002802 <HAL_I2C_Init+0x92>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a7d      	ldr	r2, [pc, #500]	; (80029ec <HAL_I2C_Init+0x27c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	bf94      	ite	ls
 80027fc:	2301      	movls	r3, #1
 80027fe:	2300      	movhi	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0e7      	b.n	80029da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a78      	ldr	r2, [pc, #480]	; (80029f0 <HAL_I2C_Init+0x280>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a6a      	ldr	r2, [pc, #424]	; (80029e4 <HAL_I2C_Init+0x274>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d802      	bhi.n	8002844 <HAL_I2C_Init+0xd4>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3301      	adds	r3, #1
 8002842:	e009      	b.n	8002858 <HAL_I2C_Init+0xe8>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	4a69      	ldr	r2, [pc, #420]	; (80029f4 <HAL_I2C_Init+0x284>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	3301      	adds	r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800286a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	495c      	ldr	r1, [pc, #368]	; (80029e4 <HAL_I2C_Init+0x274>)
 8002874:	428b      	cmp	r3, r1
 8002876:	d819      	bhi.n	80028ac <HAL_I2C_Init+0x13c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e59      	subs	r1, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fbb1 f3f3 	udiv	r3, r1, r3
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	f640 73fc 	movw	r3, #4092	; 0xffc
 800288c:	400b      	ands	r3, r1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_I2C_Init+0x138>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e59      	subs	r1, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a6:	e051      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e04f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <HAL_I2C_Init+0x168>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e012      	b.n	80028fe <HAL_I2C_Init+0x18e>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Init+0x196>
 8002902:	2301      	movs	r3, #1
 8002904:	e022      	b.n	800294c <HAL_I2C_Init+0x1dc>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <HAL_I2C_Init+0x1bc>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e58      	subs	r0, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292a:	e00f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	0099      	lsls	r1, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6809      	ldr	r1, [r1, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800297a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6911      	ldr	r1, [r2, #16]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	000186a0 	.word	0x000186a0
 80029e8:	001e847f 	.word	0x001e847f
 80029ec:	003d08ff 	.word	0x003d08ff
 80029f0:	431bde83 	.word	0x431bde83
 80029f4:	10624dd3 	.word	0x10624dd3

080029f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e128      	b.n	8002c5c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a90      	ldr	r2, [pc, #576]	; (8002c64 <HAL_I2S_Init+0x26c>)
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7fe f8af 	bl	8000b88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a40:	f023 030f 	bic.w	r3, r3, #15
 8002a44:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d060      	beq.n	8002b18 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a5e:	2310      	movs	r3, #16
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	e001      	b.n	8002a68 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d802      	bhi.n	8002a76 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f001 f9d8 	bl	8003e2c <HAL_RCCEx_GetPeriphCLKFreq>
 8002a7c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a86:	d125      	bne.n	8002ad4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d010      	beq.n	8002ab2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	3305      	adds	r3, #5
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	e01f      	b.n	8002af2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	3305      	adds	r3, #5
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	e00e      	b.n	8002af2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	3305      	adds	r3, #5
 8002af0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4a5c      	ldr	r2, [pc, #368]	; (8002c68 <HAL_I2S_Init+0x270>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	08db      	lsrs	r3, r3, #3
 8002afc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	61bb      	str	r3, [r7, #24]
 8002b16:	e003      	b.n	8002b20 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d902      	bls.n	8002b2c <HAL_I2S_Init+0x134>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2bff      	cmp	r3, #255	; 0xff
 8002b2a:	d907      	bls.n	8002b3c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e08f      	b.n	8002c5c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	ea42 0103 	orr.w	r1, r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b5a:	f023 030f 	bic.w	r3, r3, #15
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6851      	ldr	r1, [r2, #4]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6892      	ldr	r2, [r2, #8]
 8002b66:	4311      	orrs	r1, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68d2      	ldr	r2, [r2, #12]
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6992      	ldr	r2, [r2, #24]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b7e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d161      	bne.n	8002c4c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <HAL_I2S_Init+0x274>)
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a37      	ldr	r2, [pc, #220]	; (8002c70 <HAL_I2S_Init+0x278>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_I2S_Init+0x1a4>
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <HAL_I2S_Init+0x27c>)
 8002b9a:	e001      	b.n	8002ba0 <HAL_I2S_Init+0x1a8>
 8002b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	4932      	ldr	r1, [pc, #200]	; (8002c70 <HAL_I2S_Init+0x278>)
 8002ba8:	428a      	cmp	r2, r1
 8002baa:	d101      	bne.n	8002bb0 <HAL_I2S_Init+0x1b8>
 8002bac:	4a31      	ldr	r2, [pc, #196]	; (8002c74 <HAL_I2S_Init+0x27c>)
 8002bae:	e001      	b.n	8002bb4 <HAL_I2S_Init+0x1bc>
 8002bb0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002bb4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002bb8:	f023 030f 	bic.w	r3, r3, #15
 8002bbc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2b      	ldr	r2, [pc, #172]	; (8002c70 <HAL_I2S_Init+0x278>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d101      	bne.n	8002bcc <HAL_I2S_Init+0x1d4>
 8002bc8:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <HAL_I2S_Init+0x27c>)
 8002bca:	e001      	b.n	8002bd0 <HAL_I2S_Init+0x1d8>
 8002bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <HAL_I2S_Init+0x278>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_I2S_Init+0x1ea>
 8002bde:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_I2S_Init+0x27c>)
 8002be0:	e001      	b.n	8002be6 <HAL_I2S_Init+0x1ee>
 8002be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf2:	d003      	beq.n	8002bfc <HAL_I2S_Init+0x204>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d103      	bne.n	8002c04 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	e001      	b.n	8002c08 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c26:	4313      	orrs	r3, r2
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	897b      	ldrh	r3, [r7, #10]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c34:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <HAL_I2S_Init+0x278>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_I2S_Init+0x24c>
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_I2S_Init+0x27c>)
 8002c42:	e001      	b.n	8002c48 <HAL_I2S_Init+0x250>
 8002c44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c48:	897a      	ldrh	r2, [r7, #10]
 8002c4a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	08002d6f 	.word	0x08002d6f
 8002c68:	cccccccd 	.word	0xcccccccd
 8002c6c:	08002e85 	.word	0x08002e85
 8002c70:	40003800 	.word	0x40003800
 8002c74:	40003400 	.word	0x40003400

08002c78 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	881a      	ldrh	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	1c9a      	adds	r2, r3, #2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10e      	bne.n	8002d08 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cf8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffb8 	bl	8002c78 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	b292      	uxth	r2, r2
 8002d24:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	1c9a      	adds	r2, r3, #2
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10e      	bne.n	8002d66 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d56:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ff93 	bl	8002c8c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d13a      	bne.n	8002e00 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d109      	bne.n	8002da8 <I2S_IRQHandler+0x3a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d102      	bne.n	8002da8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ffb4 	bl	8002d10 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d126      	bne.n	8002e00 <I2S_IRQHandler+0x92>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d11f      	bne.n	8002e00 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f043 0202 	orr.w	r2, r3, #2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ff50 	bl	8002ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d136      	bne.n	8002e7a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d109      	bne.n	8002e2a <I2S_IRQHandler+0xbc>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e20:	2b80      	cmp	r3, #128	; 0x80
 8002e22:	d102      	bne.n	8002e2a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ff45 	bl	8002cb4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d122      	bne.n	8002e7a <I2S_IRQHandler+0x10c>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d11b      	bne.n	8002e7a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e50:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	f043 0204 	orr.w	r2, r3, #4
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ff13 	bl	8002ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a92      	ldr	r2, [pc, #584]	; (80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002e9e:	4b92      	ldr	r3, [pc, #584]	; (80030e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ea0:	e001      	b.n	8002ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a8b      	ldr	r2, [pc, #556]	; (80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ebc:	4b8a      	ldr	r3, [pc, #552]	; (80030e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ebe:	e001      	b.n	8002ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed0:	d004      	beq.n	8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f040 8099 	bne.w	800300e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d107      	bne.n	8002ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f925 	bl	8003140 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d107      	bne.n	8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9c8 	bl	80032a0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b40      	cmp	r3, #64	; 0x40
 8002f18:	d13a      	bne.n	8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d035      	beq.n	8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002f2e:	4b6e      	ldr	r3, [pc, #440]	; (80030e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f30:	e001      	b.n	8002f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002f32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4969      	ldr	r1, [pc, #420]	; (80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f3e:	428b      	cmp	r3, r1
 8002f40:	d101      	bne.n	8002f46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002f42:	4b69      	ldr	r3, [pc, #420]	; (80030e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f44:	e001      	b.n	8002f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f4e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f043 0202 	orr.w	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fe88 	bl	8002ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	f040 80c3 	bne.w	8003122 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80bd 	beq.w	8003122 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fb6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a49      	ldr	r2, [pc, #292]	; (80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002fc2:	4b49      	ldr	r3, [pc, #292]	; (80030e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fc4:	e001      	b.n	8002fca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4944      	ldr	r1, [pc, #272]	; (80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fd2:	428b      	cmp	r3, r1
 8002fd4:	d101      	bne.n	8002fda <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002fd6:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fd8:	e001      	b.n	8002fde <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fe2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f043 0204 	orr.w	r2, r3, #4
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff fe4a 	bl	8002ca0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800300c:	e089      	b.n	8003122 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d107      	bne.n	8003028 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8be 	bl	80031a4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d107      	bne.n	8003042 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f8fd 	bl	800323c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d12f      	bne.n	80030ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d02a      	beq.n	80030ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003064:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003072:	e001      	b.n	8003078 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4919      	ldr	r1, [pc, #100]	; (80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003080:	428b      	cmp	r3, r1
 8003082:	d101      	bne.n	8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003084:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003086:	e001      	b.n	800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800308c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003090:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f043 0202 	orr.w	r2, r3, #2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff fdfa 	bl	8002ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d136      	bne.n	8003124 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d031      	beq.n	8003124 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030cc:	e001      	b.n	80030d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80030ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4902      	ldr	r1, [pc, #8]	; (80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030da:	428b      	cmp	r3, r1
 80030dc:	d106      	bne.n	80030ec <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80030de:	4b02      	ldr	r3, [pc, #8]	; (80030e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030e0:	e006      	b.n	80030f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80030e2:	bf00      	nop
 80030e4:	40003800 	.word	0x40003800
 80030e8:	40003400 	.word	0x40003400
 80030ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030f4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003104:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f043 0204 	orr.w	r2, r3, #4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fdc0 	bl	8002ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003120:	e000      	b.n	8003124 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003122:	bf00      	nop
}
 8003124:	bf00      	nop
 8003126:	3720      	adds	r7, #32
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c99      	adds	r1, r3, #2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6251      	str	r1, [r2, #36]	; 0x24
 8003152:	881a      	ldrh	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d113      	bne.n	800319a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003180:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ffc9 	bl	800312c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	1c99      	adds	r1, r3, #2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6251      	str	r1, [r2, #36]	; 0x24
 80031b6:	8819      	ldrh	r1, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <I2SEx_TxISR_I2SExt+0x90>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d101      	bne.n	80031c6 <I2SEx_TxISR_I2SExt+0x22>
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <I2SEx_TxISR_I2SExt+0x94>)
 80031c4:	e001      	b.n	80031ca <I2SEx_TxISR_I2SExt+0x26>
 80031c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ca:	460a      	mov	r2, r1
 80031cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d121      	bne.n	800322a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <I2SEx_TxISR_I2SExt+0x90>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d101      	bne.n	80031f4 <I2SEx_TxISR_I2SExt+0x50>
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <I2SEx_TxISR_I2SExt+0x94>)
 80031f2:	e001      	b.n	80031f8 <I2SEx_TxISR_I2SExt+0x54>
 80031f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	490d      	ldr	r1, [pc, #52]	; (8003234 <I2SEx_TxISR_I2SExt+0x90>)
 8003200:	428b      	cmp	r3, r1
 8003202:	d101      	bne.n	8003208 <I2SEx_TxISR_I2SExt+0x64>
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <I2SEx_TxISR_I2SExt+0x94>)
 8003206:	e001      	b.n	800320c <I2SEx_TxISR_I2SExt+0x68>
 8003208:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800320c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003210:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff81 	bl	800312c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40003800 	.word	0x40003800
 8003238:	40003400 	.word	0x40003400

0800323c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68d8      	ldr	r0, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	1c99      	adds	r1, r3, #2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003254:	b282      	uxth	r2, r0
 8003256:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d113      	bne.n	8003298 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800327e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ff4a 	bl	800312c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a20      	ldr	r2, [pc, #128]	; (8003330 <I2SEx_RxISR_I2SExt+0x90>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <I2SEx_RxISR_I2SExt+0x16>
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <I2SEx_RxISR_I2SExt+0x94>)
 80032b4:	e001      	b.n	80032ba <I2SEx_RxISR_I2SExt+0x1a>
 80032b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032ba:	68d8      	ldr	r0, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	1c99      	adds	r1, r3, #2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80032c6:	b282      	uxth	r2, r0
 80032c8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d121      	bne.n	8003326 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <I2SEx_RxISR_I2SExt+0x90>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <I2SEx_RxISR_I2SExt+0x50>
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <I2SEx_RxISR_I2SExt+0x94>)
 80032ee:	e001      	b.n	80032f4 <I2SEx_RxISR_I2SExt+0x54>
 80032f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	490d      	ldr	r1, [pc, #52]	; (8003330 <I2SEx_RxISR_I2SExt+0x90>)
 80032fc:	428b      	cmp	r3, r1
 80032fe:	d101      	bne.n	8003304 <I2SEx_RxISR_I2SExt+0x64>
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <I2SEx_RxISR_I2SExt+0x94>)
 8003302:	e001      	b.n	8003308 <I2SEx_RxISR_I2SExt+0x68>
 8003304:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003308:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800330c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d106      	bne.n	8003326 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff03 	bl	800312c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40003800 	.word	0x40003800
 8003334:	40003400 	.word	0x40003400

08003338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e267      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d075      	beq.n	8003442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003356:	4b88      	ldr	r3, [pc, #544]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b04      	cmp	r3, #4
 8003360:	d00c      	beq.n	800337c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003362:	4b85      	ldr	r3, [pc, #532]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336a:	2b08      	cmp	r3, #8
 800336c:	d112      	bne.n	8003394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336e:	4b82      	ldr	r3, [pc, #520]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800337a:	d10b      	bne.n	8003394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	4b7e      	ldr	r3, [pc, #504]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d05b      	beq.n	8003440 <HAL_RCC_OscConfig+0x108>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d157      	bne.n	8003440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e242      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339c:	d106      	bne.n	80033ac <HAL_RCC_OscConfig+0x74>
 800339e:	4b76      	ldr	r3, [pc, #472]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a75      	ldr	r2, [pc, #468]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e01d      	b.n	80033e8 <HAL_RCC_OscConfig+0xb0>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x98>
 80033b6:	4b70      	ldr	r3, [pc, #448]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6f      	ldr	r2, [pc, #444]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b6d      	ldr	r3, [pc, #436]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a6c      	ldr	r2, [pc, #432]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e00b      	b.n	80033e8 <HAL_RCC_OscConfig+0xb0>
 80033d0:	4b69      	ldr	r3, [pc, #420]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a68      	ldr	r2, [pc, #416]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b66      	ldr	r3, [pc, #408]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a65      	ldr	r2, [pc, #404]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d013      	beq.n	8003418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fd fdb0 	bl	8000f54 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f8:	f7fd fdac 	bl	8000f54 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e207      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b5b      	ldr	r3, [pc, #364]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0xc0>
 8003416:	e014      	b.n	8003442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fd fd9c 	bl	8000f54 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003420:	f7fd fd98 	bl	8000f54 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	; 0x64
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e1f3      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003432:	4b51      	ldr	r3, [pc, #324]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0xe8>
 800343e:	e000      	b.n	8003442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d063      	beq.n	8003516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800344e:	4b4a      	ldr	r3, [pc, #296]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345a:	4b47      	ldr	r3, [pc, #284]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003462:	2b08      	cmp	r3, #8
 8003464:	d11c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003466:	4b44      	ldr	r3, [pc, #272]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d116      	bne.n	80034a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003472:	4b41      	ldr	r3, [pc, #260]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_RCC_OscConfig+0x152>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d001      	beq.n	800348a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e1c7      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348a:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4937      	ldr	r1, [pc, #220]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	e03a      	b.n	8003516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d020      	beq.n	80034ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a8:	4b34      	ldr	r3, [pc, #208]	; (800357c <HAL_RCC_OscConfig+0x244>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fd fd51 	bl	8000f54 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b6:	f7fd fd4d 	bl	8000f54 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e1a8      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c8:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d4:	4b28      	ldr	r3, [pc, #160]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4925      	ldr	r1, [pc, #148]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
 80034e8:	e015      	b.n	8003516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_RCC_OscConfig+0x244>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fd fd30 	bl	8000f54 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f8:	f7fd fd2c 	bl	8000f54 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e187      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d036      	beq.n	8003590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d016      	beq.n	8003558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_RCC_OscConfig+0x248>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fd fd10 	bl	8000f54 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003538:	f7fd fd0c 	bl	8000f54 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e167      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800354c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x200>
 8003556:	e01b      	b.n	8003590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_RCC_OscConfig+0x248>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355e:	f7fd fcf9 	bl	8000f54 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003564:	e00e      	b.n	8003584 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003566:	f7fd fcf5 	bl	8000f54 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d907      	bls.n	8003584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e150      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
 8003578:	40023800 	.word	0x40023800
 800357c:	42470000 	.word	0x42470000
 8003580:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ea      	bne.n	8003566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8097 	beq.w	80036cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a2:	4b81      	ldr	r3, [pc, #516]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	4b7d      	ldr	r3, [pc, #500]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a7c      	ldr	r2, [pc, #496]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b7a      	ldr	r3, [pc, #488]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	4b77      	ldr	r3, [pc, #476]	; (80037ac <HAL_RCC_OscConfig+0x474>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d118      	bne.n	800360c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035da:	4b74      	ldr	r3, [pc, #464]	; (80037ac <HAL_RCC_OscConfig+0x474>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a73      	ldr	r2, [pc, #460]	; (80037ac <HAL_RCC_OscConfig+0x474>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fd fcb5 	bl	8000f54 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ee:	f7fd fcb1 	bl	8000f54 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e10c      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <HAL_RCC_OscConfig+0x474>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x2ea>
 8003614:	4b64      	ldr	r3, [pc, #400]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a63      	ldr	r2, [pc, #396]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	e01c      	b.n	800365c <HAL_RCC_OscConfig+0x324>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b05      	cmp	r3, #5
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x30c>
 800362a:	4b5f      	ldr	r3, [pc, #380]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a5e      	ldr	r2, [pc, #376]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003630:	f043 0304 	orr.w	r3, r3, #4
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	4b5c      	ldr	r3, [pc, #368]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a5b      	ldr	r2, [pc, #364]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
 8003642:	e00b      	b.n	800365c <HAL_RCC_OscConfig+0x324>
 8003644:	4b58      	ldr	r3, [pc, #352]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
 8003650:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4a54      	ldr	r2, [pc, #336]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003656:	f023 0304 	bic.w	r3, r3, #4
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d015      	beq.n	8003690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fd fc76 	bl	8000f54 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fd fc72 	bl	8000f54 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0cb      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003682:	4b49      	ldr	r3, [pc, #292]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0ee      	beq.n	800366c <HAL_RCC_OscConfig+0x334>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003690:	f7fd fc60 	bl	8000f54 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fd fc5c 	bl	8000f54 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0b5      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ae:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ee      	bne.n	8003698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c0:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	4a38      	ldr	r2, [pc, #224]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a1 	beq.w	8003818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d05c      	beq.n	800379c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d141      	bne.n	800376e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ea:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <HAL_RCC_OscConfig+0x478>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fd fc30 	bl	8000f54 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fd fc2c 	bl	8000f54 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e087      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	019b      	lsls	r3, r3, #6
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	3b01      	subs	r3, #1
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	061b      	lsls	r3, r3, #24
 800373a:	491b      	ldr	r1, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x478>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fd fc05 	bl	8000f54 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374e:	f7fd fc01 	bl	8000f54 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e05c      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x416>
 800376c:	e054      	b.n	8003818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <HAL_RCC_OscConfig+0x478>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd fbee 	bl	8000f54 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fbea 	bl	8000f54 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e045      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x444>
 800379a:	e03d      	b.n	8003818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e038      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40007000 	.word	0x40007000
 80037b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCC_OscConfig+0x4ec>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d028      	beq.n	8003814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d121      	bne.n	8003814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d11a      	bne.n	8003814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037e4:	4013      	ands	r3, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d111      	bne.n	8003814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	3b01      	subs	r3, #1
 80037fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d107      	bne.n	8003814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800

08003828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0cc      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800383c:	4b68      	ldr	r3, [pc, #416]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d90c      	bls.n	8003864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b65      	ldr	r3, [pc, #404]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0b8      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800387c:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a58      	ldr	r2, [pc, #352]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003894:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800389e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	494d      	ldr	r1, [pc, #308]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d044      	beq.n	8003948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d119      	bne.n	8003906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e07f      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e6:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e06f      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f6:	4b3b      	ldr	r3, [pc, #236]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e067      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003906:	4b37      	ldr	r3, [pc, #220]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f023 0203 	bic.w	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4934      	ldr	r1, [pc, #208]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	4313      	orrs	r3, r2
 8003916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003918:	f7fd fb1c 	bl	8000f54 <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	e00a      	b.n	8003936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003920:	f7fd fb18 	bl	8000f54 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e04f      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	4b2b      	ldr	r3, [pc, #172]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 020c 	and.w	r2, r3, #12
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	429a      	cmp	r2, r3
 8003946:	d1eb      	bne.n	8003920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d20c      	bcs.n	8003970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b22      	ldr	r3, [pc, #136]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e032      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4916      	ldr	r1, [pc, #88]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	490e      	ldr	r1, [pc, #56]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ae:	f000 f821 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	490a      	ldr	r1, [pc, #40]	; (80039e8 <HAL_RCC_ClockConfig+0x1c0>)
 80039c0:	5ccb      	ldrb	r3, [r1, r3]
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 80039c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039ca:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_ClockConfig+0x1c8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd fa7c 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023c00 	.word	0x40023c00
 80039e4:	40023800 	.word	0x40023800
 80039e8:	08005154 	.word	0x08005154
 80039ec:	2000000c 	.word	0x2000000c
 80039f0:	20000010 	.word	0x20000010

080039f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f8:	b094      	sub	sp, #80	; 0x50
 80039fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003a00:	2300      	movs	r3, #0
 8003a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a04:	2300      	movs	r3, #0
 8003a06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a0c:	4b79      	ldr	r3, [pc, #484]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d00d      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x40>
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	f200 80e1 	bhi.w	8003be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x34>
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d003      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a26:	e0db      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b73      	ldr	r3, [pc, #460]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a2c:	e0db      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a2e:	4b73      	ldr	r3, [pc, #460]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x208>)
 8003a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a32:	e0d8      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a34:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a3e:	4b6d      	ldr	r3, [pc, #436]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d063      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a4a:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	099b      	lsrs	r3, r3, #6
 8003a50:	2200      	movs	r2, #0
 8003a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5e:	2300      	movs	r3, #0
 8003a60:	637b      	str	r3, [r7, #52]	; 0x34
 8003a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a66:	4622      	mov	r2, r4
 8003a68:	462b      	mov	r3, r5
 8003a6a:	f04f 0000 	mov.w	r0, #0
 8003a6e:	f04f 0100 	mov.w	r1, #0
 8003a72:	0159      	lsls	r1, r3, #5
 8003a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a78:	0150      	lsls	r0, r2, #5
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4621      	mov	r1, r4
 8003a80:	1a51      	subs	r1, r2, r1
 8003a82:	6139      	str	r1, [r7, #16]
 8003a84:	4629      	mov	r1, r5
 8003a86:	eb63 0301 	sbc.w	r3, r3, r1
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a98:	4659      	mov	r1, fp
 8003a9a:	018b      	lsls	r3, r1, #6
 8003a9c:	4651      	mov	r1, sl
 8003a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aa2:	4651      	mov	r1, sl
 8003aa4:	018a      	lsls	r2, r1, #6
 8003aa6:	4651      	mov	r1, sl
 8003aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8003aac:	4659      	mov	r1, fp
 8003aae:	eb63 0901 	sbc.w	r9, r3, r1
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ac6:	4690      	mov	r8, r2
 8003ac8:	4699      	mov	r9, r3
 8003aca:	4623      	mov	r3, r4
 8003acc:	eb18 0303 	adds.w	r3, r8, r3
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	462b      	mov	r3, r5
 8003ad4:	eb49 0303 	adc.w	r3, r9, r3
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	024b      	lsls	r3, r1, #9
 8003aea:	4621      	mov	r1, r4
 8003aec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003af0:	4621      	mov	r1, r4
 8003af2:	024a      	lsls	r2, r1, #9
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afa:	2200      	movs	r2, #0
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b04:	f7fc fb60 	bl	80001c8 <__aeabi_uldivmod>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b10:	e058      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b12:	4b38      	ldr	r3, [pc, #224]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	099b      	lsrs	r3, r3, #6
 8003b18:	2200      	movs	r2, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b22:	623b      	str	r3, [r7, #32]
 8003b24:	2300      	movs	r3, #0
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
 8003b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	464b      	mov	r3, r9
 8003b30:	f04f 0000 	mov.w	r0, #0
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	0159      	lsls	r1, r3, #5
 8003b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b3e:	0150      	lsls	r0, r2, #5
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4641      	mov	r1, r8
 8003b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b64:	ebb2 040a 	subs.w	r4, r2, sl
 8003b68:	eb63 050b 	sbc.w	r5, r3, fp
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	00eb      	lsls	r3, r5, #3
 8003b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b7a:	00e2      	lsls	r2, r4, #3
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	461d      	mov	r5, r3
 8003b80:	4643      	mov	r3, r8
 8003b82:	18e3      	adds	r3, r4, r3
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	464b      	mov	r3, r9
 8003b88:	eb45 0303 	adc.w	r3, r5, r3
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	028b      	lsls	r3, r1, #10
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	028a      	lsls	r2, r1, #10
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4619      	mov	r1, r3
 8003bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bae:	2200      	movs	r2, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	61fa      	str	r2, [r7, #28]
 8003bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb8:	f7fc fb06 	bl	80001c8 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bde:	e002      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3750      	adds	r7, #80	; 0x50
 8003bec:	46bd      	mov	sp, r7
 8003bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	00f42400 	.word	0x00f42400
 8003bfc:	007a1200 	.word	0x007a1200

08003c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	2000000c 	.word	0x2000000c

08003c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c1c:	f7ff fff0 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0a9b      	lsrs	r3, r3, #10
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4903      	ldr	r1, [pc, #12]	; (8003c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	08005164 	.word	0x08005164

08003c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c44:	f7ff ffdc 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0b5b      	lsrs	r3, r3, #13
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4903      	ldr	r1, [pc, #12]	; (8003c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40023800 	.word	0x40023800
 8003c64:	08005164 	.word	0x08005164

08003c68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d035      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c90:	4b62      	ldr	r3, [pc, #392]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c96:	f7fd f95d 	bl	8000f54 <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c9e:	f7fd f959 	bl	8000f54 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e0b0      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb0:	4b5b      	ldr	r3, [pc, #364]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	019a      	lsls	r2, r3, #6
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	071b      	lsls	r3, r3, #28
 8003cc8:	4955      	ldr	r1, [pc, #340]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cd0:	4b52      	ldr	r3, [pc, #328]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd6:	f7fd f93d 	bl	8000f54 <HAL_GetTick>
 8003cda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cde:	f7fd f939 	bl	8000f54 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e090      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf0:	4b4b      	ldr	r3, [pc, #300]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8083 	beq.w	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	4b44      	ldr	r3, [pc, #272]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	4a43      	ldr	r2, [pc, #268]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d18:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1a:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a3e      	ldr	r2, [pc, #248]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d32:	f7fd f90f 	bl	8000f54 <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d3a:	f7fd f90b 	bl	8000f54 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e062      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d4c:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d58:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d02f      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d028      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d76:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d86:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d8c:	4a24      	ldr	r2, [pc, #144]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d92:	4b23      	ldr	r3, [pc, #140]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d114      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fd f8d9 	bl	8000f54 <HAL_GetTick>
 8003da2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fd f8d5 	bl	8000f54 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e02a      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ee      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd4:	d10d      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dea:	490d      	ldr	r1, [pc, #52]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	608b      	str	r3, [r1, #8]
 8003df0:	e005      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003df8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dfc:	6093      	str	r3, [r2, #8]
 8003dfe:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0a:	4905      	ldr	r1, [pc, #20]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	42470068 	.word	0x42470068
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40007000 	.word	0x40007000
 8003e28:	42470e40 	.word	0x42470e40

08003e2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d13e      	bne.n	8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e4a:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d12f      	bne.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e60:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e62:	617b      	str	r3, [r7, #20]
          break;
 8003e64:	e02f      	b.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e66:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e72:	d108      	bne.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e74:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e7c:	4a18      	ldr	r2, [pc, #96]	; (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	e007      	b.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e86:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e8e:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	fb02 f303 	mul.w	r3, r2, r3
 8003ea8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb0:	0f1b      	lsrs	r3, r3, #28
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]
          break;
 8003ebe:	e002      	b.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
          break;
 8003ec4:	bf00      	nop
        }
      }
      break;
 8003ec6:	bf00      	nop
    }
  }
  return frequency;
 8003ec8:	697b      	ldr	r3, [r7, #20]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	00bb8000 	.word	0x00bb8000
 8003ee0:	007a1200 	.word	0x007a1200
 8003ee4:	00f42400 	.word	0x00f42400

08003ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e07b      	b.n	8003ff2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d108      	bne.n	8003f14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f0a:	d009      	beq.n	8003f20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	61da      	str	r2, [r3, #28]
 8003f12:	e005      	b.n	8003f20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fc fea4 	bl	8000c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	ea42 0103 	orr.w	r1, r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f003 0104 	and.w	r1, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	f003 0210 	and.w	r2, r3, #16
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e03f      	b.n	800408c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fc fe79 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2224      	movs	r2, #36	; 0x24
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800403c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f9ca 	bl	80043d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004052:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004062:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004072:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d17c      	bne.n	80041ae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_UART_Transmit+0x2c>
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e075      	b.n	80041b0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Transmit+0x3e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e06e      	b.n	80041b0 <HAL_UART_Transmit+0x11c>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2221      	movs	r2, #33	; 0x21
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040e8:	f7fc ff34 	bl	8000f54 <HAL_GetTick>
 80040ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	88fa      	ldrh	r2, [r7, #6]
 80040f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004102:	d108      	bne.n	8004116 <HAL_UART_Transmit+0x82>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800410c:	2300      	movs	r3, #0
 800410e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	e003      	b.n	800411e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004126:	e02a      	b.n	800417e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f8e2 	bl	80042fc <UART_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e036      	b.n	80041b0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004156:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	3302      	adds	r3, #2
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e007      	b.n	8004170 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3301      	adds	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1cf      	bne.n	8004128 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2200      	movs	r2, #0
 8004190:	2140      	movs	r1, #64	; 0x40
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f8b2 	bl	80042fc <UART_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e006      	b.n	80041b0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	; 0x28
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	f040 808c 	bne.w	80042f2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_UART_Receive+0x2e>
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e084      	b.n	80042f4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_UART_Receive+0x40>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e07d      	b.n	80042f4 <HAL_UART_Receive+0x13c>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2222      	movs	r2, #34	; 0x22
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004214:	f7fc fe9e 	bl	8000f54 <HAL_GetTick>
 8004218:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	88fa      	ldrh	r2, [r7, #6]
 800421e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422e:	d108      	bne.n	8004242 <HAL_UART_Receive+0x8a>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d104      	bne.n	8004242 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	e003      	b.n	800424a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004252:	e043      	b.n	80042dc <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2200      	movs	r2, #0
 800425c:	2120      	movs	r1, #32
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f84c 	bl	80042fc <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e042      	b.n	80042f4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10c      	bne.n	800428e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	b29b      	uxth	r3, r3
 800427c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004280:	b29a      	uxth	r2, r3
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	3302      	adds	r3, #2
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	e01f      	b.n	80042ce <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	d007      	beq.n	80042a8 <HAL_UART_Receive+0xf0>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <HAL_UART_Receive+0xfe>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	e008      	b.n	80042c8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	3301      	adds	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1b6      	bne.n	8004254 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b090      	sub	sp, #64	; 0x40
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430c:	e050      	b.n	80043b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d04c      	beq.n	80043b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <UART_WaitOnFlagUntilTimeout+0x30>
 800431c:	f7fc fe1a 	bl	8000f54 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004328:	429a      	cmp	r2, r3
 800432a:	d241      	bcs.n	80043b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	330c      	adds	r3, #12
 800434a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800434c:	637a      	str	r2, [r7, #52]	; 0x34
 800434e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3314      	adds	r3, #20
 8004366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	613b      	str	r3, [r7, #16]
   return(result);
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	63bb      	str	r3, [r7, #56]	; 0x38
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3314      	adds	r3, #20
 800437e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004380:	623a      	str	r2, [r7, #32]
 8004382:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	69f9      	ldr	r1, [r7, #28]
 8004386:	6a3a      	ldr	r2, [r7, #32]
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	61bb      	str	r3, [r7, #24]
   return(result);
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e5      	bne.n	8004360 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e00f      	b.n	80043d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4013      	ands	r3, r2
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	429a      	cmp	r2, r3
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d09f      	beq.n	800430e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3740      	adds	r7, #64	; 0x40
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043dc:	b0c0      	sub	sp, #256	; 0x100
 80043de:	af00      	add	r7, sp, #0
 80043e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	68d9      	ldr	r1, [r3, #12]
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	ea40 0301 	orr.w	r3, r0, r1
 8004400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	431a      	orrs	r2, r3
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	431a      	orrs	r2, r3
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004430:	f021 010c 	bic.w	r1, r1, #12
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800443e:	430b      	orrs	r3, r1
 8004440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004452:	6999      	ldr	r1, [r3, #24]
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	ea40 0301 	orr.w	r3, r0, r1
 800445e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b8f      	ldr	r3, [pc, #572]	; (80046a4 <UART_SetConfig+0x2cc>)
 8004468:	429a      	cmp	r2, r3
 800446a:	d005      	beq.n	8004478 <UART_SetConfig+0xa0>
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b8d      	ldr	r3, [pc, #564]	; (80046a8 <UART_SetConfig+0x2d0>)
 8004474:	429a      	cmp	r2, r3
 8004476:	d104      	bne.n	8004482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004478:	f7ff fbe2 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 800447c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004480:	e003      	b.n	800448a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004482:	f7ff fbc9 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 8004486:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004494:	f040 810c 	bne.w	80046b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800449c:	2200      	movs	r2, #0
 800449e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	1891      	adds	r1, r2, r2
 80044b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80044b2:	415b      	adcs	r3, r3
 80044b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044ba:	4621      	mov	r1, r4
 80044bc:	eb12 0801 	adds.w	r8, r2, r1
 80044c0:	4629      	mov	r1, r5
 80044c2:	eb43 0901 	adc.w	r9, r3, r1
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044da:	4690      	mov	r8, r2
 80044dc:	4699      	mov	r9, r3
 80044de:	4623      	mov	r3, r4
 80044e0:	eb18 0303 	adds.w	r3, r8, r3
 80044e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044e8:	462b      	mov	r3, r5
 80044ea:	eb49 0303 	adc.w	r3, r9, r3
 80044ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004506:	460b      	mov	r3, r1
 8004508:	18db      	adds	r3, r3, r3
 800450a:	653b      	str	r3, [r7, #80]	; 0x50
 800450c:	4613      	mov	r3, r2
 800450e:	eb42 0303 	adc.w	r3, r2, r3
 8004512:	657b      	str	r3, [r7, #84]	; 0x54
 8004514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800451c:	f7fb fe54 	bl	80001c8 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4b61      	ldr	r3, [pc, #388]	; (80046ac <UART_SetConfig+0x2d4>)
 8004526:	fba3 2302 	umull	r2, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	011c      	lsls	r4, r3, #4
 800452e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004532:	2200      	movs	r2, #0
 8004534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004538:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800453c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004540:	4642      	mov	r2, r8
 8004542:	464b      	mov	r3, r9
 8004544:	1891      	adds	r1, r2, r2
 8004546:	64b9      	str	r1, [r7, #72]	; 0x48
 8004548:	415b      	adcs	r3, r3
 800454a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800454c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004550:	4641      	mov	r1, r8
 8004552:	eb12 0a01 	adds.w	sl, r2, r1
 8004556:	4649      	mov	r1, r9
 8004558:	eb43 0b01 	adc.w	fp, r3, r1
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800456c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004570:	4692      	mov	sl, r2
 8004572:	469b      	mov	fp, r3
 8004574:	4643      	mov	r3, r8
 8004576:	eb1a 0303 	adds.w	r3, sl, r3
 800457a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800457e:	464b      	mov	r3, r9
 8004580:	eb4b 0303 	adc.w	r3, fp, r3
 8004584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004594:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800459c:	460b      	mov	r3, r1
 800459e:	18db      	adds	r3, r3, r3
 80045a0:	643b      	str	r3, [r7, #64]	; 0x40
 80045a2:	4613      	mov	r3, r2
 80045a4:	eb42 0303 	adc.w	r3, r2, r3
 80045a8:	647b      	str	r3, [r7, #68]	; 0x44
 80045aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045b2:	f7fb fe09 	bl	80001c8 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <UART_SetConfig+0x2d4>)
 80045be:	fba3 2301 	umull	r2, r3, r3, r1
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2264      	movs	r2, #100	; 0x64
 80045c6:	fb02 f303 	mul.w	r3, r2, r3
 80045ca:	1acb      	subs	r3, r1, r3
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045d2:	4b36      	ldr	r3, [pc, #216]	; (80046ac <UART_SetConfig+0x2d4>)
 80045d4:	fba3 2302 	umull	r2, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045e0:	441c      	add	r4, r3
 80045e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	1891      	adds	r1, r2, r2
 80045fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80045fc:	415b      	adcs	r3, r3
 80045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004604:	4641      	mov	r1, r8
 8004606:	1851      	adds	r1, r2, r1
 8004608:	6339      	str	r1, [r7, #48]	; 0x30
 800460a:	4649      	mov	r1, r9
 800460c:	414b      	adcs	r3, r1
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800461c:	4659      	mov	r1, fp
 800461e:	00cb      	lsls	r3, r1, #3
 8004620:	4651      	mov	r1, sl
 8004622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004626:	4651      	mov	r1, sl
 8004628:	00ca      	lsls	r2, r1, #3
 800462a:	4610      	mov	r0, r2
 800462c:	4619      	mov	r1, r3
 800462e:	4603      	mov	r3, r0
 8004630:	4642      	mov	r2, r8
 8004632:	189b      	adds	r3, r3, r2
 8004634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004638:	464b      	mov	r3, r9
 800463a:	460a      	mov	r2, r1
 800463c:	eb42 0303 	adc.w	r3, r2, r3
 8004640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004650:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004658:	460b      	mov	r3, r1
 800465a:	18db      	adds	r3, r3, r3
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
 800465e:	4613      	mov	r3, r2
 8004660:	eb42 0303 	adc.w	r3, r2, r3
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800466a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800466e:	f7fb fdab 	bl	80001c8 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <UART_SetConfig+0x2d4>)
 8004678:	fba3 1302 	umull	r1, r3, r3, r2
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	2164      	movs	r1, #100	; 0x64
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	3332      	adds	r3, #50	; 0x32
 800468a:	4a08      	ldr	r2, [pc, #32]	; (80046ac <UART_SetConfig+0x2d4>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	f003 0207 	and.w	r2, r3, #7
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4422      	add	r2, r4
 800469e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046a0:	e105      	b.n	80048ae <UART_SetConfig+0x4d6>
 80046a2:	bf00      	nop
 80046a4:	40011000 	.word	0x40011000
 80046a8:	40011400 	.word	0x40011400
 80046ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046c2:	4642      	mov	r2, r8
 80046c4:	464b      	mov	r3, r9
 80046c6:	1891      	adds	r1, r2, r2
 80046c8:	6239      	str	r1, [r7, #32]
 80046ca:	415b      	adcs	r3, r3
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
 80046ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046d2:	4641      	mov	r1, r8
 80046d4:	1854      	adds	r4, r2, r1
 80046d6:	4649      	mov	r1, r9
 80046d8:	eb43 0501 	adc.w	r5, r3, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	00eb      	lsls	r3, r5, #3
 80046e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ea:	00e2      	lsls	r2, r4, #3
 80046ec:	4614      	mov	r4, r2
 80046ee:	461d      	mov	r5, r3
 80046f0:	4643      	mov	r3, r8
 80046f2:	18e3      	adds	r3, r4, r3
 80046f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046f8:	464b      	mov	r3, r9
 80046fa:	eb45 0303 	adc.w	r3, r5, r3
 80046fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800470e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800471e:	4629      	mov	r1, r5
 8004720:	008b      	lsls	r3, r1, #2
 8004722:	4621      	mov	r1, r4
 8004724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004728:	4621      	mov	r1, r4
 800472a:	008a      	lsls	r2, r1, #2
 800472c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004730:	f7fb fd4a 	bl	80001c8 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4b60      	ldr	r3, [pc, #384]	; (80048bc <UART_SetConfig+0x4e4>)
 800473a:	fba3 2302 	umull	r2, r3, r3, r2
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	011c      	lsls	r4, r3, #4
 8004742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004746:	2200      	movs	r2, #0
 8004748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800474c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004754:	4642      	mov	r2, r8
 8004756:	464b      	mov	r3, r9
 8004758:	1891      	adds	r1, r2, r2
 800475a:	61b9      	str	r1, [r7, #24]
 800475c:	415b      	adcs	r3, r3
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004764:	4641      	mov	r1, r8
 8004766:	1851      	adds	r1, r2, r1
 8004768:	6139      	str	r1, [r7, #16]
 800476a:	4649      	mov	r1, r9
 800476c:	414b      	adcs	r3, r1
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800477c:	4659      	mov	r1, fp
 800477e:	00cb      	lsls	r3, r1, #3
 8004780:	4651      	mov	r1, sl
 8004782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004786:	4651      	mov	r1, sl
 8004788:	00ca      	lsls	r2, r1, #3
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	4603      	mov	r3, r0
 8004790:	4642      	mov	r2, r8
 8004792:	189b      	adds	r3, r3, r2
 8004794:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004798:	464b      	mov	r3, r9
 800479a:	460a      	mov	r2, r1
 800479c:	eb42 0303 	adc.w	r3, r2, r3
 80047a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047bc:	4649      	mov	r1, r9
 80047be:	008b      	lsls	r3, r1, #2
 80047c0:	4641      	mov	r1, r8
 80047c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c6:	4641      	mov	r1, r8
 80047c8:	008a      	lsls	r2, r1, #2
 80047ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047ce:	f7fb fcfb 	bl	80001c8 <__aeabi_uldivmod>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4b39      	ldr	r3, [pc, #228]	; (80048bc <UART_SetConfig+0x4e4>)
 80047d8:	fba3 1302 	umull	r1, r3, r3, r2
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	2164      	movs	r1, #100	; 0x64
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	3332      	adds	r3, #50	; 0x32
 80047ea:	4a34      	ldr	r2, [pc, #208]	; (80048bc <UART_SetConfig+0x4e4>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f6:	441c      	add	r4, r3
 80047f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fc:	2200      	movs	r2, #0
 80047fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004800:	677a      	str	r2, [r7, #116]	; 0x74
 8004802:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004806:	4642      	mov	r2, r8
 8004808:	464b      	mov	r3, r9
 800480a:	1891      	adds	r1, r2, r2
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	415b      	adcs	r3, r3
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004816:	4641      	mov	r1, r8
 8004818:	1851      	adds	r1, r2, r1
 800481a:	6039      	str	r1, [r7, #0]
 800481c:	4649      	mov	r1, r9
 800481e:	414b      	adcs	r3, r1
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800482e:	4659      	mov	r1, fp
 8004830:	00cb      	lsls	r3, r1, #3
 8004832:	4651      	mov	r1, sl
 8004834:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004838:	4651      	mov	r1, sl
 800483a:	00ca      	lsls	r2, r1, #3
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	4603      	mov	r3, r0
 8004842:	4642      	mov	r2, r8
 8004844:	189b      	adds	r3, r3, r2
 8004846:	66bb      	str	r3, [r7, #104]	; 0x68
 8004848:	464b      	mov	r3, r9
 800484a:	460a      	mov	r2, r1
 800484c:	eb42 0303 	adc.w	r3, r2, r3
 8004850:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	663b      	str	r3, [r7, #96]	; 0x60
 800485c:	667a      	str	r2, [r7, #100]	; 0x64
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800486a:	4649      	mov	r1, r9
 800486c:	008b      	lsls	r3, r1, #2
 800486e:	4641      	mov	r1, r8
 8004870:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004874:	4641      	mov	r1, r8
 8004876:	008a      	lsls	r2, r1, #2
 8004878:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800487c:	f7fb fca4 	bl	80001c8 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <UART_SetConfig+0x4e4>)
 8004886:	fba3 1302 	umull	r1, r3, r3, r2
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2164      	movs	r1, #100	; 0x64
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	3332      	adds	r3, #50	; 0x32
 8004898:	4a08      	ldr	r2, [pc, #32]	; (80048bc <UART_SetConfig+0x4e4>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4422      	add	r2, r4
 80048ac:	609a      	str	r2, [r3, #8]
}
 80048ae:	bf00      	nop
 80048b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048b4:	46bd      	mov	sp, r7
 80048b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ba:	bf00      	nop
 80048bc:	51eb851f 	.word	0x51eb851f

080048c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f043 0201 	orr.w	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 0201 	bic.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a13      	ldr	r2, [pc, #76]	; (8004968 <USB_FlushTxFifo+0x64>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e01b      	b.n	800495c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	daf2      	bge.n	8004912 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	019b      	lsls	r3, r3, #6
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3301      	adds	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4a08      	ldr	r2, [pc, #32]	; (8004968 <USB_FlushTxFifo+0x64>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e006      	b.n	800495c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b20      	cmp	r3, #32
 8004958:	d0f0      	beq.n	800493c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	00030d40 	.word	0x00030d40

0800496c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3301      	adds	r3, #1
 800497c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4a11      	ldr	r2, [pc, #68]	; (80049c8 <USB_FlushRxFifo+0x5c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e018      	b.n	80049bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	daf2      	bge.n	8004978 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2210      	movs	r2, #16
 800499a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3301      	adds	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <USB_FlushRxFifo+0x5c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e006      	b.n	80049bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d0f0      	beq.n	800499c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	00030d40 	.word	0x00030d40

080049cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b08b      	sub	sp, #44	; 0x2c
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	623b      	str	r3, [r7, #32]
 80049f6:	e014      	b.n	8004a22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	3301      	adds	r3, #1
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	3301      	adds	r3, #1
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	3301      	adds	r3, #1
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	6a3a      	ldr	r2, [r7, #32]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d3e6      	bcc.n	80049f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a2a:	8bfb      	ldrh	r3, [r7, #30]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01e      	beq.n	8004a6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f107 0310 	add.w	r3, r7, #16
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	701a      	strb	r2, [r3, #0]
      i++;
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	3301      	adds	r3, #1
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a62:	8bfb      	ldrh	r3, [r7, #30]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a68:	8bfb      	ldrh	r3, [r7, #30]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ea      	bne.n	8004a44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	372c      	adds	r7, #44	; 0x2c
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4013      	ands	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a94:	68fb      	ldr	r3, [r7, #12]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0301 	and.w	r3, r3, #1
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004adc:	f023 0303 	bic.w	r3, r3, #3
 8004ae0:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	68f9      	ldr	r1, [r7, #12]
 8004af2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b06:	461a      	mov	r2, r3
 8004b08:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b0c:	6053      	str	r3, [r2, #4]
 8004b0e:	e009      	b.n	8004b24 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d106      	bne.n	8004b24 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f241 7370 	movw	r3, #6000	; 0x1770
 8004b22:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	b29b      	uxth	r3, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	; 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	0c9b      	lsrs	r3, r3, #18
 8004b7c:	f003 0303 	and.w	r3, r3, #3
 8004b80:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	0fdb      	lsrs	r3, r3, #31
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d104      	bne.n	8004bae <USB_HC_Halt+0x5a>
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e0c8      	b.n	8004d40 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <USB_HC_Halt+0x66>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d163      	bne.n	8004c82 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bd8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 80ab 	bne.w	8004d3e <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d133      	bne.n	8004c5c <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	0151      	lsls	r1, r2, #5
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	440a      	add	r2, r1
 8004c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c12:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c32:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c40:	d81d      	bhi.n	8004c7e <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c58:	d0ec      	beq.n	8004c34 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c5a:	e070      	b.n	8004d3e <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c7a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c7c:	e05f      	b.n	8004d3e <USB_HC_Halt+0x1ea>
            break;
 8004c7e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c80:	e05d      	b.n	8004d3e <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ca0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d133      	bne.n	8004d1a <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cd0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cf0:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cfe:	d81d      	bhi.n	8004d3c <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d16:	d0ec      	beq.n	8004cf2 <USB_HC_Halt+0x19e>
 8004d18:	e011      	b.n	8004d3e <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e000      	b.n	8004d3e <USB_HC_Halt+0x1ea>
          break;
 8004d3c:	bf00      	nop
    }
  }

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3724      	adds	r7, #36	; 0x24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fdbe 	bl	80048e2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d66:	2110      	movs	r1, #16
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff fdcb 	bl	8004904 <USB_FlushTxFifo>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff fdf7 	bl	800496c <USB_FlushRxFifo>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	e01f      	b.n	8004dce <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004da4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004db4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b0f      	cmp	r3, #15
 8004dd2:	d9dc      	bls.n	8004d8e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	e034      	b.n	8004e44 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004df0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004df8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e00:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	461a      	mov	r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3301      	adds	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e20:	d80c      	bhi.n	8004e3c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e38:	d0ec      	beq.n	8004e14 <USB_StopHost+0xc8>
 8004e3a:	e000      	b.n	8004e3e <USB_StopHost+0xf2>
        break;
 8004e3c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b0f      	cmp	r3, #15
 8004e48:	d9c7      	bls.n	8004dda <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e50:	461a      	mov	r2, r3
 8004e52:	f04f 33ff 	mov.w	r3, #4294967295
 8004e56:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff fd2d 	bl	80048c0 <USB_EnableGlobalInt>

  return ret;
 8004e66:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f804 	bl	8004e94 <USBH_HandleSof>
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b0b      	cmp	r3, #11
 8004ea4:	d10a      	bne.n	8004ebc <USBH_HandleSof+0x28>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4798      	blx	r3
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8004ed4:	bf00      	nop
}
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004ef0:	bf00      	nop
}
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f883 	bl	8005056 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	791b      	ldrb	r3, [r3, #4]
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f80b 	bl	8004f72 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	795b      	ldrb	r3, [r3, #5]
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f805 	bl	8004f72 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	2b0f      	cmp	r3, #15
 8004f82:	d80d      	bhi.n	8004fa0 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	33e0      	adds	r3, #224	; 0xe0
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	33e0      	adds	r3, #224	; 0xe0
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff ff57 	bl	8004e70 <USBH_LL_IncTimer>
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff ff8f 	bl	8004efc <USBH_LL_Connect>
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff ff98 	bl	8004f2a <USBH_LL_Disconnect>
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	70fb      	strb	r3, [r7, #3]
 800500e:	4613      	mov	r3, r2
 8005010:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff ff49 	bl	8004ec4 <USBH_LL_PortEnabled>
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff ff49 	bl	8004ee0 <USBH_LL_PortDisabled>
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800506c:	4618      	mov	r0, r3
 800506e:	f7fc fb5f 	bl	8001730 <HAL_HCD_Stop>
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	4618      	mov	r0, r3
 800507a:	f000 f807 	bl	800508c <USBH_Get_USB_Status>
 800507e:	4603      	mov	r3, r0
 8005080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005082:	7bbb      	ldrb	r3, [r7, #14]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	2b03      	cmp	r3, #3
 800509e:	d817      	bhi.n	80050d0 <USBH_Get_USB_Status+0x44>
 80050a0:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <USBH_Get_USB_Status+0x1c>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050bf 	.word	0x080050bf
 80050b0:	080050c5 	.word	0x080050c5
 80050b4:	080050cb 	.word	0x080050cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]
    break;
 80050bc:	e00b      	b.n	80050d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80050be:	2302      	movs	r3, #2
 80050c0:	73fb      	strb	r3, [r7, #15]
    break;
 80050c2:	e008      	b.n	80050d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
    break;
 80050c8:	e005      	b.n	80050d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80050ca:	2302      	movs	r3, #2
 80050cc:	73fb      	strb	r3, [r7, #15]
    break;
 80050ce:	e002      	b.n	80050d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80050d0:	2302      	movs	r3, #2
 80050d2:	73fb      	strb	r3, [r7, #15]
    break;
 80050d4:	bf00      	nop
  }
  return usb_status;
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <__libc_init_array>:
 80050e4:	b570      	push	{r4, r5, r6, lr}
 80050e6:	4d0d      	ldr	r5, [pc, #52]	; (800511c <__libc_init_array+0x38>)
 80050e8:	4c0d      	ldr	r4, [pc, #52]	; (8005120 <__libc_init_array+0x3c>)
 80050ea:	1b64      	subs	r4, r4, r5
 80050ec:	10a4      	asrs	r4, r4, #2
 80050ee:	2600      	movs	r6, #0
 80050f0:	42a6      	cmp	r6, r4
 80050f2:	d109      	bne.n	8005108 <__libc_init_array+0x24>
 80050f4:	4d0b      	ldr	r5, [pc, #44]	; (8005124 <__libc_init_array+0x40>)
 80050f6:	4c0c      	ldr	r4, [pc, #48]	; (8005128 <__libc_init_array+0x44>)
 80050f8:	f000 f820 	bl	800513c <_init>
 80050fc:	1b64      	subs	r4, r4, r5
 80050fe:	10a4      	asrs	r4, r4, #2
 8005100:	2600      	movs	r6, #0
 8005102:	42a6      	cmp	r6, r4
 8005104:	d105      	bne.n	8005112 <__libc_init_array+0x2e>
 8005106:	bd70      	pop	{r4, r5, r6, pc}
 8005108:	f855 3b04 	ldr.w	r3, [r5], #4
 800510c:	4798      	blx	r3
 800510e:	3601      	adds	r6, #1
 8005110:	e7ee      	b.n	80050f0 <__libc_init_array+0xc>
 8005112:	f855 3b04 	ldr.w	r3, [r5], #4
 8005116:	4798      	blx	r3
 8005118:	3601      	adds	r6, #1
 800511a:	e7f2      	b.n	8005102 <__libc_init_array+0x1e>
 800511c:	08005174 	.word	0x08005174
 8005120:	08005174 	.word	0x08005174
 8005124:	08005174 	.word	0x08005174
 8005128:	08005178 	.word	0x08005178

0800512c <memset>:
 800512c:	4402      	add	r2, r0
 800512e:	4603      	mov	r3, r0
 8005130:	4293      	cmp	r3, r2
 8005132:	d100      	bne.n	8005136 <memset+0xa>
 8005134:	4770      	bx	lr
 8005136:	f803 1b01 	strb.w	r1, [r3], #1
 800513a:	e7f9      	b.n	8005130 <memset+0x4>

0800513c <_init>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr

08005148 <_fini>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr
