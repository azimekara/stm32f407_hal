
gun9_dmaadc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005574  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800571c  0800571c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800571c  0800571c  0001571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005724  08005724  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005724  08005724  00015724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800572c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004d4  200004d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139f2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9b  00000000  00000000  00033a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  000369d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f68  00000000  00000000  00037a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ee7  00000000  00000000  000389d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157f5  00000000  00000000  0005b8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c60  00000000  00000000  000710ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147d0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004604  00000000  00000000  00147d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080056e4 	.word	0x080056e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080056e4 	.word	0x080056e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fcb2 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f822 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f990 	bl	80007fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f8da 	bl	8000694 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f906 	bl	80006f0 <MX_I2S3_Init>
  MX_DMA_Init();
 80004e4:	f000 f96a 	bl	80007bc <MX_DMA_Init>
  MX_ADC1_Init();
 80004e8:	f000 f882 	bl	80005f0 <MX_ADC1_Init>
  MX_SPI1_Init();
 80004ec:	f000 f930 	bl	8000750 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t)adc_value, 2);
 80004f0:	2202      	movs	r2, #2
 80004f2:	4906      	ldr	r1, [pc, #24]	; (800050c <main+0x40>)
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <main+0x44>)
 80004f6:	f000 fd55 	bl	8000fa4 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  adc1 = adc_value[0];
 80004fa:	4b04      	ldr	r3, [pc, #16]	; (800050c <main+0x40>)
 80004fc:	881a      	ldrh	r2, [r3, #0]
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <main+0x48>)
 8000500:	801a      	strh	r2, [r3, #0]
	  adc2 = adc_value[1];
 8000502:	4b02      	ldr	r3, [pc, #8]	; (800050c <main+0x40>)
 8000504:	885a      	ldrh	r2, [r3, #2]
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <main+0x4c>)
 8000508:	801a      	strh	r2, [r3, #0]
	  adc1 = adc_value[0];
 800050a:	e7f6      	b.n	80004fa <main+0x2e>
 800050c:	200001c4 	.word	0x200001c4
 8000510:	20000028 	.word	0x20000028
 8000514:	200001c8 	.word	0x200001c8
 8000518:	200001ca 	.word	0x200001ca

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f005 f8d2 	bl	80056d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fe12 	bl	80041cc <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 fa13 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2105      	movs	r1, #5
 80005d0:	4618      	mov	r0, r3
 80005d2:	f004 f873 	bl	80046bc <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f9fc 	bl	80009d8 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_ADC1_Init+0x98>)
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <MX_ADC1_Init+0x9c>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_ADC1_Init+0x98>)
 800060a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ADC1_Init+0x98>)
 800061e:	2201      	movs	r2, #1
 8000620:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_ADC1_Init+0x98>)
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <MX_ADC1_Init+0xa0>)
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_ADC1_Init+0x98>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_ADC1_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_ADC1_Init+0x98>)
 800064c:	2201      	movs	r2, #1
 800064e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_ADC1_Init+0x98>)
 8000652:	f000 fc63 	bl	8000f1c <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 f9bc 	bl	80009d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_ADC1_Init+0x98>)
 8000672:	f000 fdc5 	bl	8001200 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800067c:	f000 f9ac 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000028 	.word	0x20000028
 800068c:	40012000 	.word	0x40012000
 8000690:	0f000001 	.word	0x0f000001

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_I2C1_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_I2C1_Init+0x58>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006d2:	f002 ff97 	bl	8003604 <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f97c 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000d0 	.word	0x200000d0
 80006e8:	40005400 	.word	0x40005400
 80006ec:	000186a0 	.word	0x000186a0

080006f0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_I2S3_Init+0x54>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <MX_I2S3_Init+0x58>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2S3_Init+0x54>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_I2S3_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2S3_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_I2S3_Init+0x54>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_I2S3_Init+0x54>)
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <MX_I2S3_Init+0x5c>)
 800071a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_I2S3_Init+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2S3_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_I2S3_Init+0x54>)
 8000730:	f003 f8ac 	bl	800388c <HAL_I2S_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800073a:	f000 f94d 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000124 	.word	0x20000124
 8000748:	40003c00 	.word	0x40003c00
 800074c:	00017700 	.word	0x00017700

08000750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <MX_SPI1_Init+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI1_Init+0x64>)
 800075c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI1_Init+0x64>)
 800079c:	220a      	movs	r2, #10
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_SPI1_Init+0x64>)
 80007a2:	f004 fad7 	bl	8004d54 <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 f914 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000016c 	.word	0x2000016c
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_DMA_Init+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <MX_DMA_Init+0x3c>)
 80007cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_DMA_Init+0x3c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2038      	movs	r0, #56	; 0x38
 80007e4:	f001 f887 	bl	80018f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007e8:	2038      	movs	r0, #56	; 0x38
 80007ea:	f001 f8a0 	bl	800192e <HAL_NVIC_EnableIRQ>

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	4b6b      	ldr	r3, [pc, #428]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a6a      	ldr	r2, [pc, #424]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b68      	ldr	r3, [pc, #416]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	4b64      	ldr	r3, [pc, #400]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a63      	ldr	r2, [pc, #396]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b61      	ldr	r3, [pc, #388]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b5d      	ldr	r3, [pc, #372]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a5c      	ldr	r2, [pc, #368]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b5a      	ldr	r3, [pc, #360]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b56      	ldr	r3, [pc, #344]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a55      	ldr	r2, [pc, #340]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b4f      	ldr	r3, [pc, #316]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a4e      	ldr	r2, [pc, #312]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a47      	ldr	r2, [pc, #284]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b45      	ldr	r3, [pc, #276]	; (80009c4 <MX_GPIO_Init+0x1c8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2108      	movs	r1, #8
 80008be:	4842      	ldr	r0, [pc, #264]	; (80009c8 <MX_GPIO_Init+0x1cc>)
 80008c0:	f001 fd5c 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2101      	movs	r1, #1
 80008c8:	4840      	ldr	r0, [pc, #256]	; (80009cc <MX_GPIO_Init+0x1d0>)
 80008ca:	f001 fd57 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ce:	2200      	movs	r2, #0
 80008d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008d4:	483e      	ldr	r0, [pc, #248]	; (80009d0 <MX_GPIO_Init+0x1d4>)
 80008d6:	f001 fd51 	bl	800237c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008da:	2308      	movs	r3, #8
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4835      	ldr	r0, [pc, #212]	; (80009c8 <MX_GPIO_Init+0x1cc>)
 80008f2:	f001 fba7 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	482f      	ldr	r0, [pc, #188]	; (80009cc <MX_GPIO_Init+0x1d0>)
 800090e:	f001 fb99 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000912:	2308      	movs	r3, #8
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000922:	2305      	movs	r3, #5
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4827      	ldr	r0, [pc, #156]	; (80009cc <MX_GPIO_Init+0x1d0>)
 800092e:	f001 fb89 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000932:	2304      	movs	r3, #4
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4823      	ldr	r0, [pc, #140]	; (80009d4 <MX_GPIO_Init+0x1d8>)
 8000946:	f001 fb7d 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095c:	2305      	movs	r3, #5
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	481b      	ldr	r0, [pc, #108]	; (80009d4 <MX_GPIO_Init+0x1d8>)
 8000968:	f001 fb6c 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800096c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000970:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4812      	ldr	r0, [pc, #72]	; (80009d0 <MX_GPIO_Init+0x1d4>)
 8000986:	f001 fb5d 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800098a:	2320      	movs	r3, #32
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_GPIO_Init+0x1d4>)
 800099e:	f001 fb51 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_GPIO_Init+0x1cc>)
 80009b8:	f001 fb44 	bl	8002044 <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3730      	adds	r7, #48	; 0x30
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40020400 	.word	0x40020400

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a22:	2007      	movs	r0, #7
 8000a24:	f000 ff5c 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a2f      	ldr	r2, [pc, #188]	; (8000b10 <HAL_ADC_MspInit+0xdc>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d158      	bne.n	8000b08 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <HAL_ADC_MspInit+0xe0>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a2d      	ldr	r2, [pc, #180]	; (8000b14 <HAL_ADC_MspInit+0xe0>)
 8000a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <HAL_ADC_MspInit+0xe0>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <HAL_ADC_MspInit+0xe0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <HAL_ADC_MspInit+0xe0>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <HAL_ADC_MspInit+0xe0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a92:	2303      	movs	r3, #3
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481d      	ldr	r0, [pc, #116]	; (8000b18 <HAL_ADC_MspInit+0xe4>)
 8000aa2:	f001 facf 	bl	8002044 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <HAL_ADC_MspInit+0xec>)
 8000aaa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000acc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000ad0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000adc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000ae0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ae4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000aee:	f000 ff39 	bl	8001964 <HAL_DMA_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000af8:	f7ff ff6e 	bl	80009d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000b00:	639a      	str	r2, [r3, #56]	; 0x38
 8000b02:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_ADC_MspInit+0xe8>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	; 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40012000 	.word	0x40012000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	20000070 	.word	0x20000070
 8000b20:	40026410 	.word	0x40026410

08000b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_I2C_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12c      	bne.n	8000ba0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b62:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b74:	2304      	movs	r3, #4
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <HAL_I2C_MspInit+0x8c>)
 8000b80:	f001 fa60 	bl	8002044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40005400 	.word	0x40005400
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a31      	ldr	r2, [pc, #196]	; (8000ca4 <HAL_I2S_MspInit+0xf0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d15a      	bne.n	8000c9a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000be4:	2301      	movs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000be8:	23c0      	movs	r3, #192	; 0xc0
 8000bea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 ff6d 	bl	8004ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c00:	f7ff feea 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a26      	ldr	r2, [pc, #152]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c68:	2306      	movs	r3, #6
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	480e      	ldr	r0, [pc, #56]	; (8000cac <HAL_I2S_MspInit+0xf8>)
 8000c74:	f001 f9e6 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c78:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c8a:	2306      	movs	r3, #6
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <HAL_I2S_MspInit+0xfc>)
 8000c96:	f001 f9d5 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3738      	adds	r7, #56	; 0x38
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40003c00 	.word	0x40003c00
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020800 	.word	0x40020800

08000cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_SPI_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d0e:	23e0      	movs	r3, #224	; 0xe0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_SPI_MspInit+0x8c>)
 8000d2a:	f001 f98b 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f8a4 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <DMA2_Stream0_IRQHandler+0x10>)
 8000d9e:	f000 fee7 	bl	8001b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000070 	.word	0x20000070

08000dac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <OTG_FS_IRQHandler+0x10>)
 8000db2:	f001 fafc 	bl	80023ae <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001d0 	.word	0x200001d0

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <SystemInit+0x20>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <SystemInit+0x20>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e00:	4c0b      	ldr	r4, [pc, #44]	; (8000e30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0e:	f7ff ffd7 	bl	8000dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f004 fc3b 	bl	800568c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fb59 	bl	80004cc <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e28:	0800572c 	.word	0x0800572c
  ldr r2, =_sbss
 8000e2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e30:	200004d4 	.word	0x200004d4

08000e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <HAL_Init+0x40>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_Init+0x40>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_Init+0x40>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 fd3d 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fdba 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fd55 	bl	800194a <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 fd1d 	bl	80018f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	200001cc 	.word	0x200001cc

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200001cc 	.word	0x200001cc

08000f1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e033      	b.n	8000f9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d109      	bne.n	8000f4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff fd7a 	bl	8000a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d118      	bne.n	8000f8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f62:	f023 0302 	bic.w	r3, r3, #2
 8000f66:	f043 0202 	orr.w	r2, r3, #2
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fa68 	bl	8001444 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	f043 0201 	orr.w	r2, r3, #1
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40
 8000f8a:	e001      	b.n	8000f90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Start_DMA+0x1e>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e0e9      	b.n	8001196 <HAL_ADC_Start_DMA+0x1f2>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d018      	beq.n	800100a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0201 	orr.w	r2, r2, #1
 8000fe6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fe8:	4b6d      	ldr	r3, [pc, #436]	; (80011a0 <HAL_ADC_Start_DMA+0x1fc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a6d      	ldr	r2, [pc, #436]	; (80011a4 <HAL_ADC_Start_DMA+0x200>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	0c9a      	lsrs	r2, r3, #18
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000ffc:	e002      	b.n	8001004 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	3b01      	subs	r3, #1
 8001002:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f9      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001018:	d107      	bne.n	800102a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001028:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b01      	cmp	r3, #1
 8001036:	f040 80a1 	bne.w	800117c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001042:	f023 0301 	bic.w	r3, r3, #1
 8001046:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001058:	2b00      	cmp	r3, #0
 800105a:	d007      	beq.n	800106c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001064:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001078:	d106      	bne.n	8001088 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f023 0206 	bic.w	r2, r3, #6
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
 8001086:	e002      	b.n	800108e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2200      	movs	r2, #0
 800108c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <HAL_ADC_Start_DMA+0x204>)
 8001098:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109e:	4a43      	ldr	r2, [pc, #268]	; (80011ac <HAL_ADC_Start_DMA+0x208>)
 80010a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a6:	4a42      	ldr	r2, [pc, #264]	; (80011b0 <HAL_ADC_Start_DMA+0x20c>)
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ae:	4a41      	ldr	r2, [pc, #260]	; (80011b4 <HAL_ADC_Start_DMA+0x210>)
 80010b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80010ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	334c      	adds	r3, #76	; 0x4c
 80010e6:	4619      	mov	r1, r3
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f000 fce8 	bl	8001ac0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 031f 	and.w	r3, r3, #31
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d12a      	bne.n	8001152 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a2d      	ldr	r2, [pc, #180]	; (80011b8 <HAL_ADC_Start_DMA+0x214>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d015      	beq.n	8001132 <HAL_ADC_Start_DMA+0x18e>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <HAL_ADC_Start_DMA+0x218>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d105      	bne.n	800111c <HAL_ADC_Start_DMA+0x178>
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <HAL_ADC_Start_DMA+0x204>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 031f 	and.w	r3, r3, #31
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00a      	beq.n	8001132 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <HAL_ADC_Start_DMA+0x21c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d136      	bne.n	8001194 <HAL_ADC_Start_DMA+0x1f0>
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_ADC_Start_DMA+0x204>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	2b00      	cmp	r3, #0
 8001130:	d130      	bne.n	8001194 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d129      	bne.n	8001194 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	e020      	b.n	8001194 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <HAL_ADC_Start_DMA+0x214>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d11b      	bne.n	8001194 <HAL_ADC_Start_DMA+0x1f0>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d114      	bne.n	8001194 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	e00b      	b.n	8001194 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f043 0210 	orr.w	r2, r3, #16
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f043 0201 	orr.w	r2, r3, #1
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000000 	.word	0x20000000
 80011a4:	431bde83 	.word	0x431bde83
 80011a8:	40012300 	.word	0x40012300
 80011ac:	0800163d 	.word	0x0800163d
 80011b0:	080016f7 	.word	0x080016f7
 80011b4:	08001713 	.word	0x08001713
 80011b8:	40012000 	.word	0x40012000
 80011bc:	40012100 	.word	0x40012100
 80011c0:	40012200 	.word	0x40012200

080011c4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1c>
 8001218:	2302      	movs	r3, #2
 800121a:	e105      	b.n	8001428 <HAL_ADC_ConfigChannel+0x228>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b09      	cmp	r3, #9
 800122a:	d925      	bls.n	8001278 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68d9      	ldr	r1, [r3, #12]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	3b1e      	subs	r3, #30
 8001242:	2207      	movs	r2, #7
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43da      	mvns	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	400a      	ands	r2, r1
 8001250:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68d9      	ldr	r1, [r3, #12]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	4603      	mov	r3, r0
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4403      	add	r3, r0
 800126a:	3b1e      	subs	r3, #30
 800126c:	409a      	lsls	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	e022      	b.n	80012be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6919      	ldr	r1, [r3, #16]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	2207      	movs	r2, #7
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	400a      	ands	r2, r1
 800129a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6919      	ldr	r1, [r3, #16]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4403      	add	r3, r0
 80012b4:	409a      	lsls	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d824      	bhi.n	8001310 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3b05      	subs	r3, #5
 80012d8:	221f      	movs	r2, #31
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	400a      	ands	r2, r1
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	3b05      	subs	r3, #5
 8001302:	fa00 f203 	lsl.w	r2, r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	635a      	str	r2, [r3, #52]	; 0x34
 800130e:	e04c      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b0c      	cmp	r3, #12
 8001316:	d824      	bhi.n	8001362 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	3b23      	subs	r3, #35	; 0x23
 800132a:	221f      	movs	r2, #31
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43da      	mvns	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	400a      	ands	r2, r1
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4618      	mov	r0, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b23      	subs	r3, #35	; 0x23
 8001354:	fa00 f203 	lsl.w	r2, r0, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
 8001360:	e023      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	3b41      	subs	r3, #65	; 0x41
 8001374:	221f      	movs	r2, #31
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	400a      	ands	r2, r1
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3b41      	subs	r3, #65	; 0x41
 800139e:	fa00 f203 	lsl.w	r2, r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013aa:	4b22      	ldr	r3, [pc, #136]	; (8001434 <HAL_ADC_ConfigChannel+0x234>)
 80013ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <HAL_ADC_ConfigChannel+0x238>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d109      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1cc>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b12      	cmp	r3, #18
 80013be:	d105      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_ADC_ConfigChannel+0x238>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d123      	bne.n	800141e <HAL_ADC_ConfigChannel+0x21e>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b10      	cmp	r3, #16
 80013dc:	d003      	beq.n	80013e6 <HAL_ADC_ConfigChannel+0x1e6>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b11      	cmp	r3, #17
 80013e4:	d11b      	bne.n	800141e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d111      	bne.n	800141e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_ADC_ConfigChannel+0x23c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_ADC_ConfigChannel+0x240>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	0c9a      	lsrs	r2, r3, #18
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001410:	e002      	b.n	8001418 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3b01      	subs	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f9      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40012300 	.word	0x40012300
 8001438:	40012000 	.word	0x40012000
 800143c:	20000000 	.word	0x20000000
 8001440:	431bde83 	.word	0x431bde83

08001444 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144c:	4b79      	ldr	r3, [pc, #484]	; (8001634 <ADC_Init+0x1f0>)
 800144e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	431a      	orrs	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	021a      	lsls	r2, r3, #8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800149c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6899      	ldr	r1, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	4a58      	ldr	r2, [pc, #352]	; (8001638 <ADC_Init+0x1f4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d022      	beq.n	8001522 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6899      	ldr	r1, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800150c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6899      	ldr	r1, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	e00f      	b.n	8001542 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001540:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0202 	bic.w	r2, r2, #2
 8001550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7e1b      	ldrb	r3, [r3, #24]
 800155c:	005a      	lsls	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800157e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800158e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6859      	ldr	r1, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	3b01      	subs	r3, #1
 800159c:	035a      	lsls	r2, r3, #13
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	e007      	b.n	80015b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	051a      	lsls	r2, r3, #20
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6899      	ldr	r1, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015fa:	025a      	lsls	r2, r3, #9
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	029a      	lsls	r2, r3, #10
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	609a      	str	r2, [r3, #8]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40012300 	.word	0x40012300
 8001638:	0f000001 	.word	0x0f000001

0800163c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001648:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001652:	2b00      	cmp	r3, #0
 8001654:	d13c      	bne.n	80016d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d12b      	bne.n	80016c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001674:	2b00      	cmp	r3, #0
 8001676:	d127      	bne.n	80016c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001690:	2b00      	cmp	r3, #0
 8001692:	d119      	bne.n	80016c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0220 	bic.w	r2, r2, #32
 80016a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7ff fd7b 	bl	80011c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016ce:	e00e      	b.n	80016ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff fd85 	bl	80011ec <HAL_ADC_ErrorCallback>
}
 80016e2:	e004      	b.n	80016ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001702:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff fd67 	bl	80011d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2240      	movs	r2, #64	; 0x40
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f043 0204 	orr.w	r2, r3, #4
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7ff fd5a 	bl	80011ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4907      	ldr	r1, [pc, #28]	; (80017dc <__NVIC_EnableIRQ+0x38>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f7ff ff8e 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff29 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff3e 	bl	8001788 <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff8e 	bl	8001834 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5d 	bl	80017e0 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff31 	bl	80017a4 <__NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffa2 	bl	800189c <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff fac8 	bl	8000f04 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e099      	b.n	8001ab4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a0:	e00f      	b.n	80019c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019a2:	f7ff faaf 	bl	8000f04 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d908      	bls.n	80019c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2220      	movs	r2, #32
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2203      	movs	r2, #3
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e078      	b.n	8001ab4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e8      	bne.n	80019a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	4b38      	ldr	r3, [pc, #224]	; (8001abc <HAL_DMA_Init+0x158>)
 80019dc:	4013      	ands	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d107      	bne.n	8001a2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	4313      	orrs	r3, r2
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f023 0307 	bic.w	r3, r3, #7
 8001a42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d117      	bne.n	8001a86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00e      	beq.n	8001a86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 fa6f 	bl	8001f4c <DMA_CheckFifoParam>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2240      	movs	r2, #64	; 0x40
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a82:	2301      	movs	r3, #1
 8001a84:	e016      	b.n	8001ab4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fa26 	bl	8001ee0 <DMA_CalcBaseAndBitshift>
 8001a94:	4603      	mov	r3, r0
 8001a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9c:	223f      	movs	r2, #63	; 0x3f
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	f010803f 	.word	0xf010803f

08001ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_DMA_Start_IT+0x26>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e040      	b.n	8001b68 <HAL_DMA_Start_IT+0xa8>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d12f      	bne.n	8001b5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f9b8 	bl	8001e84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	223f      	movs	r2, #63	; 0x3f
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0216 	orr.w	r2, r2, #22
 8001b2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0208 	orr.w	r2, r2, #8
 8001b46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e005      	b.n	8001b66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b62:	2302      	movs	r3, #2
 8001b64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b7c:	4b8e      	ldr	r3, [pc, #568]	; (8001db8 <HAL_DMA_IRQHandler+0x248>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a8e      	ldr	r2, [pc, #568]	; (8001dbc <HAL_DMA_IRQHandler+0x24c>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0a9b      	lsrs	r3, r3, #10
 8001b88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d01a      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0204 	bic.w	r2, r2, #4
 8001bc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	2208      	movs	r2, #8
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	f043 0201 	orr.w	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	2201      	movs	r2, #1
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d012      	beq.n	8001c12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	2201      	movs	r2, #1
 8001c00:	409a      	lsls	r2, r3
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	f043 0202 	orr.w	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	2204      	movs	r2, #4
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d012      	beq.n	8001c48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00b      	beq.n	8001c48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	2204      	movs	r2, #4
 8001c36:	409a      	lsls	r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	f043 0204 	orr.w	r2, r3, #4
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d043      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d03c      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d018      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d108      	bne.n	8001ca0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d024      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4798      	blx	r3
 8001c9e:	e01f      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	4798      	blx	r3
 8001cb0:	e016      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d107      	bne.n	8001cd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0208 	bic.w	r2, r2, #8
 8001cce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 808f 	beq.w	8001e10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 8087 	beq.w	8001e10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	2220      	movs	r2, #32
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b05      	cmp	r3, #5
 8001d18:	d136      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0216 	bic.w	r2, r2, #22
 8001d28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d103      	bne.n	8001d4a <HAL_DMA_IRQHandler+0x1da>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d007      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0208 	bic.w	r2, r2, #8
 8001d58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	223f      	movs	r2, #63	; 0x3f
 8001d60:	409a      	lsls	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d07e      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
        }
        return;
 8001d86:	e079      	b.n	8001e7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d01d      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10d      	bne.n	8001dc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d031      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
 8001db4:	e02c      	b.n	8001e10 <HAL_DMA_IRQHandler+0x2a0>
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d023      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
 8001dd0:	e01e      	b.n	8001e10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10f      	bne.n	8001e00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0210 	bic.w	r2, r2, #16
 8001dee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d032      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d022      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2205      	movs	r2, #5
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d307      	bcc.n	8001e58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f2      	bne.n	8001e3c <HAL_DMA_IRQHandler+0x2cc>
 8001e56:	e000      	b.n	8001e5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
 8001e7a:	e000      	b.n	8001e7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e7c:	bf00      	nop
    }
  }
}
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ea0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d108      	bne.n	8001ec4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ec2:	e007      	b.n	8001ed4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	60da      	str	r2, [r3, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3b10      	subs	r3, #16
 8001ef0:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <DMA_CalcBaseAndBitshift+0x64>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001efa:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <DMA_CalcBaseAndBitshift+0x68>)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d909      	bls.n	8001f22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f16:	f023 0303 	bic.w	r3, r3, #3
 8001f1a:	1d1a      	adds	r2, r3, #4
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f20:	e007      	b.n	8001f32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f2a:	f023 0303 	bic.w	r3, r3, #3
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	aaaaaaab 	.word	0xaaaaaaab
 8001f48:	08005714 	.word	0x08005714

08001f4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d11f      	bne.n	8001fa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d856      	bhi.n	800201a <DMA_CheckFifoParam+0xce>
 8001f6c:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <DMA_CheckFifoParam+0x28>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001f85 	.word	0x08001f85
 8001f78:	08001f97 	.word	0x08001f97
 8001f7c:	08001f85 	.word	0x08001f85
 8001f80:	0800201b 	.word	0x0800201b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d046      	beq.n	800201e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f94:	e043      	b.n	800201e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f9e:	d140      	bne.n	8002022 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa4:	e03d      	b.n	8002022 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fae:	d121      	bne.n	8001ff4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d837      	bhi.n	8002026 <DMA_CheckFifoParam+0xda>
 8001fb6:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <DMA_CheckFifoParam+0x70>)
 8001fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbc:	08001fcd 	.word	0x08001fcd
 8001fc0:	08001fd3 	.word	0x08001fd3
 8001fc4:	08001fcd 	.word	0x08001fcd
 8001fc8:	08001fe5 	.word	0x08001fe5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd0:	e030      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d025      	beq.n	800202a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe2:	e022      	b.n	800202a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fec:	d11f      	bne.n	800202e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ff2:	e01c      	b.n	800202e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d903      	bls.n	8002002 <DMA_CheckFifoParam+0xb6>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d003      	beq.n	8002008 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002000:	e018      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
      break;
 8002006:	e015      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00e      	beq.n	8002032 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
      break;
 8002018:	e00b      	b.n	8002032 <DMA_CheckFifoParam+0xe6>
      break;
 800201a:	bf00      	nop
 800201c:	e00a      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;
 800201e:	bf00      	nop
 8002020:	e008      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;
 8002022:	bf00      	nop
 8002024:	e006      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;
 8002026:	bf00      	nop
 8002028:	e004      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;
 800202a:	bf00      	nop
 800202c:	e002      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;   
 800202e:	bf00      	nop
 8002030:	e000      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;
 8002032:	bf00      	nop
    }
  } 
  
  return status; 
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e16b      	b.n	8002338 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 815a 	bne.w	8002332 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d005      	beq.n	8002096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	2b02      	cmp	r3, #2
 8002094:	d130      	bne.n	80020f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b03      	cmp	r3, #3
 8002102:	d017      	beq.n	8002134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80b4 	beq.w	8002332 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b60      	ldr	r3, [pc, #384]	; (8002350 <HAL_GPIO_Init+0x30c>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4a5f      	ldr	r2, [pc, #380]	; (8002350 <HAL_GPIO_Init+0x30c>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	; 0x44
 80021da:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <HAL_GPIO_Init+0x30c>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e6:	4a5b      	ldr	r2, [pc, #364]	; (8002354 <HAL_GPIO_Init+0x310>)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a52      	ldr	r2, [pc, #328]	; (8002358 <HAL_GPIO_Init+0x314>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <HAL_GPIO_Init+0x226>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a51      	ldr	r2, [pc, #324]	; (800235c <HAL_GPIO_Init+0x318>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d025      	beq.n	8002266 <HAL_GPIO_Init+0x222>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a50      	ldr	r2, [pc, #320]	; (8002360 <HAL_GPIO_Init+0x31c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01f      	beq.n	8002262 <HAL_GPIO_Init+0x21e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4f      	ldr	r2, [pc, #316]	; (8002364 <HAL_GPIO_Init+0x320>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d019      	beq.n	800225e <HAL_GPIO_Init+0x21a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4e      	ldr	r2, [pc, #312]	; (8002368 <HAL_GPIO_Init+0x324>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_GPIO_Init+0x216>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4d      	ldr	r2, [pc, #308]	; (800236c <HAL_GPIO_Init+0x328>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00d      	beq.n	8002256 <HAL_GPIO_Init+0x212>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4c      	ldr	r2, [pc, #304]	; (8002370 <HAL_GPIO_Init+0x32c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <HAL_GPIO_Init+0x20e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4b      	ldr	r2, [pc, #300]	; (8002374 <HAL_GPIO_Init+0x330>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_GPIO_Init+0x20a>
 800224a:	2307      	movs	r3, #7
 800224c:	e00e      	b.n	800226c <HAL_GPIO_Init+0x228>
 800224e:	2308      	movs	r3, #8
 8002250:	e00c      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002252:	2306      	movs	r3, #6
 8002254:	e00a      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002256:	2305      	movs	r3, #5
 8002258:	e008      	b.n	800226c <HAL_GPIO_Init+0x228>
 800225a:	2304      	movs	r3, #4
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x228>
 800225e:	2303      	movs	r3, #3
 8002260:	e004      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002262:	2302      	movs	r3, #2
 8002264:	e002      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_GPIO_Init+0x228>
 800226a:	2300      	movs	r3, #0
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	f002 0203 	and.w	r2, r2, #3
 8002272:	0092      	lsls	r2, r2, #2
 8002274:	4093      	lsls	r3, r2
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800227c:	4935      	ldr	r1, [pc, #212]	; (8002354 <HAL_GPIO_Init+0x310>)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800228a:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <HAL_GPIO_Init+0x334>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ae:	4a32      	ldr	r2, [pc, #200]	; (8002378 <HAL_GPIO_Init+0x334>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b4:	4b30      	ldr	r3, [pc, #192]	; (8002378 <HAL_GPIO_Init+0x334>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d8:	4a27      	ldr	r2, [pc, #156]	; (8002378 <HAL_GPIO_Init+0x334>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <HAL_GPIO_Init+0x334>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002302:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <HAL_GPIO_Init+0x334>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_GPIO_Init+0x334>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800232c:	4a12      	ldr	r2, [pc, #72]	; (8002378 <HAL_GPIO_Init+0x334>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3301      	adds	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	f67f ae90 	bls.w	8002060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40013800 	.word	0x40013800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020400 	.word	0x40020400
 8002360:	40020800 	.word	0x40020800
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40021400 	.word	0x40021400
 8002370:	40021800 	.word	0x40021800
 8002374:	40021c00 	.word	0x40021c00
 8002378:	40013c00 	.word	0x40013c00

0800237c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
 8002388:	4613      	mov	r3, r2
 800238a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002398:	e003      	b.n	80023a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	041a      	lsls	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	619a      	str	r2, [r3, #24]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 fe40 	bl	800504a <USB_GetMode>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 80f6 	bne.w	80025be <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 fe24 	bl	8005024 <USB_ReadInterrupts>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80ec 	beq.w	80025bc <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f002 fe1b 	bl	8005024 <USB_ReadInterrupts>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023f8:	d104      	bne.n	8002404 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002402:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fe0b 	bl	8005024 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002418:	d104      	bne.n	8002424 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002422:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f002 fdfb 	bl	8005024 <USB_ReadInterrupts>
 800242e:	4603      	mov	r3, r0
 8002430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002438:	d104      	bne.n	8002444 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002442:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f002 fdeb 	bl	8005024 <USB_ReadInterrupts>
 800244e:	4603      	mov	r3, r0
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d103      	bne.n	8002460 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2202      	movs	r2, #2
 800245e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f002 fddd 	bl	8005024 <USB_ReadInterrupts>
 800246a:	4603      	mov	r3, r0
 800246c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002474:	d11c      	bne.n	80024b0 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800247e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002490:	2110      	movs	r1, #16
 8002492:	6938      	ldr	r0, [r7, #16]
 8002494:	f002 fd0a 	bl	8004eac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002498:	6938      	ldr	r0, [r7, #16]
 800249a:	f002 fd3b 	bl	8004f14 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2101      	movs	r1, #1
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fdde 	bl	8005066 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f003 f86f 	bl	800558e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 fdb5 	bl	8005024 <USB_ReadInterrupts>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c4:	d102      	bne.n	80024cc <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f001 f829 	bl	800351e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f002 fda7 	bl	8005024 <USB_ReadInterrupts>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d106      	bne.n	80024ee <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f003 f838 	bl	8005556 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2208      	movs	r2, #8
 80024ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 fd96 	bl	8005024 <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d101      	bne.n	8002506 <HAL_HCD_IRQHandler+0x158>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_HCD_IRQHandler+0x15a>
 8002506:	2300      	movs	r3, #0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d012      	beq.n	8002532 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0210 	bic.w	r2, r2, #16
 800251a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 ff2c 	bl	800337a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0210 	orr.w	r2, r2, #16
 8002530:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f002 fd74 	bl	8005024 <USB_ReadInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002546:	d13a      	bne.n	80025be <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f002 fdc4 	bl	80050da <USB_HC_ReadInterrupt>
 8002552:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e025      	b.n	80025a6 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	fa22 f303 	lsr.w	r3, r2, r3
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d018      	beq.n	80025a0 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002584:	d106      	bne.n	8002594 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4619      	mov	r1, r3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f836 	bl	80025fe <HCD_HC_IN_IRQHandler>
 8002592:	e005      	b.n	80025a0 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4619      	mov	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fb84 	bl	8002ca8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3301      	adds	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3d4      	bcc.n	800255a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b8:	615a      	str	r2, [r3, #20]
 80025ba:	e000      	b.n	80025be <HAL_HCD_IRQHandler+0x210>
      return;
 80025bc:	bf00      	nop
    }
  }
}
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_HCD_Stop+0x16>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e00d      	b.n	80025f6 <HAL_HCD_Stop+0x32>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 fe84 	bl	80052f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b04      	cmp	r3, #4
 800262c:	d11a      	bne.n	8002664 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	461a      	mov	r2, r3
 800263c:	2304      	movs	r3, #4
 800263e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3361      	adds	r3, #97	; 0x61
 800264e:	2206      	movs	r2, #6
 8002650:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fd4d 	bl	80050fc <USB_HC_Halt>
 8002662:	e0af      	b.n	80027c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267a:	d11b      	bne.n	80026b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	461a      	mov	r2, r3
 800268a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800268e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3361      	adds	r3, #97	; 0x61
 800269e:	2207      	movs	r2, #7
 80026a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f002 fd25 	bl	80050fc <USB_HC_Halt>
 80026b2:	e087      	b.n	80027c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d109      	bne.n	80026de <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	461a      	mov	r2, r3
 80026d8:	2320      	movs	r3, #32
 80026da:	6093      	str	r3, [r2, #8]
 80026dc:	e072      	b.n	80027c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d11a      	bne.n	800272a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	461a      	mov	r2, r3
 8002702:	2308      	movs	r3, #8
 8002704:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3361      	adds	r3, #97	; 0x61
 8002714:	2205      	movs	r2, #5
 8002716:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fcea 	bl	80050fc <USB_HC_Halt>
 8002728:	e04c      	b.n	80027c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002740:	d11b      	bne.n	800277a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	461a      	mov	r2, r3
 8002750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002754:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	3361      	adds	r3, #97	; 0x61
 8002764:	2208      	movs	r2, #8
 8002766:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fcc2 	bl	80050fc <USB_HC_Halt>
 8002778:	e024      	b.n	80027c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278c:	2b80      	cmp	r3, #128	; 0x80
 800278e:	d119      	bne.n	80027c4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3361      	adds	r3, #97	; 0x61
 80027b0:	2206      	movs	r2, #6
 80027b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fc9c 	bl	80050fc <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027da:	d112      	bne.n	8002802 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 fc88 	bl	80050fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	461a      	mov	r2, r3
 80027fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002800:	e24e      	b.n	8002ca0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	f040 80df 	bne.w	80029d8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d019      	beq.n	8002856 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3348      	adds	r3, #72	; 0x48
 8002830:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	0159      	lsls	r1, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	440b      	add	r3, r1
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002844:	1ad2      	subs	r2, r2, r3
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	202c      	movs	r0, #44	; 0x2c
 800284c:	fb00 f303 	mul.w	r3, r0, r3
 8002850:	440b      	add	r3, r1
 8002852:	3350      	adds	r3, #80	; 0x50
 8002854:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3361      	adds	r3, #97	; 0x61
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	335c      	adds	r3, #92	; 0x5c
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	333f      	adds	r3, #63	; 0x3f
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	333f      	adds	r3, #63	; 0x3f
 80028ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d111      	bne.n	80028d8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 fc1c 	bl	80050fc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	2310      	movs	r3, #16
 80028d4:	6093      	str	r3, [r2, #8]
 80028d6:	e03a      	b.n	800294e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	333f      	adds	r3, #63	; 0x3f
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d009      	beq.n	8002900 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	333f      	adds	r3, #63	; 0x3f
 80028fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d126      	bne.n	800294e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	0151      	lsls	r1, r2, #5
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	440a      	add	r2, r1
 8002916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800291a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800291e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	3360      	adds	r3, #96	; 0x60
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	b2d9      	uxtb	r1, r3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	202c      	movs	r0, #44	; 0x2c
 800293c:	fb00 f303 	mul.w	r3, r0, r3
 8002940:	4413      	add	r3, r2
 8002942:	3360      	adds	r3, #96	; 0x60
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f002 fe2e 	bl	80055aa <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d12b      	bne.n	80029ae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3348      	adds	r3, #72	; 0x48
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	202c      	movs	r0, #44	; 0x2c
 800296c:	fb00 f202 	mul.w	r2, r0, r2
 8002970:	440a      	add	r2, r1
 8002972:	3240      	adds	r2, #64	; 0x40
 8002974:	8812      	ldrh	r2, [r2, #0]
 8002976:	fbb3 f3f2 	udiv	r3, r3, r2
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 818e 	beq.w	8002ca0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3354      	adds	r3, #84	; 0x54
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	f083 0301 	eor.w	r3, r3, #1
 8002998:	b2d8      	uxtb	r0, r3
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3354      	adds	r3, #84	; 0x54
 80029a8:	4602      	mov	r2, r0
 80029aa:	701a      	strb	r2, [r3, #0]
}
 80029ac:	e178      	b.n	8002ca0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3354      	adds	r3, #84	; 0x54
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	f083 0301 	eor.w	r3, r3, #1
 80029c2:	b2d8      	uxtb	r0, r3
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3354      	adds	r3, #84	; 0x54
 80029d2:	4602      	mov	r2, r0
 80029d4:	701a      	strb	r2, [r3, #0]
}
 80029d6:	e163      	b.n	8002ca0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	f040 80f6 	bne.w	8002bdc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3361      	adds	r3, #97	; 0x61
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d109      	bne.n	8002a18 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3360      	adds	r3, #96	; 0x60
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e0c9      	b.n	8002bac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3361      	adds	r3, #97	; 0x61
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	d109      	bne.n	8002a40 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3360      	adds	r3, #96	; 0x60
 8002a3a:	2205      	movs	r2, #5
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e0b5      	b.n	8002bac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3361      	adds	r3, #97	; 0x61
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b06      	cmp	r3, #6
 8002a52:	d009      	beq.n	8002a68 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3361      	adds	r3, #97	; 0x61
 8002a62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d150      	bne.n	8002b0a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	335c      	adds	r3, #92	; 0x5c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	202c      	movs	r0, #44	; 0x2c
 8002a80:	fb00 f303 	mul.w	r3, r0, r3
 8002a84:	440b      	add	r3, r1
 8002a86:	335c      	adds	r3, #92	; 0x5c
 8002a88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d912      	bls.n	8002ac4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	335c      	adds	r3, #92	; 0x5c
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3360      	adds	r3, #96	; 0x60
 8002abe:	2204      	movs	r2, #4
 8002ac0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ac2:	e073      	b.n	8002bac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3360      	adds	r3, #96	; 0x60
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002af4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	461a      	mov	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b08:	e050      	b.n	8002bac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3361      	adds	r3, #97	; 0x61
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d122      	bne.n	8002b64 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3360      	adds	r3, #96	; 0x60
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b46:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b4e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e023      	b.n	8002bac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3361      	adds	r3, #97	; 0x61
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b07      	cmp	r3, #7
 8002b76:	d119      	bne.n	8002bac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	335c      	adds	r3, #92	; 0x5c
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	202c      	movs	r0, #44	; 0x2c
 8002b90:	fb00 f303 	mul.w	r3, r0, r3
 8002b94:	440b      	add	r3, r1
 8002b96:	335c      	adds	r3, #92	; 0x5c
 8002b98:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3360      	adds	r3, #96	; 0x60
 8002ba8:	2204      	movs	r2, #4
 8002baa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2302      	movs	r3, #2
 8002bbc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	b2d9      	uxtb	r1, r3
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	202c      	movs	r0, #44	; 0x2c
 8002bc8:	fb00 f303 	mul.w	r3, r0, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3360      	adds	r3, #96	; 0x60
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f002 fce8 	bl	80055aa <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bda:	e061      	b.n	8002ca0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d156      	bne.n	8002ca0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	333f      	adds	r3, #63	; 0x3f
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d111      	bne.n	8002c2a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	335c      	adds	r3, #92	; 0x5c
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 fa6a 	bl	80050fc <USB_HC_Halt>
 8002c28:	e031      	b.n	8002c8e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	333f      	adds	r3, #63	; 0x3f
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	333f      	adds	r3, #63	; 0x3f
 8002c4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d11d      	bne.n	8002c8e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	335c      	adds	r3, #92	; 0x5c
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d110      	bne.n	8002c8e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3361      	adds	r3, #97	; 0x61
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f002 fa37 	bl	80050fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	6093      	str	r3, [r2, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d11a      	bne.n	8002d0e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3361      	adds	r3, #97	; 0x61
 8002cf8:	2206      	movs	r2, #6
 8002cfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f002 f9f8 	bl	80050fc <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d0c:	e331      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d12e      	bne.n	8002d82 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	461a      	mov	r2, r3
 8002d32:	2320      	movs	r3, #32
 8002d34:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	333d      	adds	r3, #61	; 0x3d
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	f040 8313 	bne.w	8003372 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	333d      	adds	r3, #61	; 0x3d
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3360      	adds	r3, #96	; 0x60
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 f9be 	bl	80050fc <USB_HC_Halt>
}
 8002d80:	e2f7      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d98:	d112      	bne.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da6:	461a      	mov	r2, r3
 8002da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 f99f 	bl	80050fc <USB_HC_Halt>
}
 8002dbe:	e2d8      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d140      	bne.n	8002e58 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	335c      	adds	r3, #92	; 0x5c
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d111      	bne.n	8002e22 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	333d      	adds	r3, #61	; 0x3d
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2340      	movs	r3, #64	; 0x40
 8002e20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2301      	movs	r3, #1
 8002e32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3361      	adds	r3, #97	; 0x61
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 f953 	bl	80050fc <USB_HC_Halt>
}
 8002e56:	e28c      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	d12c      	bne.n	8002ec8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3361      	adds	r3, #97	; 0x61
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	333d      	adds	r3, #61	; 0x3d
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	335c      	adds	r3, #92	; 0x5c
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 f924 	bl	80050fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2340      	movs	r3, #64	; 0x40
 8002ec4:	6093      	str	r3, [r2, #8]
}
 8002ec6:	e254      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d11a      	bne.n	8002f14 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	461a      	mov	r2, r3
 8002eec:	2308      	movs	r3, #8
 8002eee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	212c      	movs	r1, #44	; 0x2c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	3361      	adds	r3, #97	; 0x61
 8002efe:	2205      	movs	r2, #5
 8002f00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f002 f8f5 	bl	80050fc <USB_HC_Halt>
}
 8002f12:	e22e      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d140      	bne.n	8002fac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	335c      	adds	r3, #92	; 0x5c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3361      	adds	r3, #97	; 0x61
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	333d      	adds	r3, #61	; 0x3d
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d112      	bne.n	8002f88 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	333c      	adds	r3, #60	; 0x3c
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	333d      	adds	r3, #61	; 0x3d
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 f8b2 	bl	80050fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2310      	movs	r3, #16
 8002fa8:	6093      	str	r3, [r2, #8]
}
 8002faa:	e1e2      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d164      	bne.n	800308c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d111      	bne.n	8002fee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3361      	adds	r3, #97	; 0x61
 8002fd8:	2206      	movs	r2, #6
 8002fda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f002 f888 	bl	80050fc <USB_HC_Halt>
 8002fec:	e044      	b.n	8003078 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	335c      	adds	r3, #92	; 0x5c
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	202c      	movs	r0, #44	; 0x2c
 8003006:	fb00 f303 	mul.w	r3, r0, r3
 800300a:	440b      	add	r3, r1
 800300c:	335c      	adds	r3, #92	; 0x5c
 800300e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	335c      	adds	r3, #92	; 0x5c
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d920      	bls.n	8003066 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	335c      	adds	r3, #92	; 0x5c
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	3360      	adds	r3, #96	; 0x60
 8003044:	2204      	movs	r2, #4
 8003046:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	b2d9      	uxtb	r1, r3
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	202c      	movs	r0, #44	; 0x2c
 8003052:	fb00 f303 	mul.w	r3, r0, r3
 8003056:	4413      	add	r3, r2
 8003058:	3360      	adds	r3, #96	; 0x60
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f002 faa3 	bl	80055aa <HAL_HCD_HC_NotifyURBChange_Callback>
 8003064:	e008      	b.n	8003078 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3360      	adds	r3, #96	; 0x60
 8003074:	2202      	movs	r2, #2
 8003076:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	461a      	mov	r2, r3
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	6093      	str	r3, [r2, #8]
}
 800308a:	e172      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a2:	d11b      	bne.n	80030dc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3361      	adds	r3, #97	; 0x61
 80030b2:	2208      	movs	r2, #8
 80030b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f002 f81b 	bl	80050fc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d2:	461a      	mov	r2, r3
 80030d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d8:	6093      	str	r3, [r2, #8]
}
 80030da:	e14a      	b.n	8003372 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	f040 813f 	bne.w	8003372 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3361      	adds	r3, #97	; 0x61
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d17d      	bne.n	8003204 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3360      	adds	r3, #96	; 0x60
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	333f      	adds	r3, #63	; 0x3f
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d00a      	beq.n	8003144 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	333f      	adds	r3, #63	; 0x3f
 800313c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800313e:	2b03      	cmp	r3, #3
 8003140:	f040 8100 	bne.w	8003344 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d113      	bne.n	8003174 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3355      	adds	r3, #85	; 0x55
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	f083 0301 	eor.w	r3, r3, #1
 8003160:	b2d8      	uxtb	r0, r3
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3355      	adds	r3, #85	; 0x55
 8003170:	4602      	mov	r2, r0
 8003172:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b01      	cmp	r3, #1
 800317a:	f040 80e3 	bne.w	8003344 <HCD_HC_OUT_IRQHandler+0x69c>
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	334c      	adds	r3, #76	; 0x4c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80d8 	beq.w	8003344 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	334c      	adds	r3, #76	; 0x4c
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	202c      	movs	r0, #44	; 0x2c
 80031aa:	fb00 f202 	mul.w	r2, r0, r2
 80031ae:	440a      	add	r2, r1
 80031b0:	3240      	adds	r2, #64	; 0x40
 80031b2:	8812      	ldrh	r2, [r2, #0]
 80031b4:	4413      	add	r3, r2
 80031b6:	3b01      	subs	r3, #1
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	202c      	movs	r0, #44	; 0x2c
 80031be:	fb00 f202 	mul.w	r2, r0, r2
 80031c2:	440a      	add	r2, r1
 80031c4:	3240      	adds	r2, #64	; 0x40
 80031c6:	8812      	ldrh	r2, [r2, #0]
 80031c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80b5 	beq.w	8003344 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	3355      	adds	r3, #85	; 0x55
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	f083 0301 	eor.w	r3, r3, #1
 80031ee:	b2d8      	uxtb	r0, r3
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3355      	adds	r3, #85	; 0x55
 80031fe:	4602      	mov	r2, r0
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e09f      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3361      	adds	r3, #97	; 0x61
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d109      	bne.n	800322c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3360      	adds	r3, #96	; 0x60
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e08b      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3361      	adds	r3, #97	; 0x61
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d109      	bne.n	8003254 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3360      	adds	r3, #96	; 0x60
 800324e:	2202      	movs	r2, #2
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e077      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	3361      	adds	r3, #97	; 0x61
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b05      	cmp	r3, #5
 8003266:	d109      	bne.n	800327c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3360      	adds	r3, #96	; 0x60
 8003276:	2205      	movs	r2, #5
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e063      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3361      	adds	r3, #97	; 0x61
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b06      	cmp	r3, #6
 800328e:	d009      	beq.n	80032a4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3361      	adds	r3, #97	; 0x61
 800329e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d14f      	bne.n	8003344 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	335c      	adds	r3, #92	; 0x5c
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	202c      	movs	r0, #44	; 0x2c
 80032bc:	fb00 f303 	mul.w	r3, r0, r3
 80032c0:	440b      	add	r3, r1
 80032c2:	335c      	adds	r3, #92	; 0x5c
 80032c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	212c      	movs	r1, #44	; 0x2c
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	335c      	adds	r3, #92	; 0x5c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d912      	bls.n	8003300 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	212c      	movs	r1, #44	; 0x2c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	335c      	adds	r3, #92	; 0x5c
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3360      	adds	r3, #96	; 0x60
 80032fa:	2204      	movs	r2, #4
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e021      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3360      	adds	r3, #96	; 0x60
 800330e:	2202      	movs	r2, #2
 8003310:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003328:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003330:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4413      	add	r3, r2
 800333a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333e:	461a      	mov	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003350:	461a      	mov	r2, r3
 8003352:	2302      	movs	r3, #2
 8003354:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	b2d9      	uxtb	r1, r3
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	202c      	movs	r0, #44	; 0x2c
 8003360:	fb00 f303 	mul.w	r3, r0, r3
 8003364:	4413      	add	r3, r2
 8003366:	3360      	adds	r3, #96	; 0x60
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f002 f91c 	bl	80055aa <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003372:	bf00      	nop
 8003374:	3720      	adds	r7, #32
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b08a      	sub	sp, #40	; 0x28
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	0c5b      	lsrs	r3, r3, #17
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d004      	beq.n	80033c0 <HCD_RXQLVL_IRQHandler+0x46>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	f000 80a9 	beq.w	8003510 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033be:	e0aa      	b.n	8003516 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80a6 	beq.w	8003514 <HCD_RXQLVL_IRQHandler+0x19a>
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	212c      	movs	r1, #44	; 0x2c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	3344      	adds	r3, #68	; 0x44
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 809b 	beq.w	8003514 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3350      	adds	r3, #80	; 0x50
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	441a      	add	r2, r3
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	202c      	movs	r0, #44	; 0x2c
 80033f8:	fb00 f303 	mul.w	r3, r0, r3
 80033fc:	440b      	add	r3, r1
 80033fe:	334c      	adds	r3, #76	; 0x4c
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d87a      	bhi.n	80034fc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	4413      	add	r3, r2
 8003416:	3344      	adds	r3, #68	; 0x44
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	b292      	uxth	r2, r2
 800341e:	4619      	mov	r1, r3
 8003420:	f001 fda8 	bl	8004f74 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3344      	adds	r3, #68	; 0x44
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	441a      	add	r2, r3
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	202c      	movs	r0, #44	; 0x2c
 800343e:	fb00 f303 	mul.w	r3, r0, r3
 8003442:	440b      	add	r3, r1
 8003444:	3344      	adds	r3, #68	; 0x44
 8003446:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	3350      	adds	r3, #80	; 0x50
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	441a      	add	r2, r3
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	202c      	movs	r0, #44	; 0x2c
 8003462:	fb00 f303 	mul.w	r3, r0, r3
 8003466:	440b      	add	r3, r1
 8003468:	3350      	adds	r3, #80	; 0x50
 800346a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	4413      	add	r3, r2
 8003474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	0cdb      	lsrs	r3, r3, #19
 800347c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003480:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	3340      	adds	r3, #64	; 0x40
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4293      	cmp	r3, r2
 8003498:	d13c      	bne.n	8003514 <HCD_RXQLVL_IRQHandler+0x19a>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d039      	beq.n	8003514 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034b6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034be:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034cc:	461a      	mov	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	4413      	add	r3, r2
 80034de:	3354      	adds	r3, #84	; 0x54
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	f083 0301 	eor.w	r3, r3, #1
 80034e6:	b2d8      	uxtb	r0, r3
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3354      	adds	r3, #84	; 0x54
 80034f6:	4602      	mov	r2, r0
 80034f8:	701a      	strb	r2, [r3, #0]
      break;
 80034fa:	e00b      	b.n	8003514 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	3360      	adds	r3, #96	; 0x60
 800350a:	2204      	movs	r2, #4
 800350c:	701a      	strb	r2, [r3, #0]
      break;
 800350e:	e001      	b.n	8003514 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003510:	bf00      	nop
 8003512:	e000      	b.n	8003516 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003514:	bf00      	nop
  }
}
 8003516:	bf00      	nop
 8003518:	3728      	adds	r7, #40	; 0x28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800354a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d10b      	bne.n	800356e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d102      	bne.n	8003566 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f002 f806 	bl	8005572 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f043 0302 	orr.w	r3, r3, #2
 800356c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b08      	cmp	r3, #8
 8003576:	d132      	bne.n	80035de <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f043 0308 	orr.w	r3, r3, #8
 800357e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b04      	cmp	r3, #4
 8003588:	d126      	bne.n	80035d8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d113      	bne.n	80035ba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003598:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800359c:	d106      	bne.n	80035ac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2102      	movs	r1, #2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 fd5e 	bl	8005066 <USB_InitFSLSPClkSel>
 80035aa:	e011      	b.n	80035d0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fd57 	bl	8005066 <USB_InitFSLSPClkSel>
 80035b8:	e00a      	b.n	80035d0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d106      	bne.n	80035d0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035c8:	461a      	mov	r2, r3
 80035ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035ce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f001 fff8 	bl	80055c6 <HAL_HCD_PortEnabled_Callback>
 80035d6:	e002      	b.n	80035de <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f002 f802 	bl	80055e2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d103      	bne.n	80035f0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f043 0320 	orr.w	r3, r3, #32
 80035ee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035f6:	461a      	mov	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6013      	str	r3, [r2, #0]
}
 80035fc:	bf00      	nop
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e12b      	b.n	800386e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fa7a 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2224      	movs	r2, #36	; 0x24
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003656:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003666:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003668:	f001 fa20 	bl	8004aac <HAL_RCC_GetPCLK1Freq>
 800366c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4a81      	ldr	r2, [pc, #516]	; (8003878 <HAL_I2C_Init+0x274>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d807      	bhi.n	8003688 <HAL_I2C_Init+0x84>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4a80      	ldr	r2, [pc, #512]	; (800387c <HAL_I2C_Init+0x278>)
 800367c:	4293      	cmp	r3, r2
 800367e:	bf94      	ite	ls
 8003680:	2301      	movls	r3, #1
 8003682:	2300      	movhi	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e006      	b.n	8003696 <HAL_I2C_Init+0x92>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4a7d      	ldr	r2, [pc, #500]	; (8003880 <HAL_I2C_Init+0x27c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	bf94      	ite	ls
 8003690:	2301      	movls	r3, #1
 8003692:	2300      	movhi	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0e7      	b.n	800386e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4a78      	ldr	r2, [pc, #480]	; (8003884 <HAL_I2C_Init+0x280>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0c9b      	lsrs	r3, r3, #18
 80036a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a6a      	ldr	r2, [pc, #424]	; (8003878 <HAL_I2C_Init+0x274>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d802      	bhi.n	80036d8 <HAL_I2C_Init+0xd4>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	3301      	adds	r3, #1
 80036d6:	e009      	b.n	80036ec <HAL_I2C_Init+0xe8>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	4a69      	ldr	r2, [pc, #420]	; (8003888 <HAL_I2C_Init+0x284>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	099b      	lsrs	r3, r3, #6
 80036ea:	3301      	adds	r3, #1
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	430b      	orrs	r3, r1
 80036f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	495c      	ldr	r1, [pc, #368]	; (8003878 <HAL_I2C_Init+0x274>)
 8003708:	428b      	cmp	r3, r1
 800370a:	d819      	bhi.n	8003740 <HAL_I2C_Init+0x13c>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1e59      	subs	r1, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	fbb1 f3f3 	udiv	r3, r1, r3
 800371a:	1c59      	adds	r1, r3, #1
 800371c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003720:	400b      	ands	r3, r1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_I2C_Init+0x138>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1e59      	subs	r1, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fbb1 f3f3 	udiv	r3, r1, r3
 8003734:	3301      	adds	r3, #1
 8003736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373a:	e051      	b.n	80037e0 <HAL_I2C_Init+0x1dc>
 800373c:	2304      	movs	r3, #4
 800373e:	e04f      	b.n	80037e0 <HAL_I2C_Init+0x1dc>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d111      	bne.n	800376c <HAL_I2C_Init+0x168>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1e58      	subs	r0, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	440b      	add	r3, r1
 8003756:	fbb0 f3f3 	udiv	r3, r0, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e012      	b.n	8003792 <HAL_I2C_Init+0x18e>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1e58      	subs	r0, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	0099      	lsls	r1, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003782:	3301      	adds	r3, #1
 8003784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_Init+0x196>
 8003796:	2301      	movs	r3, #1
 8003798:	e022      	b.n	80037e0 <HAL_I2C_Init+0x1dc>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10e      	bne.n	80037c0 <HAL_I2C_Init+0x1bc>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1e58      	subs	r0, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	460b      	mov	r3, r1
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	440b      	add	r3, r1
 80037b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037be:	e00f      	b.n	80037e0 <HAL_I2C_Init+0x1dc>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1e58      	subs	r0, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	0099      	lsls	r1, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d6:	3301      	adds	r3, #1
 80037d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	6809      	ldr	r1, [r1, #0]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69da      	ldr	r2, [r3, #28]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800380e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6911      	ldr	r1, [r2, #16]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68d2      	ldr	r2, [r2, #12]
 800381a:	4311      	orrs	r1, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	430b      	orrs	r3, r1
 8003822:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	000186a0 	.word	0x000186a0
 800387c:	001e847f 	.word	0x001e847f
 8003880:	003d08ff 	.word	0x003d08ff
 8003884:	431bde83 	.word	0x431bde83
 8003888:	10624dd3 	.word	0x10624dd3

0800388c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e128      	b.n	8003af0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a90      	ldr	r2, [pc, #576]	; (8003af8 <HAL_I2S_Init+0x26c>)
 80038b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fd f97b 	bl	8000bb4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038d4:	f023 030f 	bic.w	r3, r3, #15
 80038d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2202      	movs	r2, #2
 80038e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d060      	beq.n	80039ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80038f2:	2310      	movs	r3, #16
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e001      	b.n	80038fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80038f8:	2320      	movs	r3, #32
 80038fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b20      	cmp	r3, #32
 8003902:	d802      	bhi.n	800390a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800390a:	2001      	movs	r0, #1
 800390c:	f001 f9c4 	bl	8004c98 <HAL_RCCEx_GetPeriphCLKFreq>
 8003910:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391a:	d125      	bne.n	8003968 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d010      	beq.n	8003946 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	fbb2 f2f3 	udiv	r2, r2, r3
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	461a      	mov	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	3305      	adds	r3, #5
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	e01f      	b.n	8003986 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	461a      	mov	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	3305      	adds	r3, #5
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	e00e      	b.n	8003986 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	461a      	mov	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	3305      	adds	r3, #5
 8003984:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4a5c      	ldr	r2, [pc, #368]	; (8003afc <HAL_I2S_Init+0x270>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	08db      	lsrs	r3, r3, #3
 8003990:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	e003      	b.n	80039b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039ac:	2302      	movs	r3, #2
 80039ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d902      	bls.n	80039c0 <HAL_I2S_Init+0x134>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	2bff      	cmp	r3, #255	; 0xff
 80039be:	d907      	bls.n	80039d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	f043 0210 	orr.w	r2, r3, #16
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e08f      	b.n	8003af0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	ea42 0103 	orr.w	r1, r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039ee:	f023 030f 	bic.w	r3, r3, #15
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6851      	ldr	r1, [r2, #4]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6892      	ldr	r2, [r2, #8]
 80039fa:	4311      	orrs	r1, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	68d2      	ldr	r2, [r2, #12]
 8003a00:	4311      	orrs	r1, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6992      	ldr	r2, [r2, #24]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d161      	bne.n	8003ae0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a38      	ldr	r2, [pc, #224]	; (8003b00 <HAL_I2S_Init+0x274>)
 8003a20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a37      	ldr	r2, [pc, #220]	; (8003b04 <HAL_I2S_Init+0x278>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2S_Init+0x1a4>
 8003a2c:	4b36      	ldr	r3, [pc, #216]	; (8003b08 <HAL_I2S_Init+0x27c>)
 8003a2e:	e001      	b.n	8003a34 <HAL_I2S_Init+0x1a8>
 8003a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	4932      	ldr	r1, [pc, #200]	; (8003b04 <HAL_I2S_Init+0x278>)
 8003a3c:	428a      	cmp	r2, r1
 8003a3e:	d101      	bne.n	8003a44 <HAL_I2S_Init+0x1b8>
 8003a40:	4a31      	ldr	r2, [pc, #196]	; (8003b08 <HAL_I2S_Init+0x27c>)
 8003a42:	e001      	b.n	8003a48 <HAL_I2S_Init+0x1bc>
 8003a44:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a4c:	f023 030f 	bic.w	r3, r3, #15
 8003a50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <HAL_I2S_Init+0x278>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_I2S_Init+0x1d4>
 8003a5c:	4b2a      	ldr	r3, [pc, #168]	; (8003b08 <HAL_I2S_Init+0x27c>)
 8003a5e:	e001      	b.n	8003a64 <HAL_I2S_Init+0x1d8>
 8003a60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a64:	2202      	movs	r2, #2
 8003a66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a25      	ldr	r2, [pc, #148]	; (8003b04 <HAL_I2S_Init+0x278>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_I2S_Init+0x1ea>
 8003a72:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <HAL_I2S_Init+0x27c>)
 8003a74:	e001      	b.n	8003a7a <HAL_I2S_Init+0x1ee>
 8003a76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a86:	d003      	beq.n	8003a90 <HAL_I2S_Init+0x204>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d103      	bne.n	8003a98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	e001      	b.n	8003a9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003aba:	4313      	orrs	r3, r2
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	897b      	ldrh	r3, [r7, #10]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ac8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a0d      	ldr	r2, [pc, #52]	; (8003b04 <HAL_I2S_Init+0x278>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d101      	bne.n	8003ad8 <HAL_I2S_Init+0x24c>
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <HAL_I2S_Init+0x27c>)
 8003ad6:	e001      	b.n	8003adc <HAL_I2S_Init+0x250>
 8003ad8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003adc:	897a      	ldrh	r2, [r7, #10]
 8003ade:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	08003c03 	.word	0x08003c03
 8003afc:	cccccccd 	.word	0xcccccccd
 8003b00:	08003d19 	.word	0x08003d19
 8003b04:	40003800 	.word	0x40003800
 8003b08:	40003400 	.word	0x40003400

08003b0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	881a      	ldrh	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	1c9a      	adds	r2, r3, #2
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10e      	bne.n	8003b9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff ffb8 	bl	8003b0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	1c9a      	adds	r2, r3, #2
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10e      	bne.n	8003bfa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ff93 	bl	8003b20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d13a      	bne.n	8003c94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d109      	bne.n	8003c3c <I2S_IRQHandler+0x3a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b40      	cmp	r3, #64	; 0x40
 8003c34:	d102      	bne.n	8003c3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ffb4 	bl	8003ba4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d126      	bne.n	8003c94 <I2S_IRQHandler+0x92>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d11f      	bne.n	8003c94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	f043 0202 	orr.w	r2, r3, #2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff ff50 	bl	8003b34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d136      	bne.n	8003d0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d109      	bne.n	8003cbe <I2S_IRQHandler+0xbc>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb4:	2b80      	cmp	r3, #128	; 0x80
 8003cb6:	d102      	bne.n	8003cbe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ff45 	bl	8003b48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d122      	bne.n	8003d0e <I2S_IRQHandler+0x10c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d11b      	bne.n	8003d0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ce4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	f043 0204 	orr.w	r2, r3, #4
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff13 	bl	8003b34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d0e:	bf00      	nop
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a92      	ldr	r2, [pc, #584]	; (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d32:	4b92      	ldr	r3, [pc, #584]	; (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d34:	e001      	b.n	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a8b      	ldr	r2, [pc, #556]	; (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d50:	4b8a      	ldr	r3, [pc, #552]	; (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d52:	e001      	b.n	8003d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d64:	d004      	beq.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 8099 	bne.w	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d107      	bne.n	8003d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f925 	bl	8003fd4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d107      	bne.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f9c8 	bl	8004134 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d13a      	bne.n	8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d035      	beq.n	8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a6e      	ldr	r2, [pc, #440]	; (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dc2:	4b6e      	ldr	r3, [pc, #440]	; (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dc4:	e001      	b.n	8003dca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003dc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4969      	ldr	r1, [pc, #420]	; (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd2:	428b      	cmp	r3, r1
 8003dd4:	d101      	bne.n	8003dda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003dd6:	4b69      	ldr	r3, [pc, #420]	; (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dd8:	e001      	b.n	8003dde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003dda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003de2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003df2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f043 0202 	orr.w	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fe88 	bl	8003b34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	f040 80c3 	bne.w	8003fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80bd 	beq.w	8003fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a49      	ldr	r2, [pc, #292]	; (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d101      	bne.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e56:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e58:	e001      	b.n	8003e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4944      	ldr	r1, [pc, #272]	; (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e66:	428b      	cmp	r3, r1
 8003e68:	d101      	bne.n	8003e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e6a:	4b44      	ldr	r3, [pc, #272]	; (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e6c:	e001      	b.n	8003e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f043 0204 	orr.w	r2, r3, #4
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fe4a 	bl	8003b34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ea0:	e089      	b.n	8003fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d107      	bne.n	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f8be 	bl	8004038 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d107      	bne.n	8003ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f8fd 	bl	80040d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d12f      	bne.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d02a      	beq.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ef8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f04:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f06:	e001      	b.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4919      	ldr	r1, [pc, #100]	; (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f14:	428b      	cmp	r3, r1
 8003f16:	d101      	bne.n	8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f18:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f1a:	e001      	b.n	8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff fdfa 	bl	8003b34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d136      	bne.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d031      	beq.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a07      	ldr	r2, [pc, #28]	; (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4902      	ldr	r1, [pc, #8]	; (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f6e:	428b      	cmp	r3, r1
 8003f70:	d106      	bne.n	8003f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f72:	4b02      	ldr	r3, [pc, #8]	; (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f74:	e006      	b.n	8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f76:	bf00      	nop
 8003f78:	40003800 	.word	0x40003800
 8003f7c:	40003400 	.word	0x40003400
 8003f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f88:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	f043 0204 	orr.w	r2, r3, #4
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fdc0 	bl	8003b34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fb4:	e000      	b.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fb6:	bf00      	nop
}
 8003fb8:	bf00      	nop
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	1c99      	adds	r1, r3, #2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6251      	str	r1, [r2, #36]	; 0x24
 8003fe6:	881a      	ldrh	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d113      	bne.n	800402e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004014:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ffc9 	bl	8003fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	1c99      	adds	r1, r3, #2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6251      	str	r1, [r2, #36]	; 0x24
 800404a:	8819      	ldrh	r1, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <I2SEx_TxISR_I2SExt+0x22>
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <I2SEx_TxISR_I2SExt+0x94>)
 8004058:	e001      	b.n	800405e <I2SEx_TxISR_I2SExt+0x26>
 800405a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405e:	460a      	mov	r2, r1
 8004060:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d121      	bne.n	80040be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a12      	ldr	r2, [pc, #72]	; (80040c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <I2SEx_TxISR_I2SExt+0x50>
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <I2SEx_TxISR_I2SExt+0x94>)
 8004086:	e001      	b.n	800408c <I2SEx_TxISR_I2SExt+0x54>
 8004088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	490d      	ldr	r1, [pc, #52]	; (80040c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004094:	428b      	cmp	r3, r1
 8004096:	d101      	bne.n	800409c <I2SEx_TxISR_I2SExt+0x64>
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <I2SEx_TxISR_I2SExt+0x94>)
 800409a:	e001      	b.n	80040a0 <I2SEx_TxISR_I2SExt+0x68>
 800409c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ff81 	bl	8003fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40003800 	.word	0x40003800
 80040cc:	40003400 	.word	0x40003400

080040d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68d8      	ldr	r0, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	1c99      	adds	r1, r3, #2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040e8:	b282      	uxth	r2, r0
 80040ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d113      	bne.n	800412c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004112:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff ff4a 	bl	8003fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d101      	bne.n	800414a <I2SEx_RxISR_I2SExt+0x16>
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004148:	e001      	b.n	800414e <I2SEx_RxISR_I2SExt+0x1a>
 800414a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800414e:	68d8      	ldr	r0, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	1c99      	adds	r1, r3, #2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	62d1      	str	r1, [r2, #44]	; 0x2c
 800415a:	b282      	uxth	r2, r0
 800415c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d121      	bne.n	80041ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <I2SEx_RxISR_I2SExt+0x90>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <I2SEx_RxISR_I2SExt+0x50>
 8004180:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004182:	e001      	b.n	8004188 <I2SEx_RxISR_I2SExt+0x54>
 8004184:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	490d      	ldr	r1, [pc, #52]	; (80041c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004190:	428b      	cmp	r3, r1
 8004192:	d101      	bne.n	8004198 <I2SEx_RxISR_I2SExt+0x64>
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004196:	e001      	b.n	800419c <I2SEx_RxISR_I2SExt+0x68>
 8004198:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800419c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff ff03 	bl	8003fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40003800 	.word	0x40003800
 80041c8:	40003400 	.word	0x40003400

080041cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e267      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d075      	beq.n	80042d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ea:	4b88      	ldr	r3, [pc, #544]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d00c      	beq.n	8004210 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	4b85      	ldr	r3, [pc, #532]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d112      	bne.n	8004228 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4b82      	ldr	r3, [pc, #520]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420e:	d10b      	bne.n	8004228 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	4b7e      	ldr	r3, [pc, #504]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d05b      	beq.n	80042d4 <HAL_RCC_OscConfig+0x108>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d157      	bne.n	80042d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e242      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d106      	bne.n	8004240 <HAL_RCC_OscConfig+0x74>
 8004232:	4b76      	ldr	r3, [pc, #472]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a75      	ldr	r2, [pc, #468]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e01d      	b.n	800427c <HAL_RCC_OscConfig+0xb0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x98>
 800424a:	4b70      	ldr	r3, [pc, #448]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6f      	ldr	r2, [pc, #444]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b6d      	ldr	r3, [pc, #436]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6c      	ldr	r2, [pc, #432]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0xb0>
 8004264:	4b69      	ldr	r3, [pc, #420]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a68      	ldr	r2, [pc, #416]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b66      	ldr	r3, [pc, #408]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a65      	ldr	r2, [pc, #404]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fc fe3e 	bl	8000f04 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800428c:	f7fc fe3a 	bl	8000f04 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e207      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b5b      	ldr	r3, [pc, #364]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0xc0>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fc fe2a 	bl	8000f04 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fc fe26 	bl	8000f04 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e1f3      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	4b51      	ldr	r3, [pc, #324]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0xe8>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d063      	beq.n	80043aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042e2:	4b4a      	ldr	r3, [pc, #296]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b47      	ldr	r3, [pc, #284]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d11c      	bne.n	8004334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b44      	ldr	r3, [pc, #272]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d116      	bne.n	8004334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	4b41      	ldr	r3, [pc, #260]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RCC_OscConfig+0x152>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d001      	beq.n	800431e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e1c7      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	4b3b      	ldr	r3, [pc, #236]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4937      	ldr	r1, [pc, #220]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004332:	e03a      	b.n	80043aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433c:	4b34      	ldr	r3, [pc, #208]	; (8004410 <HAL_RCC_OscConfig+0x244>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004342:	f7fc fddf 	bl	8000f04 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434a:	f7fc fddb 	bl	8000f04 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e1a8      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4b28      	ldr	r3, [pc, #160]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4925      	ldr	r1, [pc, #148]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]
 800437c:	e015      	b.n	80043aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437e:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_RCC_OscConfig+0x244>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fc fdbe 	bl	8000f04 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438c:	f7fc fdba 	bl	8000f04 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e187      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d036      	beq.n	8004424 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <HAL_RCC_OscConfig+0x248>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fc fd9e 	bl	8000f04 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fc fd9a 	bl	8000f04 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e167      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80043e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x200>
 80043ea:	e01b      	b.n	8004424 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x248>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f2:	f7fc fd87 	bl	8000f04 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f8:	e00e      	b.n	8004418 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fc fd83 	bl	8000f04 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d907      	bls.n	8004418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e150      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
 800440c:	40023800 	.word	0x40023800
 8004410:	42470000 	.word	0x42470000
 8004414:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b88      	ldr	r3, [pc, #544]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ea      	bne.n	80043fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8097 	beq.w	8004560 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b81      	ldr	r3, [pc, #516]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b7d      	ldr	r3, [pc, #500]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a7c      	ldr	r2, [pc, #496]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	; 0x40
 8004452:	4b7a      	ldr	r3, [pc, #488]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b77      	ldr	r3, [pc, #476]	; (8004640 <HAL_RCC_OscConfig+0x474>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d118      	bne.n	80044a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b74      	ldr	r3, [pc, #464]	; (8004640 <HAL_RCC_OscConfig+0x474>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a73      	ldr	r2, [pc, #460]	; (8004640 <HAL_RCC_OscConfig+0x474>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fc fd43 	bl	8000f04 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fc fd3f 	bl	8000f04 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e10c      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	4b6a      	ldr	r3, [pc, #424]	; (8004640 <HAL_RCC_OscConfig+0x474>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x2ea>
 80044a8:	4b64      	ldr	r3, [pc, #400]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4a63      	ldr	r2, [pc, #396]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
 80044b4:	e01c      	b.n	80044f0 <HAL_RCC_OscConfig+0x324>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x30c>
 80044be:	4b5f      	ldr	r3, [pc, #380]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a5e      	ldr	r2, [pc, #376]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ca:	4b5c      	ldr	r3, [pc, #368]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a5b      	ldr	r2, [pc, #364]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6713      	str	r3, [r2, #112]	; 0x70
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0x324>
 80044d8:	4b58      	ldr	r3, [pc, #352]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a57      	ldr	r2, [pc, #348]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
 80044e4:	4b55      	ldr	r3, [pc, #340]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	4a54      	ldr	r2, [pc, #336]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044ea:	f023 0304 	bic.w	r3, r3, #4
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fc fd04 	bl	8000f04 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fc fd00 	bl	8000f04 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0cb      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	4b49      	ldr	r3, [pc, #292]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0ee      	beq.n	8004500 <HAL_RCC_OscConfig+0x334>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004524:	f7fc fcee 	bl	8000f04 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452a:	e00a      	b.n	8004542 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fc fcea 	bl	8000f04 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0b5      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004542:	4b3e      	ldr	r3, [pc, #248]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ee      	bne.n	800452c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b39      	ldr	r3, [pc, #228]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	4a38      	ldr	r2, [pc, #224]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a1 	beq.w	80046ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800456a:	4b34      	ldr	r3, [pc, #208]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b08      	cmp	r3, #8
 8004574:	d05c      	beq.n	8004630 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d141      	bne.n	8004602 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b31      	ldr	r3, [pc, #196]	; (8004644 <HAL_RCC_OscConfig+0x478>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fc fcbe 	bl	8000f04 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458c:	f7fc fcba 	bl	8000f04 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e087      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	4b27      	ldr	r3, [pc, #156]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	491b      	ldr	r1, [pc, #108]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d4:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <HAL_RCC_OscConfig+0x478>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fc fc93 	bl	8000f04 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e2:	f7fc fc8f 	bl	8000f04 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e05c      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x416>
 8004600:	e054      	b.n	80046ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_RCC_OscConfig+0x478>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fc fc7c 	bl	8000f04 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004610:	f7fc fc78 	bl	8000f04 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e045      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x444>
 800462e:	e03d      	b.n	80046ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e038      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
 800463c:	40023800 	.word	0x40023800
 8004640:	40007000 	.word	0x40007000
 8004644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <HAL_RCC_OscConfig+0x4ec>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d028      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d121      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d11a      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800467e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004680:	4293      	cmp	r3, r2
 8004682:	d111      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	3b01      	subs	r3, #1
 8004692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d107      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800

080046bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0cc      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d0:	4b68      	ldr	r3, [pc, #416]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d90c      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b65      	ldr	r3, [pc, #404]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b63      	ldr	r3, [pc, #396]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0b8      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d020      	beq.n	8004746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004710:	4b59      	ldr	r3, [pc, #356]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a58      	ldr	r2, [pc, #352]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800471a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004728:	4b53      	ldr	r3, [pc, #332]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a52      	ldr	r2, [pc, #328]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	4b50      	ldr	r3, [pc, #320]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	494d      	ldr	r1, [pc, #308]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d044      	beq.n	80047dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	4b47      	ldr	r3, [pc, #284]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d119      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d003      	beq.n	800477a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	2b03      	cmp	r3, #3
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e06f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478a:	4b3b      	ldr	r3, [pc, #236]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e067      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479a:	4b37      	ldr	r3, [pc, #220]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4934      	ldr	r1, [pc, #208]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ac:	f7fc fbaa 	bl	8000f04 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fc fba6 	bl	8000f04 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e04f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	4b2b      	ldr	r3, [pc, #172]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 020c 	and.w	r2, r3, #12
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1eb      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047dc:	4b25      	ldr	r3, [pc, #148]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d20c      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b22      	ldr	r3, [pc, #136]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b20      	ldr	r3, [pc, #128]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e032      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4916      	ldr	r1, [pc, #88]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	490e      	ldr	r1, [pc, #56]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004842:	f000 f821 	bl	8004888 <HAL_RCC_GetSysClockFreq>
 8004846:	4602      	mov	r2, r0
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	490a      	ldr	r1, [pc, #40]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	5ccb      	ldrb	r3, [r1, r3]
 8004856:	fa22 f303 	lsr.w	r3, r2, r3
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fc fb0a 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40023c00 	.word	0x40023c00
 8004878:	40023800 	.word	0x40023800
 800487c:	080056fc 	.word	0x080056fc
 8004880:	20000000 	.word	0x20000000
 8004884:	20000004 	.word	0x20000004

08004888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800488c:	b094      	sub	sp, #80	; 0x50
 800488e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	647b      	str	r3, [r7, #68]	; 0x44
 8004894:	2300      	movs	r3, #0
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004898:	2300      	movs	r3, #0
 800489a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048a0:	4b79      	ldr	r3, [pc, #484]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d00d      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x40>
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	f200 80e1 	bhi.w	8004a74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x34>
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ba:	e0db      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048bc:	4b73      	ldr	r3, [pc, #460]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x204>)
 80048be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048c0:	e0db      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048c2:	4b73      	ldr	r3, [pc, #460]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x208>)
 80048c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048c6:	e0d8      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c8:	4b6f      	ldr	r3, [pc, #444]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048d2:	4b6d      	ldr	r3, [pc, #436]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d063      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048de:	4b6a      	ldr	r3, [pc, #424]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	099b      	lsrs	r3, r3, #6
 80048e4:	2200      	movs	r2, #0
 80048e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f0:	633b      	str	r3, [r7, #48]	; 0x30
 80048f2:	2300      	movs	r3, #0
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
 80048f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048fa:	4622      	mov	r2, r4
 80048fc:	462b      	mov	r3, r5
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	0159      	lsls	r1, r3, #5
 8004908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800490c:	0150      	lsls	r0, r2, #5
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4621      	mov	r1, r4
 8004914:	1a51      	subs	r1, r2, r1
 8004916:	6139      	str	r1, [r7, #16]
 8004918:	4629      	mov	r1, r5
 800491a:	eb63 0301 	sbc.w	r3, r3, r1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800492c:	4659      	mov	r1, fp
 800492e:	018b      	lsls	r3, r1, #6
 8004930:	4651      	mov	r1, sl
 8004932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004936:	4651      	mov	r1, sl
 8004938:	018a      	lsls	r2, r1, #6
 800493a:	4651      	mov	r1, sl
 800493c:	ebb2 0801 	subs.w	r8, r2, r1
 8004940:	4659      	mov	r1, fp
 8004942:	eb63 0901 	sbc.w	r9, r3, r1
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800495a:	4690      	mov	r8, r2
 800495c:	4699      	mov	r9, r3
 800495e:	4623      	mov	r3, r4
 8004960:	eb18 0303 	adds.w	r3, r8, r3
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	462b      	mov	r3, r5
 8004968:	eb49 0303 	adc.w	r3, r9, r3
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800497a:	4629      	mov	r1, r5
 800497c:	024b      	lsls	r3, r1, #9
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004984:	4621      	mov	r1, r4
 8004986:	024a      	lsls	r2, r1, #9
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498e:	2200      	movs	r2, #0
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
 8004992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004998:	f7fb fc16 	bl	80001c8 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4613      	mov	r3, r2
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a4:	e058      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a6:	4b38      	ldr	r3, [pc, #224]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	099b      	lsrs	r3, r3, #6
 80049ac:	2200      	movs	r2, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	4611      	mov	r1, r2
 80049b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	2300      	movs	r3, #0
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
 80049bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	0159      	lsls	r1, r3, #5
 80049ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049d2:	0150      	lsls	r0, r2, #5
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4641      	mov	r1, r8
 80049da:	ebb2 0a01 	subs.w	sl, r2, r1
 80049de:	4649      	mov	r1, r9
 80049e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049f8:	ebb2 040a 	subs.w	r4, r2, sl
 80049fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	00eb      	lsls	r3, r5, #3
 8004a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0e:	00e2      	lsls	r2, r4, #3
 8004a10:	4614      	mov	r4, r2
 8004a12:	461d      	mov	r5, r3
 8004a14:	4643      	mov	r3, r8
 8004a16:	18e3      	adds	r3, r4, r3
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	eb45 0303 	adc.w	r3, r5, r3
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a2e:	4629      	mov	r1, r5
 8004a30:	028b      	lsls	r3, r1, #10
 8004a32:	4621      	mov	r1, r4
 8004a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a38:	4621      	mov	r1, r4
 8004a3a:	028a      	lsls	r2, r1, #10
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a42:	2200      	movs	r2, #0
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	61fa      	str	r2, [r7, #28]
 8004a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a4c:	f7fb fbbc 	bl	80001c8 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4613      	mov	r3, r2
 8004a56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	3301      	adds	r3, #1
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a72:	e002      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3750      	adds	r7, #80	; 0x50
 8004a80:	46bd      	mov	sp, r7
 8004a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a86:	bf00      	nop
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	00f42400 	.word	0x00f42400
 8004a90:	007a1200 	.word	0x007a1200

08004a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000000 	.word	0x20000000

08004aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ab0:	f7ff fff0 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	0a9b      	lsrs	r3, r3, #10
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	4903      	ldr	r1, [pc, #12]	; (8004ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac2:	5ccb      	ldrb	r3, [r1, r3]
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	0800570c 	.word	0x0800570c

08004ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d105      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d035      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004afc:	4b62      	ldr	r3, [pc, #392]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b02:	f7fc f9ff 	bl	8000f04 <HAL_GetTick>
 8004b06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b0a:	f7fc f9fb 	bl	8000f04 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0b0      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b1c:	4b5b      	ldr	r3, [pc, #364]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f0      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	019a      	lsls	r2, r3, #6
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	071b      	lsls	r3, r3, #28
 8004b34:	4955      	ldr	r1, [pc, #340]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b3c:	4b52      	ldr	r3, [pc, #328]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b42:	f7fc f9df 	bl	8000f04 <HAL_GetTick>
 8004b46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b48:	e008      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b4a:	f7fc f9db 	bl	8000f04 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e090      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b5c:	4b4b      	ldr	r3, [pc, #300]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8083 	beq.w	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	4b44      	ldr	r3, [pc, #272]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	4a43      	ldr	r2, [pc, #268]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	; 0x40
 8004b86:	4b41      	ldr	r3, [pc, #260]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b92:	4b3f      	ldr	r3, [pc, #252]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a3e      	ldr	r2, [pc, #248]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b9e:	f7fc f9b1 	bl	8000f04 <HAL_GetTick>
 8004ba2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ba6:	f7fc f9ad 	bl	8000f04 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e062      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bb8:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bc4:	4b31      	ldr	r3, [pc, #196]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bcc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d02f      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d028      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004be2:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bec:	4b29      	ldr	r3, [pc, #164]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bf2:	4b28      	ldr	r3, [pc, #160]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bf8:	4a24      	ldr	r2, [pc, #144]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bfe:	4b23      	ldr	r3, [pc, #140]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d114      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c0a:	f7fc f97b 	bl	8000f04 <HAL_GetTick>
 8004c0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fc f977 	bl	8000f04 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e02a      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c28:	4b18      	ldr	r3, [pc, #96]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ee      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c40:	d10d      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c42:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c56:	490d      	ldr	r1, [pc, #52]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	608b      	str	r3, [r1, #8]
 8004c5c:	e005      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c64:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c68:	6093      	str	r3, [r2, #8]
 8004c6a:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c76:	4905      	ldr	r1, [pc, #20]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	42470068 	.word	0x42470068
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40007000 	.word	0x40007000
 8004c94:	42470e40 	.word	0x42470e40

08004c98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d13e      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004cb6:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d12f      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ccc:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cce:	617b      	str	r3, [r7, #20]
          break;
 8004cd0:	e02f      	b.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cde:	d108      	bne.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ce0:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce8:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e007      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cf2:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfa:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d1c:	0f1b      	lsrs	r3, r3, #28
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]
          break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
          break;
 8004d30:	bf00      	nop
        }
      }
      break;
 8004d32:	bf00      	nop
    }
  }
  return frequency;
 8004d34:	697b      	ldr	r3, [r7, #20]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	00bb8000 	.word	0x00bb8000
 8004d4c:	007a1200 	.word	0x007a1200
 8004d50:	00f42400 	.word	0x00f42400

08004d54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07b      	b.n	8004e5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d108      	bne.n	8004d80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d76:	d009      	beq.n	8004d8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	61da      	str	r2, [r3, #28]
 8004d7e:	e005      	b.n	8004d8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fb ff84 	bl	8000cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e10:	ea42 0103 	orr.w	r1, r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	f003 0104 	and.w	r1, r3, #4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	f003 0210 	and.w	r2, r3, #16
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f043 0201 	orr.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 0201 	bic.w	r2, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <USB_FlushTxFifo+0x64>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e01b      	b.n	8004f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	daf2      	bge.n	8004eba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	019b      	lsls	r3, r3, #6
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a08      	ldr	r2, [pc, #32]	; (8004f10 <USB_FlushTxFifo+0x64>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e006      	b.n	8004f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d0f0      	beq.n	8004ee4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	00030d40 	.word	0x00030d40

08004f14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a11      	ldr	r2, [pc, #68]	; (8004f70 <USB_FlushRxFifo+0x5c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e018      	b.n	8004f64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	daf2      	bge.n	8004f20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2210      	movs	r2, #16
 8004f42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <USB_FlushRxFifo+0x5c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e006      	b.n	8004f64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d0f0      	beq.n	8004f44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	00030d40 	.word	0x00030d40

08004f74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b08b      	sub	sp, #44	; 0x2c
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	623b      	str	r3, [r7, #32]
 8004f9e:	e014      	b.n	8004fca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	3301      	adds	r3, #1
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	3301      	adds	r3, #1
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	623b      	str	r3, [r7, #32]
 8004fca:	6a3a      	ldr	r2, [r7, #32]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d3e6      	bcc.n	8004fa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004fd2:	8bfb      	ldrh	r3, [r7, #30]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01e      	beq.n	8005016 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f107 0310 	add.w	r3, r7, #16
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	701a      	strb	r2, [r3, #0]
      i++;
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	3301      	adds	r3, #1
 8005002:	623b      	str	r3, [r7, #32]
      pDest++;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	3301      	adds	r3, #1
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800500a:	8bfb      	ldrh	r3, [r7, #30]
 800500c:	3b01      	subs	r3, #1
 800500e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005010:	8bfb      	ldrh	r3, [r7, #30]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1ea      	bne.n	8004fec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005018:	4618      	mov	r0, r3
 800501a:	372c      	adds	r7, #44	; 0x2c
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4013      	ands	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800503c:	68fb      	ldr	r3, [r7, #12]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0301 	and.w	r3, r3, #1
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	460b      	mov	r3, r1
 8005070:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005084:	f023 0303 	bic.w	r3, r3, #3
 8005088:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	68f9      	ldr	r1, [r7, #12]
 800509a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800509e:	4313      	orrs	r3, r2
 80050a0:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d107      	bne.n	80050b8 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ae:	461a      	mov	r2, r3
 80050b0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80050b4:	6053      	str	r3, [r2, #4]
 80050b6:	e009      	b.n	80050cc <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d106      	bne.n	80050cc <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050c4:	461a      	mov	r2, r3
 80050c6:	f241 7370 	movw	r3, #6000	; 0x1770
 80050ca:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050da:	b480      	push	{r7}
 80050dc:	b085      	sub	sp, #20
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	b29b      	uxth	r3, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b089      	sub	sp, #36	; 0x24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	0c9b      	lsrs	r3, r3, #18
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	0fdb      	lsrs	r3, r3, #31
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b20      	cmp	r3, #32
 800514a:	d104      	bne.n	8005156 <USB_HC_Halt+0x5a>
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	e0c8      	b.n	80052e8 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <USB_HC_Halt+0x66>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d163      	bne.n	800522a <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	0151      	lsls	r1, r2, #5
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	440a      	add	r2, r1
 8005178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800517c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005180:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	f040 80ab 	bne.w	80052e6 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d133      	bne.n	8005204 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	0151      	lsls	r1, r2, #5
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	440a      	add	r2, r1
 80051b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051ba:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051da:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051e8:	d81d      	bhi.n	8005226 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005200:	d0ec      	beq.n	80051dc <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005202:	e070      	b.n	80052e6 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	440a      	add	r2, r1
 800521a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005222:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005224:	e05f      	b.n	80052e6 <USB_HC_Halt+0x1ea>
            break;
 8005226:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005228:	e05d      	b.n	80052e6 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	440a      	add	r2, r1
 8005240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005244:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005248:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d133      	bne.n	80052c2 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	440a      	add	r2, r1
 8005270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005278:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	440a      	add	r2, r1
 8005290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005298:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3301      	adds	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a6:	d81d      	bhi.n	80052e4 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052be:	d0ec      	beq.n	800529a <USB_HC_Halt+0x19e>
 80052c0:	e011      	b.n	80052e6 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e000      	b.n	80052e6 <USB_HC_Halt+0x1ea>
          break;
 80052e4:	bf00      	nop
    }
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3724      	adds	r7, #36	; 0x24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff fdbd 	bl	8004e88 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800530e:	2110      	movs	r1, #16
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff fdcb 	bl	8004eac <USB_FlushTxFifo>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff fdf7 	bl	8004f14 <USB_FlushRxFifo>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005330:	2300      	movs	r3, #0
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	e01f      	b.n	8005376 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	4413      	add	r3, r2
 800533e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800534c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005354:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800535c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536a:	461a      	mov	r2, r3
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	3301      	adds	r3, #1
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	2b0f      	cmp	r3, #15
 800537a:	d9dc      	bls.n	8005336 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800537c:	2300      	movs	r3, #0
 800537e:	61bb      	str	r3, [r7, #24]
 8005380:	e034      	b.n	80053ec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005398:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b6:	461a      	mov	r2, r3
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053c8:	d80c      	bhi.n	80053e4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e0:	d0ec      	beq.n	80053bc <USB_StopHost+0xc8>
 80053e2:	e000      	b.n	80053e6 <USB_StopHost+0xf2>
        break;
 80053e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	3301      	adds	r3, #1
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b0f      	cmp	r3, #15
 80053f0:	d9c7      	bls.n	8005382 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f8:	461a      	mov	r2, r3
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
 80053fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f04f 32ff 	mov.w	r2, #4294967295
 8005406:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fd2c 	bl	8004e66 <USB_EnableGlobalInt>

  return ret;
 800540e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3720      	adds	r7, #32
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f804 	bl	800543c <USBH_HandleSof>
}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b0b      	cmp	r3, #11
 800544c:	d10a      	bne.n	8005464 <USBH_HandleSof+0x28>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	4798      	blx	r3
  }
}
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800547c:	bf00      	nop
}
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005498:	bf00      	nop
}
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f883 	bl	80055fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	791b      	ldrb	r3, [r3, #4]
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f80b 	bl	800551a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	795b      	ldrb	r3, [r3, #5]
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f805 	bl	800551a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	460b      	mov	r3, r1
 8005524:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	2b0f      	cmp	r3, #15
 800552a:	d80d      	bhi.n	8005548 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	33e0      	adds	r3, #224	; 0xe0
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	33e0      	adds	r3, #224	; 0xe0
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff ff57 	bl	8005418 <USBH_LL_IncTimer>
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff ff8f 	bl	80054a4 <USBH_LL_Connect>
}
 8005586:	bf00      	nop
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff ff98 	bl	80054d2 <USBH_LL_Disconnect>
}
 80055a2:	bf00      	nop
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
 80055b6:	4613      	mov	r3, r2
 80055b8:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff ff49 	bl	800546c <USBH_LL_PortEnabled>
}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff ff49 	bl	8005488 <USBH_LL_PortDisabled>
}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005614:	4618      	mov	r0, r3
 8005616:	f7fc ffd5 	bl	80025c4 <HAL_HCD_Stop>
 800561a:	4603      	mov	r3, r0
 800561c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 f807 	bl	8005634 <USBH_Get_USB_Status>
 8005626:	4603      	mov	r3, r0
 8005628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800562a:	7bbb      	ldrb	r3, [r7, #14]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d817      	bhi.n	8005678 <USBH_Get_USB_Status+0x44>
 8005648:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <USBH_Get_USB_Status+0x1c>)
 800564a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564e:	bf00      	nop
 8005650:	08005661 	.word	0x08005661
 8005654:	08005667 	.word	0x08005667
 8005658:	0800566d 	.word	0x0800566d
 800565c:	08005673 	.word	0x08005673
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	73fb      	strb	r3, [r7, #15]
    break;
 8005664:	e00b      	b.n	800567e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8005666:	2302      	movs	r3, #2
 8005668:	73fb      	strb	r3, [r7, #15]
    break;
 800566a:	e008      	b.n	800567e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
    break;
 8005670:	e005      	b.n	800567e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8005672:	2302      	movs	r3, #2
 8005674:	73fb      	strb	r3, [r7, #15]
    break;
 8005676:	e002      	b.n	800567e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005678:	2302      	movs	r3, #2
 800567a:	73fb      	strb	r3, [r7, #15]
    break;
 800567c:	bf00      	nop
  }
  return usb_status;
 800567e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <__libc_init_array>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	4d0d      	ldr	r5, [pc, #52]	; (80056c4 <__libc_init_array+0x38>)
 8005690:	4c0d      	ldr	r4, [pc, #52]	; (80056c8 <__libc_init_array+0x3c>)
 8005692:	1b64      	subs	r4, r4, r5
 8005694:	10a4      	asrs	r4, r4, #2
 8005696:	2600      	movs	r6, #0
 8005698:	42a6      	cmp	r6, r4
 800569a:	d109      	bne.n	80056b0 <__libc_init_array+0x24>
 800569c:	4d0b      	ldr	r5, [pc, #44]	; (80056cc <__libc_init_array+0x40>)
 800569e:	4c0c      	ldr	r4, [pc, #48]	; (80056d0 <__libc_init_array+0x44>)
 80056a0:	f000 f820 	bl	80056e4 <_init>
 80056a4:	1b64      	subs	r4, r4, r5
 80056a6:	10a4      	asrs	r4, r4, #2
 80056a8:	2600      	movs	r6, #0
 80056aa:	42a6      	cmp	r6, r4
 80056ac:	d105      	bne.n	80056ba <__libc_init_array+0x2e>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b4:	4798      	blx	r3
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7ee      	b.n	8005698 <__libc_init_array+0xc>
 80056ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80056be:	4798      	blx	r3
 80056c0:	3601      	adds	r6, #1
 80056c2:	e7f2      	b.n	80056aa <__libc_init_array+0x1e>
 80056c4:	08005724 	.word	0x08005724
 80056c8:	08005724 	.word	0x08005724
 80056cc:	08005724 	.word	0x08005724
 80056d0:	08005728 	.word	0x08005728

080056d4 <memset>:
 80056d4:	4402      	add	r2, r0
 80056d6:	4603      	mov	r3, r0
 80056d8:	4293      	cmp	r3, r2
 80056da:	d100      	bne.n	80056de <memset+0xa>
 80056dc:	4770      	bx	lr
 80056de:	f803 1b01 	strb.w	r1, [r3], #1
 80056e2:	e7f9      	b.n	80056d8 <memset+0x4>

080056e4 <_init>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	bf00      	nop
 80056e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ea:	bc08      	pop	{r3}
 80056ec:	469e      	mov	lr, r3
 80056ee:	4770      	bx	lr

080056f0 <_fini>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	bf00      	nop
 80056f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f6:	bc08      	pop	{r3}
 80056f8:	469e      	mov	lr, r3
 80056fa:	4770      	bx	lr
