
gun18_uarttimeout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800c000  0800c000  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c56c  0800c56c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c56c  0800c56c  0001c56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c574  0800c574  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c574  0800c574  0001c574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c578  0800c578  0001c578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000006d4  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200008b4  200008b4  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bf93  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003984  00000000  00000000  0003c1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  0003fb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016c8  00000000  00000000  00041340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024933  00000000  00000000  00042a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc2b  00000000  00000000  0006733b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d65e8  00000000  00000000  00084f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b54e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d3c  00000000  00000000  0015b5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfe8 	.word	0x0800bfe8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800bfe8 	.word	0x0800bfe8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <configbuf>:
extern uint8_t i,j,x;;
extern uint8_t a;
extern double b,c,d,e;

void configbuf(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

	memset(copyrxbuf,'\0',sizeof(copyrxbuf));
 8000ffc:	2278      	movs	r2, #120	; 0x78
 8000ffe:	2100      	movs	r1, #0
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <configbuf+0x34>)
 8001002:	f006 fb91 	bl	8007728 <memset>
	memcpy(copyrxbuf,rxbuf,sizeof(rxbuf));
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <configbuf+0x34>)
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <configbuf+0x38>)
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	2378      	movs	r3, #120	; 0x78
 8001010:	461a      	mov	r2, r3
 8001012:	f006 fb7b 	bl	800770c <memcpy>
	memset(rxbuf,'\0',sizeof(rxbuf));
 8001016:	2278      	movs	r2, #120	; 0x78
 8001018:	2100      	movs	r1, #0
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <configbuf+0x38>)
 800101c:	f006 fb84 	bl	8007728 <memset>
	flagconfigbuf=0;
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <configbuf+0x3c>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000484 	.word	0x20000484
 8001030:	2000040c 	.word	0x2000040c
 8001034:	20000560 	.word	0x20000560

08001038 <send>:

void send(void)
{
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	b087      	sub	sp, #28
 800103c:	af06      	add	r7, sp, #24
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800103e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <send+0x28>)
 8001044:	f001 fdcd 	bl	8002be2 <HAL_GPIO_TogglePin>

	if (copyrxbuf[i] == 0x55)
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <send+0x2c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <send+0x30>)
 8001050:	5c9b      	ldrb	r3, [r3, r2]
 8001052:	2b55      	cmp	r3, #85	; 0x55
 8001054:	f040 82eb 	bne.w	800162e <send+0x5f6>
	{

		for(j=0;j<11;j++)
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <send+0x34>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	e01d      	b.n	800109c <send+0x64>
 8001060:	40020c00 	.word	0x40020c00
 8001064:	20000572 	.word	0x20000572
 8001068:	20000484 	.word	0x20000484
 800106c:	20000573 	.word	0x20000573
		{
			txbuf[j] = copyrxbuf[i];
 8001070:	4ba5      	ldr	r3, [pc, #660]	; (8001308 <send+0x2d0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	4ba5      	ldr	r3, [pc, #660]	; (800130c <send+0x2d4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4ba4      	ldr	r3, [pc, #656]	; (8001310 <send+0x2d8>)
 800107e:	5c59      	ldrb	r1, [r3, r1]
 8001080:	4ba4      	ldr	r3, [pc, #656]	; (8001314 <send+0x2dc>)
 8001082:	5499      	strb	r1, [r3, r2]
			i++;
 8001084:	4ba0      	ldr	r3, [pc, #640]	; (8001308 <send+0x2d0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b9e      	ldr	r3, [pc, #632]	; (8001308 <send+0x2d0>)
 800108e:	701a      	strb	r2, [r3, #0]
		for(j=0;j<11;j++)
 8001090:	4b9e      	ldr	r3, [pc, #632]	; (800130c <send+0x2d4>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b9c      	ldr	r3, [pc, #624]	; (800130c <send+0x2d4>)
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	4b9b      	ldr	r3, [pc, #620]	; (800130c <send+0x2d4>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b0a      	cmp	r3, #10
 80010a2:	d9e5      	bls.n	8001070 <send+0x38>

		}

		if(txbuf[1]==0x50)
 80010a4:	4b9b      	ldr	r3, [pc, #620]	; (8001314 <send+0x2dc>)
 80010a6:	785b      	ldrb	r3, [r3, #1]
 80010a8:	2b50      	cmp	r3, #80	; 0x50
 80010aa:	d12a      	bne.n	8001102 <send+0xca>
		{
			HAL_UART_Transmit(&huart3,(uint8_t*)tbuffer,sprintf(tbuffer,"Year:%d Month:%d Day:%d Hour:%d Minute:%d Second:%d Milisecond:%d ",txbuf[2],txbuf[3],txbuf[4],txbuf[5],txbuf[6],txbuf[7],(txbuf[9]<<8 | txbuf[8])),1000);
 80010ac:	4b99      	ldr	r3, [pc, #612]	; (8001314 <send+0x2dc>)
 80010ae:	789b      	ldrb	r3, [r3, #2]
 80010b0:	461e      	mov	r6, r3
 80010b2:	4b98      	ldr	r3, [pc, #608]	; (8001314 <send+0x2dc>)
 80010b4:	78db      	ldrb	r3, [r3, #3]
 80010b6:	469c      	mov	ip, r3
 80010b8:	4b96      	ldr	r3, [pc, #600]	; (8001314 <send+0x2dc>)
 80010ba:	791b      	ldrb	r3, [r3, #4]
 80010bc:	4619      	mov	r1, r3
 80010be:	4b95      	ldr	r3, [pc, #596]	; (8001314 <send+0x2dc>)
 80010c0:	795b      	ldrb	r3, [r3, #5]
 80010c2:	4618      	mov	r0, r3
 80010c4:	4b93      	ldr	r3, [pc, #588]	; (8001314 <send+0x2dc>)
 80010c6:	799b      	ldrb	r3, [r3, #6]
 80010c8:	461c      	mov	r4, r3
 80010ca:	4b92      	ldr	r3, [pc, #584]	; (8001314 <send+0x2dc>)
 80010cc:	79db      	ldrb	r3, [r3, #7]
 80010ce:	461d      	mov	r5, r3
 80010d0:	4b90      	ldr	r3, [pc, #576]	; (8001314 <send+0x2dc>)
 80010d2:	7a5b      	ldrb	r3, [r3, #9]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	4a8f      	ldr	r2, [pc, #572]	; (8001314 <send+0x2dc>)
 80010d8:	7a12      	ldrb	r2, [r2, #8]
 80010da:	4313      	orrs	r3, r2
 80010dc:	9304      	str	r3, [sp, #16]
 80010de:	9503      	str	r5, [sp, #12]
 80010e0:	9402      	str	r4, [sp, #8]
 80010e2:	9001      	str	r0, [sp, #4]
 80010e4:	9100      	str	r1, [sp, #0]
 80010e6:	4663      	mov	r3, ip
 80010e8:	4632      	mov	r2, r6
 80010ea:	498b      	ldr	r1, [pc, #556]	; (8001318 <send+0x2e0>)
 80010ec:	488b      	ldr	r0, [pc, #556]	; (800131c <send+0x2e4>)
 80010ee:	f007 fa93 	bl	8008618 <siprintf>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	4988      	ldr	r1, [pc, #544]	; (800131c <send+0x2e4>)
 80010fc:	4888      	ldr	r0, [pc, #544]	; (8001320 <send+0x2e8>)
 80010fe:	f004 fe96 	bl	8005e2e <HAL_UART_Transmit>

		}

		if(txbuf[1]==0x51)
 8001102:	4b84      	ldr	r3, [pc, #528]	; (8001314 <send+0x2dc>)
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	2b51      	cmp	r3, #81	; 0x51
 8001108:	f040 80c2 	bne.w	8001290 <send+0x258>
		{
			a=0;b=0;
 800110c:	4b85      	ldr	r3, [pc, #532]	; (8001324 <send+0x2ec>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	4985      	ldr	r1, [pc, #532]	; (8001328 <send+0x2f0>)
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e9c1 2300 	strd	r2, r3, [r1]
			a = txbuf[3]<<8 | txbuf[2];
 8001120:	4b7c      	ldr	r3, [pc, #496]	; (8001314 <send+0x2dc>)
 8001122:	78db      	ldrb	r3, [r3, #3]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b25a      	sxtb	r2, r3
 8001128:	4b7a      	ldr	r3, [pc, #488]	; (8001314 <send+0x2dc>)
 800112a:	789b      	ldrb	r3, [r3, #2]
 800112c:	b25b      	sxtb	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b25b      	sxtb	r3, r3
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b7b      	ldr	r3, [pc, #492]	; (8001324 <send+0x2ec>)
 8001136:	701a      	strb	r2, [r3, #0]
			b = (double)a / 32768;
 8001138:	4b7a      	ldr	r3, [pc, #488]	; (8001324 <send+0x2ec>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f9e1 	bl	8000504 <__aeabi_ui2d>
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	4b79      	ldr	r3, [pc, #484]	; (800132c <send+0x2f4>)
 8001148:	f7ff fb80 	bl	800084c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4975      	ldr	r1, [pc, #468]	; (8001328 <send+0x2f0>)
 8001152:	e9c1 2300 	strd	r2, r3, [r1]
			c = b*156.8;
 8001156:	4b74      	ldr	r3, [pc, #464]	; (8001328 <send+0x2f0>)
 8001158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800115c:	a368      	add	r3, pc, #416	; (adr r3, 8001300 <send+0x2c8>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fa49 	bl	80005f8 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4971      	ldr	r1, [pc, #452]	; (8001330 <send+0x2f8>)
 800116c:	e9c1 2300 	strd	r2, r3, [r1]

			a=0;b=0;
 8001170:	4b6c      	ldr	r3, [pc, #432]	; (8001324 <send+0x2ec>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	496c      	ldr	r1, [pc, #432]	; (8001328 <send+0x2f0>)
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	e9c1 2300 	strd	r2, r3, [r1]
			a = txbuf[5]<<8 | txbuf[4];
 8001184:	4b63      	ldr	r3, [pc, #396]	; (8001314 <send+0x2dc>)
 8001186:	795b      	ldrb	r3, [r3, #5]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b25a      	sxtb	r2, r3
 800118c:	4b61      	ldr	r3, [pc, #388]	; (8001314 <send+0x2dc>)
 800118e:	791b      	ldrb	r3, [r3, #4]
 8001190:	b25b      	sxtb	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b25b      	sxtb	r3, r3
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b62      	ldr	r3, [pc, #392]	; (8001324 <send+0x2ec>)
 800119a:	701a      	strb	r2, [r3, #0]
			b = (double)a / 32768;
 800119c:	4b61      	ldr	r3, [pc, #388]	; (8001324 <send+0x2ec>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9af 	bl	8000504 <__aeabi_ui2d>
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b60      	ldr	r3, [pc, #384]	; (800132c <send+0x2f4>)
 80011ac:	f7ff fb4e 	bl	800084c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	495c      	ldr	r1, [pc, #368]	; (8001328 <send+0x2f0>)
 80011b6:	e9c1 2300 	strd	r2, r3, [r1]
			d = b*156.8;
 80011ba:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <send+0x2f0>)
 80011bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c0:	a34f      	add	r3, pc, #316	; (adr r3, 8001300 <send+0x2c8>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fa17 	bl	80005f8 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4959      	ldr	r1, [pc, #356]	; (8001334 <send+0x2fc>)
 80011d0:	e9c1 2300 	strd	r2, r3, [r1]

			a=0;b=0;
 80011d4:	4b53      	ldr	r3, [pc, #332]	; (8001324 <send+0x2ec>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	4953      	ldr	r1, [pc, #332]	; (8001328 <send+0x2f0>)
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	e9c1 2300 	strd	r2, r3, [r1]
			a = txbuf[7]<<8 | txbuf[6];
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <send+0x2dc>)
 80011ea:	79db      	ldrb	r3, [r3, #7]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b25a      	sxtb	r2, r3
 80011f0:	4b48      	ldr	r3, [pc, #288]	; (8001314 <send+0x2dc>)
 80011f2:	799b      	ldrb	r3, [r3, #6]
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b49      	ldr	r3, [pc, #292]	; (8001324 <send+0x2ec>)
 80011fe:	701a      	strb	r2, [r3, #0]
			b = (double)a / 32768;
 8001200:	4b48      	ldr	r3, [pc, #288]	; (8001324 <send+0x2ec>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f97d 	bl	8000504 <__aeabi_ui2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b47      	ldr	r3, [pc, #284]	; (800132c <send+0x2f4>)
 8001210:	f7ff fb1c 	bl	800084c <__aeabi_ddiv>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4943      	ldr	r1, [pc, #268]	; (8001328 <send+0x2f0>)
 800121a:	e9c1 2300 	strd	r2, r3, [r1]
			e = b*156.8;
 800121e:	4b42      	ldr	r3, [pc, #264]	; (8001328 <send+0x2f0>)
 8001220:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001224:	a336      	add	r3, pc, #216	; (adr r3, 8001300 <send+0x2c8>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9e5 	bl	80005f8 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4941      	ldr	r1, [pc, #260]	; (8001338 <send+0x300>)
 8001234:	e9c1 2300 	strd	r2, r3, [r1]

			HAL_UART_Transmit(&huart3,(uint8_t*)tbuffer,sprintf(tbuffer,"Ax:%f Ay:%f Az:%f Temperature:%d\n",c,d,e,((txbuf[9]<<8 | txbuf[8])/100)),1000);
 8001238:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <send+0x2f8>)
 800123a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <send+0x2fc>)
 8001240:	ed93 7b00 	vldr	d7, [r3]
 8001244:	493c      	ldr	r1, [pc, #240]	; (8001338 <send+0x300>)
 8001246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800124a:	4e32      	ldr	r6, [pc, #200]	; (8001314 <send+0x2dc>)
 800124c:	7a76      	ldrb	r6, [r6, #9]
 800124e:	0236      	lsls	r6, r6, #8
 8001250:	4b30      	ldr	r3, [pc, #192]	; (8001314 <send+0x2dc>)
 8001252:	f893 c008 	ldrb.w	ip, [r3, #8]
 8001256:	ea46 060c 	orr.w	r6, r6, ip
 800125a:	4b38      	ldr	r3, [pc, #224]	; (800133c <send+0x304>)
 800125c:	fb83 3c06 	smull	r3, ip, r3, r6
 8001260:	ea4f 1c6c 	mov.w	ip, ip, asr #5
 8001264:	17f6      	asrs	r6, r6, #31
 8001266:	ebac 0606 	sub.w	r6, ip, r6
 800126a:	9604      	str	r6, [sp, #16]
 800126c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001270:	ed8d 7b00 	vstr	d7, [sp]
 8001274:	4622      	mov	r2, r4
 8001276:	462b      	mov	r3, r5
 8001278:	4931      	ldr	r1, [pc, #196]	; (8001340 <send+0x308>)
 800127a:	4828      	ldr	r0, [pc, #160]	; (800131c <send+0x2e4>)
 800127c:	f007 f9cc 	bl	8008618 <siprintf>
 8001280:	4603      	mov	r3, r0
 8001282:	b29a      	uxth	r2, r3
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	4924      	ldr	r1, [pc, #144]	; (800131c <send+0x2e4>)
 800128a:	4825      	ldr	r0, [pc, #148]	; (8001320 <send+0x2e8>)
 800128c:	f004 fdcf 	bl	8005e2e <HAL_UART_Transmit>

		}

		if(txbuf[1]==0x52)
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <send+0x2dc>)
 8001292:	785b      	ldrb	r3, [r3, #1]
 8001294:	2b52      	cmp	r3, #82	; 0x52
 8001296:	f040 80ea 	bne.w	800146e <send+0x436>
		{
			a=0;b=0;
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <send+0x2ec>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	4921      	ldr	r1, [pc, #132]	; (8001328 <send+0x2f0>)
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	e9c1 2300 	strd	r2, r3, [r1]
			a = txbuf[3]<<8 | txbuf[2];
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <send+0x2dc>)
 80012b0:	78db      	ldrb	r3, [r3, #3]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b25a      	sxtb	r2, r3
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <send+0x2dc>)
 80012b8:	789b      	ldrb	r3, [r3, #2]
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <send+0x2ec>)
 80012c4:	701a      	strb	r2, [r3, #0]
			b = (double)a / 32768;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <send+0x2ec>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f91a 	bl	8000504 <__aeabi_ui2d>
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <send+0x2f4>)
 80012d6:	f7ff fab9 	bl	800084c <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4912      	ldr	r1, [pc, #72]	; (8001328 <send+0x2f0>)
 80012e0:	e9c1 2300 	strd	r2, r3, [r1]
			c = b*2000;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <send+0x2f0>)
 80012e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <send+0x30c>)
 80012f0:	f7ff f982 	bl	80005f8 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	e026      	b.n	8001348 <send+0x310>
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	9999999a 	.word	0x9999999a
 8001304:	40639999 	.word	0x40639999
 8001308:	20000572 	.word	0x20000572
 800130c:	20000573 	.word	0x20000573
 8001310:	20000484 	.word	0x20000484
 8001314:	20000564 	.word	0x20000564
 8001318:	0800c000 	.word	0x0800c000
 800131c:	200004fc 	.word	0x200004fc
 8001320:	200003c4 	.word	0x200003c4
 8001324:	20000574 	.word	0x20000574
 8001328:	20000578 	.word	0x20000578
 800132c:	40e00000 	.word	0x40e00000
 8001330:	20000580 	.word	0x20000580
 8001334:	20000588 	.word	0x20000588
 8001338:	20000590 	.word	0x20000590
 800133c:	51eb851f 	.word	0x51eb851f
 8001340:	0800c044 	.word	0x0800c044
 8001344:	409f4000 	.word	0x409f4000
 8001348:	49a7      	ldr	r1, [pc, #668]	; (80015e8 <send+0x5b0>)
 800134a:	e9c1 2300 	strd	r2, r3, [r1]

			a=0;b=0;
 800134e:	4ba7      	ldr	r3, [pc, #668]	; (80015ec <send+0x5b4>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	49a6      	ldr	r1, [pc, #664]	; (80015f0 <send+0x5b8>)
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	e9c1 2300 	strd	r2, r3, [r1]
			a = txbuf[5]<<8 | txbuf[4];
 8001362:	4ba4      	ldr	r3, [pc, #656]	; (80015f4 <send+0x5bc>)
 8001364:	795b      	ldrb	r3, [r3, #5]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b25a      	sxtb	r2, r3
 800136a:	4ba2      	ldr	r3, [pc, #648]	; (80015f4 <send+0x5bc>)
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	b25b      	sxtb	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b25b      	sxtb	r3, r3
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b9d      	ldr	r3, [pc, #628]	; (80015ec <send+0x5b4>)
 8001378:	701a      	strb	r2, [r3, #0]
			b = (double)a / 32768;
 800137a:	4b9c      	ldr	r3, [pc, #624]	; (80015ec <send+0x5b4>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8c0 	bl	8000504 <__aeabi_ui2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b9b      	ldr	r3, [pc, #620]	; (80015f8 <send+0x5c0>)
 800138a:	f7ff fa5f 	bl	800084c <__aeabi_ddiv>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4997      	ldr	r1, [pc, #604]	; (80015f0 <send+0x5b8>)
 8001394:	e9c1 2300 	strd	r2, r3, [r1]
			d = b*2000;
 8001398:	4b95      	ldr	r3, [pc, #596]	; (80015f0 <send+0x5b8>)
 800139a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b96      	ldr	r3, [pc, #600]	; (80015fc <send+0x5c4>)
 80013a4:	f7ff f928 	bl	80005f8 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4994      	ldr	r1, [pc, #592]	; (8001600 <send+0x5c8>)
 80013ae:	e9c1 2300 	strd	r2, r3, [r1]

			a=0;b=0;
 80013b2:	4b8e      	ldr	r3, [pc, #568]	; (80015ec <send+0x5b4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	498d      	ldr	r1, [pc, #564]	; (80015f0 <send+0x5b8>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	e9c1 2300 	strd	r2, r3, [r1]
			a = txbuf[7]<<8 | txbuf[6];
 80013c6:	4b8b      	ldr	r3, [pc, #556]	; (80015f4 <send+0x5bc>)
 80013c8:	79db      	ldrb	r3, [r3, #7]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <send+0x5bc>)
 80013d0:	799b      	ldrb	r3, [r3, #6]
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b84      	ldr	r3, [pc, #528]	; (80015ec <send+0x5b4>)
 80013dc:	701a      	strb	r2, [r3, #0]
			b = (double)a / 32768;
 80013de:	4b83      	ldr	r3, [pc, #524]	; (80015ec <send+0x5b4>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f88e 	bl	8000504 <__aeabi_ui2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b82      	ldr	r3, [pc, #520]	; (80015f8 <send+0x5c0>)
 80013ee:	f7ff fa2d 	bl	800084c <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	497e      	ldr	r1, [pc, #504]	; (80015f0 <send+0x5b8>)
 80013f8:	e9c1 2300 	strd	r2, r3, [r1]
			e = b*2000;
 80013fc:	4b7c      	ldr	r3, [pc, #496]	; (80015f0 <send+0x5b8>)
 80013fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <send+0x5c4>)
 8001408:	f7ff f8f6 	bl	80005f8 <__aeabi_dmul>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	497c      	ldr	r1, [pc, #496]	; (8001604 <send+0x5cc>)
 8001412:	e9c1 2300 	strd	r2, r3, [r1]

			HAL_UART_Transmit(&huart3,(uint8_t*)tbuffer,sprintf(tbuffer,"wx:%f wy:%f wz:%f Temperature:%d\n",c,d,e,((txbuf[9]<<8 | txbuf[8])/100)),1000);
 8001416:	4b74      	ldr	r3, [pc, #464]	; (80015e8 <send+0x5b0>)
 8001418:	e9d3 4500 	ldrd	r4, r5, [r3]
 800141c:	4b78      	ldr	r3, [pc, #480]	; (8001600 <send+0x5c8>)
 800141e:	ed93 7b00 	vldr	d7, [r3]
 8001422:	4978      	ldr	r1, [pc, #480]	; (8001604 <send+0x5cc>)
 8001424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001428:	4e72      	ldr	r6, [pc, #456]	; (80015f4 <send+0x5bc>)
 800142a:	7a76      	ldrb	r6, [r6, #9]
 800142c:	0236      	lsls	r6, r6, #8
 800142e:	4b71      	ldr	r3, [pc, #452]	; (80015f4 <send+0x5bc>)
 8001430:	f893 c008 	ldrb.w	ip, [r3, #8]
 8001434:	ea46 060c 	orr.w	r6, r6, ip
 8001438:	4b73      	ldr	r3, [pc, #460]	; (8001608 <send+0x5d0>)
 800143a:	fb83 3c06 	smull	r3, ip, r3, r6
 800143e:	ea4f 1c6c 	mov.w	ip, ip, asr #5
 8001442:	17f6      	asrs	r6, r6, #31
 8001444:	ebac 0606 	sub.w	r6, ip, r6
 8001448:	9604      	str	r6, [sp, #16]
 800144a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800144e:	ed8d 7b00 	vstr	d7, [sp]
 8001452:	4622      	mov	r2, r4
 8001454:	462b      	mov	r3, r5
 8001456:	496d      	ldr	r1, [pc, #436]	; (800160c <send+0x5d4>)
 8001458:	486d      	ldr	r0, [pc, #436]	; (8001610 <send+0x5d8>)
 800145a:	f007 f8dd 	bl	8008618 <siprintf>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	496a      	ldr	r1, [pc, #424]	; (8001610 <send+0x5d8>)
 8001468:	486a      	ldr	r0, [pc, #424]	; (8001614 <send+0x5dc>)
 800146a:	f004 fce0 	bl	8005e2e <HAL_UART_Transmit>

		}

		if(txbuf[1]==0x53)
 800146e:	4b61      	ldr	r3, [pc, #388]	; (80015f4 <send+0x5bc>)
 8001470:	785b      	ldrb	r3, [r3, #1]
 8001472:	2b53      	cmp	r3, #83	; 0x53
 8001474:	f040 80d8 	bne.w	8001628 <send+0x5f0>
		{
			a=0;b=0;
 8001478:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <send+0x5b4>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	495c      	ldr	r1, [pc, #368]	; (80015f0 <send+0x5b8>)
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9c1 2300 	strd	r2, r3, [r1]
			a = txbuf[3]<<8 | txbuf[2];
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <send+0x5bc>)
 800148e:	78db      	ldrb	r3, [r3, #3]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b25a      	sxtb	r2, r3
 8001494:	4b57      	ldr	r3, [pc, #348]	; (80015f4 <send+0x5bc>)
 8001496:	789b      	ldrb	r3, [r3, #2]
 8001498:	b25b      	sxtb	r3, r3
 800149a:	4313      	orrs	r3, r2
 800149c:	b25b      	sxtb	r3, r3
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b52      	ldr	r3, [pc, #328]	; (80015ec <send+0x5b4>)
 80014a2:	701a      	strb	r2, [r3, #0]
			b = (double)a / 32768;
 80014a4:	4b51      	ldr	r3, [pc, #324]	; (80015ec <send+0x5b4>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f82b 	bl	8000504 <__aeabi_ui2d>
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <send+0x5c0>)
 80014b4:	f7ff f9ca 	bl	800084c <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	494c      	ldr	r1, [pc, #304]	; (80015f0 <send+0x5b8>)
 80014be:	e9c1 2300 	strd	r2, r3, [r1]
			c = b*180;
 80014c2:	4b4b      	ldr	r3, [pc, #300]	; (80015f0 <send+0x5b8>)
 80014c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b52      	ldr	r3, [pc, #328]	; (8001618 <send+0x5e0>)
 80014ce:	f7ff f893 	bl	80005f8 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4944      	ldr	r1, [pc, #272]	; (80015e8 <send+0x5b0>)
 80014d8:	e9c1 2300 	strd	r2, r3, [r1]

			a=0;b=0;
 80014dc:	4b43      	ldr	r3, [pc, #268]	; (80015ec <send+0x5b4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	4943      	ldr	r1, [pc, #268]	; (80015f0 <send+0x5b8>)
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c1 2300 	strd	r2, r3, [r1]
			a = txbuf[5]<<8 | txbuf[4];
 80014f0:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <send+0x5bc>)
 80014f2:	795b      	ldrb	r3, [r3, #5]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	b25a      	sxtb	r2, r3
 80014f8:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <send+0x5bc>)
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b25b      	sxtb	r3, r3
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b39      	ldr	r3, [pc, #228]	; (80015ec <send+0x5b4>)
 8001506:	701a      	strb	r2, [r3, #0]
			b = (double)a / 32768;
 8001508:	4b38      	ldr	r3, [pc, #224]	; (80015ec <send+0x5b4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fff9 	bl	8000504 <__aeabi_ui2d>
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <send+0x5c0>)
 8001518:	f7ff f998 	bl	800084c <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4933      	ldr	r1, [pc, #204]	; (80015f0 <send+0x5b8>)
 8001522:	e9c1 2300 	strd	r2, r3, [r1]
			d = b*180;
 8001526:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <send+0x5b8>)
 8001528:	e9d3 0100 	ldrd	r0, r1, [r3]
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	4b39      	ldr	r3, [pc, #228]	; (8001618 <send+0x5e0>)
 8001532:	f7ff f861 	bl	80005f8 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4931      	ldr	r1, [pc, #196]	; (8001600 <send+0x5c8>)
 800153c:	e9c1 2300 	strd	r2, r3, [r1]

			a=0;b=0;
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <send+0x5b4>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	492a      	ldr	r1, [pc, #168]	; (80015f0 <send+0x5b8>)
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	e9c1 2300 	strd	r2, r3, [r1]
			a = txbuf[7]<<8 | txbuf[6];
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <send+0x5bc>)
 8001556:	79db      	ldrb	r3, [r3, #7]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b25a      	sxtb	r2, r3
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <send+0x5bc>)
 800155e:	799b      	ldrb	r3, [r3, #6]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b25b      	sxtb	r3, r3
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <send+0x5b4>)
 800156a:	701a      	strb	r2, [r3, #0]
			b = (double)a / 32768;
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <send+0x5b4>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ffc7 	bl	8000504 <__aeabi_ui2d>
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <send+0x5c0>)
 800157c:	f7ff f966 	bl	800084c <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	491a      	ldr	r1, [pc, #104]	; (80015f0 <send+0x5b8>)
 8001586:	e9c1 2300 	strd	r2, r3, [r1]
			e = b*180;
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <send+0x5b8>)
 800158c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <send+0x5e0>)
 8001596:	f7ff f82f 	bl	80005f8 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4919      	ldr	r1, [pc, #100]	; (8001604 <send+0x5cc>)
 80015a0:	e9c1 2300 	strd	r2, r3, [r1]

			HAL_UART_Transmit(&huart3,(uint8_t*)tbuffer,sprintf(tbuffer,"Roll:%f Pitch:%f Yaw:%f Version:%d\n",c,d,e,((txbuf[9]<<8) | txbuf[8])),1000);
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <send+0x5b0>)
 80015a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <send+0x5c8>)
 80015ac:	ed93 7b00 	vldr	d7, [r3]
 80015b0:	4914      	ldr	r1, [pc, #80]	; (8001604 <send+0x5cc>)
 80015b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015b6:	4e0f      	ldr	r6, [pc, #60]	; (80015f4 <send+0x5bc>)
 80015b8:	7a76      	ldrb	r6, [r6, #9]
 80015ba:	0236      	lsls	r6, r6, #8
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <send+0x5bc>)
 80015be:	f893 c008 	ldrb.w	ip, [r3, #8]
 80015c2:	ea46 060c 	orr.w	r6, r6, ip
 80015c6:	9604      	str	r6, [sp, #16]
 80015c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015cc:	ed8d 7b00 	vstr	d7, [sp]
 80015d0:	4622      	mov	r2, r4
 80015d2:	462b      	mov	r3, r5
 80015d4:	4911      	ldr	r1, [pc, #68]	; (800161c <send+0x5e4>)
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <send+0x5d8>)
 80015d8:	f007 f81e 	bl	8008618 <siprintf>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e4:	e01c      	b.n	8001620 <send+0x5e8>
 80015e6:	bf00      	nop
 80015e8:	20000580 	.word	0x20000580
 80015ec:	20000574 	.word	0x20000574
 80015f0:	20000578 	.word	0x20000578
 80015f4:	20000564 	.word	0x20000564
 80015f8:	40e00000 	.word	0x40e00000
 80015fc:	409f4000 	.word	0x409f4000
 8001600:	20000588 	.word	0x20000588
 8001604:	20000590 	.word	0x20000590
 8001608:	51eb851f 	.word	0x51eb851f
 800160c:	0800c068 	.word	0x0800c068
 8001610:	200004fc 	.word	0x200004fc
 8001614:	200003c4 	.word	0x200003c4
 8001618:	40668000 	.word	0x40668000
 800161c:	0800c08c 	.word	0x0800c08c
 8001620:	490a      	ldr	r1, [pc, #40]	; (800164c <send+0x614>)
 8001622:	480b      	ldr	r0, [pc, #44]	; (8001650 <send+0x618>)
 8001624:	f004 fc03 	bl	8005e2e <HAL_UART_Transmit>

		}

		j=0;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <send+0x61c>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
	}

	if (i>=110)
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <send+0x620>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b6d      	cmp	r3, #109	; 0x6d
 8001634:	d902      	bls.n	800163c <send+0x604>
	{
		i=0;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <send+0x620>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
	}

	flagsend = 0;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <send+0x624>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]

}
 8001642:	bf00      	nop
 8001644:	3704      	adds	r7, #4
 8001646:	46bd      	mov	sp, r7
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800164a:	bf00      	nop
 800164c:	200004fc 	.word	0x200004fc
 8001650:	200003c4 	.word	0x200003c4
 8001654:	20000573 	.word	0x20000573
 8001658:	20000572 	.word	0x20000572
 800165c:	20000561 	.word	0x20000561

08001660 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d112      	bne.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		if (timeout==2)
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d108      	bne.n	800168c <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			flagconfigbuf=1;
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
			uart_lenght=0;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 8001686:	4816      	ldr	r0, [pc, #88]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001688:	f004 f8f4 	bl	8005874 <HAL_TIM_Base_Stop_IT>
		}
		timeout++;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001696:	701a      	strb	r2, [r3, #0]

	}

	if (htim->Instance==TIM6)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d111      	bne.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		count++;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016ac:	801a      	strh	r2, [r3, #0]

		if(count == 999)
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d105      	bne.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			flagsend = 1;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
			count = 0;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40001400 	.word	0x40001400
 80016d4:	2000056f 	.word	0x2000056f
 80016d8:	20000560 	.word	0x20000560
 80016dc:	20000409 	.word	0x20000409
 80016e0:	20000338 	.word	0x20000338
 80016e4:	40001000 	.word	0x40001000
 80016e8:	20000570 	.word	0x20000570
 80016ec:	20000561 	.word	0x20000561

080016f0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	if (uart_lenght==0) {
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_UART_RxCpltCallback+0x68>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_UART_RxCpltCallback+0x1c>
		HAL_TIM_Base_Start_IT(&htim7);
 8001700:	4816      	ldr	r0, [pc, #88]	; (800175c <HAL_UART_RxCpltCallback+0x6c>)
 8001702:	f004 f847 	bl	8005794 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim6);
 8001706:	4816      	ldr	r0, [pc, #88]	; (8001760 <HAL_UART_RxCpltCallback+0x70>)
 8001708:	f004 f844 	bl	8005794 <HAL_TIM_Base_Start_IT>
	}
	rxbuf[uart_lenght]=uart_one_byte;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_UART_RxCpltCallback+0x68>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_UART_RxCpltCallback+0x74>)
 8001714:	7819      	ldrb	r1, [r3, #0]
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_UART_RxCpltCallback+0x78>)
 8001718:	5499      	strb	r1, [r3, r2]
	uart_lenght++;
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_UART_RxCpltCallback+0x68>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_UART_RxCpltCallback+0x68>)
 8001724:	701a      	strb	r2, [r3, #0]
	timeout=0;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_UART_RxCpltCallback+0x7c>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
	if(uart_lenght>111)
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_UART_RxCpltCallback+0x68>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b6f      	cmp	r3, #111	; 0x6f
 8001732:	d907      	bls.n	8001744 <HAL_UART_RxCpltCallback+0x54>
	{
		uart_lenght=0;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_UART_RxCpltCallback+0x68>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
		memset(rxbuf,'\0',sizeof(rxbuf));
 800173a:	2278      	movs	r2, #120	; 0x78
 800173c:	2100      	movs	r1, #0
 800173e:	480a      	ldr	r0, [pc, #40]	; (8001768 <HAL_UART_RxCpltCallback+0x78>)
 8001740:	f005 fff2 	bl	8007728 <memset>
	}
	HAL_UART_Receive_IT(&huart2, &uart_one_byte, 1);
 8001744:	2201      	movs	r2, #1
 8001746:	4907      	ldr	r1, [pc, #28]	; (8001764 <HAL_UART_RxCpltCallback+0x74>)
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <HAL_UART_RxCpltCallback+0x80>)
 800174a:	f004 fc02 	bl	8005f52 <HAL_UART_Receive_IT>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000409 	.word	0x20000409
 800175c:	20000338 	.word	0x20000338
 8001760:	200002f0 	.word	0x200002f0
 8001764:	20000408 	.word	0x20000408
 8001768:	2000040c 	.word	0x2000040c
 800176c:	2000056f 	.word	0x2000056f
 8001770:	20000380 	.word	0x20000380

08001774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001778:	f000 fe68 	bl	800244c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177c:	f000 f82a 	bl	80017d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001780:	f000 f9e6 	bl	8001b50 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001784:	f000 f890 	bl	80018a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001788:	f000 f8bc 	bl	8001904 <MX_I2S3_Init>
  MX_SPI1_Init();
 800178c:	f000 f8ea 	bl	8001964 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001790:	f000 f98a 	bl	8001aa8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001794:	f000 f952 	bl	8001a3c <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8001798:	f000 f9b0 	bl	8001afc <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800179c:	f000 f918 	bl	80019d0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &uart_one_byte, 1);
 80017a0:	2201      	movs	r2, #1
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <main+0x50>)
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <main+0x54>)
 80017a6:	f004 fbd4 	bl	8005f52 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flagconfigbuf==1)
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <main+0x58>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <main+0x42>
	  {
		 configbuf();
 80017b2:	f7ff fc21 	bl	8000ff8 <configbuf>

	  }


	  if (flagsend==1)
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <main+0x5c>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d1f5      	bne.n	80017aa <main+0x36>
	  {
		  send();
 80017be:	f7ff fc3b 	bl	8001038 <send>
	  if (flagconfigbuf==1)
 80017c2:	e7f2      	b.n	80017aa <main+0x36>
 80017c4:	20000408 	.word	0x20000408
 80017c8:	20000380 	.word	0x20000380
 80017cc:	20000560 	.word	0x20000560
 80017d0:	20000561 	.word	0x20000561

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b094      	sub	sp, #80	; 0x50
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0320 	add.w	r3, r7, #32
 80017de:	2230      	movs	r2, #48	; 0x30
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f005 ffa0 	bl	8007728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <SystemClock_Config+0xcc>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <SystemClock_Config+0xcc>)
 8001802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001806:	6413      	str	r3, [r2, #64]	; 0x40
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <SystemClock_Config+0xcc>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <SystemClock_Config+0xd0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a21      	ldr	r2, [pc, #132]	; (80018a4 <SystemClock_Config+0xd0>)
 800181e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <SystemClock_Config+0xd0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001830:	2301      	movs	r3, #1
 8001832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183a:	2302      	movs	r3, #2
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001844:	2308      	movs	r3, #8
 8001846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001848:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800184c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800184e:	2302      	movs	r3, #2
 8001850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001852:	2307      	movs	r3, #7
 8001854:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001856:	f107 0320 	add.w	r3, r7, #32
 800185a:	4618      	mov	r0, r3
 800185c:	f003 f8ea 	bl	8004a34 <HAL_RCC_OscConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001866:	f000 fa71 	bl	8001d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186a:	230f      	movs	r3, #15
 800186c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186e:	2302      	movs	r3, #2
 8001870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001876:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800187a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800187c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001880:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	2105      	movs	r1, #5
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fb4b 	bl	8004f24 <HAL_RCC_ClockConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001894:	f000 fa5a 	bl	8001d4c <Error_Handler>
  }
}
 8001898:	bf00      	nop
 800189a:	3750      	adds	r7, #80	; 0x50
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000

080018a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <MX_I2C1_Init+0x54>)
 80018b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <MX_I2C1_Init+0x58>)
 80018b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018e6:	f002 fac1 	bl	8003e6c <HAL_I2C_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018f0:	f000 fa2c 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200001fc 	.word	0x200001fc
 80018fc:	40005400 	.word	0x40005400
 8001900:	000186a0 	.word	0x000186a0

08001904 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <MX_I2S3_Init+0x54>)
 800190a:	4a14      	ldr	r2, [pc, #80]	; (800195c <MX_I2S3_Init+0x58>)
 800190c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_I2S3_Init+0x54>)
 8001910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001914:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <MX_I2S3_Init+0x54>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_I2S3_Init+0x54>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <MX_I2S3_Init+0x54>)
 8001924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001928:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <MX_I2S3_Init+0x54>)
 800192c:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <MX_I2S3_Init+0x5c>)
 800192e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_I2S3_Init+0x54>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <MX_I2S3_Init+0x54>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_I2S3_Init+0x54>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_I2S3_Init+0x54>)
 8001944:	f002 fbd6 	bl	80040f4 <HAL_I2S_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800194e:	f000 f9fd 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000250 	.word	0x20000250
 800195c:	40003c00 	.word	0x40003c00
 8001960:	00017700 	.word	0x00017700

08001964 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_SPI1_Init+0x64>)
 800196a:	4a18      	ldr	r2, [pc, #96]	; (80019cc <MX_SPI1_Init+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <MX_SPI1_Init+0x64>)
 8001970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001974:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_SPI1_Init+0x64>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_SPI1_Init+0x64>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_SPI1_Init+0x64>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_SPI1_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_SPI1_Init+0x64>)
 8001990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001994:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_SPI1_Init+0x64>)
 8001998:	2200      	movs	r2, #0
 800199a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <MX_SPI1_Init+0x64>)
 800199e:	2200      	movs	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_SPI1_Init+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <MX_SPI1_Init+0x64>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_SPI1_Init+0x64>)
 80019b0:	220a      	movs	r2, #10
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_SPI1_Init+0x64>)
 80019b6:	f003 fe15 	bl	80055e4 <HAL_SPI_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019c0:	f000 f9c4 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000298 	.word	0x20000298
 80019cc:	40013000 	.word	0x40013000

080019d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d6:	463b      	mov	r3, r7
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_TIM6_Init+0x64>)
 80019e0:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <MX_TIM6_Init+0x68>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <MX_TIM6_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_TIM6_Init+0x64>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80019f0:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <MX_TIM6_Init+0x64>)
 80019f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_TIM6_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019fe:	480d      	ldr	r0, [pc, #52]	; (8001a34 <MX_TIM6_Init+0x64>)
 8001a00:	f003 fe79 	bl	80056f6 <HAL_TIM_Base_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a0a:	f000 f99f 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a16:	463b      	mov	r3, r7
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <MX_TIM6_Init+0x64>)
 8001a1c:	f004 f92a 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a26:	f000 f991 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200002f0 	.word	0x200002f0
 8001a38:	40001000 	.word	0x40001000

08001a3c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a42:	463b      	mov	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_TIM7_Init+0x64>)
 8001a4c:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <MX_TIM7_Init+0x68>)
 8001a4e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9;
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MX_TIM7_Init+0x64>)
 8001a52:	2209      	movs	r2, #9
 8001a54:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_TIM7_Init+0x64>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1020;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_TIM7_Init+0x64>)
 8001a5e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001a62:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_TIM7_Init+0x64>)
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a6a:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <MX_TIM7_Init+0x64>)
 8001a6c:	f003 fe43 	bl	80056f6 <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a76:	f000 f969 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a82:	463b      	mov	r3, r7
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_TIM7_Init+0x64>)
 8001a88:	f004 f8f4 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a92:	f000 f95b 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000338 	.word	0x20000338
 8001aa4:	40001400 	.word	0x40001400

08001aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <MX_USART2_UART_Init+0x50>)
 8001ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	f004 f958 	bl	8005d94 <HAL_UART_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aea:	f000 f92f 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000380 	.word	0x20000380
 8001af8:	40004400 	.word	0x40004400

08001afc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_USART3_UART_Init+0x4c>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_USART3_UART_Init+0x50>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <MX_USART3_UART_Init+0x4c>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_USART3_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_USART3_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_USART3_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_USART3_UART_Init+0x4c>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_USART3_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_USART3_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_USART3_UART_Init+0x4c>)
 8001b34:	f004 f92e 	bl	8005d94 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b3e:	f000 f905 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200003c4 	.word	0x200003c4
 8001b4c:	40004800 	.word	0x40004800

08001b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	; 0x30
 8001b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	4b72      	ldr	r3, [pc, #456]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a71      	ldr	r2, [pc, #452]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	4b6b      	ldr	r3, [pc, #428]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a6a      	ldr	r2, [pc, #424]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b64      	ldr	r3, [pc, #400]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a63      	ldr	r2, [pc, #396]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b61      	ldr	r3, [pc, #388]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a5c      	ldr	r2, [pc, #368]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b5a      	ldr	r3, [pc, #360]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b56      	ldr	r3, [pc, #344]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a55      	ldr	r2, [pc, #340]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b4f      	ldr	r3, [pc, #316]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a4e      	ldr	r2, [pc, #312]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001bfc:	f043 0308 	orr.w	r3, r3, #8
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <MX_GPIO_Init+0x1e4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2108      	movs	r1, #8
 8001c12:	4849      	ldr	r0, [pc, #292]	; (8001d38 <MX_GPIO_Init+0x1e8>)
 8001c14:	f000 ffcc 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4847      	ldr	r0, [pc, #284]	; (8001d3c <MX_GPIO_Init+0x1ec>)
 8001c1e:	f000 ffc7 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c22:	2200      	movs	r2, #0
 8001c24:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001c28:	4845      	ldr	r0, [pc, #276]	; (8001d40 <MX_GPIO_Init+0x1f0>)
 8001c2a:	f000 ffc1 	bl	8002bb0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001c2e:	2308      	movs	r3, #8
 8001c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	483c      	ldr	r0, [pc, #240]	; (8001d38 <MX_GPIO_Init+0x1e8>)
 8001c46:	f000 fe17 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 031c 	add.w	r3, r7, #28
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4836      	ldr	r0, [pc, #216]	; (8001d3c <MX_GPIO_Init+0x1ec>)
 8001c62:	f000 fe09 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001c66:	2308      	movs	r3, #8
 8001c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c76:	2305      	movs	r3, #5
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	4619      	mov	r1, r3
 8001c80:	482e      	ldr	r0, [pc, #184]	; (8001d3c <MX_GPIO_Init+0x1ec>)
 8001c82:	f000 fdf9 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c8a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	482a      	ldr	r0, [pc, #168]	; (8001d44 <MX_GPIO_Init+0x1f4>)
 8001c9c:	f000 fdec 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4825      	ldr	r0, [pc, #148]	; (8001d48 <MX_GPIO_Init+0x1f8>)
 8001cb4:	f000 fde0 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cca:	2305      	movs	r3, #5
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	481c      	ldr	r0, [pc, #112]	; (8001d48 <MX_GPIO_Init+0x1f8>)
 8001cd6:	f000 fdcf 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001cda:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001cde:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4813      	ldr	r0, [pc, #76]	; (8001d40 <MX_GPIO_Init+0x1f0>)
 8001cf4:	f000 fdc0 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480d      	ldr	r0, [pc, #52]	; (8001d40 <MX_GPIO_Init+0x1f0>)
 8001d0c:	f000 fdb4 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001d10:	2302      	movs	r3, #2
 8001d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4619      	mov	r1, r3
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <MX_GPIO_Init+0x1e8>)
 8001d26:	f000 fda7 	bl	8002878 <HAL_GPIO_Init>

}
 8001d2a:	bf00      	nop
 8001d2c:	3730      	adds	r7, #48	; 0x30
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400

08001d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <Error_Handler+0x8>
	...

08001d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d96:	2007      	movs	r0, #7
 8001d98:	f000 fc9a 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <HAL_I2C_MspInit+0x84>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d12c      	bne.n	8001e24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001de6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dec:	2312      	movs	r3, #18
 8001dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	480c      	ldr	r0, [pc, #48]	; (8001e34 <HAL_I2C_MspInit+0x8c>)
 8001e04:	f000 fd38 	bl	8002878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e16:	6413      	str	r3, [r2, #64]	; 0x40
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40005400 	.word	0x40005400
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020400 	.word	0x40020400

08001e38 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08e      	sub	sp, #56	; 0x38
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a31      	ldr	r2, [pc, #196]	; (8001f28 <HAL_I2S_MspInit+0xf0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d15a      	bne.n	8001f1e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001e6c:	23c0      	movs	r3, #192	; 0xc0
 8001e6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e70:	2302      	movs	r3, #2
 8001e72:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fa73 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001e84:	f7ff ff62 	bl	8001d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_I2S_MspInit+0xf4>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <HAL_I2S_MspInit+0xf4>)
 8001e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e96:	6413      	str	r3, [r2, #64]	; 0x40
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_I2S_MspInit+0xf4>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_I2S_MspInit+0xf4>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <HAL_I2S_MspInit+0xf4>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_I2S_MspInit+0xf4>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_I2S_MspInit+0xf4>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_I2S_MspInit+0xf4>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed0:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_I2S_MspInit+0xf4>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001edc:	2310      	movs	r3, #16
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001eec:	2306      	movs	r3, #6
 8001eee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480e      	ldr	r0, [pc, #56]	; (8001f30 <HAL_I2S_MspInit+0xf8>)
 8001ef8:	f000 fcbe 	bl	8002878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001efc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f0e:	2306      	movs	r3, #6
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f16:	4619      	mov	r1, r3
 8001f18:	4806      	ldr	r0, [pc, #24]	; (8001f34 <HAL_I2S_MspInit+0xfc>)
 8001f1a:	f000 fcad 	bl	8002878 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3738      	adds	r7, #56	; 0x38
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40003c00 	.word	0x40003c00
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020800 	.word	0x40020800

08001f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_SPI_MspInit+0x84>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d12b      	bne.n	8001fb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001f92:	23e0      	movs	r3, #224	; 0xe0
 8001f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <HAL_SPI_MspInit+0x8c>)
 8001fae:	f000 fc63 	bl	8002878 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	; 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40013000 	.word	0x40013000
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020000 	.word	0x40020000

08001fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_TIM_Base_MspInit+0x80>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d116      	bne.n	8002008 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_TIM_Base_MspInit+0x84>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_TIM_Base_MspInit+0x84>)
 8001fe4:	f043 0310 	orr.w	r3, r3, #16
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_TIM_Base_MspInit+0x84>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2036      	movs	r0, #54	; 0x36
 8001ffc:	f000 fb73 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002000:	2036      	movs	r0, #54	; 0x36
 8002002:	f000 fb8c 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002006:	e01a      	b.n	800203e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a10      	ldr	r2, [pc, #64]	; (8002050 <HAL_TIM_Base_MspInit+0x88>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d115      	bne.n	800203e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_TIM_Base_MspInit+0x84>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <HAL_TIM_Base_MspInit+0x84>)
 800201c:	f043 0320 	orr.w	r3, r3, #32
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_TIM_Base_MspInit+0x84>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2037      	movs	r0, #55	; 0x37
 8002034:	f000 fb57 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002038:	2037      	movs	r0, #55	; 0x37
 800203a:	f000 fb70 	bl	800271e <HAL_NVIC_EnableIRQ>
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40001000 	.word	0x40001000
 800204c:	40023800 	.word	0x40023800
 8002050:	40001400 	.word	0x40001400

08002054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a46      	ldr	r2, [pc, #280]	; (800218c <HAL_UART_MspInit+0x138>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d134      	bne.n	80020e0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	4b45      	ldr	r3, [pc, #276]	; (8002190 <HAL_UART_MspInit+0x13c>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a44      	ldr	r2, [pc, #272]	; (8002190 <HAL_UART_MspInit+0x13c>)
 8002080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b42      	ldr	r3, [pc, #264]	; (8002190 <HAL_UART_MspInit+0x13c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <HAL_UART_MspInit+0x13c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a3d      	ldr	r2, [pc, #244]	; (8002190 <HAL_UART_MspInit+0x13c>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_UART_MspInit+0x13c>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020ae:	230c      	movs	r3, #12
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020be:	2307      	movs	r3, #7
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	4832      	ldr	r0, [pc, #200]	; (8002194 <HAL_UART_MspInit+0x140>)
 80020ca:	f000 fbd5 	bl	8002878 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2026      	movs	r0, #38	; 0x26
 80020d4:	f000 fb07 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020d8:	2026      	movs	r0, #38	; 0x26
 80020da:	f000 fb20 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020de:	e050      	b.n	8002182 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2c      	ldr	r2, [pc, #176]	; (8002198 <HAL_UART_MspInit+0x144>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d14b      	bne.n	8002182 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <HAL_UART_MspInit+0x13c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a27      	ldr	r2, [pc, #156]	; (8002190 <HAL_UART_MspInit+0x13c>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b25      	ldr	r3, [pc, #148]	; (8002190 <HAL_UART_MspInit+0x13c>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_UART_MspInit+0x13c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a20      	ldr	r2, [pc, #128]	; (8002190 <HAL_UART_MspInit+0x13c>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_UART_MspInit+0x13c>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_UART_MspInit+0x13c>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a19      	ldr	r2, [pc, #100]	; (8002190 <HAL_UART_MspInit+0x13c>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_UART_MspInit+0x13c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800213e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002150:	2307      	movs	r3, #7
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	4619      	mov	r1, r3
 800215a:	4810      	ldr	r0, [pc, #64]	; (800219c <HAL_UART_MspInit+0x148>)
 800215c:	f000 fb8c 	bl	8002878 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002172:	2307      	movs	r3, #7
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4808      	ldr	r0, [pc, #32]	; (80021a0 <HAL_UART_MspInit+0x14c>)
 800217e:	f000 fb7b 	bl	8002878 <HAL_GPIO_Init>
}
 8002182:	bf00      	nop
 8002184:	3730      	adds	r7, #48	; 0x30
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40004400 	.word	0x40004400
 8002190:	40023800 	.word	0x40023800
 8002194:	40020000 	.word	0x40020000
 8002198:	40004800 	.word	0x40004800
 800219c:	40020400 	.word	0x40020400
 80021a0:	40020c00 	.word	0x40020c00

080021a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <NMI_Handler+0x4>

080021aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <HardFault_Handler+0x4>

080021b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <MemManage_Handler+0x4>

080021b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <BusFault_Handler+0x4>

080021bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <UsageFault_Handler+0x4>

080021c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f0:	f000 f97e 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <USART2_IRQHandler+0x10>)
 80021fe:	f003 fed9 	bl	8005fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000380 	.word	0x20000380

0800220c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <TIM6_DAC_IRQHandler+0x10>)
 8002212:	f003 fb5e 	bl	80058d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200002f0 	.word	0x200002f0

08002220 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <TIM7_IRQHandler+0x10>)
 8002226:	f003 fb54 	bl	80058d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000338 	.word	0x20000338

08002234 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <OTG_FS_IRQHandler+0x10>)
 800223a:	f000 fcec 	bl	8002c16 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200005a0 	.word	0x200005a0

08002248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
	return 1;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_kill>:

int _kill(int pid, int sig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002262:	f005 fa21 	bl	80076a8 <__errno>
 8002266:	4603      	mov	r3, r0
 8002268:	2216      	movs	r2, #22
 800226a:	601a      	str	r2, [r3, #0]
	return -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_exit>:

void _exit (int status)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ffe7 	bl	8002258 <_kill>
	while (1) {}		/* Make sure we hang here */
 800228a:	e7fe      	b.n	800228a <_exit+0x12>

0800228c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e00a      	b.n	80022b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800229e:	f3af 8000 	nop.w
 80022a2:	4601      	mov	r1, r0
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	60ba      	str	r2, [r7, #8]
 80022aa:	b2ca      	uxtb	r2, r1
 80022ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dbf0      	blt.n	800229e <_read+0x12>
	}

return len;
 80022bc:	687b      	ldr	r3, [r7, #4]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	e009      	b.n	80022ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dbf1      	blt.n	80022d8 <_write+0x12>
	}
	return len;
 80022f4:	687b      	ldr	r3, [r7, #4]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_close>:

int _close(int file)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
	return -1;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002326:	605a      	str	r2, [r3, #4]
	return 0;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <_isatty>:

int _isatty(int file)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
	return 1;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
	return 0;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <_sbrk+0x5c>)
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <_sbrk+0x60>)
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <_sbrk+0x64>)
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <_sbrk+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d207      	bcs.n	80023a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002398:	f005 f986 	bl	80076a8 <__errno>
 800239c:	4603      	mov	r3, r0
 800239e:	220c      	movs	r2, #12
 80023a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e009      	b.n	80023bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <_sbrk+0x64>)
 80023b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20020000 	.word	0x20020000
 80023c8:	00000400 	.word	0x00000400
 80023cc:	20000598 	.word	0x20000598
 80023d0:	200008b8 	.word	0x200008b8

080023d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <SystemInit+0x20>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <SystemInit+0x20>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fe:	490e      	ldr	r1, [pc, #56]	; (8002438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800240c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002414:	4c0b      	ldr	r4, [pc, #44]	; (8002444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002422:	f7ff ffd7 	bl	80023d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002426:	f005 f945 	bl	80076b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242a:	f7ff f9a3 	bl	8001774 <main>
  bx  lr    
 800242e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002438:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800243c:	0800c57c 	.word	0x0800c57c
  ldr r2, =_sbss
 8002440:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002444:	200008b4 	.word	0x200008b4

08002448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC_IRQHandler>
	...

0800244c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_Init+0x40>)
 8002456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <HAL_Init+0x40>)
 8002462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_Init+0x40>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_Init+0x40>)
 800246e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002474:	2003      	movs	r0, #3
 8002476:	f000 f92b 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247a:	2000      	movs	r0, #0
 800247c:	f000 f808 	bl	8002490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002480:	f7ff fc6a 	bl	8001d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00

08002490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x54>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x58>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f943 	bl	800273a <HAL_SYSTICK_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00e      	b.n	80024dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d80a      	bhi.n	80024da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c4:	2200      	movs	r2, #0
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f000 f90b 	bl	80026e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d0:	4a06      	ldr	r2, [pc, #24]	; (80024ec <HAL_InitTick+0x5c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000008 	.word	0x20000008
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000008 	.word	0x20000008
 8002514:	2000059c 	.word	0x2000059c

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	2000059c 	.word	0x2000059c

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db0a      	blt.n	80025fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	490c      	ldr	r1, [pc, #48]	; (800261c <__NVIC_SetPriority+0x4c>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	440b      	add	r3, r1
 80025f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f8:	e00a      	b.n	8002610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4908      	ldr	r1, [pc, #32]	; (8002620 <__NVIC_SetPriority+0x50>)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3b04      	subs	r3, #4
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	440b      	add	r3, r1
 800260e:	761a      	strb	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f1c3 0307 	rsb	r3, r3, #7
 800263e:	2b04      	cmp	r3, #4
 8002640:	bf28      	it	cs
 8002642:	2304      	movcs	r3, #4
 8002644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3304      	adds	r3, #4
 800264a:	2b06      	cmp	r3, #6
 800264c:	d902      	bls.n	8002654 <NVIC_EncodePriority+0x30>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3b03      	subs	r3, #3
 8002652:	e000      	b.n	8002656 <NVIC_EncodePriority+0x32>
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	401a      	ands	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800266c:	f04f 31ff 	mov.w	r1, #4294967295
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43d9      	mvns	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	4313      	orrs	r3, r2
         );
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269c:	d301      	bcc.n	80026a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269e:	2301      	movs	r3, #1
 80026a0:	e00f      	b.n	80026c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <SysTick_Config+0x40>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026aa:	210f      	movs	r1, #15
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f7ff ff8e 	bl	80025d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <SysTick_Config+0x40>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <SysTick_Config+0x40>)
 80026bc:	2207      	movs	r2, #7
 80026be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	e000e010 	.word	0xe000e010

080026d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff29 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f8:	f7ff ff3e 	bl	8002578 <__NVIC_GetPriorityGrouping>
 80026fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f7ff ff8e 	bl	8002624 <NVIC_EncodePriority>
 8002708:	4602      	mov	r2, r0
 800270a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff5d 	bl	80025d0 <__NVIC_SetPriority>
}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff31 	bl	8002594 <__NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ffa2 	bl	800268c <SysTick_Config>
 8002748:	4603      	mov	r3, r0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002760:	f7ff feda 	bl	8002518 <HAL_GetTick>
 8002764:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d008      	beq.n	8002784 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e052      	b.n	800282a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0216 	bic.w	r2, r2, #22
 8002792:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <HAL_DMA_Abort+0x62>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0208 	bic.w	r2, r2, #8
 80027c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d4:	e013      	b.n	80027fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d6:	f7ff fe9f 	bl	8002518 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d90c      	bls.n	80027fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2203      	movs	r2, #3
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e015      	b.n	800282a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e4      	bne.n	80027d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	223f      	movs	r2, #63	; 0x3f
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d004      	beq.n	8002850 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e00c      	b.n	800286a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2205      	movs	r2, #5
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e16b      	b.n	8002b6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002894:	2201      	movs	r2, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f040 815a 	bne.w	8002b66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d005      	beq.n	80028ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d130      	bne.n	800292c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002900:	2201      	movs	r2, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 0201 	and.w	r2, r3, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b03      	cmp	r3, #3
 8002936:	d017      	beq.n	8002968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d123      	bne.n	80029bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	08da      	lsrs	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	220f      	movs	r2, #15
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0203 	and.w	r2, r3, #3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80b4 	beq.w	8002b66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b60      	ldr	r3, [pc, #384]	; (8002b84 <HAL_GPIO_Init+0x30c>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	4a5f      	ldr	r2, [pc, #380]	; (8002b84 <HAL_GPIO_Init+0x30c>)
 8002a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <HAL_GPIO_Init+0x30c>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1a:	4a5b      	ldr	r2, [pc, #364]	; (8002b88 <HAL_GPIO_Init+0x310>)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_GPIO_Init+0x314>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d02b      	beq.n	8002a9e <HAL_GPIO_Init+0x226>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a51      	ldr	r2, [pc, #324]	; (8002b90 <HAL_GPIO_Init+0x318>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d025      	beq.n	8002a9a <HAL_GPIO_Init+0x222>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a50      	ldr	r2, [pc, #320]	; (8002b94 <HAL_GPIO_Init+0x31c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <HAL_GPIO_Init+0x21e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4f      	ldr	r2, [pc, #316]	; (8002b98 <HAL_GPIO_Init+0x320>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d019      	beq.n	8002a92 <HAL_GPIO_Init+0x21a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4e      	ldr	r2, [pc, #312]	; (8002b9c <HAL_GPIO_Init+0x324>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0x216>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4d      	ldr	r2, [pc, #308]	; (8002ba0 <HAL_GPIO_Init+0x328>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_GPIO_Init+0x212>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4c      	ldr	r2, [pc, #304]	; (8002ba4 <HAL_GPIO_Init+0x32c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_Init+0x20e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4b      	ldr	r2, [pc, #300]	; (8002ba8 <HAL_GPIO_Init+0x330>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_GPIO_Init+0x20a>
 8002a7e:	2307      	movs	r3, #7
 8002a80:	e00e      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a82:	2308      	movs	r3, #8
 8002a84:	e00c      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a86:	2306      	movs	r3, #6
 8002a88:	e00a      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a8a:	2305      	movs	r3, #5
 8002a8c:	e008      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a8e:	2304      	movs	r3, #4
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a92:	2303      	movs	r3, #3
 8002a94:	e004      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f002 0203 	and.w	r2, r2, #3
 8002aa6:	0092      	lsls	r2, r2, #2
 8002aa8:	4093      	lsls	r3, r2
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab0:	4935      	ldr	r1, [pc, #212]	; (8002b88 <HAL_GPIO_Init+0x310>)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ae2:	4a32      	ldr	r2, [pc, #200]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae8:	4b30      	ldr	r3, [pc, #192]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b0c:	4a27      	ldr	r2, [pc, #156]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b36:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b60:	4a12      	ldr	r2, [pc, #72]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	f67f ae90 	bls.w	8002894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40013800 	.word	0x40013800
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	40020400 	.word	0x40020400
 8002b94:	40020800 	.word	0x40020800
 8002b98:	40020c00 	.word	0x40020c00
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40021400 	.word	0x40021400
 8002ba4:	40021800 	.word	0x40021800
 8002ba8:	40021c00 	.word	0x40021c00
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bcc:	e003      	b.n	8002bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bf4:	887a      	ldrh	r2, [r7, #2]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	041a      	lsls	r2, r3, #16
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	887b      	ldrh	r3, [r7, #2]
 8002c02:	400b      	ands	r3, r1
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	619a      	str	r2, [r3, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f004 fa1a 	bl	8007066 <USB_GetMode>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	f040 80f6 	bne.w	8002e26 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f004 f9fe 	bl	8007040 <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80ec 	beq.w	8002e24 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 f9f5 	bl	8007040 <USB_ReadInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c60:	d104      	bne.n	8002c6c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c6a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f004 f9e5 	bl	8007040 <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c80:	d104      	bne.n	8002c8c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c8a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f004 f9d5 	bl	8007040 <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ca0:	d104      	bne.n	8002cac <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002caa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f004 f9c5 	bl	8007040 <USB_ReadInterrupts>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d103      	bne.n	8002cc8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f004 f9b7 	bl	8007040 <USB_ReadInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cdc:	d11c      	bne.n	8002d18 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ce6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10f      	bne.n	8002d18 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	6938      	ldr	r0, [r7, #16]
 8002cfc:	f004 f8e4 	bl	8006ec8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d00:	6938      	ldr	r0, [r7, #16]
 8002d02:	f004 f915 	bl	8006f30 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 f9b8 	bl	8007082 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f004 fc49 	bl	80075aa <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f004 f98f 	bl	8007040 <USB_ReadInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d2c:	d102      	bne.n	8002d34 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f001 f829 	bl	8003d86 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 f981 	bl	8007040 <USB_ReadInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d106      	bne.n	8002d56 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f004 fc12 	bl	8007572 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2208      	movs	r2, #8
 8002d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f004 f970 	bl	8007040 <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d101      	bne.n	8002d6e <HAL_HCD_IRQHandler+0x158>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_HCD_IRQHandler+0x15a>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d012      	beq.n	8002d9a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0210 	bic.w	r2, r2, #16
 8002d82:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 ff2c 	bl	8003be2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0210 	orr.w	r2, r2, #16
 8002d98:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 f94e 	bl	8007040 <USB_ReadInterrupts>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dae:	d13a      	bne.n	8002e26 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f004 f99e 	bl	80070f6 <USB_HC_ReadInterrupt>
 8002dba:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	e025      	b.n	8002e0e <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d018      	beq.n	8002e08 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dec:	d106      	bne.n	8002dfc <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f836 	bl	8002e66 <HCD_HC_IN_IRQHandler>
 8002dfa:	e005      	b.n	8002e08 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	4619      	mov	r1, r3
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fb84 	bl	8003510 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d3d4      	bcc.n	8002dc2 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e20:	615a      	str	r2, [r3, #20]
 8002e22:	e000      	b.n	8002e26 <HAL_HCD_IRQHandler+0x210>
      return;
 8002e24:	bf00      	nop
    }
  }
}
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_HCD_Stop+0x16>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e00d      	b.n	8002e5e <HAL_HCD_Stop+0x32>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f004 fa5e 	bl	8007310 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d11a      	bne.n	8002ecc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3361      	adds	r3, #97	; 0x61
 8002eb6:	2206      	movs	r2, #6
 8002eb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f004 f927 	bl	8007118 <USB_HC_Halt>
 8002eca:	e0af      	b.n	800302c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee2:	d11b      	bne.n	8002f1c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3361      	adds	r3, #97	; 0x61
 8002f06:	2207      	movs	r2, #7
 8002f08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 f8ff 	bl	8007118 <USB_HC_Halt>
 8002f1a:	e087      	b.n	800302c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d109      	bne.n	8002f46 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2320      	movs	r3, #32
 8002f42:	6093      	str	r3, [r2, #8]
 8002f44:	e072      	b.n	800302c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d11a      	bne.n	8002f92 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3361      	adds	r3, #97	; 0x61
 8002f7c:	2205      	movs	r2, #5
 8002f7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f004 f8c4 	bl	8007118 <USB_HC_Halt>
 8002f90:	e04c      	b.n	800302c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa8:	d11b      	bne.n	8002fe2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3361      	adds	r3, #97	; 0x61
 8002fcc:	2208      	movs	r2, #8
 8002fce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f004 f89c 	bl	8007118 <USB_HC_Halt>
 8002fe0:	e024      	b.n	800302c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	2b80      	cmp	r3, #128	; 0x80
 8002ff6:	d119      	bne.n	800302c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	461a      	mov	r2, r3
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3361      	adds	r3, #97	; 0x61
 8003018:	2206      	movs	r2, #6
 800301a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f004 f876 	bl	8007118 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800303e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003042:	d112      	bne.n	800306a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f004 f862 	bl	8007118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	461a      	mov	r2, r3
 8003062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003066:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003068:	e24e      	b.n	8003508 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	f040 80df 	bne.w	8003240 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d019      	beq.n	80030be <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3348      	adds	r3, #72	; 0x48
 8003098:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	0159      	lsls	r1, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	440b      	add	r3, r1
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80030ac:	1ad2      	subs	r2, r2, r3
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	202c      	movs	r0, #44	; 0x2c
 80030b4:	fb00 f303 	mul.w	r3, r0, r3
 80030b8:	440b      	add	r3, r1
 80030ba:	3350      	adds	r3, #80	; 0x50
 80030bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	3361      	adds	r3, #97	; 0x61
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	335c      	adds	r3, #92	; 0x5c
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ee:	461a      	mov	r2, r3
 80030f0:	2301      	movs	r3, #1
 80030f2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	333f      	adds	r3, #63	; 0x3f
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d009      	beq.n	800311c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	333f      	adds	r3, #63	; 0x3f
 8003116:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003118:	2b02      	cmp	r3, #2
 800311a:	d111      	bne.n	8003140 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fff6 	bl	8007118 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	461a      	mov	r2, r3
 800313a:	2310      	movs	r3, #16
 800313c:	6093      	str	r3, [r2, #8]
 800313e:	e03a      	b.n	80031b6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	333f      	adds	r3, #63	; 0x3f
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d009      	beq.n	8003168 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	333f      	adds	r3, #63	; 0x3f
 8003162:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003164:	2b01      	cmp	r3, #1
 8003166:	d126      	bne.n	80031b6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4413      	add	r3, r2
 8003170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	0151      	lsls	r1, r2, #5
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	440a      	add	r2, r1
 800317e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003182:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003186:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	3360      	adds	r3, #96	; 0x60
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	b2d9      	uxtb	r1, r3
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	202c      	movs	r0, #44	; 0x2c
 80031a4:	fb00 f303 	mul.w	r3, r0, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	3360      	adds	r3, #96	; 0x60
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f004 fa08 	bl	80075c6 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d12b      	bne.n	8003216 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3348      	adds	r3, #72	; 0x48
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	202c      	movs	r0, #44	; 0x2c
 80031d4:	fb00 f202 	mul.w	r2, r0, r2
 80031d8:	440a      	add	r2, r1
 80031da:	3240      	adds	r2, #64	; 0x40
 80031dc:	8812      	ldrh	r2, [r2, #0]
 80031de:	fbb3 f3f2 	udiv	r3, r3, r2
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 818e 	beq.w	8003508 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3354      	adds	r3, #84	; 0x54
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f083 0301 	eor.w	r3, r3, #1
 8003200:	b2d8      	uxtb	r0, r3
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3354      	adds	r3, #84	; 0x54
 8003210:	4602      	mov	r2, r0
 8003212:	701a      	strb	r2, [r3, #0]
}
 8003214:	e178      	b.n	8003508 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3354      	adds	r3, #84	; 0x54
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	f083 0301 	eor.w	r3, r3, #1
 800322a:	b2d8      	uxtb	r0, r3
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3354      	adds	r3, #84	; 0x54
 800323a:	4602      	mov	r2, r0
 800323c:	701a      	strb	r2, [r3, #0]
}
 800323e:	e163      	b.n	8003508 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	f040 80f6 	bne.w	8003444 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	3361      	adds	r3, #97	; 0x61
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d109      	bne.n	8003280 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	3360      	adds	r3, #96	; 0x60
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e0c9      	b.n	8003414 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3361      	adds	r3, #97	; 0x61
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b05      	cmp	r3, #5
 8003292:	d109      	bne.n	80032a8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	3360      	adds	r3, #96	; 0x60
 80032a2:	2205      	movs	r2, #5
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e0b5      	b.n	8003414 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3361      	adds	r3, #97	; 0x61
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b06      	cmp	r3, #6
 80032ba:	d009      	beq.n	80032d0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	3361      	adds	r3, #97	; 0x61
 80032ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d150      	bne.n	8003372 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	335c      	adds	r3, #92	; 0x5c
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	202c      	movs	r0, #44	; 0x2c
 80032e8:	fb00 f303 	mul.w	r3, r0, r3
 80032ec:	440b      	add	r3, r1
 80032ee:	335c      	adds	r3, #92	; 0x5c
 80032f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	335c      	adds	r3, #92	; 0x5c
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d912      	bls.n	800332c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	212c      	movs	r1, #44	; 0x2c
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	4413      	add	r3, r2
 8003312:	335c      	adds	r3, #92	; 0x5c
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3360      	adds	r3, #96	; 0x60
 8003326:	2204      	movs	r2, #4
 8003328:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800332a:	e073      	b.n	8003414 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3360      	adds	r3, #96	; 0x60
 800333a:	2202      	movs	r2, #2
 800333c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003354:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800335c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4413      	add	r3, r2
 8003366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336a:	461a      	mov	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003370:	e050      	b.n	8003414 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	3361      	adds	r3, #97	; 0x61
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d122      	bne.n	80033cc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	3360      	adds	r3, #96	; 0x60
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	461a      	mov	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e023      	b.n	8003414 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3361      	adds	r3, #97	; 0x61
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b07      	cmp	r3, #7
 80033de:	d119      	bne.n	8003414 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	335c      	adds	r3, #92	; 0x5c
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	202c      	movs	r0, #44	; 0x2c
 80033f8:	fb00 f303 	mul.w	r3, r0, r3
 80033fc:	440b      	add	r3, r1
 80033fe:	335c      	adds	r3, #92	; 0x5c
 8003400:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	212c      	movs	r1, #44	; 0x2c
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	4413      	add	r3, r2
 800340e:	3360      	adds	r3, #96	; 0x60
 8003410:	2204      	movs	r2, #4
 8003412:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	2302      	movs	r3, #2
 8003424:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	b2d9      	uxtb	r1, r3
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	202c      	movs	r0, #44	; 0x2c
 8003430:	fb00 f303 	mul.w	r3, r0, r3
 8003434:	4413      	add	r3, r2
 8003436:	3360      	adds	r3, #96	; 0x60
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f004 f8c2 	bl	80075c6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003442:	e061      	b.n	8003508 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b10      	cmp	r3, #16
 8003458:	d156      	bne.n	8003508 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	333f      	adds	r3, #63	; 0x3f
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b03      	cmp	r3, #3
 800346c:	d111      	bne.n	8003492 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	335c      	adds	r3, #92	; 0x5c
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f003 fe44 	bl	8007118 <USB_HC_Halt>
 8003490:	e031      	b.n	80034f6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	333f      	adds	r3, #63	; 0x3f
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	212c      	movs	r1, #44	; 0x2c
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	333f      	adds	r3, #63	; 0x3f
 80034b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d11d      	bne.n	80034f6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	212c      	movs	r1, #44	; 0x2c
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	335c      	adds	r3, #92	; 0x5c
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d110      	bne.n	80034f6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3361      	adds	r3, #97	; 0x61
 80034e2:	2203      	movs	r2, #3
 80034e4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f003 fe11 	bl	8007118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003502:	461a      	mov	r2, r3
 8003504:	2310      	movs	r3, #16
 8003506:	6093      	str	r3, [r2, #8]
}
 8003508:	bf00      	nop
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d11a      	bne.n	8003576 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	461a      	mov	r2, r3
 800354e:	2304      	movs	r3, #4
 8003550:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	212c      	movs	r1, #44	; 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	3361      	adds	r3, #97	; 0x61
 8003560:	2206      	movs	r2, #6
 8003562:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f003 fdd2 	bl	8007118 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003574:	e331      	b.n	8003bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b20      	cmp	r3, #32
 800358a:	d12e      	bne.n	80035ea <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	461a      	mov	r2, r3
 800359a:	2320      	movs	r3, #32
 800359c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	333d      	adds	r3, #61	; 0x3d
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	f040 8313 	bne.w	8003bda <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	333d      	adds	r3, #61	; 0x3d
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	212c      	movs	r1, #44	; 0x2c
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	4413      	add	r3, r2
 80035d2:	3360      	adds	r3, #96	; 0x60
 80035d4:	2202      	movs	r2, #2
 80035d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 fd98 	bl	8007118 <USB_HC_Halt>
}
 80035e8:	e2f7      	b.n	8003bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003600:	d112      	bne.n	8003628 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	4413      	add	r3, r2
 800360a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360e:	461a      	mov	r2, r3
 8003610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003614:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f003 fd79 	bl	8007118 <USB_HC_Halt>
}
 8003626:	e2d8      	b.n	8003bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d140      	bne.n	80036c0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	335c      	adds	r3, #92	; 0x5c
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d111      	bne.n	800368a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	333d      	adds	r3, #61	; 0x3d
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	2340      	movs	r3, #64	; 0x40
 8003688:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	4413      	add	r3, r2
 8003692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003696:	461a      	mov	r2, r3
 8003698:	2301      	movs	r3, #1
 800369a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	3361      	adds	r3, #97	; 0x61
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f003 fd2d 	bl	8007118 <USB_HC_Halt>
}
 80036be:	e28c      	b.n	8003bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d12c      	bne.n	8003730 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	3361      	adds	r3, #97	; 0x61
 80036e4:	2204      	movs	r2, #4
 80036e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	333d      	adds	r3, #61	; 0x3d
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	335c      	adds	r3, #92	; 0x5c
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f003 fcfe 	bl	8007118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	461a      	mov	r2, r3
 800372a:	2340      	movs	r3, #64	; 0x40
 800372c:	6093      	str	r3, [r2, #8]
}
 800372e:	e254      	b.n	8003bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	4413      	add	r3, r2
 8003738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b08      	cmp	r3, #8
 8003744:	d11a      	bne.n	800377c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	461a      	mov	r2, r3
 8003754:	2308      	movs	r3, #8
 8003756:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	212c      	movs	r1, #44	; 0x2c
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	4413      	add	r3, r2
 8003764:	3361      	adds	r3, #97	; 0x61
 8003766:	2205      	movs	r2, #5
 8003768:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f003 fccf 	bl	8007118 <USB_HC_Halt>
}
 800377a:	e22e      	b.n	8003bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	4413      	add	r3, r2
 8003784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b10      	cmp	r3, #16
 8003790:	d140      	bne.n	8003814 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	212c      	movs	r1, #44	; 0x2c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	335c      	adds	r3, #92	; 0x5c
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3361      	adds	r3, #97	; 0x61
 80037b2:	2203      	movs	r2, #3
 80037b4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	212c      	movs	r1, #44	; 0x2c
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	333d      	adds	r3, #61	; 0x3d
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d112      	bne.n	80037f0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	333c      	adds	r3, #60	; 0x3c
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	333d      	adds	r3, #61	; 0x3d
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f003 fc8c 	bl	8007118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380c:	461a      	mov	r2, r3
 800380e:	2310      	movs	r3, #16
 8003810:	6093      	str	r3, [r2, #8]
}
 8003812:	e1e2      	b.n	8003bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d164      	bne.n	80038f4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d111      	bne.n	8003856 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	4413      	add	r3, r2
 800383e:	3361      	adds	r3, #97	; 0x61
 8003840:	2206      	movs	r2, #6
 8003842:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f003 fc62 	bl	8007118 <USB_HC_Halt>
 8003854:	e044      	b.n	80038e0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	335c      	adds	r3, #92	; 0x5c
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	202c      	movs	r0, #44	; 0x2c
 800386e:	fb00 f303 	mul.w	r3, r0, r3
 8003872:	440b      	add	r3, r1
 8003874:	335c      	adds	r3, #92	; 0x5c
 8003876:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	212c      	movs	r1, #44	; 0x2c
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	4413      	add	r3, r2
 8003884:	335c      	adds	r3, #92	; 0x5c
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d920      	bls.n	80038ce <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	212c      	movs	r1, #44	; 0x2c
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4413      	add	r3, r2
 8003898:	335c      	adds	r3, #92	; 0x5c
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	3360      	adds	r3, #96	; 0x60
 80038ac:	2204      	movs	r2, #4
 80038ae:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	b2d9      	uxtb	r1, r3
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	202c      	movs	r0, #44	; 0x2c
 80038ba:	fb00 f303 	mul.w	r3, r0, r3
 80038be:	4413      	add	r3, r2
 80038c0:	3360      	adds	r3, #96	; 0x60
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f003 fe7d 	bl	80075c6 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038cc:	e008      	b.n	80038e0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	212c      	movs	r1, #44	; 0x2c
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	4413      	add	r3, r2
 80038da:	3360      	adds	r3, #96	; 0x60
 80038dc:	2202      	movs	r2, #2
 80038de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	461a      	mov	r2, r3
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	6093      	str	r3, [r2, #8]
}
 80038f2:	e172      	b.n	8003bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390a:	d11b      	bne.n	8003944 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	4413      	add	r3, r2
 8003918:	3361      	adds	r3, #97	; 0x61
 800391a:	2208      	movs	r2, #8
 800391c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f003 fbf5 	bl	8007118 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4413      	add	r3, r2
 8003936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393a:	461a      	mov	r2, r3
 800393c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003940:	6093      	str	r3, [r2, #8]
}
 8003942:	e14a      	b.n	8003bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	4413      	add	r3, r2
 800394c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b02      	cmp	r3, #2
 8003958:	f040 813f 	bne.w	8003bda <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3361      	adds	r3, #97	; 0x61
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d17d      	bne.n	8003a6c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3360      	adds	r3, #96	; 0x60
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	333f      	adds	r3, #63	; 0x3f
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d00a      	beq.n	80039ac <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	333f      	adds	r3, #63	; 0x3f
 80039a4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	f040 8100 	bne.w	8003bac <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d113      	bne.n	80039dc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3355      	adds	r3, #85	; 0x55
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	f083 0301 	eor.w	r3, r3, #1
 80039c8:	b2d8      	uxtb	r0, r3
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	3355      	adds	r3, #85	; 0x55
 80039d8:	4602      	mov	r2, r0
 80039da:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	f040 80e3 	bne.w	8003bac <HCD_HC_OUT_IRQHandler+0x69c>
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	212c      	movs	r1, #44	; 0x2c
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	4413      	add	r3, r2
 80039f2:	334c      	adds	r3, #76	; 0x4c
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80d8 	beq.w	8003bac <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	212c      	movs	r1, #44	; 0x2c
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	334c      	adds	r3, #76	; 0x4c
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	202c      	movs	r0, #44	; 0x2c
 8003a12:	fb00 f202 	mul.w	r2, r0, r2
 8003a16:	440a      	add	r2, r1
 8003a18:	3240      	adds	r2, #64	; 0x40
 8003a1a:	8812      	ldrh	r2, [r2, #0]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	202c      	movs	r0, #44	; 0x2c
 8003a26:	fb00 f202 	mul.w	r2, r0, r2
 8003a2a:	440a      	add	r2, r1
 8003a2c:	3240      	adds	r2, #64	; 0x40
 8003a2e:	8812      	ldrh	r2, [r2, #0]
 8003a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80b5 	beq.w	8003bac <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	212c      	movs	r1, #44	; 0x2c
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3355      	adds	r3, #85	; 0x55
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	f083 0301 	eor.w	r3, r3, #1
 8003a56:	b2d8      	uxtb	r0, r3
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	212c      	movs	r1, #44	; 0x2c
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	3355      	adds	r3, #85	; 0x55
 8003a66:	4602      	mov	r2, r0
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	e09f      	b.n	8003bac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	212c      	movs	r1, #44	; 0x2c
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	3361      	adds	r3, #97	; 0x61
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d109      	bne.n	8003a94 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3360      	adds	r3, #96	; 0x60
 8003a8e:	2202      	movs	r2, #2
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e08b      	b.n	8003bac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3361      	adds	r3, #97	; 0x61
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d109      	bne.n	8003abc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3360      	adds	r3, #96	; 0x60
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	e077      	b.n	8003bac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3361      	adds	r3, #97	; 0x61
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d109      	bne.n	8003ae4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	212c      	movs	r1, #44	; 0x2c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	3360      	adds	r3, #96	; 0x60
 8003ade:	2205      	movs	r2, #5
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	e063      	b.n	8003bac <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	212c      	movs	r1, #44	; 0x2c
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	4413      	add	r3, r2
 8003af0:	3361      	adds	r3, #97	; 0x61
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b06      	cmp	r3, #6
 8003af6:	d009      	beq.n	8003b0c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	212c      	movs	r1, #44	; 0x2c
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	3361      	adds	r3, #97	; 0x61
 8003b06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d14f      	bne.n	8003bac <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	335c      	adds	r3, #92	; 0x5c
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	202c      	movs	r0, #44	; 0x2c
 8003b24:	fb00 f303 	mul.w	r3, r0, r3
 8003b28:	440b      	add	r3, r1
 8003b2a:	335c      	adds	r3, #92	; 0x5c
 8003b2c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	212c      	movs	r1, #44	; 0x2c
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	4413      	add	r3, r2
 8003b3a:	335c      	adds	r3, #92	; 0x5c
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d912      	bls.n	8003b68 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	335c      	adds	r3, #92	; 0x5c
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3360      	adds	r3, #96	; 0x60
 8003b62:	2204      	movs	r2, #4
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	e021      	b.n	8003bac <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	3360      	adds	r3, #96	; 0x60
 8003b76:	2202      	movs	r2, #2
 8003b78:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b90:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b98:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2302      	movs	r3, #2
 8003bbc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	b2d9      	uxtb	r1, r3
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	202c      	movs	r0, #44	; 0x2c
 8003bc8:	fb00 f303 	mul.w	r3, r0, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	3360      	adds	r3, #96	; 0x60
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f003 fcf6 	bl	80075c6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003bda:	bf00      	nop
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b08a      	sub	sp, #40	; 0x28
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	0c5b      	lsrs	r3, r3, #17
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c16:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d004      	beq.n	8003c28 <HCD_RXQLVL_IRQHandler+0x46>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b05      	cmp	r3, #5
 8003c22:	f000 80a9 	beq.w	8003d78 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c26:	e0aa      	b.n	8003d7e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80a6 	beq.w	8003d7c <HCD_RXQLVL_IRQHandler+0x19a>
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	212c      	movs	r1, #44	; 0x2c
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3344      	adds	r3, #68	; 0x44
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 809b 	beq.w	8003d7c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3350      	adds	r3, #80	; 0x50
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	441a      	add	r2, r3
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	202c      	movs	r0, #44	; 0x2c
 8003c60:	fb00 f303 	mul.w	r3, r0, r3
 8003c64:	440b      	add	r3, r1
 8003c66:	334c      	adds	r3, #76	; 0x4c
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d87a      	bhi.n	8003d64 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3344      	adds	r3, #68	; 0x44
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	b292      	uxth	r2, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	f003 f982 	bl	8006f90 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3344      	adds	r3, #68	; 0x44
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	441a      	add	r2, r3
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	202c      	movs	r0, #44	; 0x2c
 8003ca6:	fb00 f303 	mul.w	r3, r0, r3
 8003caa:	440b      	add	r3, r1
 8003cac:	3344      	adds	r3, #68	; 0x44
 8003cae:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3350      	adds	r3, #80	; 0x50
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	441a      	add	r2, r3
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	202c      	movs	r0, #44	; 0x2c
 8003cca:	fb00 f303 	mul.w	r3, r0, r3
 8003cce:	440b      	add	r3, r1
 8003cd0:	3350      	adds	r3, #80	; 0x50
 8003cd2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	0cdb      	lsrs	r3, r3, #19
 8003ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3340      	adds	r3, #64	; 0x40
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d13c      	bne.n	8003d7c <HCD_RXQLVL_IRQHandler+0x19a>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d039      	beq.n	8003d7c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d1e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d26:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d34:	461a      	mov	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3354      	adds	r3, #84	; 0x54
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	f083 0301 	eor.w	r3, r3, #1
 8003d4e:	b2d8      	uxtb	r0, r3
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3354      	adds	r3, #84	; 0x54
 8003d5e:	4602      	mov	r2, r0
 8003d60:	701a      	strb	r2, [r3, #0]
      break;
 8003d62:	e00b      	b.n	8003d7c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	3360      	adds	r3, #96	; 0x60
 8003d72:	2204      	movs	r2, #4
 8003d74:	701a      	strb	r2, [r3, #0]
      break;
 8003d76:	e001      	b.n	8003d7c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003d78:	bf00      	nop
 8003d7a:	e000      	b.n	8003d7e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003d7c:	bf00      	nop
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3728      	adds	r7, #40	; 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b086      	sub	sp, #24
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003db2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d10b      	bne.n	8003dd6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d102      	bne.n	8003dce <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f003 fbe0 	bl	800758e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d132      	bne.n	8003e46 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f043 0308 	orr.w	r3, r3, #8
 8003de6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d126      	bne.n	8003e40 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d113      	bne.n	8003e22 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e04:	d106      	bne.n	8003e14 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f003 f938 	bl	8007082 <USB_InitFSLSPClkSel>
 8003e12:	e011      	b.n	8003e38 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2101      	movs	r1, #1
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f003 f931 	bl	8007082 <USB_InitFSLSPClkSel>
 8003e20:	e00a      	b.n	8003e38 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d106      	bne.n	8003e38 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e30:	461a      	mov	r2, r3
 8003e32:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e36:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f003 fbd2 	bl	80075e2 <HAL_HCD_PortEnabled_Callback>
 8003e3e:	e002      	b.n	8003e46 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f003 fbdc 	bl	80075fe <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d103      	bne.n	8003e58 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f043 0320 	orr.w	r3, r3, #32
 8003e56:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6013      	str	r3, [r2, #0]
}
 8003e64:	bf00      	nop
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e12b      	b.n	80040d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd ff88 	bl	8001da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2224      	movs	r2, #36	; 0x24
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f001 fa20 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 8003ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4a81      	ldr	r2, [pc, #516]	; (80040e0 <HAL_I2C_Init+0x274>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d807      	bhi.n	8003ef0 <HAL_I2C_Init+0x84>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4a80      	ldr	r2, [pc, #512]	; (80040e4 <HAL_I2C_Init+0x278>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	bf94      	ite	ls
 8003ee8:	2301      	movls	r3, #1
 8003eea:	2300      	movhi	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e006      	b.n	8003efe <HAL_I2C_Init+0x92>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a7d      	ldr	r2, [pc, #500]	; (80040e8 <HAL_I2C_Init+0x27c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	bf94      	ite	ls
 8003ef8:	2301      	movls	r3, #1
 8003efa:	2300      	movhi	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0e7      	b.n	80040d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a78      	ldr	r2, [pc, #480]	; (80040ec <HAL_I2C_Init+0x280>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	0c9b      	lsrs	r3, r3, #18
 8003f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4a6a      	ldr	r2, [pc, #424]	; (80040e0 <HAL_I2C_Init+0x274>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d802      	bhi.n	8003f40 <HAL_I2C_Init+0xd4>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	e009      	b.n	8003f54 <HAL_I2C_Init+0xe8>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	4a69      	ldr	r2, [pc, #420]	; (80040f0 <HAL_I2C_Init+0x284>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	099b      	lsrs	r3, r3, #6
 8003f52:	3301      	adds	r3, #1
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	495c      	ldr	r1, [pc, #368]	; (80040e0 <HAL_I2C_Init+0x274>)
 8003f70:	428b      	cmp	r3, r1
 8003f72:	d819      	bhi.n	8003fa8 <HAL_I2C_Init+0x13c>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1e59      	subs	r1, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f82:	1c59      	adds	r1, r3, #1
 8003f84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f88:	400b      	ands	r3, r1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_I2C_Init+0x138>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1e59      	subs	r1, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa2:	e051      	b.n	8004048 <HAL_I2C_Init+0x1dc>
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	e04f      	b.n	8004048 <HAL_I2C_Init+0x1dc>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d111      	bne.n	8003fd4 <HAL_I2C_Init+0x168>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e58      	subs	r0, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	440b      	add	r3, r1
 8003fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e012      	b.n	8003ffa <HAL_I2C_Init+0x18e>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1e58      	subs	r0, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	0099      	lsls	r1, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fea:	3301      	adds	r3, #1
 8003fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_I2C_Init+0x196>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e022      	b.n	8004048 <HAL_I2C_Init+0x1dc>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <HAL_I2C_Init+0x1bc>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1e58      	subs	r0, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6859      	ldr	r1, [r3, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	440b      	add	r3, r1
 8004018:	fbb0 f3f3 	udiv	r3, r0, r3
 800401c:	3301      	adds	r3, #1
 800401e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004026:	e00f      	b.n	8004048 <HAL_I2C_Init+0x1dc>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1e58      	subs	r0, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	0099      	lsls	r1, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	fbb0 f3f3 	udiv	r3, r0, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	6809      	ldr	r1, [r1, #0]
 800404c:	4313      	orrs	r3, r2
 800404e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6911      	ldr	r1, [r2, #16]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68d2      	ldr	r2, [r2, #12]
 8004082:	4311      	orrs	r1, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	430b      	orrs	r3, r1
 800408a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	000186a0 	.word	0x000186a0
 80040e4:	001e847f 	.word	0x001e847f
 80040e8:	003d08ff 	.word	0x003d08ff
 80040ec:	431bde83 	.word	0x431bde83
 80040f0:	10624dd3 	.word	0x10624dd3

080040f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e128      	b.n	8004358 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d109      	bne.n	8004126 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a90      	ldr	r2, [pc, #576]	; (8004360 <HAL_I2S_Init+0x26c>)
 800411e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7fd fe89 	bl	8001e38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2202      	movs	r2, #2
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800413c:	f023 030f 	bic.w	r3, r3, #15
 8004140:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2202      	movs	r2, #2
 8004148:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d060      	beq.n	8004214 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800415a:	2310      	movs	r3, #16
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e001      	b.n	8004164 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004160:	2320      	movs	r3, #32
 8004162:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b20      	cmp	r3, #32
 800416a:	d802      	bhi.n	8004172 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004172:	2001      	movs	r0, #1
 8004174:	f001 f9d8 	bl	8005528 <HAL_RCCEx_GetPeriphCLKFreq>
 8004178:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004182:	d125      	bne.n	80041d0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	fbb2 f2f3 	udiv	r2, r2, r3
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	461a      	mov	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	3305      	adds	r3, #5
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	e01f      	b.n	80041ee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	461a      	mov	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	3305      	adds	r3, #5
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	e00e      	b.n	80041ee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	461a      	mov	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	3305      	adds	r3, #5
 80041ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4a5c      	ldr	r2, [pc, #368]	; (8004364 <HAL_I2S_Init+0x270>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	08db      	lsrs	r3, r3, #3
 80041f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	e003      	b.n	800421c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004214:	2302      	movs	r3, #2
 8004216:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d902      	bls.n	8004228 <HAL_I2S_Init+0x134>
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2bff      	cmp	r3, #255	; 0xff
 8004226:	d907      	bls.n	8004238 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	f043 0210 	orr.w	r2, r3, #16
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e08f      	b.n	8004358 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	ea42 0103 	orr.w	r1, r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	430a      	orrs	r2, r1
 800424a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004256:	f023 030f 	bic.w	r3, r3, #15
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6851      	ldr	r1, [r2, #4]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6892      	ldr	r2, [r2, #8]
 8004262:	4311      	orrs	r1, r2
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	68d2      	ldr	r2, [r2, #12]
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6992      	ldr	r2, [r2, #24]
 800426e:	430a      	orrs	r2, r1
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800427a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d161      	bne.n	8004348 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a38      	ldr	r2, [pc, #224]	; (8004368 <HAL_I2S_Init+0x274>)
 8004288:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a37      	ldr	r2, [pc, #220]	; (800436c <HAL_I2S_Init+0x278>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d101      	bne.n	8004298 <HAL_I2S_Init+0x1a4>
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <HAL_I2S_Init+0x27c>)
 8004296:	e001      	b.n	800429c <HAL_I2S_Init+0x1a8>
 8004298:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	4932      	ldr	r1, [pc, #200]	; (800436c <HAL_I2S_Init+0x278>)
 80042a4:	428a      	cmp	r2, r1
 80042a6:	d101      	bne.n	80042ac <HAL_I2S_Init+0x1b8>
 80042a8:	4a31      	ldr	r2, [pc, #196]	; (8004370 <HAL_I2S_Init+0x27c>)
 80042aa:	e001      	b.n	80042b0 <HAL_I2S_Init+0x1bc>
 80042ac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80042b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80042b4:	f023 030f 	bic.w	r3, r3, #15
 80042b8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2b      	ldr	r2, [pc, #172]	; (800436c <HAL_I2S_Init+0x278>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d101      	bne.n	80042c8 <HAL_I2S_Init+0x1d4>
 80042c4:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <HAL_I2S_Init+0x27c>)
 80042c6:	e001      	b.n	80042cc <HAL_I2S_Init+0x1d8>
 80042c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042cc:	2202      	movs	r2, #2
 80042ce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a25      	ldr	r2, [pc, #148]	; (800436c <HAL_I2S_Init+0x278>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <HAL_I2S_Init+0x1ea>
 80042da:	4b25      	ldr	r3, [pc, #148]	; (8004370 <HAL_I2S_Init+0x27c>)
 80042dc:	e001      	b.n	80042e2 <HAL_I2S_Init+0x1ee>
 80042de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ee:	d003      	beq.n	80042f8 <HAL_I2S_Init+0x204>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d103      	bne.n	8004300 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80042f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e001      	b.n	8004304 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800430e:	4313      	orrs	r3, r2
 8004310:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004318:	4313      	orrs	r3, r2
 800431a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004322:	4313      	orrs	r3, r2
 8004324:	b29a      	uxth	r2, r3
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	4313      	orrs	r3, r2
 800432a:	b29b      	uxth	r3, r3
 800432c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004330:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a0d      	ldr	r2, [pc, #52]	; (800436c <HAL_I2S_Init+0x278>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d101      	bne.n	8004340 <HAL_I2S_Init+0x24c>
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <HAL_I2S_Init+0x27c>)
 800433e:	e001      	b.n	8004344 <HAL_I2S_Init+0x250>
 8004340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004344:	897a      	ldrh	r2, [r7, #10]
 8004346:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	0800446b 	.word	0x0800446b
 8004364:	cccccccd 	.word	0xcccccccd
 8004368:	08004581 	.word	0x08004581
 800436c:	40003800 	.word	0x40003800
 8004370:	40003400 	.word	0x40003400

08004374 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	1c9a      	adds	r2, r3, #2
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10e      	bne.n	8004404 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043f4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff ffb8 	bl	8004374 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	b292      	uxth	r2, r2
 8004420:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	1c9a      	adds	r2, r3, #2
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004430:	b29b      	uxth	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10e      	bne.n	8004462 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004452:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff93 	bl	8004388 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b04      	cmp	r3, #4
 8004484:	d13a      	bne.n	80044fc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b01      	cmp	r3, #1
 800448e:	d109      	bne.n	80044a4 <I2S_IRQHandler+0x3a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d102      	bne.n	80044a4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff ffb4 	bl	800440c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d126      	bne.n	80044fc <I2S_IRQHandler+0x92>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d11f      	bne.n	80044fc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	f043 0202 	orr.w	r2, r3, #2
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff ff50 	bl	800439c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b03      	cmp	r3, #3
 8004506:	d136      	bne.n	8004576 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b02      	cmp	r3, #2
 8004510:	d109      	bne.n	8004526 <I2S_IRQHandler+0xbc>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451c:	2b80      	cmp	r3, #128	; 0x80
 800451e:	d102      	bne.n	8004526 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff45 	bl	80043b0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b08      	cmp	r3, #8
 800452e:	d122      	bne.n	8004576 <I2S_IRQHandler+0x10c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b20      	cmp	r3, #32
 800453c:	d11b      	bne.n	8004576 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800454c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	f043 0204 	orr.w	r2, r3, #4
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff ff13 	bl	800439c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004576:	bf00      	nop
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a92      	ldr	r2, [pc, #584]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d101      	bne.n	800459e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800459a:	4b92      	ldr	r3, [pc, #584]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800459c:	e001      	b.n	80045a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800459e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a8b      	ldr	r2, [pc, #556]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80045b8:	4b8a      	ldr	r3, [pc, #552]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045ba:	e001      	b.n	80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80045bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045cc:	d004      	beq.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 8099 	bne.w	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d107      	bne.n	80045f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f925 	bl	800483c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d107      	bne.n	800460c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f9c8 	bl	800499c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d13a      	bne.n	800468c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d035      	beq.n	800468c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a6e      	ldr	r2, [pc, #440]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800462a:	4b6e      	ldr	r3, [pc, #440]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800462c:	e001      	b.n	8004632 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800462e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4969      	ldr	r1, [pc, #420]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800463a:	428b      	cmp	r3, r1
 800463c:	d101      	bne.n	8004642 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800463e:	4b69      	ldr	r3, [pc, #420]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004640:	e001      	b.n	8004646 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004646:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800464a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800465a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	f043 0202 	orr.w	r2, r3, #2
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff fe88 	bl	800439c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b08      	cmp	r3, #8
 8004694:	f040 80c3 	bne.w	800481e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80bd 	beq.w	800481e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a49      	ldr	r2, [pc, #292]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80046be:	4b49      	ldr	r3, [pc, #292]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046c0:	e001      	b.n	80046c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80046c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4944      	ldr	r1, [pc, #272]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ce:	428b      	cmp	r3, r1
 80046d0:	d101      	bne.n	80046d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80046d2:	4b44      	ldr	r3, [pc, #272]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046d4:	e001      	b.n	80046da <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80046d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046de:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046e0:	2300      	movs	r3, #0
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	f043 0204 	orr.w	r2, r3, #4
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fe4a 	bl	800439c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004708:	e089      	b.n	800481e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b02      	cmp	r3, #2
 8004712:	d107      	bne.n	8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f8be 	bl	80048a0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f8fd 	bl	8004938 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d12f      	bne.n	80047a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d02a      	beq.n	80047a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004760:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d101      	bne.n	8004770 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800476c:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800476e:	e001      	b.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4919      	ldr	r1, [pc, #100]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800477c:	428b      	cmp	r3, r1
 800477e:	d101      	bne.n	8004784 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004780:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004782:	e001      	b.n	8004788 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004788:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800478c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	f043 0202 	orr.w	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fdfa 	bl	800439c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d136      	bne.n	8004820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d031      	beq.n	8004820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d101      	bne.n	80047ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80047c6:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047c8:	e001      	b.n	80047ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80047ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4902      	ldr	r1, [pc, #8]	; (80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047d6:	428b      	cmp	r3, r1
 80047d8:	d106      	bne.n	80047e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80047da:	4b02      	ldr	r3, [pc, #8]	; (80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047dc:	e006      	b.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80047de:	bf00      	nop
 80047e0:	40003800 	.word	0x40003800
 80047e4:	40003400 	.word	0x40003400
 80047e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047f0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004800:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f043 0204 	orr.w	r2, r3, #4
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fdc0 	bl	800439c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800481c:	e000      	b.n	8004820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800481e:	bf00      	nop
}
 8004820:	bf00      	nop
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	1c99      	adds	r1, r3, #2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6251      	str	r1, [r2, #36]	; 0x24
 800484e:	881a      	ldrh	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d113      	bne.n	8004896 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800487c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d106      	bne.n	8004896 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ffc9 	bl	8004828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	1c99      	adds	r1, r3, #2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6251      	str	r1, [r2, #36]	; 0x24
 80048b2:	8819      	ldrh	r1, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <I2SEx_TxISR_I2SExt+0x90>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <I2SEx_TxISR_I2SExt+0x22>
 80048be:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <I2SEx_TxISR_I2SExt+0x94>)
 80048c0:	e001      	b.n	80048c6 <I2SEx_TxISR_I2SExt+0x26>
 80048c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048c6:	460a      	mov	r2, r1
 80048c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a12      	ldr	r2, [pc, #72]	; (8004930 <I2SEx_TxISR_I2SExt+0x90>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d101      	bne.n	80048f0 <I2SEx_TxISR_I2SExt+0x50>
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <I2SEx_TxISR_I2SExt+0x94>)
 80048ee:	e001      	b.n	80048f4 <I2SEx_TxISR_I2SExt+0x54>
 80048f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	490d      	ldr	r1, [pc, #52]	; (8004930 <I2SEx_TxISR_I2SExt+0x90>)
 80048fc:	428b      	cmp	r3, r1
 80048fe:	d101      	bne.n	8004904 <I2SEx_TxISR_I2SExt+0x64>
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <I2SEx_TxISR_I2SExt+0x94>)
 8004902:	e001      	b.n	8004908 <I2SEx_TxISR_I2SExt+0x68>
 8004904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800490c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff ff81 	bl	8004828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40003800 	.word	0x40003800
 8004934:	40003400 	.word	0x40003400

08004938 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68d8      	ldr	r0, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	1c99      	adds	r1, r3, #2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004950:	b282      	uxth	r2, r0
 8004952:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d113      	bne.n	8004994 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800497a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff ff4a 	bl	8004828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004994:	bf00      	nop
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <I2SEx_RxISR_I2SExt+0x90>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <I2SEx_RxISR_I2SExt+0x16>
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <I2SEx_RxISR_I2SExt+0x94>)
 80049b0:	e001      	b.n	80049b6 <I2SEx_RxISR_I2SExt+0x1a>
 80049b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049b6:	68d8      	ldr	r0, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	1c99      	adds	r1, r3, #2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80049c2:	b282      	uxth	r2, r0
 80049c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d121      	bne.n	8004a22 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <I2SEx_RxISR_I2SExt+0x90>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <I2SEx_RxISR_I2SExt+0x50>
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <I2SEx_RxISR_I2SExt+0x94>)
 80049ea:	e001      	b.n	80049f0 <I2SEx_RxISR_I2SExt+0x54>
 80049ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	490d      	ldr	r1, [pc, #52]	; (8004a2c <I2SEx_RxISR_I2SExt+0x90>)
 80049f8:	428b      	cmp	r3, r1
 80049fa:	d101      	bne.n	8004a00 <I2SEx_RxISR_I2SExt+0x64>
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <I2SEx_RxISR_I2SExt+0x94>)
 80049fe:	e001      	b.n	8004a04 <I2SEx_RxISR_I2SExt+0x68>
 8004a00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a08:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff03 	bl	8004828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40003800 	.word	0x40003800
 8004a30:	40003400 	.word	0x40003400

08004a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e267      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d075      	beq.n	8004b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a52:	4b88      	ldr	r3, [pc, #544]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d00c      	beq.n	8004a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a5e:	4b85      	ldr	r3, [pc, #532]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d112      	bne.n	8004a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6a:	4b82      	ldr	r3, [pc, #520]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a76:	d10b      	bne.n	8004a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a78:	4b7e      	ldr	r3, [pc, #504]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d05b      	beq.n	8004b3c <HAL_RCC_OscConfig+0x108>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d157      	bne.n	8004b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e242      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d106      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x74>
 8004a9a:	4b76      	ldr	r3, [pc, #472]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a75      	ldr	r2, [pc, #468]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e01d      	b.n	8004ae4 <HAL_RCC_OscConfig+0xb0>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCC_OscConfig+0x98>
 8004ab2:	4b70      	ldr	r3, [pc, #448]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a6f      	ldr	r2, [pc, #444]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	4b6d      	ldr	r3, [pc, #436]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a6c      	ldr	r2, [pc, #432]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	e00b      	b.n	8004ae4 <HAL_RCC_OscConfig+0xb0>
 8004acc:	4b69      	ldr	r3, [pc, #420]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a68      	ldr	r2, [pc, #416]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	4b66      	ldr	r3, [pc, #408]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a65      	ldr	r2, [pc, #404]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d013      	beq.n	8004b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aec:	f7fd fd14 	bl	8002518 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af4:	f7fd fd10 	bl	8002518 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	; 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e207      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	4b5b      	ldr	r3, [pc, #364]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCC_OscConfig+0xc0>
 8004b12:	e014      	b.n	8004b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fd fd00 	bl	8002518 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b1c:	f7fd fcfc 	bl	8002518 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b64      	cmp	r3, #100	; 0x64
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e1f3      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2e:	4b51      	ldr	r3, [pc, #324]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0xe8>
 8004b3a:	e000      	b.n	8004b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d063      	beq.n	8004c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b4a:	4b4a      	ldr	r3, [pc, #296]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b56:	4b47      	ldr	r3, [pc, #284]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d11c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b62:	4b44      	ldr	r3, [pc, #272]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d116      	bne.n	8004b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b6e:	4b41      	ldr	r3, [pc, #260]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_RCC_OscConfig+0x152>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d001      	beq.n	8004b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e1c7      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b86:	4b3b      	ldr	r3, [pc, #236]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4937      	ldr	r1, [pc, #220]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9a:	e03a      	b.n	8004c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba4:	4b34      	ldr	r3, [pc, #208]	; (8004c78 <HAL_RCC_OscConfig+0x244>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004baa:	f7fd fcb5 	bl	8002518 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb2:	f7fd fcb1 	bl	8002518 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e1a8      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4925      	ldr	r1, [pc, #148]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]
 8004be4:	e015      	b.n	8004c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be6:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <HAL_RCC_OscConfig+0x244>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bec:	f7fd fc94 	bl	8002518 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf4:	f7fd fc90 	bl	8002518 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e187      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c06:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d036      	beq.n	8004c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d016      	beq.n	8004c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <HAL_RCC_OscConfig+0x248>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fd fc74 	bl	8002518 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c34:	f7fd fc70 	bl	8002518 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e167      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x200>
 8004c52:	e01b      	b.n	8004c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RCC_OscConfig+0x248>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5a:	f7fd fc5d 	bl	8002518 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c60:	e00e      	b.n	8004c80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c62:	f7fd fc59 	bl	8002518 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d907      	bls.n	8004c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e150      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
 8004c74:	40023800 	.word	0x40023800
 8004c78:	42470000 	.word	0x42470000
 8004c7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	4b88      	ldr	r3, [pc, #544]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ea      	bne.n	8004c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8097 	beq.w	8004dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9e:	4b81      	ldr	r3, [pc, #516]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	4b7d      	ldr	r3, [pc, #500]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	4a7c      	ldr	r2, [pc, #496]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cba:	4b7a      	ldr	r3, [pc, #488]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cca:	4b77      	ldr	r3, [pc, #476]	; (8004ea8 <HAL_RCC_OscConfig+0x474>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d118      	bne.n	8004d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd6:	4b74      	ldr	r3, [pc, #464]	; (8004ea8 <HAL_RCC_OscConfig+0x474>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a73      	ldr	r2, [pc, #460]	; (8004ea8 <HAL_RCC_OscConfig+0x474>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd fc19 	bl	8002518 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cea:	f7fd fc15 	bl	8002518 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e10c      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	4b6a      	ldr	r3, [pc, #424]	; (8004ea8 <HAL_RCC_OscConfig+0x474>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d106      	bne.n	8004d1e <HAL_RCC_OscConfig+0x2ea>
 8004d10:	4b64      	ldr	r3, [pc, #400]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	4a63      	ldr	r2, [pc, #396]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1c:	e01c      	b.n	8004d58 <HAL_RCC_OscConfig+0x324>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCC_OscConfig+0x30c>
 8004d26:	4b5f      	ldr	r3, [pc, #380]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	4a5e      	ldr	r2, [pc, #376]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	f043 0304 	orr.w	r3, r3, #4
 8004d30:	6713      	str	r3, [r2, #112]	; 0x70
 8004d32:	4b5c      	ldr	r3, [pc, #368]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	4a5b      	ldr	r2, [pc, #364]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3e:	e00b      	b.n	8004d58 <HAL_RCC_OscConfig+0x324>
 8004d40:	4b58      	ldr	r3, [pc, #352]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d44:	4a57      	ldr	r2, [pc, #348]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4c:	4b55      	ldr	r3, [pc, #340]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d50:	4a54      	ldr	r2, [pc, #336]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d52:	f023 0304 	bic.w	r3, r3, #4
 8004d56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d015      	beq.n	8004d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d60:	f7fd fbda 	bl	8002518 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fd fbd6 	bl	8002518 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e0cb      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7e:	4b49      	ldr	r3, [pc, #292]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ee      	beq.n	8004d68 <HAL_RCC_OscConfig+0x334>
 8004d8a:	e014      	b.n	8004db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8c:	f7fd fbc4 	bl	8002518 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d92:	e00a      	b.n	8004daa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d94:	f7fd fbc0 	bl	8002518 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e0b5      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004daa:	4b3e      	ldr	r3, [pc, #248]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1ee      	bne.n	8004d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d105      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dbc:	4b39      	ldr	r3, [pc, #228]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	4a38      	ldr	r2, [pc, #224]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80a1 	beq.w	8004f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dd2:	4b34      	ldr	r3, [pc, #208]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d05c      	beq.n	8004e98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d141      	bne.n	8004e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de6:	4b31      	ldr	r3, [pc, #196]	; (8004eac <HAL_RCC_OscConfig+0x478>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fd fb94 	bl	8002518 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fd fb90 	bl	8002518 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e087      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e06:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69da      	ldr	r2, [r3, #28]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	019b      	lsls	r3, r3, #6
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	041b      	lsls	r3, r3, #16
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	491b      	ldr	r1, [pc, #108]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <HAL_RCC_OscConfig+0x478>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e42:	f7fd fb69 	bl	8002518 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e4a:	f7fd fb65 	bl	8002518 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e05c      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5c:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x416>
 8004e68:	e054      	b.n	8004f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6a:	4b10      	ldr	r3, [pc, #64]	; (8004eac <HAL_RCC_OscConfig+0x478>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fd fb52 	bl	8002518 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e78:	f7fd fb4e 	bl	8002518 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e045      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0x444>
 8004e96:	e03d      	b.n	8004f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d107      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e038      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40007000 	.word	0x40007000
 8004eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <HAL_RCC_OscConfig+0x4ec>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d028      	beq.n	8004f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d121      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d11a      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d111      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d107      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800

08004f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0cc      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f38:	4b68      	ldr	r3, [pc, #416]	; (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d90c      	bls.n	8004f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f46:	4b65      	ldr	r3, [pc, #404]	; (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4e:	4b63      	ldr	r3, [pc, #396]	; (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0b8      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d020      	beq.n	8004fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f78:	4b59      	ldr	r3, [pc, #356]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4a58      	ldr	r2, [pc, #352]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f90:	4b53      	ldr	r3, [pc, #332]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4a52      	ldr	r2, [pc, #328]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f9c:	4b50      	ldr	r3, [pc, #320]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	494d      	ldr	r1, [pc, #308]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d044      	beq.n	8005044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d107      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc2:	4b47      	ldr	r3, [pc, #284]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d119      	bne.n	8005002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e07f      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d003      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d107      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe2:	4b3f      	ldr	r3, [pc, #252]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e06f      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff2:	4b3b      	ldr	r3, [pc, #236]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e067      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005002:	4b37      	ldr	r3, [pc, #220]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f023 0203 	bic.w	r2, r3, #3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4934      	ldr	r1, [pc, #208]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	4313      	orrs	r3, r2
 8005012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005014:	f7fd fa80 	bl	8002518 <HAL_GetTick>
 8005018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501a:	e00a      	b.n	8005032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800501c:	f7fd fa7c 	bl	8002518 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f241 3288 	movw	r2, #5000	; 0x1388
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e04f      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005032:	4b2b      	ldr	r3, [pc, #172]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 020c 	and.w	r2, r3, #12
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	429a      	cmp	r2, r3
 8005042:	d1eb      	bne.n	800501c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005044:	4b25      	ldr	r3, [pc, #148]	; (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d20c      	bcs.n	800506c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005052:	4b22      	ldr	r3, [pc, #136]	; (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800505a:	4b20      	ldr	r3, [pc, #128]	; (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e032      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005078:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	4916      	ldr	r1, [pc, #88]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005096:	4b12      	ldr	r3, [pc, #72]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	490e      	ldr	r1, [pc, #56]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050aa:	f000 f821 	bl	80050f0 <HAL_RCC_GetSysClockFreq>
 80050ae:	4602      	mov	r2, r0
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	091b      	lsrs	r3, r3, #4
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	490a      	ldr	r1, [pc, #40]	; (80050e4 <HAL_RCC_ClockConfig+0x1c0>)
 80050bc:	5ccb      	ldrb	r3, [r1, r3]
 80050be:	fa22 f303 	lsr.w	r3, r2, r3
 80050c2:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050c6:	4b09      	ldr	r3, [pc, #36]	; (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd f9e0 	bl	8002490 <HAL_InitTick>

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40023c00 	.word	0x40023c00
 80050e0:	40023800 	.word	0x40023800
 80050e4:	0800c0b0 	.word	0x0800c0b0
 80050e8:	20000000 	.word	0x20000000
 80050ec:	20000004 	.word	0x20000004

080050f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050f4:	b094      	sub	sp, #80	; 0x50
 80050f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	647b      	str	r3, [r7, #68]	; 0x44
 80050fc:	2300      	movs	r3, #0
 80050fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005100:	2300      	movs	r3, #0
 8005102:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005108:	4b79      	ldr	r3, [pc, #484]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 030c 	and.w	r3, r3, #12
 8005110:	2b08      	cmp	r3, #8
 8005112:	d00d      	beq.n	8005130 <HAL_RCC_GetSysClockFreq+0x40>
 8005114:	2b08      	cmp	r3, #8
 8005116:	f200 80e1 	bhi.w	80052dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <HAL_RCC_GetSysClockFreq+0x34>
 800511e:	2b04      	cmp	r3, #4
 8005120:	d003      	beq.n	800512a <HAL_RCC_GetSysClockFreq+0x3a>
 8005122:	e0db      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005124:	4b73      	ldr	r3, [pc, #460]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005126:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005128:	e0db      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800512a:	4b73      	ldr	r3, [pc, #460]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800512c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800512e:	e0d8      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005130:	4b6f      	ldr	r3, [pc, #444]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005138:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800513a:	4b6d      	ldr	r3, [pc, #436]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d063      	beq.n	800520e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005146:	4b6a      	ldr	r3, [pc, #424]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	099b      	lsrs	r3, r3, #6
 800514c:	2200      	movs	r2, #0
 800514e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005150:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005158:	633b      	str	r3, [r7, #48]	; 0x30
 800515a:	2300      	movs	r3, #0
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
 800515e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005162:	4622      	mov	r2, r4
 8005164:	462b      	mov	r3, r5
 8005166:	f04f 0000 	mov.w	r0, #0
 800516a:	f04f 0100 	mov.w	r1, #0
 800516e:	0159      	lsls	r1, r3, #5
 8005170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005174:	0150      	lsls	r0, r2, #5
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4621      	mov	r1, r4
 800517c:	1a51      	subs	r1, r2, r1
 800517e:	6139      	str	r1, [r7, #16]
 8005180:	4629      	mov	r1, r5
 8005182:	eb63 0301 	sbc.w	r3, r3, r1
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005194:	4659      	mov	r1, fp
 8005196:	018b      	lsls	r3, r1, #6
 8005198:	4651      	mov	r1, sl
 800519a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800519e:	4651      	mov	r1, sl
 80051a0:	018a      	lsls	r2, r1, #6
 80051a2:	4651      	mov	r1, sl
 80051a4:	ebb2 0801 	subs.w	r8, r2, r1
 80051a8:	4659      	mov	r1, fp
 80051aa:	eb63 0901 	sbc.w	r9, r3, r1
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051c2:	4690      	mov	r8, r2
 80051c4:	4699      	mov	r9, r3
 80051c6:	4623      	mov	r3, r4
 80051c8:	eb18 0303 	adds.w	r3, r8, r3
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	462b      	mov	r3, r5
 80051d0:	eb49 0303 	adc.w	r3, r9, r3
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051e2:	4629      	mov	r1, r5
 80051e4:	024b      	lsls	r3, r1, #9
 80051e6:	4621      	mov	r1, r4
 80051e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051ec:	4621      	mov	r1, r4
 80051ee:	024a      	lsls	r2, r1, #9
 80051f0:	4610      	mov	r0, r2
 80051f2:	4619      	mov	r1, r3
 80051f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f6:	2200      	movs	r2, #0
 80051f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005200:	f7fb fd42 	bl	8000c88 <__aeabi_uldivmod>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4613      	mov	r3, r2
 800520a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800520c:	e058      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520e:	4b38      	ldr	r3, [pc, #224]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	099b      	lsrs	r3, r3, #6
 8005214:	2200      	movs	r2, #0
 8005216:	4618      	mov	r0, r3
 8005218:	4611      	mov	r1, r2
 800521a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800521e:	623b      	str	r3, [r7, #32]
 8005220:	2300      	movs	r3, #0
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
 8005224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005228:	4642      	mov	r2, r8
 800522a:	464b      	mov	r3, r9
 800522c:	f04f 0000 	mov.w	r0, #0
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	0159      	lsls	r1, r3, #5
 8005236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800523a:	0150      	lsls	r0, r2, #5
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4641      	mov	r1, r8
 8005242:	ebb2 0a01 	subs.w	sl, r2, r1
 8005246:	4649      	mov	r1, r9
 8005248:	eb63 0b01 	sbc.w	fp, r3, r1
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800525c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005260:	ebb2 040a 	subs.w	r4, r2, sl
 8005264:	eb63 050b 	sbc.w	r5, r3, fp
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	00eb      	lsls	r3, r5, #3
 8005272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005276:	00e2      	lsls	r2, r4, #3
 8005278:	4614      	mov	r4, r2
 800527a:	461d      	mov	r5, r3
 800527c:	4643      	mov	r3, r8
 800527e:	18e3      	adds	r3, r4, r3
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	464b      	mov	r3, r9
 8005284:	eb45 0303 	adc.w	r3, r5, r3
 8005288:	607b      	str	r3, [r7, #4]
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005296:	4629      	mov	r1, r5
 8005298:	028b      	lsls	r3, r1, #10
 800529a:	4621      	mov	r1, r4
 800529c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052a0:	4621      	mov	r1, r4
 80052a2:	028a      	lsls	r2, r1, #10
 80052a4:	4610      	mov	r0, r2
 80052a6:	4619      	mov	r1, r3
 80052a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052aa:	2200      	movs	r2, #0
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	61fa      	str	r2, [r7, #28]
 80052b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b4:	f7fb fce8 	bl	8000c88 <__aeabi_uldivmod>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4613      	mov	r3, r2
 80052be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	3301      	adds	r3, #1
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052da:	e002      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80052de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3750      	adds	r7, #80	; 0x50
 80052e8:	46bd      	mov	sp, r7
 80052ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ee:	bf00      	nop
 80052f0:	40023800 	.word	0x40023800
 80052f4:	00f42400 	.word	0x00f42400
 80052f8:	007a1200 	.word	0x007a1200

080052fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005300:	4b03      	ldr	r3, [pc, #12]	; (8005310 <HAL_RCC_GetHCLKFreq+0x14>)
 8005302:	681b      	ldr	r3, [r3, #0]
}
 8005304:	4618      	mov	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000000 	.word	0x20000000

08005314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005318:	f7ff fff0 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	0a9b      	lsrs	r3, r3, #10
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4903      	ldr	r1, [pc, #12]	; (8005338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40023800 	.word	0x40023800
 8005338:	0800c0c0 	.word	0x0800c0c0

0800533c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005340:	f7ff ffdc 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	0b5b      	lsrs	r3, r3, #13
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005358:	4618      	mov	r0, r3
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40023800 	.word	0x40023800
 8005360:	0800c0c0 	.word	0x0800c0c0

08005364 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d105      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005388:	2b00      	cmp	r3, #0
 800538a:	d035      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800538c:	4b62      	ldr	r3, [pc, #392]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005392:	f7fd f8c1 	bl	8002518 <HAL_GetTick>
 8005396:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005398:	e008      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800539a:	f7fd f8bd 	bl	8002518 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e0b0      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053ac:	4b5b      	ldr	r3, [pc, #364]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f0      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	019a      	lsls	r2, r3, #6
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	071b      	lsls	r3, r3, #28
 80053c4:	4955      	ldr	r1, [pc, #340]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053cc:	4b52      	ldr	r3, [pc, #328]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053d2:	f7fd f8a1 	bl	8002518 <HAL_GetTick>
 80053d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053da:	f7fd f89d 	bl	8002518 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e090      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ec:	4b4b      	ldr	r3, [pc, #300]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f0      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8083 	beq.w	800550c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	4b44      	ldr	r3, [pc, #272]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	4a43      	ldr	r2, [pc, #268]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005414:	6413      	str	r3, [r2, #64]	; 0x40
 8005416:	4b41      	ldr	r3, [pc, #260]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005422:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a3e      	ldr	r2, [pc, #248]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800542e:	f7fd f873 	bl	8002518 <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005436:	f7fd f86f 	bl	8002518 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e062      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005448:	4b35      	ldr	r3, [pc, #212]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005454:	4b31      	ldr	r3, [pc, #196]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d02f      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	429a      	cmp	r2, r3
 8005470:	d028      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005472:	4b2a      	ldr	r3, [pc, #168]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800547c:	4b29      	ldr	r3, [pc, #164]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005482:	4b28      	ldr	r3, [pc, #160]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005488:	4a24      	ldr	r2, [pc, #144]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800548e:	4b23      	ldr	r3, [pc, #140]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b01      	cmp	r3, #1
 8005498:	d114      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800549a:	f7fd f83d 	bl	8002518 <HAL_GetTick>
 800549e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a0:	e00a      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fd f839 	bl	8002518 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e02a      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b8:	4b18      	ldr	r3, [pc, #96]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0ee      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d0:	d10d      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80054d2:	4b12      	ldr	r3, [pc, #72]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e6:	490d      	ldr	r1, [pc, #52]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	608b      	str	r3, [r1, #8]
 80054ec:	e005      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	4a0a      	ldr	r2, [pc, #40]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054f8:	6093      	str	r3, [r2, #8]
 80054fa:	4b08      	ldr	r3, [pc, #32]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005506:	4905      	ldr	r1, [pc, #20]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005508:	4313      	orrs	r3, r2
 800550a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	42470068 	.word	0x42470068
 800551c:	40023800 	.word	0x40023800
 8005520:	40007000 	.word	0x40007000
 8005524:	42470e40 	.word	0x42470e40

08005528 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d13e      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005546:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d12f      	bne.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800555c:	4b1e      	ldr	r3, [pc, #120]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800555e:	617b      	str	r3, [r7, #20]
          break;
 8005560:	e02f      	b.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800556e:	d108      	bne.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005570:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005578:	4a18      	ldr	r2, [pc, #96]	; (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800557a:	fbb2 f3f3 	udiv	r3, r2, r3
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	e007      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005582:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800558a:	4a15      	ldr	r2, [pc, #84]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005592:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005598:	099b      	lsrs	r3, r3, #6
 800559a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	fb02 f303 	mul.w	r3, r2, r3
 80055a4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ac:	0f1b      	lsrs	r3, r3, #28
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	617b      	str	r3, [r7, #20]
          break;
 80055ba:	e002      	b.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
          break;
 80055c0:	bf00      	nop
        }
      }
      break;
 80055c2:	bf00      	nop
    }
  }
  return frequency;
 80055c4:	697b      	ldr	r3, [r7, #20]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40023800 	.word	0x40023800
 80055d8:	00bb8000 	.word	0x00bb8000
 80055dc:	007a1200 	.word	0x007a1200
 80055e0:	00f42400 	.word	0x00f42400

080055e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e07b      	b.n	80056ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d108      	bne.n	8005610 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005606:	d009      	beq.n	800561c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	61da      	str	r2, [r3, #28]
 800560e:	e005      	b.n	800561c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fc fc7e 	bl	8001f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005652:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a0:	ea42 0103 	orr.w	r1, r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	f003 0104 	and.w	r1, r3, #4
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	f003 0210 	and.w	r2, r3, #16
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e041      	b.n	800578c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7fc fc53 	bl	8001fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3304      	adds	r3, #4
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f000 f9fd 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d001      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e04e      	b.n	800584a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a23      	ldr	r2, [pc, #140]	; (8005858 <HAL_TIM_Base_Start_IT+0xc4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d022      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d6:	d01d      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1f      	ldr	r2, [pc, #124]	; (800585c <HAL_TIM_Base_Start_IT+0xc8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d018      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <HAL_TIM_Base_Start_IT+0xcc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1c      	ldr	r2, [pc, #112]	; (8005864 <HAL_TIM_Base_Start_IT+0xd0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <HAL_TIM_Base_Start_IT+0xd4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d009      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <HAL_TIM_Base_Start_IT+0xd8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x80>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a18      	ldr	r2, [pc, #96]	; (8005870 <HAL_TIM_Base_Start_IT+0xdc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d111      	bne.n	8005838 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b06      	cmp	r3, #6
 8005824:	d010      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0201 	orr.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005836:	e007      	b.n	8005848 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40010000 	.word	0x40010000
 800585c:	40000400 	.word	0x40000400
 8005860:	40000800 	.word	0x40000800
 8005864:	40000c00 	.word	0x40000c00
 8005868:	40010400 	.word	0x40010400
 800586c:	40014000 	.word	0x40014000
 8005870:	40001800 	.word	0x40001800

08005874 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6a1a      	ldr	r2, [r3, #32]
 8005892:	f241 1311 	movw	r3, #4369	; 0x1111
 8005896:	4013      	ands	r3, r2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10f      	bne.n	80058bc <HAL_TIM_Base_Stop_IT+0x48>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6a1a      	ldr	r2, [r3, #32]
 80058a2:	f240 4344 	movw	r3, #1092	; 0x444
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d107      	bne.n	80058bc <HAL_TIM_Base_Stop_IT+0x48>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d122      	bne.n	800592e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d11b      	bne.n	800592e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f06f 0202 	mvn.w	r2, #2
 80058fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f003 0303 	and.w	r3, r3, #3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f8ee 	bl	8005af6 <HAL_TIM_IC_CaptureCallback>
 800591a:	e005      	b.n	8005928 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f8e0 	bl	8005ae2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f8f1 	bl	8005b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b04      	cmp	r3, #4
 800593a:	d122      	bne.n	8005982 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b04      	cmp	r3, #4
 8005948:	d11b      	bne.n	8005982 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f06f 0204 	mvn.w	r2, #4
 8005952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f8c4 	bl	8005af6 <HAL_TIM_IC_CaptureCallback>
 800596e:	e005      	b.n	800597c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f8b6 	bl	8005ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f8c7 	bl	8005b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	2b08      	cmp	r3, #8
 800598e:	d122      	bne.n	80059d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b08      	cmp	r3, #8
 800599c:	d11b      	bne.n	80059d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f06f 0208 	mvn.w	r2, #8
 80059a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2204      	movs	r2, #4
 80059ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f003 0303 	and.w	r3, r3, #3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f89a 	bl	8005af6 <HAL_TIM_IC_CaptureCallback>
 80059c2:	e005      	b.n	80059d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f88c 	bl	8005ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f89d 	bl	8005b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d122      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d11b      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f06f 0210 	mvn.w	r2, #16
 80059fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2208      	movs	r2, #8
 8005a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f870 	bl	8005af6 <HAL_TIM_IC_CaptureCallback>
 8005a16:	e005      	b.n	8005a24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f862 	bl	8005ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f873 	bl	8005b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d10e      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d107      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0201 	mvn.w	r2, #1
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fb fe05 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d10e      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b80      	cmp	r3, #128	; 0x80
 8005a70:	d107      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f97f 	bl	8005d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b40      	cmp	r3, #64	; 0x40
 8005a8e:	d10e      	bne.n	8005aae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d107      	bne.n	8005aae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f838 	bl	8005b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d10e      	bne.n	8005ada <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	d107      	bne.n	8005ada <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f06f 0220 	mvn.w	r2, #32
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f949 	bl	8005d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a40      	ldr	r2, [pc, #256]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b52:	d00f      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a3d      	ldr	r2, [pc, #244]	; (8005c4c <TIM_Base_SetConfig+0x118>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00b      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a3c      	ldr	r2, [pc, #240]	; (8005c50 <TIM_Base_SetConfig+0x11c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d007      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a3b      	ldr	r2, [pc, #236]	; (8005c54 <TIM_Base_SetConfig+0x120>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3a      	ldr	r2, [pc, #232]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d108      	bne.n	8005b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2f      	ldr	r2, [pc, #188]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d02b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b94:	d027      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2c      	ldr	r2, [pc, #176]	; (8005c4c <TIM_Base_SetConfig+0x118>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d023      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <TIM_Base_SetConfig+0x11c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2a      	ldr	r2, [pc, #168]	; (8005c54 <TIM_Base_SetConfig+0x120>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d01b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a29      	ldr	r2, [pc, #164]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d017      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a28      	ldr	r2, [pc, #160]	; (8005c5c <TIM_Base_SetConfig+0x128>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a27      	ldr	r2, [pc, #156]	; (8005c60 <TIM_Base_SetConfig+0x12c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00f      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a26      	ldr	r2, [pc, #152]	; (8005c64 <TIM_Base_SetConfig+0x130>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00b      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a25      	ldr	r2, [pc, #148]	; (8005c68 <TIM_Base_SetConfig+0x134>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d007      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <TIM_Base_SetConfig+0x138>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d003      	beq.n	8005be6 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a23      	ldr	r2, [pc, #140]	; (8005c70 <TIM_Base_SetConfig+0x13c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d108      	bne.n	8005bf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <TIM_Base_SetConfig+0x114>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_Base_SetConfig+0xf8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <TIM_Base_SetConfig+0x124>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d103      	bne.n	8005c34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	615a      	str	r2, [r3, #20]
}
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40000800 	.word	0x40000800
 8005c54:	40000c00 	.word	0x40000c00
 8005c58:	40010400 	.word	0x40010400
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	40014400 	.word	0x40014400
 8005c64:	40014800 	.word	0x40014800
 8005c68:	40001800 	.word	0x40001800
 8005c6c:	40001c00 	.word	0x40001c00
 8005c70:	40002000 	.word	0x40002000

08005c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e05a      	b.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a21      	ldr	r2, [pc, #132]	; (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d022      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd8:	d01d      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d018      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1b      	ldr	r2, [pc, #108]	; (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d013      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1a      	ldr	r2, [pc, #104]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00e      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a18      	ldr	r2, [pc, #96]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d10c      	bne.n	8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40010400 	.word	0x40010400
 8005d64:	40014000 	.word	0x40014000
 8005d68:	40001800 	.word	0x40001800

08005d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e03f      	b.n	8005e26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fc f94a 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2224      	movs	r2, #36	; 0x24
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fddf 	bl	800699c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b08a      	sub	sp, #40	; 0x28
 8005e32:	af02      	add	r7, sp, #8
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d17c      	bne.n	8005f48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_UART_Transmit+0x2c>
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e075      	b.n	8005f4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_UART_Transmit+0x3e>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e06e      	b.n	8005f4a <HAL_UART_Transmit+0x11c>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2221      	movs	r2, #33	; 0x21
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e82:	f7fc fb49 	bl	8002518 <HAL_GetTick>
 8005e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	88fa      	ldrh	r2, [r7, #6]
 8005e8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	88fa      	ldrh	r2, [r7, #6]
 8005e92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9c:	d108      	bne.n	8005eb0 <HAL_UART_Transmit+0x82>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d104      	bne.n	8005eb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e003      	b.n	8005eb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ec0:	e02a      	b.n	8005f18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2180      	movs	r1, #128	; 0x80
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 fb1f 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e036      	b.n	8005f4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ef0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	e007      	b.n	8005f0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	781a      	ldrb	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	3301      	adds	r3, #1
 8005f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1cf      	bne.n	8005ec2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2140      	movs	r1, #64	; 0x40
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 faef 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e006      	b.n	8005f4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	e000      	b.n	8005f4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f48:	2302      	movs	r3, #2
  }
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d11d      	bne.n	8005fa8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <HAL_UART_Receive_IT+0x26>
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e016      	b.n	8005faa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Receive_IT+0x38>
 8005f86:	2302      	movs	r3, #2
 8005f88:	e00f      	b.n	8005faa <HAL_UART_Receive_IT+0x58>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fb24 	bl	80065ec <UART_Start_Receive_IT>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	e000      	b.n	8005faa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005fa8:	2302      	movs	r3, #2
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b0ba      	sub	sp, #232	; 0xe8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10f      	bne.n	800601a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <HAL_UART_IRQHandler+0x66>
 8006006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fc07 	bl	8006826 <UART_Receive_IT>
      return;
 8006018:	e256      	b.n	80064c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800601a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80de 	beq.w	80061e0 <HAL_UART_IRQHandler+0x22c>
 8006024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006034:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80d1 	beq.w	80061e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800603e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <HAL_UART_IRQHandler+0xae>
 800604a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f043 0201 	orr.w	r2, r3, #1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00b      	beq.n	8006086 <HAL_UART_IRQHandler+0xd2>
 800606e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	f043 0202 	orr.w	r2, r3, #2
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <HAL_UART_IRQHandler+0xf6>
 8006092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	f043 0204 	orr.w	r2, r3, #4
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d011      	beq.n	80060da <HAL_UART_IRQHandler+0x126>
 80060b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	f043 0208 	orr.w	r2, r3, #8
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 81ed 	beq.w	80064be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <HAL_UART_IRQHandler+0x14e>
 80060f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fb92 	bl	8006826 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	bf0c      	ite	eq
 8006110:	2301      	moveq	r3, #1
 8006112:	2300      	movne	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d103      	bne.n	800612e <HAL_UART_IRQHandler+0x17a>
 8006126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d04f      	beq.n	80061ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fa9a 	bl	8006668 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d141      	bne.n	80061c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3314      	adds	r3, #20
 8006148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800615c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3314      	adds	r3, #20
 800616a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800616e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800617a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1d9      	bne.n	8006142 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	2b00      	cmp	r3, #0
 8006194:	d013      	beq.n	80061be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	4a7d      	ldr	r2, [pc, #500]	; (8006390 <HAL_UART_IRQHandler+0x3dc>)
 800619c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fc fb45 	bl	8002832 <HAL_DMA_Abort_IT>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d016      	beq.n	80061dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061b8:	4610      	mov	r0, r2
 80061ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061bc:	e00e      	b.n	80061dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f990 	bl	80064e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c4:	e00a      	b.n	80061dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f98c 	bl	80064e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061cc:	e006      	b.n	80061dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f988 	bl	80064e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80061da:	e170      	b.n	80064be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061dc:	bf00      	nop
    return;
 80061de:	e16e      	b.n	80064be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	f040 814a 	bne.w	800647e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8143 	beq.w	800647e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 813c 	beq.w	800647e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006206:	2300      	movs	r3, #0
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60bb      	str	r3, [r7, #8]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006226:	2b40      	cmp	r3, #64	; 0x40
 8006228:	f040 80b4 	bne.w	8006394 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006238:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8140 	beq.w	80064c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800624a:	429a      	cmp	r2, r3
 800624c:	f080 8139 	bcs.w	80064c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006256:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006262:	f000 8088 	beq.w	8006376 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	330c      	adds	r3, #12
 800626c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800627c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006292:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800629e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1d9      	bne.n	8006266 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3314      	adds	r3, #20
 80062b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3314      	adds	r3, #20
 80062d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e1      	bne.n	80062b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3314      	adds	r3, #20
 80062f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3314      	adds	r3, #20
 800630e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006312:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006314:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006318:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e3      	bne.n	80062ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	330c      	adds	r3, #12
 800633a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006346:	f023 0310 	bic.w	r3, r3, #16
 800634a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	330c      	adds	r3, #12
 8006354:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006358:	65ba      	str	r2, [r7, #88]	; 0x58
 800635a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800635e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e3      	bne.n	8006334 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	4618      	mov	r0, r3
 8006372:	f7fc f9ee 	bl	8002752 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800637e:	b29b      	uxth	r3, r3
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	b29b      	uxth	r3, r3
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8b6 	bl	80064f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800638c:	e099      	b.n	80064c2 <HAL_UART_IRQHandler+0x50e>
 800638e:	bf00      	nop
 8006390:	0800672f 	.word	0x0800672f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800639c:	b29b      	uxth	r3, r3
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 808b 	beq.w	80064c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80063b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8086 	beq.w	80064c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	330c      	adds	r3, #12
 80063c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	330c      	adds	r3, #12
 80063da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063de:	647a      	str	r2, [r7, #68]	; 0x44
 80063e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e3      	bne.n	80063ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3314      	adds	r3, #20
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	623b      	str	r3, [r7, #32]
   return(result);
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3314      	adds	r3, #20
 8006412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006416:	633a      	str	r2, [r7, #48]	; 0x30
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800641c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e3      	bne.n	80063f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	60fb      	str	r3, [r7, #12]
   return(result);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0310 	bic.w	r3, r3, #16
 800644e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800645c:	61fa      	str	r2, [r7, #28]
 800645e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	69b9      	ldr	r1, [r7, #24]
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	617b      	str	r3, [r7, #20]
   return(result);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e3      	bne.n	8006438 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f83e 	bl	80064f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800647c:	e023      	b.n	80064c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800647e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_UART_IRQHandler+0x4ea>
 800648a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800648e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f95d 	bl	8006756 <UART_Transmit_IT>
    return;
 800649c:	e014      	b.n	80064c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800649e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00e      	beq.n	80064c8 <HAL_UART_IRQHandler+0x514>
 80064aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d008      	beq.n	80064c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f99d 	bl	80067f6 <UART_EndTransmit_IT>
    return;
 80064bc:	e004      	b.n	80064c8 <HAL_UART_IRQHandler+0x514>
    return;
 80064be:	bf00      	nop
 80064c0:	e002      	b.n	80064c8 <HAL_UART_IRQHandler+0x514>
      return;
 80064c2:	bf00      	nop
 80064c4:	e000      	b.n	80064c8 <HAL_UART_IRQHandler+0x514>
      return;
 80064c6:	bf00      	nop
  }
}
 80064c8:	37e8      	adds	r7, #232	; 0xe8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop

080064d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b090      	sub	sp, #64	; 0x40
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006520:	e050      	b.n	80065c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d04c      	beq.n	80065c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800652a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800652c:	2b00      	cmp	r3, #0
 800652e:	d007      	beq.n	8006540 <UART_WaitOnFlagUntilTimeout+0x30>
 8006530:	f7fb fff2 	bl	8002518 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800653c:	429a      	cmp	r2, r3
 800653e:	d241      	bcs.n	80065c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006560:	637a      	str	r2, [r7, #52]	; 0x34
 8006562:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e5      	bne.n	8006540 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3314      	adds	r3, #20
 800657a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	613b      	str	r3, [r7, #16]
   return(result);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f023 0301 	bic.w	r3, r3, #1
 800658a:	63bb      	str	r3, [r7, #56]	; 0x38
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3314      	adds	r3, #20
 8006592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006594:	623a      	str	r2, [r7, #32]
 8006596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	69f9      	ldr	r1, [r7, #28]
 800659a:	6a3a      	ldr	r2, [r7, #32]
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e5      	bne.n	8006574 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e00f      	b.n	80065e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4013      	ands	r3, r2
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	bf0c      	ite	eq
 80065d4:	2301      	moveq	r3, #1
 80065d6:	2300      	movne	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	461a      	mov	r2, r3
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d09f      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3740      	adds	r7, #64	; 0x40
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	88fa      	ldrh	r2, [r7, #6]
 8006604:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	88fa      	ldrh	r2, [r7, #6]
 800660a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2222      	movs	r2, #34	; 0x22
 8006616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d007      	beq.n	800663a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006638:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695a      	ldr	r2, [r3, #20]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0201 	orr.w	r2, r2, #1
 8006648:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0220 	orr.w	r2, r2, #32
 8006658:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006668:	b480      	push	{r7}
 800666a:	b095      	sub	sp, #84	; 0x54
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	330c      	adds	r3, #12
 800668e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006690:	643a      	str	r2, [r7, #64]	; 0x40
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e5      	bne.n	8006670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3314      	adds	r3, #20
 80066aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	f023 0301 	bic.w	r3, r3, #1
 80066ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3314      	adds	r3, #20
 80066c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e5      	bne.n	80066a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d119      	bne.n	8006714 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f023 0310 	bic.w	r3, r3, #16
 80066f6:	647b      	str	r3, [r7, #68]	; 0x44
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330c      	adds	r3, #12
 80066fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006700:	61ba      	str	r2, [r7, #24]
 8006702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	6979      	ldr	r1, [r7, #20]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	613b      	str	r3, [r7, #16]
   return(result);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e5      	bne.n	80066e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006722:	bf00      	nop
 8006724:	3754      	adds	r7, #84	; 0x54
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff fecb 	bl	80064e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800674e:	bf00      	nop
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006756:	b480      	push	{r7}
 8006758:	b085      	sub	sp, #20
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b21      	cmp	r3, #33	; 0x21
 8006768:	d13e      	bne.n	80067e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006772:	d114      	bne.n	800679e <UART_Transmit_IT+0x48>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d110      	bne.n	800679e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006790:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	1c9a      	adds	r2, r3, #2
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	621a      	str	r2, [r3, #32]
 800679c:	e008      	b.n	80067b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	1c59      	adds	r1, r3, #1
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6211      	str	r1, [r2, #32]
 80067a8:	781a      	ldrb	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	4619      	mov	r1, r3
 80067be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10f      	bne.n	80067e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	e000      	b.n	80067ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067e8:	2302      	movs	r3, #2
  }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fe5a 	bl	80064d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b08c      	sub	sp, #48	; 0x30
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b22      	cmp	r3, #34	; 0x22
 8006838:	f040 80ab 	bne.w	8006992 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006844:	d117      	bne.n	8006876 <UART_Receive_IT+0x50>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d113      	bne.n	8006876 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006864:	b29a      	uxth	r2, r3
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	1c9a      	adds	r2, r3, #2
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	629a      	str	r2, [r3, #40]	; 0x28
 8006874:	e026      	b.n	80068c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800687c:	2300      	movs	r3, #0
 800687e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006888:	d007      	beq.n	800689a <UART_Receive_IT+0x74>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <UART_Receive_IT+0x82>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	e008      	b.n	80068ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	4619      	mov	r1, r3
 80068d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d15a      	bne.n	800698e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0220 	bic.w	r2, r2, #32
 80068e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	2b01      	cmp	r3, #1
 8006916:	d135      	bne.n	8006984 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	330c      	adds	r3, #12
 8006924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	613b      	str	r3, [r7, #16]
   return(result);
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f023 0310 	bic.w	r3, r3, #16
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	330c      	adds	r3, #12
 800693c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693e:	623a      	str	r2, [r7, #32]
 8006940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	69f9      	ldr	r1, [r7, #28]
 8006944:	6a3a      	ldr	r2, [r7, #32]
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	61bb      	str	r3, [r7, #24]
   return(result);
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e5      	bne.n	800691e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b10      	cmp	r3, #16
 800695e:	d10a      	bne.n	8006976 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff fdbb 	bl	80064f8 <HAL_UARTEx_RxEventCallback>
 8006982:	e002      	b.n	800698a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fa feb3 	bl	80016f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	e002      	b.n	8006994 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e000      	b.n	8006994 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006992:	2302      	movs	r3, #2
  }
}
 8006994:	4618      	mov	r0, r3
 8006996:	3730      	adds	r7, #48	; 0x30
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800699c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a0:	b0c0      	sub	sp, #256	; 0x100
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b8:	68d9      	ldr	r1, [r3, #12]
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	ea40 0301 	orr.w	r3, r0, r1
 80069c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	431a      	orrs	r2, r3
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069f4:	f021 010c 	bic.w	r1, r1, #12
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a02:	430b      	orrs	r3, r1
 8006a04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a16:	6999      	ldr	r1, [r3, #24]
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	ea40 0301 	orr.w	r3, r0, r1
 8006a22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b8f      	ldr	r3, [pc, #572]	; (8006c68 <UART_SetConfig+0x2cc>)
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d005      	beq.n	8006a3c <UART_SetConfig+0xa0>
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	4b8d      	ldr	r3, [pc, #564]	; (8006c6c <UART_SetConfig+0x2d0>)
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d104      	bne.n	8006a46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a3c:	f7fe fc7e 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 8006a40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a44:	e003      	b.n	8006a4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a46:	f7fe fc65 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 8006a4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a58:	f040 810c 	bne.w	8006c74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a6e:	4622      	mov	r2, r4
 8006a70:	462b      	mov	r3, r5
 8006a72:	1891      	adds	r1, r2, r2
 8006a74:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a76:	415b      	adcs	r3, r3
 8006a78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a7e:	4621      	mov	r1, r4
 8006a80:	eb12 0801 	adds.w	r8, r2, r1
 8006a84:	4629      	mov	r1, r5
 8006a86:	eb43 0901 	adc.w	r9, r3, r1
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a9e:	4690      	mov	r8, r2
 8006aa0:	4699      	mov	r9, r3
 8006aa2:	4623      	mov	r3, r4
 8006aa4:	eb18 0303 	adds.w	r3, r8, r3
 8006aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006aac:	462b      	mov	r3, r5
 8006aae:	eb49 0303 	adc.w	r3, r9, r3
 8006ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ac2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ac6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006aca:	460b      	mov	r3, r1
 8006acc:	18db      	adds	r3, r3, r3
 8006ace:	653b      	str	r3, [r7, #80]	; 0x50
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	eb42 0303 	adc.w	r3, r2, r3
 8006ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ad8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006adc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ae0:	f7fa f8d2 	bl	8000c88 <__aeabi_uldivmod>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4b61      	ldr	r3, [pc, #388]	; (8006c70 <UART_SetConfig+0x2d4>)
 8006aea:	fba3 2302 	umull	r2, r3, r3, r2
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	011c      	lsls	r4, r3, #4
 8006af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006afc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b04:	4642      	mov	r2, r8
 8006b06:	464b      	mov	r3, r9
 8006b08:	1891      	adds	r1, r2, r2
 8006b0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b0c:	415b      	adcs	r3, r3
 8006b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b14:	4641      	mov	r1, r8
 8006b16:	eb12 0a01 	adds.w	sl, r2, r1
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b20:	f04f 0200 	mov.w	r2, #0
 8006b24:	f04f 0300 	mov.w	r3, #0
 8006b28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b34:	4692      	mov	sl, r2
 8006b36:	469b      	mov	fp, r3
 8006b38:	4643      	mov	r3, r8
 8006b3a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b42:	464b      	mov	r3, r9
 8006b44:	eb4b 0303 	adc.w	r3, fp, r3
 8006b48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b60:	460b      	mov	r3, r1
 8006b62:	18db      	adds	r3, r3, r3
 8006b64:	643b      	str	r3, [r7, #64]	; 0x40
 8006b66:	4613      	mov	r3, r2
 8006b68:	eb42 0303 	adc.w	r3, r2, r3
 8006b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b76:	f7fa f887 	bl	8000c88 <__aeabi_uldivmod>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4611      	mov	r1, r2
 8006b80:	4b3b      	ldr	r3, [pc, #236]	; (8006c70 <UART_SetConfig+0x2d4>)
 8006b82:	fba3 2301 	umull	r2, r3, r3, r1
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	2264      	movs	r2, #100	; 0x64
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	1acb      	subs	r3, r1, r3
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b96:	4b36      	ldr	r3, [pc, #216]	; (8006c70 <UART_SetConfig+0x2d4>)
 8006b98:	fba3 2302 	umull	r2, r3, r3, r2
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ba4:	441c      	add	r4, r3
 8006ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	1891      	adds	r1, r2, r2
 8006bbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bc0:	415b      	adcs	r3, r3
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bc8:	4641      	mov	r1, r8
 8006bca:	1851      	adds	r1, r2, r1
 8006bcc:	6339      	str	r1, [r7, #48]	; 0x30
 8006bce:	4649      	mov	r1, r9
 8006bd0:	414b      	adcs	r3, r1
 8006bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006be0:	4659      	mov	r1, fp
 8006be2:	00cb      	lsls	r3, r1, #3
 8006be4:	4651      	mov	r1, sl
 8006be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bea:	4651      	mov	r1, sl
 8006bec:	00ca      	lsls	r2, r1, #3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	189b      	adds	r3, r3, r2
 8006bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	460a      	mov	r2, r1
 8006c00:	eb42 0303 	adc.w	r3, r2, r3
 8006c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	18db      	adds	r3, r3, r3
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c22:	4613      	mov	r3, r2
 8006c24:	eb42 0303 	adc.w	r3, r2, r3
 8006c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c32:	f7fa f829 	bl	8000c88 <__aeabi_uldivmod>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <UART_SetConfig+0x2d4>)
 8006c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	2164      	movs	r1, #100	; 0x64
 8006c44:	fb01 f303 	mul.w	r3, r1, r3
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	3332      	adds	r3, #50	; 0x32
 8006c4e:	4a08      	ldr	r2, [pc, #32]	; (8006c70 <UART_SetConfig+0x2d4>)
 8006c50:	fba2 2303 	umull	r2, r3, r2, r3
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	f003 0207 	and.w	r2, r3, #7
 8006c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4422      	add	r2, r4
 8006c62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c64:	e105      	b.n	8006e72 <UART_SetConfig+0x4d6>
 8006c66:	bf00      	nop
 8006c68:	40011000 	.word	0x40011000
 8006c6c:	40011400 	.word	0x40011400
 8006c70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c86:	4642      	mov	r2, r8
 8006c88:	464b      	mov	r3, r9
 8006c8a:	1891      	adds	r1, r2, r2
 8006c8c:	6239      	str	r1, [r7, #32]
 8006c8e:	415b      	adcs	r3, r3
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
 8006c92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c96:	4641      	mov	r1, r8
 8006c98:	1854      	adds	r4, r2, r1
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	eb43 0501 	adc.w	r5, r3, r1
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	00eb      	lsls	r3, r5, #3
 8006caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cae:	00e2      	lsls	r2, r4, #3
 8006cb0:	4614      	mov	r4, r2
 8006cb2:	461d      	mov	r5, r3
 8006cb4:	4643      	mov	r3, r8
 8006cb6:	18e3      	adds	r3, r4, r3
 8006cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	eb45 0303 	adc.w	r3, r5, r3
 8006cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	f04f 0300 	mov.w	r3, #0
 8006cde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	008b      	lsls	r3, r1, #2
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cec:	4621      	mov	r1, r4
 8006cee:	008a      	lsls	r2, r1, #2
 8006cf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006cf4:	f7f9 ffc8 	bl	8000c88 <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4b60      	ldr	r3, [pc, #384]	; (8006e80 <UART_SetConfig+0x4e4>)
 8006cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	011c      	lsls	r4, r3, #4
 8006d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d18:	4642      	mov	r2, r8
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	1891      	adds	r1, r2, r2
 8006d1e:	61b9      	str	r1, [r7, #24]
 8006d20:	415b      	adcs	r3, r3
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d28:	4641      	mov	r1, r8
 8006d2a:	1851      	adds	r1, r2, r1
 8006d2c:	6139      	str	r1, [r7, #16]
 8006d2e:	4649      	mov	r1, r9
 8006d30:	414b      	adcs	r3, r1
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d40:	4659      	mov	r1, fp
 8006d42:	00cb      	lsls	r3, r1, #3
 8006d44:	4651      	mov	r1, sl
 8006d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d4a:	4651      	mov	r1, sl
 8006d4c:	00ca      	lsls	r2, r1, #3
 8006d4e:	4610      	mov	r0, r2
 8006d50:	4619      	mov	r1, r3
 8006d52:	4603      	mov	r3, r0
 8006d54:	4642      	mov	r2, r8
 8006d56:	189b      	adds	r3, r3, r2
 8006d58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d5c:	464b      	mov	r3, r9
 8006d5e:	460a      	mov	r2, r1
 8006d60:	eb42 0303 	adc.w	r3, r2, r3
 8006d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	f04f 0300 	mov.w	r3, #0
 8006d7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d80:	4649      	mov	r1, r9
 8006d82:	008b      	lsls	r3, r1, #2
 8006d84:	4641      	mov	r1, r8
 8006d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d8a:	4641      	mov	r1, r8
 8006d8c:	008a      	lsls	r2, r1, #2
 8006d8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d92:	f7f9 ff79 	bl	8000c88 <__aeabi_uldivmod>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4b39      	ldr	r3, [pc, #228]	; (8006e80 <UART_SetConfig+0x4e4>)
 8006d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	2164      	movs	r1, #100	; 0x64
 8006da4:	fb01 f303 	mul.w	r3, r1, r3
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	3332      	adds	r3, #50	; 0x32
 8006dae:	4a34      	ldr	r2, [pc, #208]	; (8006e80 <UART_SetConfig+0x4e4>)
 8006db0:	fba2 2303 	umull	r2, r3, r2, r3
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dba:	441c      	add	r4, r3
 8006dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	673b      	str	r3, [r7, #112]	; 0x70
 8006dc4:	677a      	str	r2, [r7, #116]	; 0x74
 8006dc6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006dca:	4642      	mov	r2, r8
 8006dcc:	464b      	mov	r3, r9
 8006dce:	1891      	adds	r1, r2, r2
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	415b      	adcs	r3, r3
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dda:	4641      	mov	r1, r8
 8006ddc:	1851      	adds	r1, r2, r1
 8006dde:	6039      	str	r1, [r7, #0]
 8006de0:	4649      	mov	r1, r9
 8006de2:	414b      	adcs	r3, r1
 8006de4:	607b      	str	r3, [r7, #4]
 8006de6:	f04f 0200 	mov.w	r2, #0
 8006dea:	f04f 0300 	mov.w	r3, #0
 8006dee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006df2:	4659      	mov	r1, fp
 8006df4:	00cb      	lsls	r3, r1, #3
 8006df6:	4651      	mov	r1, sl
 8006df8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dfc:	4651      	mov	r1, sl
 8006dfe:	00ca      	lsls	r2, r1, #3
 8006e00:	4610      	mov	r0, r2
 8006e02:	4619      	mov	r1, r3
 8006e04:	4603      	mov	r3, r0
 8006e06:	4642      	mov	r2, r8
 8006e08:	189b      	adds	r3, r3, r2
 8006e0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	460a      	mov	r2, r1
 8006e10:	eb42 0303 	adc.w	r3, r2, r3
 8006e14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	663b      	str	r3, [r7, #96]	; 0x60
 8006e20:	667a      	str	r2, [r7, #100]	; 0x64
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e2e:	4649      	mov	r1, r9
 8006e30:	008b      	lsls	r3, r1, #2
 8006e32:	4641      	mov	r1, r8
 8006e34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e38:	4641      	mov	r1, r8
 8006e3a:	008a      	lsls	r2, r1, #2
 8006e3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e40:	f7f9 ff22 	bl	8000c88 <__aeabi_uldivmod>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <UART_SetConfig+0x4e4>)
 8006e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	2164      	movs	r1, #100	; 0x64
 8006e52:	fb01 f303 	mul.w	r3, r1, r3
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	3332      	adds	r3, #50	; 0x32
 8006e5c:	4a08      	ldr	r2, [pc, #32]	; (8006e80 <UART_SetConfig+0x4e4>)
 8006e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e62:	095b      	lsrs	r3, r3, #5
 8006e64:	f003 020f 	and.w	r2, r3, #15
 8006e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4422      	add	r2, r4
 8006e70:	609a      	str	r2, [r3, #8]
}
 8006e72:	bf00      	nop
 8006e74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e7e:	bf00      	nop
 8006e80:	51eb851f 	.word	0x51eb851f

08006e84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f043 0201 	orr.w	r2, r3, #1
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f023 0201 	bic.w	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4a13      	ldr	r2, [pc, #76]	; (8006f2c <USB_FlushTxFifo+0x64>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d901      	bls.n	8006ee8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e01b      	b.n	8006f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	daf2      	bge.n	8006ed6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	019b      	lsls	r3, r3, #6
 8006ef8:	f043 0220 	orr.w	r2, r3, #32
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4a08      	ldr	r2, [pc, #32]	; (8006f2c <USB_FlushTxFifo+0x64>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d901      	bls.n	8006f12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e006      	b.n	8006f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	d0f0      	beq.n	8006f00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	00030d40 	.word	0x00030d40

08006f30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4a11      	ldr	r2, [pc, #68]	; (8006f8c <USB_FlushRxFifo+0x5c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d901      	bls.n	8006f4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e018      	b.n	8006f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	daf2      	bge.n	8006f3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2210      	movs	r2, #16
 8006f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3301      	adds	r3, #1
 8006f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4a08      	ldr	r2, [pc, #32]	; (8006f8c <USB_FlushRxFifo+0x5c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d901      	bls.n	8006f72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e006      	b.n	8006f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f003 0310 	and.w	r3, r3, #16
 8006f7a:	2b10      	cmp	r3, #16
 8006f7c:	d0f0      	beq.n	8006f60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	00030d40 	.word	0x00030d40

08006f90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b08b      	sub	sp, #44	; 0x2c
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006fa6:	88fb      	ldrh	r3, [r7, #6]
 8006fa8:	089b      	lsrs	r3, r3, #2
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	623b      	str	r3, [r7, #32]
 8006fba:	e014      	b.n	8006fe6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	3301      	adds	r3, #1
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	3301      	adds	r3, #1
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	623b      	str	r3, [r7, #32]
 8006fe6:	6a3a      	ldr	r2, [r7, #32]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d3e6      	bcc.n	8006fbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fee:	8bfb      	ldrh	r3, [r7, #30]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01e      	beq.n	8007032 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ffe:	461a      	mov	r2, r3
 8007000:	f107 0310 	add.w	r3, r7, #16
 8007004:	6812      	ldr	r2, [r2, #0]
 8007006:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	fa22 f303 	lsr.w	r3, r2, r3
 8007014:	b2da      	uxtb	r2, r3
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	701a      	strb	r2, [r3, #0]
      i++;
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	3301      	adds	r3, #1
 800701e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	3301      	adds	r3, #1
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007026:	8bfb      	ldrh	r3, [r7, #30]
 8007028:	3b01      	subs	r3, #1
 800702a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800702c:	8bfb      	ldrh	r3, [r7, #30]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1ea      	bne.n	8007008 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007034:	4618      	mov	r0, r3
 8007036:	372c      	adds	r7, #44	; 0x2c
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4013      	ands	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007058:	68fb      	ldr	r3, [r7, #12]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f003 0301 	and.w	r3, r3, #1
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070a0:	f023 0303 	bic.w	r3, r3, #3
 80070a4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	f003 0303 	and.w	r3, r3, #3
 80070b4:	68f9      	ldr	r1, [r7, #12]
 80070b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80070ba:	4313      	orrs	r3, r2
 80070bc:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d107      	bne.n	80070d4 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070ca:	461a      	mov	r2, r3
 80070cc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80070d0:	6053      	str	r3, [r2, #4]
 80070d2:	e009      	b.n	80070e8 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d106      	bne.n	80070e8 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070e0:	461a      	mov	r2, r3
 80070e2:	f241 7370 	movw	r3, #6000	; 0x1770
 80070e6:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	b29b      	uxth	r3, r3
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007118:	b480      	push	{r7}
 800711a:	b089      	sub	sp, #36	; 0x24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	4413      	add	r3, r2
 8007138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	0c9b      	lsrs	r3, r3, #18
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	4413      	add	r3, r2
 800714e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	0fdb      	lsrs	r3, r3, #31
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 0320 	and.w	r3, r3, #32
 8007164:	2b20      	cmp	r3, #32
 8007166:	d104      	bne.n	8007172 <USB_HC_Halt+0x5a>
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	e0c8      	b.n	8007304 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <USB_HC_Halt+0x66>
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d163      	bne.n	8007246 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	440a      	add	r2, r1
 8007194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800719c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f040 80ab 	bne.w	8007302 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d133      	bne.n	8007220 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	0151      	lsls	r1, r2, #5
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	440a      	add	r2, r1
 80071ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071d6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071f6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007204:	d81d      	bhi.n	8007242 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	4413      	add	r3, r2
 800720e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800721c:	d0ec      	beq.n	80071f8 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800721e:	e070      	b.n	8007302 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4413      	add	r3, r2
 8007228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	0151      	lsls	r1, r2, #5
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	440a      	add	r2, r1
 8007236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800723a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800723e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007240:	e05f      	b.n	8007302 <USB_HC_Halt+0x1ea>
            break;
 8007242:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007244:	e05d      	b.n	8007302 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	0151      	lsls	r1, r2, #5
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	440a      	add	r2, r1
 800725c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007260:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007264:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d133      	bne.n	80072de <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4413      	add	r3, r2
 800727e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	0151      	lsls	r1, r2, #5
 8007288:	69fa      	ldr	r2, [r7, #28]
 800728a:	440a      	add	r2, r1
 800728c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007294:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072b4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072c2:	d81d      	bhi.n	8007300 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072da:	d0ec      	beq.n	80072b6 <USB_HC_Halt+0x19e>
 80072dc:	e011      	b.n	8007302 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	e000      	b.n	8007302 <USB_HC_Halt+0x1ea>
          break;
 8007300:	bf00      	nop
    }
  }

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3724      	adds	r7, #36	; 0x24
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff fdbe 	bl	8006ea6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800732a:	2110      	movs	r1, #16
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff fdcb 	bl	8006ec8 <USB_FlushTxFifo>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff fdf7 	bl	8006f30 <USB_FlushRxFifo>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800734c:	2300      	movs	r3, #0
 800734e:	61bb      	str	r3, [r7, #24]
 8007350:	e01f      	b.n	8007392 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007368:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007370:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007378:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	4413      	add	r3, r2
 8007382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007386:	461a      	mov	r2, r3
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	3301      	adds	r3, #1
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b0f      	cmp	r3, #15
 8007396:	d9dc      	bls.n	8007352 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007398:	2300      	movs	r3, #0
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	e034      	b.n	8007408 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d2:	461a      	mov	r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073e4:	d80c      	bhi.n	8007400 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073fc:	d0ec      	beq.n	80073d8 <USB_StopHost+0xc8>
 80073fe:	e000      	b.n	8007402 <USB_StopHost+0xf2>
        break;
 8007400:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	3301      	adds	r3, #1
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b0f      	cmp	r3, #15
 800740c:	d9c7      	bls.n	800739e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007414:	461a      	mov	r2, r3
 8007416:	f04f 33ff 	mov.w	r3, #4294967295
 800741a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f04f 32ff 	mov.w	r2, #4294967295
 8007422:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fd2d 	bl	8006e84 <USB_EnableGlobalInt>

  return ret;
 800742a:	7ffb      	ldrb	r3, [r7, #31]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3720      	adds	r7, #32
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f804 	bl	8007458 <USBH_HandleSof>
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b0b      	cmp	r3, #11
 8007468:	d10a      	bne.n	8007480 <USBH_HandleSof+0x28>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	4798      	blx	r3
  }
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007498:	bf00      	nop
}
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80074b4:	bf00      	nop
}
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b082      	sub	sp, #8
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f883 	bl	800761a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	791b      	ldrb	r3, [r3, #4]
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f80b 	bl	8007536 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	795b      	ldrb	r3, [r3, #5]
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f805 	bl	8007536 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007542:	78fb      	ldrb	r3, [r7, #3]
 8007544:	2b0f      	cmp	r3, #15
 8007546:	d80d      	bhi.n	8007564 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	33e0      	adds	r3, #224	; 0xe0
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	33e0      	adds	r3, #224	; 0xe0
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	440b      	add	r3, r1
 8007562:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff ff57 	bl	8007434 <USBH_LL_IncTimer>
}
 8007586:	bf00      	nop
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff ff8f 	bl	80074c0 <USBH_LL_Connect>
}
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b082      	sub	sp, #8
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff ff98 	bl	80074ee <USBH_LL_Disconnect>
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
 80075d2:	4613      	mov	r3, r2
 80075d4:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7ff ff49 	bl	8007488 <USBH_LL_PortEnabled>
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff ff49 	bl	80074a4 <USBH_LL_PortDisabled>
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007630:	4618      	mov	r0, r3
 8007632:	f7fb fbfb 	bl	8002e2c <HAL_HCD_Stop>
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 f807 	bl	8007650 <USBH_Get_USB_Status>
 8007642:	4603      	mov	r3, r0
 8007644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007646:	7bbb      	ldrb	r3, [r7, #14]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800765e:	79fb      	ldrb	r3, [r7, #7]
 8007660:	2b03      	cmp	r3, #3
 8007662:	d817      	bhi.n	8007694 <USBH_Get_USB_Status+0x44>
 8007664:	a201      	add	r2, pc, #4	; (adr r2, 800766c <USBH_Get_USB_Status+0x1c>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	0800767d 	.word	0x0800767d
 8007670:	08007683 	.word	0x08007683
 8007674:	08007689 	.word	0x08007689
 8007678:	0800768f 	.word	0x0800768f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
    break;
 8007680:	e00b      	b.n	800769a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007682:	2302      	movs	r3, #2
 8007684:	73fb      	strb	r3, [r7, #15]
    break;
 8007686:	e008      	b.n	800769a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007688:	2301      	movs	r3, #1
 800768a:	73fb      	strb	r3, [r7, #15]
    break;
 800768c:	e005      	b.n	800769a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800768e:	2302      	movs	r3, #2
 8007690:	73fb      	strb	r3, [r7, #15]
    break;
 8007692:	e002      	b.n	800769a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007694:	2302      	movs	r3, #2
 8007696:	73fb      	strb	r3, [r7, #15]
    break;
 8007698:	bf00      	nop
  }
  return usb_status;
 800769a:	7bfb      	ldrb	r3, [r7, #15]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <__errno>:
 80076a8:	4b01      	ldr	r3, [pc, #4]	; (80076b0 <__errno+0x8>)
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	2000000c 	.word	0x2000000c

080076b4 <__libc_init_array>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	4d0d      	ldr	r5, [pc, #52]	; (80076ec <__libc_init_array+0x38>)
 80076b8:	4c0d      	ldr	r4, [pc, #52]	; (80076f0 <__libc_init_array+0x3c>)
 80076ba:	1b64      	subs	r4, r4, r5
 80076bc:	10a4      	asrs	r4, r4, #2
 80076be:	2600      	movs	r6, #0
 80076c0:	42a6      	cmp	r6, r4
 80076c2:	d109      	bne.n	80076d8 <__libc_init_array+0x24>
 80076c4:	4d0b      	ldr	r5, [pc, #44]	; (80076f4 <__libc_init_array+0x40>)
 80076c6:	4c0c      	ldr	r4, [pc, #48]	; (80076f8 <__libc_init_array+0x44>)
 80076c8:	f004 fc8e 	bl	800bfe8 <_init>
 80076cc:	1b64      	subs	r4, r4, r5
 80076ce:	10a4      	asrs	r4, r4, #2
 80076d0:	2600      	movs	r6, #0
 80076d2:	42a6      	cmp	r6, r4
 80076d4:	d105      	bne.n	80076e2 <__libc_init_array+0x2e>
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076dc:	4798      	blx	r3
 80076de:	3601      	adds	r6, #1
 80076e0:	e7ee      	b.n	80076c0 <__libc_init_array+0xc>
 80076e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e6:	4798      	blx	r3
 80076e8:	3601      	adds	r6, #1
 80076ea:	e7f2      	b.n	80076d2 <__libc_init_array+0x1e>
 80076ec:	0800c574 	.word	0x0800c574
 80076f0:	0800c574 	.word	0x0800c574
 80076f4:	0800c574 	.word	0x0800c574
 80076f8:	0800c578 	.word	0x0800c578

080076fc <malloc>:
 80076fc:	4b02      	ldr	r3, [pc, #8]	; (8007708 <malloc+0xc>)
 80076fe:	4601      	mov	r1, r0
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	f000 b885 	b.w	8007810 <_malloc_r>
 8007706:	bf00      	nop
 8007708:	2000000c 	.word	0x2000000c

0800770c <memcpy>:
 800770c:	440a      	add	r2, r1
 800770e:	4291      	cmp	r1, r2
 8007710:	f100 33ff 	add.w	r3, r0, #4294967295
 8007714:	d100      	bne.n	8007718 <memcpy+0xc>
 8007716:	4770      	bx	lr
 8007718:	b510      	push	{r4, lr}
 800771a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800771e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007722:	4291      	cmp	r1, r2
 8007724:	d1f9      	bne.n	800771a <memcpy+0xe>
 8007726:	bd10      	pop	{r4, pc}

08007728 <memset>:
 8007728:	4402      	add	r2, r0
 800772a:	4603      	mov	r3, r0
 800772c:	4293      	cmp	r3, r2
 800772e:	d100      	bne.n	8007732 <memset+0xa>
 8007730:	4770      	bx	lr
 8007732:	f803 1b01 	strb.w	r1, [r3], #1
 8007736:	e7f9      	b.n	800772c <memset+0x4>

08007738 <_free_r>:
 8007738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800773a:	2900      	cmp	r1, #0
 800773c:	d044      	beq.n	80077c8 <_free_r+0x90>
 800773e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007742:	9001      	str	r0, [sp, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f1a1 0404 	sub.w	r4, r1, #4
 800774a:	bfb8      	it	lt
 800774c:	18e4      	addlt	r4, r4, r3
 800774e:	f003 f82f 	bl	800a7b0 <__malloc_lock>
 8007752:	4a1e      	ldr	r2, [pc, #120]	; (80077cc <_free_r+0x94>)
 8007754:	9801      	ldr	r0, [sp, #4]
 8007756:	6813      	ldr	r3, [r2, #0]
 8007758:	b933      	cbnz	r3, 8007768 <_free_r+0x30>
 800775a:	6063      	str	r3, [r4, #4]
 800775c:	6014      	str	r4, [r2, #0]
 800775e:	b003      	add	sp, #12
 8007760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007764:	f003 b82a 	b.w	800a7bc <__malloc_unlock>
 8007768:	42a3      	cmp	r3, r4
 800776a:	d908      	bls.n	800777e <_free_r+0x46>
 800776c:	6825      	ldr	r5, [r4, #0]
 800776e:	1961      	adds	r1, r4, r5
 8007770:	428b      	cmp	r3, r1
 8007772:	bf01      	itttt	eq
 8007774:	6819      	ldreq	r1, [r3, #0]
 8007776:	685b      	ldreq	r3, [r3, #4]
 8007778:	1949      	addeq	r1, r1, r5
 800777a:	6021      	streq	r1, [r4, #0]
 800777c:	e7ed      	b.n	800775a <_free_r+0x22>
 800777e:	461a      	mov	r2, r3
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	b10b      	cbz	r3, 8007788 <_free_r+0x50>
 8007784:	42a3      	cmp	r3, r4
 8007786:	d9fa      	bls.n	800777e <_free_r+0x46>
 8007788:	6811      	ldr	r1, [r2, #0]
 800778a:	1855      	adds	r5, r2, r1
 800778c:	42a5      	cmp	r5, r4
 800778e:	d10b      	bne.n	80077a8 <_free_r+0x70>
 8007790:	6824      	ldr	r4, [r4, #0]
 8007792:	4421      	add	r1, r4
 8007794:	1854      	adds	r4, r2, r1
 8007796:	42a3      	cmp	r3, r4
 8007798:	6011      	str	r1, [r2, #0]
 800779a:	d1e0      	bne.n	800775e <_free_r+0x26>
 800779c:	681c      	ldr	r4, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	6053      	str	r3, [r2, #4]
 80077a2:	4421      	add	r1, r4
 80077a4:	6011      	str	r1, [r2, #0]
 80077a6:	e7da      	b.n	800775e <_free_r+0x26>
 80077a8:	d902      	bls.n	80077b0 <_free_r+0x78>
 80077aa:	230c      	movs	r3, #12
 80077ac:	6003      	str	r3, [r0, #0]
 80077ae:	e7d6      	b.n	800775e <_free_r+0x26>
 80077b0:	6825      	ldr	r5, [r4, #0]
 80077b2:	1961      	adds	r1, r4, r5
 80077b4:	428b      	cmp	r3, r1
 80077b6:	bf04      	itt	eq
 80077b8:	6819      	ldreq	r1, [r3, #0]
 80077ba:	685b      	ldreq	r3, [r3, #4]
 80077bc:	6063      	str	r3, [r4, #4]
 80077be:	bf04      	itt	eq
 80077c0:	1949      	addeq	r1, r1, r5
 80077c2:	6021      	streq	r1, [r4, #0]
 80077c4:	6054      	str	r4, [r2, #4]
 80077c6:	e7ca      	b.n	800775e <_free_r+0x26>
 80077c8:	b003      	add	sp, #12
 80077ca:	bd30      	pop	{r4, r5, pc}
 80077cc:	200008a4 	.word	0x200008a4

080077d0 <sbrk_aligned>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	4e0e      	ldr	r6, [pc, #56]	; (800780c <sbrk_aligned+0x3c>)
 80077d4:	460c      	mov	r4, r1
 80077d6:	6831      	ldr	r1, [r6, #0]
 80077d8:	4605      	mov	r5, r0
 80077da:	b911      	cbnz	r1, 80077e2 <sbrk_aligned+0x12>
 80077dc:	f000 ff06 	bl	80085ec <_sbrk_r>
 80077e0:	6030      	str	r0, [r6, #0]
 80077e2:	4621      	mov	r1, r4
 80077e4:	4628      	mov	r0, r5
 80077e6:	f000 ff01 	bl	80085ec <_sbrk_r>
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	d00a      	beq.n	8007804 <sbrk_aligned+0x34>
 80077ee:	1cc4      	adds	r4, r0, #3
 80077f0:	f024 0403 	bic.w	r4, r4, #3
 80077f4:	42a0      	cmp	r0, r4
 80077f6:	d007      	beq.n	8007808 <sbrk_aligned+0x38>
 80077f8:	1a21      	subs	r1, r4, r0
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 fef6 	bl	80085ec <_sbrk_r>
 8007800:	3001      	adds	r0, #1
 8007802:	d101      	bne.n	8007808 <sbrk_aligned+0x38>
 8007804:	f04f 34ff 	mov.w	r4, #4294967295
 8007808:	4620      	mov	r0, r4
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	200008a8 	.word	0x200008a8

08007810 <_malloc_r>:
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	1ccd      	adds	r5, r1, #3
 8007816:	f025 0503 	bic.w	r5, r5, #3
 800781a:	3508      	adds	r5, #8
 800781c:	2d0c      	cmp	r5, #12
 800781e:	bf38      	it	cc
 8007820:	250c      	movcc	r5, #12
 8007822:	2d00      	cmp	r5, #0
 8007824:	4607      	mov	r7, r0
 8007826:	db01      	blt.n	800782c <_malloc_r+0x1c>
 8007828:	42a9      	cmp	r1, r5
 800782a:	d905      	bls.n	8007838 <_malloc_r+0x28>
 800782c:	230c      	movs	r3, #12
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	2600      	movs	r6, #0
 8007832:	4630      	mov	r0, r6
 8007834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007838:	4e2e      	ldr	r6, [pc, #184]	; (80078f4 <_malloc_r+0xe4>)
 800783a:	f002 ffb9 	bl	800a7b0 <__malloc_lock>
 800783e:	6833      	ldr	r3, [r6, #0]
 8007840:	461c      	mov	r4, r3
 8007842:	bb34      	cbnz	r4, 8007892 <_malloc_r+0x82>
 8007844:	4629      	mov	r1, r5
 8007846:	4638      	mov	r0, r7
 8007848:	f7ff ffc2 	bl	80077d0 <sbrk_aligned>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	4604      	mov	r4, r0
 8007850:	d14d      	bne.n	80078ee <_malloc_r+0xde>
 8007852:	6834      	ldr	r4, [r6, #0]
 8007854:	4626      	mov	r6, r4
 8007856:	2e00      	cmp	r6, #0
 8007858:	d140      	bne.n	80078dc <_malloc_r+0xcc>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	4631      	mov	r1, r6
 800785e:	4638      	mov	r0, r7
 8007860:	eb04 0803 	add.w	r8, r4, r3
 8007864:	f000 fec2 	bl	80085ec <_sbrk_r>
 8007868:	4580      	cmp	r8, r0
 800786a:	d13a      	bne.n	80078e2 <_malloc_r+0xd2>
 800786c:	6821      	ldr	r1, [r4, #0]
 800786e:	3503      	adds	r5, #3
 8007870:	1a6d      	subs	r5, r5, r1
 8007872:	f025 0503 	bic.w	r5, r5, #3
 8007876:	3508      	adds	r5, #8
 8007878:	2d0c      	cmp	r5, #12
 800787a:	bf38      	it	cc
 800787c:	250c      	movcc	r5, #12
 800787e:	4629      	mov	r1, r5
 8007880:	4638      	mov	r0, r7
 8007882:	f7ff ffa5 	bl	80077d0 <sbrk_aligned>
 8007886:	3001      	adds	r0, #1
 8007888:	d02b      	beq.n	80078e2 <_malloc_r+0xd2>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	442b      	add	r3, r5
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	e00e      	b.n	80078b0 <_malloc_r+0xa0>
 8007892:	6822      	ldr	r2, [r4, #0]
 8007894:	1b52      	subs	r2, r2, r5
 8007896:	d41e      	bmi.n	80078d6 <_malloc_r+0xc6>
 8007898:	2a0b      	cmp	r2, #11
 800789a:	d916      	bls.n	80078ca <_malloc_r+0xba>
 800789c:	1961      	adds	r1, r4, r5
 800789e:	42a3      	cmp	r3, r4
 80078a0:	6025      	str	r5, [r4, #0]
 80078a2:	bf18      	it	ne
 80078a4:	6059      	strne	r1, [r3, #4]
 80078a6:	6863      	ldr	r3, [r4, #4]
 80078a8:	bf08      	it	eq
 80078aa:	6031      	streq	r1, [r6, #0]
 80078ac:	5162      	str	r2, [r4, r5]
 80078ae:	604b      	str	r3, [r1, #4]
 80078b0:	4638      	mov	r0, r7
 80078b2:	f104 060b 	add.w	r6, r4, #11
 80078b6:	f002 ff81 	bl	800a7bc <__malloc_unlock>
 80078ba:	f026 0607 	bic.w	r6, r6, #7
 80078be:	1d23      	adds	r3, r4, #4
 80078c0:	1af2      	subs	r2, r6, r3
 80078c2:	d0b6      	beq.n	8007832 <_malloc_r+0x22>
 80078c4:	1b9b      	subs	r3, r3, r6
 80078c6:	50a3      	str	r3, [r4, r2]
 80078c8:	e7b3      	b.n	8007832 <_malloc_r+0x22>
 80078ca:	6862      	ldr	r2, [r4, #4]
 80078cc:	42a3      	cmp	r3, r4
 80078ce:	bf0c      	ite	eq
 80078d0:	6032      	streq	r2, [r6, #0]
 80078d2:	605a      	strne	r2, [r3, #4]
 80078d4:	e7ec      	b.n	80078b0 <_malloc_r+0xa0>
 80078d6:	4623      	mov	r3, r4
 80078d8:	6864      	ldr	r4, [r4, #4]
 80078da:	e7b2      	b.n	8007842 <_malloc_r+0x32>
 80078dc:	4634      	mov	r4, r6
 80078de:	6876      	ldr	r6, [r6, #4]
 80078e0:	e7b9      	b.n	8007856 <_malloc_r+0x46>
 80078e2:	230c      	movs	r3, #12
 80078e4:	603b      	str	r3, [r7, #0]
 80078e6:	4638      	mov	r0, r7
 80078e8:	f002 ff68 	bl	800a7bc <__malloc_unlock>
 80078ec:	e7a1      	b.n	8007832 <_malloc_r+0x22>
 80078ee:	6025      	str	r5, [r4, #0]
 80078f0:	e7de      	b.n	80078b0 <_malloc_r+0xa0>
 80078f2:	bf00      	nop
 80078f4:	200008a4 	.word	0x200008a4

080078f8 <__cvt>:
 80078f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078fc:	ec55 4b10 	vmov	r4, r5, d0
 8007900:	2d00      	cmp	r5, #0
 8007902:	460e      	mov	r6, r1
 8007904:	4619      	mov	r1, r3
 8007906:	462b      	mov	r3, r5
 8007908:	bfbb      	ittet	lt
 800790a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800790e:	461d      	movlt	r5, r3
 8007910:	2300      	movge	r3, #0
 8007912:	232d      	movlt	r3, #45	; 0x2d
 8007914:	700b      	strb	r3, [r1, #0]
 8007916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007918:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800791c:	4691      	mov	r9, r2
 800791e:	f023 0820 	bic.w	r8, r3, #32
 8007922:	bfbc      	itt	lt
 8007924:	4622      	movlt	r2, r4
 8007926:	4614      	movlt	r4, r2
 8007928:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800792c:	d005      	beq.n	800793a <__cvt+0x42>
 800792e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007932:	d100      	bne.n	8007936 <__cvt+0x3e>
 8007934:	3601      	adds	r6, #1
 8007936:	2102      	movs	r1, #2
 8007938:	e000      	b.n	800793c <__cvt+0x44>
 800793a:	2103      	movs	r1, #3
 800793c:	ab03      	add	r3, sp, #12
 800793e:	9301      	str	r3, [sp, #4]
 8007940:	ab02      	add	r3, sp, #8
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	ec45 4b10 	vmov	d0, r4, r5
 8007948:	4653      	mov	r3, sl
 800794a:	4632      	mov	r2, r6
 800794c:	f001 fdbc 	bl	80094c8 <_dtoa_r>
 8007950:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007954:	4607      	mov	r7, r0
 8007956:	d102      	bne.n	800795e <__cvt+0x66>
 8007958:	f019 0f01 	tst.w	r9, #1
 800795c:	d022      	beq.n	80079a4 <__cvt+0xac>
 800795e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007962:	eb07 0906 	add.w	r9, r7, r6
 8007966:	d110      	bne.n	800798a <__cvt+0x92>
 8007968:	783b      	ldrb	r3, [r7, #0]
 800796a:	2b30      	cmp	r3, #48	; 0x30
 800796c:	d10a      	bne.n	8007984 <__cvt+0x8c>
 800796e:	2200      	movs	r2, #0
 8007970:	2300      	movs	r3, #0
 8007972:	4620      	mov	r0, r4
 8007974:	4629      	mov	r1, r5
 8007976:	f7f9 f8a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800797a:	b918      	cbnz	r0, 8007984 <__cvt+0x8c>
 800797c:	f1c6 0601 	rsb	r6, r6, #1
 8007980:	f8ca 6000 	str.w	r6, [sl]
 8007984:	f8da 3000 	ldr.w	r3, [sl]
 8007988:	4499      	add	r9, r3
 800798a:	2200      	movs	r2, #0
 800798c:	2300      	movs	r3, #0
 800798e:	4620      	mov	r0, r4
 8007990:	4629      	mov	r1, r5
 8007992:	f7f9 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 8007996:	b108      	cbz	r0, 800799c <__cvt+0xa4>
 8007998:	f8cd 900c 	str.w	r9, [sp, #12]
 800799c:	2230      	movs	r2, #48	; 0x30
 800799e:	9b03      	ldr	r3, [sp, #12]
 80079a0:	454b      	cmp	r3, r9
 80079a2:	d307      	bcc.n	80079b4 <__cvt+0xbc>
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079a8:	1bdb      	subs	r3, r3, r7
 80079aa:	4638      	mov	r0, r7
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	b004      	add	sp, #16
 80079b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b4:	1c59      	adds	r1, r3, #1
 80079b6:	9103      	str	r1, [sp, #12]
 80079b8:	701a      	strb	r2, [r3, #0]
 80079ba:	e7f0      	b.n	800799e <__cvt+0xa6>

080079bc <__exponent>:
 80079bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079be:	4603      	mov	r3, r0
 80079c0:	2900      	cmp	r1, #0
 80079c2:	bfb8      	it	lt
 80079c4:	4249      	neglt	r1, r1
 80079c6:	f803 2b02 	strb.w	r2, [r3], #2
 80079ca:	bfb4      	ite	lt
 80079cc:	222d      	movlt	r2, #45	; 0x2d
 80079ce:	222b      	movge	r2, #43	; 0x2b
 80079d0:	2909      	cmp	r1, #9
 80079d2:	7042      	strb	r2, [r0, #1]
 80079d4:	dd2a      	ble.n	8007a2c <__exponent+0x70>
 80079d6:	f10d 0407 	add.w	r4, sp, #7
 80079da:	46a4      	mov	ip, r4
 80079dc:	270a      	movs	r7, #10
 80079de:	46a6      	mov	lr, r4
 80079e0:	460a      	mov	r2, r1
 80079e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80079e6:	fb07 1516 	mls	r5, r7, r6, r1
 80079ea:	3530      	adds	r5, #48	; 0x30
 80079ec:	2a63      	cmp	r2, #99	; 0x63
 80079ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80079f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079f6:	4631      	mov	r1, r6
 80079f8:	dcf1      	bgt.n	80079de <__exponent+0x22>
 80079fa:	3130      	adds	r1, #48	; 0x30
 80079fc:	f1ae 0502 	sub.w	r5, lr, #2
 8007a00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a04:	1c44      	adds	r4, r0, #1
 8007a06:	4629      	mov	r1, r5
 8007a08:	4561      	cmp	r1, ip
 8007a0a:	d30a      	bcc.n	8007a22 <__exponent+0x66>
 8007a0c:	f10d 0209 	add.w	r2, sp, #9
 8007a10:	eba2 020e 	sub.w	r2, r2, lr
 8007a14:	4565      	cmp	r5, ip
 8007a16:	bf88      	it	hi
 8007a18:	2200      	movhi	r2, #0
 8007a1a:	4413      	add	r3, r2
 8007a1c:	1a18      	subs	r0, r3, r0
 8007a1e:	b003      	add	sp, #12
 8007a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a2a:	e7ed      	b.n	8007a08 <__exponent+0x4c>
 8007a2c:	2330      	movs	r3, #48	; 0x30
 8007a2e:	3130      	adds	r1, #48	; 0x30
 8007a30:	7083      	strb	r3, [r0, #2]
 8007a32:	70c1      	strb	r1, [r0, #3]
 8007a34:	1d03      	adds	r3, r0, #4
 8007a36:	e7f1      	b.n	8007a1c <__exponent+0x60>

08007a38 <_printf_float>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	ed2d 8b02 	vpush	{d8}
 8007a40:	b08d      	sub	sp, #52	; 0x34
 8007a42:	460c      	mov	r4, r1
 8007a44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a48:	4616      	mov	r6, r2
 8007a4a:	461f      	mov	r7, r3
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	f002 fe99 	bl	800a784 <_localeconv_r>
 8007a52:	f8d0 a000 	ldr.w	sl, [r0]
 8007a56:	4650      	mov	r0, sl
 8007a58:	f7f8 fbba 	bl	80001d0 <strlen>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	9305      	str	r3, [sp, #20]
 8007a64:	f8d8 3000 	ldr.w	r3, [r8]
 8007a68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a6c:	3307      	adds	r3, #7
 8007a6e:	f023 0307 	bic.w	r3, r3, #7
 8007a72:	f103 0208 	add.w	r2, r3, #8
 8007a76:	f8c8 2000 	str.w	r2, [r8]
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a8a:	9307      	str	r3, [sp, #28]
 8007a8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a90:	ee08 0a10 	vmov	s16, r0
 8007a94:	4b9f      	ldr	r3, [pc, #636]	; (8007d14 <_printf_float+0x2dc>)
 8007a96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9e:	f7f9 f845 	bl	8000b2c <__aeabi_dcmpun>
 8007aa2:	bb88      	cbnz	r0, 8007b08 <_printf_float+0xd0>
 8007aa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007aa8:	4b9a      	ldr	r3, [pc, #616]	; (8007d14 <_printf_float+0x2dc>)
 8007aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007aae:	f7f9 f81f 	bl	8000af0 <__aeabi_dcmple>
 8007ab2:	bb48      	cbnz	r0, 8007b08 <_printf_float+0xd0>
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	4640      	mov	r0, r8
 8007aba:	4649      	mov	r1, r9
 8007abc:	f7f9 f80e 	bl	8000adc <__aeabi_dcmplt>
 8007ac0:	b110      	cbz	r0, 8007ac8 <_printf_float+0x90>
 8007ac2:	232d      	movs	r3, #45	; 0x2d
 8007ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ac8:	4b93      	ldr	r3, [pc, #588]	; (8007d18 <_printf_float+0x2e0>)
 8007aca:	4894      	ldr	r0, [pc, #592]	; (8007d1c <_printf_float+0x2e4>)
 8007acc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ad0:	bf94      	ite	ls
 8007ad2:	4698      	movls	r8, r3
 8007ad4:	4680      	movhi	r8, r0
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	6123      	str	r3, [r4, #16]
 8007ada:	9b05      	ldr	r3, [sp, #20]
 8007adc:	f023 0204 	bic.w	r2, r3, #4
 8007ae0:	6022      	str	r2, [r4, #0]
 8007ae2:	f04f 0900 	mov.w	r9, #0
 8007ae6:	9700      	str	r7, [sp, #0]
 8007ae8:	4633      	mov	r3, r6
 8007aea:	aa0b      	add	r2, sp, #44	; 0x2c
 8007aec:	4621      	mov	r1, r4
 8007aee:	4628      	mov	r0, r5
 8007af0:	f000 f9d8 	bl	8007ea4 <_printf_common>
 8007af4:	3001      	adds	r0, #1
 8007af6:	f040 8090 	bne.w	8007c1a <_printf_float+0x1e2>
 8007afa:	f04f 30ff 	mov.w	r0, #4294967295
 8007afe:	b00d      	add	sp, #52	; 0x34
 8007b00:	ecbd 8b02 	vpop	{d8}
 8007b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b08:	4642      	mov	r2, r8
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	4649      	mov	r1, r9
 8007b10:	f7f9 f80c 	bl	8000b2c <__aeabi_dcmpun>
 8007b14:	b140      	cbz	r0, 8007b28 <_printf_float+0xf0>
 8007b16:	464b      	mov	r3, r9
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bfbc      	itt	lt
 8007b1c:	232d      	movlt	r3, #45	; 0x2d
 8007b1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b22:	487f      	ldr	r0, [pc, #508]	; (8007d20 <_printf_float+0x2e8>)
 8007b24:	4b7f      	ldr	r3, [pc, #508]	; (8007d24 <_printf_float+0x2ec>)
 8007b26:	e7d1      	b.n	8007acc <_printf_float+0x94>
 8007b28:	6863      	ldr	r3, [r4, #4]
 8007b2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b2e:	9206      	str	r2, [sp, #24]
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	d13f      	bne.n	8007bb4 <_printf_float+0x17c>
 8007b34:	2306      	movs	r3, #6
 8007b36:	6063      	str	r3, [r4, #4]
 8007b38:	9b05      	ldr	r3, [sp, #20]
 8007b3a:	6861      	ldr	r1, [r4, #4]
 8007b3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b40:	2300      	movs	r3, #0
 8007b42:	9303      	str	r3, [sp, #12]
 8007b44:	ab0a      	add	r3, sp, #40	; 0x28
 8007b46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b4a:	ab09      	add	r3, sp, #36	; 0x24
 8007b4c:	ec49 8b10 	vmov	d0, r8, r9
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	6022      	str	r2, [r4, #0]
 8007b54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f7ff fecd 	bl	80078f8 <__cvt>
 8007b5e:	9b06      	ldr	r3, [sp, #24]
 8007b60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b62:	2b47      	cmp	r3, #71	; 0x47
 8007b64:	4680      	mov	r8, r0
 8007b66:	d108      	bne.n	8007b7a <_printf_float+0x142>
 8007b68:	1cc8      	adds	r0, r1, #3
 8007b6a:	db02      	blt.n	8007b72 <_printf_float+0x13a>
 8007b6c:	6863      	ldr	r3, [r4, #4]
 8007b6e:	4299      	cmp	r1, r3
 8007b70:	dd41      	ble.n	8007bf6 <_printf_float+0x1be>
 8007b72:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b76:	fa5f fb8b 	uxtb.w	fp, fp
 8007b7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b7e:	d820      	bhi.n	8007bc2 <_printf_float+0x18a>
 8007b80:	3901      	subs	r1, #1
 8007b82:	465a      	mov	r2, fp
 8007b84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b88:	9109      	str	r1, [sp, #36]	; 0x24
 8007b8a:	f7ff ff17 	bl	80079bc <__exponent>
 8007b8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b90:	1813      	adds	r3, r2, r0
 8007b92:	2a01      	cmp	r2, #1
 8007b94:	4681      	mov	r9, r0
 8007b96:	6123      	str	r3, [r4, #16]
 8007b98:	dc02      	bgt.n	8007ba0 <_printf_float+0x168>
 8007b9a:	6822      	ldr	r2, [r4, #0]
 8007b9c:	07d2      	lsls	r2, r2, #31
 8007b9e:	d501      	bpl.n	8007ba4 <_printf_float+0x16c>
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	6123      	str	r3, [r4, #16]
 8007ba4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d09c      	beq.n	8007ae6 <_printf_float+0xae>
 8007bac:	232d      	movs	r3, #45	; 0x2d
 8007bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb2:	e798      	b.n	8007ae6 <_printf_float+0xae>
 8007bb4:	9a06      	ldr	r2, [sp, #24]
 8007bb6:	2a47      	cmp	r2, #71	; 0x47
 8007bb8:	d1be      	bne.n	8007b38 <_printf_float+0x100>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1bc      	bne.n	8007b38 <_printf_float+0x100>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e7b9      	b.n	8007b36 <_printf_float+0xfe>
 8007bc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007bc6:	d118      	bne.n	8007bfa <_printf_float+0x1c2>
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	6863      	ldr	r3, [r4, #4]
 8007bcc:	dd0b      	ble.n	8007be6 <_printf_float+0x1ae>
 8007bce:	6121      	str	r1, [r4, #16]
 8007bd0:	b913      	cbnz	r3, 8007bd8 <_printf_float+0x1a0>
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	07d0      	lsls	r0, r2, #31
 8007bd6:	d502      	bpl.n	8007bde <_printf_float+0x1a6>
 8007bd8:	3301      	adds	r3, #1
 8007bda:	440b      	add	r3, r1
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	65a1      	str	r1, [r4, #88]	; 0x58
 8007be0:	f04f 0900 	mov.w	r9, #0
 8007be4:	e7de      	b.n	8007ba4 <_printf_float+0x16c>
 8007be6:	b913      	cbnz	r3, 8007bee <_printf_float+0x1b6>
 8007be8:	6822      	ldr	r2, [r4, #0]
 8007bea:	07d2      	lsls	r2, r2, #31
 8007bec:	d501      	bpl.n	8007bf2 <_printf_float+0x1ba>
 8007bee:	3302      	adds	r3, #2
 8007bf0:	e7f4      	b.n	8007bdc <_printf_float+0x1a4>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e7f2      	b.n	8007bdc <_printf_float+0x1a4>
 8007bf6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfc:	4299      	cmp	r1, r3
 8007bfe:	db05      	blt.n	8007c0c <_printf_float+0x1d4>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	6121      	str	r1, [r4, #16]
 8007c04:	07d8      	lsls	r0, r3, #31
 8007c06:	d5ea      	bpl.n	8007bde <_printf_float+0x1a6>
 8007c08:	1c4b      	adds	r3, r1, #1
 8007c0a:	e7e7      	b.n	8007bdc <_printf_float+0x1a4>
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	bfd4      	ite	le
 8007c10:	f1c1 0202 	rsble	r2, r1, #2
 8007c14:	2201      	movgt	r2, #1
 8007c16:	4413      	add	r3, r2
 8007c18:	e7e0      	b.n	8007bdc <_printf_float+0x1a4>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	055a      	lsls	r2, r3, #21
 8007c1e:	d407      	bmi.n	8007c30 <_printf_float+0x1f8>
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	4642      	mov	r2, r8
 8007c24:	4631      	mov	r1, r6
 8007c26:	4628      	mov	r0, r5
 8007c28:	47b8      	blx	r7
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d12c      	bne.n	8007c88 <_printf_float+0x250>
 8007c2e:	e764      	b.n	8007afa <_printf_float+0xc2>
 8007c30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c34:	f240 80e0 	bls.w	8007df8 <_printf_float+0x3c0>
 8007c38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f7f8 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d034      	beq.n	8007cb2 <_printf_float+0x27a>
 8007c48:	4a37      	ldr	r2, [pc, #220]	; (8007d28 <_printf_float+0x2f0>)
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4628      	mov	r0, r5
 8007c50:	47b8      	blx	r7
 8007c52:	3001      	adds	r0, #1
 8007c54:	f43f af51 	beq.w	8007afa <_printf_float+0xc2>
 8007c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	db02      	blt.n	8007c66 <_printf_float+0x22e>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	07d8      	lsls	r0, r3, #31
 8007c64:	d510      	bpl.n	8007c88 <_printf_float+0x250>
 8007c66:	ee18 3a10 	vmov	r3, s16
 8007c6a:	4652      	mov	r2, sl
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	4628      	mov	r0, r5
 8007c70:	47b8      	blx	r7
 8007c72:	3001      	adds	r0, #1
 8007c74:	f43f af41 	beq.w	8007afa <_printf_float+0xc2>
 8007c78:	f04f 0800 	mov.w	r8, #0
 8007c7c:	f104 091a 	add.w	r9, r4, #26
 8007c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c82:	3b01      	subs	r3, #1
 8007c84:	4543      	cmp	r3, r8
 8007c86:	dc09      	bgt.n	8007c9c <_printf_float+0x264>
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	079b      	lsls	r3, r3, #30
 8007c8c:	f100 8105 	bmi.w	8007e9a <_printf_float+0x462>
 8007c90:	68e0      	ldr	r0, [r4, #12]
 8007c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c94:	4298      	cmp	r0, r3
 8007c96:	bfb8      	it	lt
 8007c98:	4618      	movlt	r0, r3
 8007c9a:	e730      	b.n	8007afe <_printf_float+0xc6>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	464a      	mov	r2, r9
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f af27 	beq.w	8007afa <_printf_float+0xc2>
 8007cac:	f108 0801 	add.w	r8, r8, #1
 8007cb0:	e7e6      	b.n	8007c80 <_printf_float+0x248>
 8007cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dc39      	bgt.n	8007d2c <_printf_float+0x2f4>
 8007cb8:	4a1b      	ldr	r2, [pc, #108]	; (8007d28 <_printf_float+0x2f0>)
 8007cba:	2301      	movs	r3, #1
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b8      	blx	r7
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	f43f af19 	beq.w	8007afa <_printf_float+0xc2>
 8007cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	d102      	bne.n	8007cd6 <_printf_float+0x29e>
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	07d9      	lsls	r1, r3, #31
 8007cd4:	d5d8      	bpl.n	8007c88 <_printf_float+0x250>
 8007cd6:	ee18 3a10 	vmov	r3, s16
 8007cda:	4652      	mov	r2, sl
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4628      	mov	r0, r5
 8007ce0:	47b8      	blx	r7
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	f43f af09 	beq.w	8007afa <_printf_float+0xc2>
 8007ce8:	f04f 0900 	mov.w	r9, #0
 8007cec:	f104 0a1a 	add.w	sl, r4, #26
 8007cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf2:	425b      	negs	r3, r3
 8007cf4:	454b      	cmp	r3, r9
 8007cf6:	dc01      	bgt.n	8007cfc <_printf_float+0x2c4>
 8007cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cfa:	e792      	b.n	8007c22 <_printf_float+0x1ea>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4652      	mov	r2, sl
 8007d00:	4631      	mov	r1, r6
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b8      	blx	r7
 8007d06:	3001      	adds	r0, #1
 8007d08:	f43f aef7 	beq.w	8007afa <_printf_float+0xc2>
 8007d0c:	f109 0901 	add.w	r9, r9, #1
 8007d10:	e7ee      	b.n	8007cf0 <_printf_float+0x2b8>
 8007d12:	bf00      	nop
 8007d14:	7fefffff 	.word	0x7fefffff
 8007d18:	0800c0cc 	.word	0x0800c0cc
 8007d1c:	0800c0d0 	.word	0x0800c0d0
 8007d20:	0800c0d8 	.word	0x0800c0d8
 8007d24:	0800c0d4 	.word	0x0800c0d4
 8007d28:	0800c0dc 	.word	0x0800c0dc
 8007d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d30:	429a      	cmp	r2, r3
 8007d32:	bfa8      	it	ge
 8007d34:	461a      	movge	r2, r3
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	4691      	mov	r9, r2
 8007d3a:	dc37      	bgt.n	8007dac <_printf_float+0x374>
 8007d3c:	f04f 0b00 	mov.w	fp, #0
 8007d40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d44:	f104 021a 	add.w	r2, r4, #26
 8007d48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	eba3 0309 	sub.w	r3, r3, r9
 8007d50:	455b      	cmp	r3, fp
 8007d52:	dc33      	bgt.n	8007dbc <_printf_float+0x384>
 8007d54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	db3b      	blt.n	8007dd4 <_printf_float+0x39c>
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	07da      	lsls	r2, r3, #31
 8007d60:	d438      	bmi.n	8007dd4 <_printf_float+0x39c>
 8007d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d64:	9a05      	ldr	r2, [sp, #20]
 8007d66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d68:	1a9a      	subs	r2, r3, r2
 8007d6a:	eba3 0901 	sub.w	r9, r3, r1
 8007d6e:	4591      	cmp	r9, r2
 8007d70:	bfa8      	it	ge
 8007d72:	4691      	movge	r9, r2
 8007d74:	f1b9 0f00 	cmp.w	r9, #0
 8007d78:	dc35      	bgt.n	8007de6 <_printf_float+0x3ae>
 8007d7a:	f04f 0800 	mov.w	r8, #0
 8007d7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d82:	f104 0a1a 	add.w	sl, r4, #26
 8007d86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d8a:	1a9b      	subs	r3, r3, r2
 8007d8c:	eba3 0309 	sub.w	r3, r3, r9
 8007d90:	4543      	cmp	r3, r8
 8007d92:	f77f af79 	ble.w	8007c88 <_printf_float+0x250>
 8007d96:	2301      	movs	r3, #1
 8007d98:	4652      	mov	r2, sl
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	47b8      	blx	r7
 8007da0:	3001      	adds	r0, #1
 8007da2:	f43f aeaa 	beq.w	8007afa <_printf_float+0xc2>
 8007da6:	f108 0801 	add.w	r8, r8, #1
 8007daa:	e7ec      	b.n	8007d86 <_printf_float+0x34e>
 8007dac:	4613      	mov	r3, r2
 8007dae:	4631      	mov	r1, r6
 8007db0:	4642      	mov	r2, r8
 8007db2:	4628      	mov	r0, r5
 8007db4:	47b8      	blx	r7
 8007db6:	3001      	adds	r0, #1
 8007db8:	d1c0      	bne.n	8007d3c <_printf_float+0x304>
 8007dba:	e69e      	b.n	8007afa <_printf_float+0xc2>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	9205      	str	r2, [sp, #20]
 8007dc4:	47b8      	blx	r7
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	f43f ae97 	beq.w	8007afa <_printf_float+0xc2>
 8007dcc:	9a05      	ldr	r2, [sp, #20]
 8007dce:	f10b 0b01 	add.w	fp, fp, #1
 8007dd2:	e7b9      	b.n	8007d48 <_printf_float+0x310>
 8007dd4:	ee18 3a10 	vmov	r3, s16
 8007dd8:	4652      	mov	r2, sl
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4628      	mov	r0, r5
 8007dde:	47b8      	blx	r7
 8007de0:	3001      	adds	r0, #1
 8007de2:	d1be      	bne.n	8007d62 <_printf_float+0x32a>
 8007de4:	e689      	b.n	8007afa <_printf_float+0xc2>
 8007de6:	9a05      	ldr	r2, [sp, #20]
 8007de8:	464b      	mov	r3, r9
 8007dea:	4442      	add	r2, r8
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	d1c1      	bne.n	8007d7a <_printf_float+0x342>
 8007df6:	e680      	b.n	8007afa <_printf_float+0xc2>
 8007df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dfa:	2a01      	cmp	r2, #1
 8007dfc:	dc01      	bgt.n	8007e02 <_printf_float+0x3ca>
 8007dfe:	07db      	lsls	r3, r3, #31
 8007e00:	d538      	bpl.n	8007e74 <_printf_float+0x43c>
 8007e02:	2301      	movs	r3, #1
 8007e04:	4642      	mov	r2, r8
 8007e06:	4631      	mov	r1, r6
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b8      	blx	r7
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	f43f ae74 	beq.w	8007afa <_printf_float+0xc2>
 8007e12:	ee18 3a10 	vmov	r3, s16
 8007e16:	4652      	mov	r2, sl
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	47b8      	blx	r7
 8007e1e:	3001      	adds	r0, #1
 8007e20:	f43f ae6b 	beq.w	8007afa <_printf_float+0xc2>
 8007e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f7f8 fe4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e30:	b9d8      	cbnz	r0, 8007e6a <_printf_float+0x432>
 8007e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e34:	f108 0201 	add.w	r2, r8, #1
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b8      	blx	r7
 8007e40:	3001      	adds	r0, #1
 8007e42:	d10e      	bne.n	8007e62 <_printf_float+0x42a>
 8007e44:	e659      	b.n	8007afa <_printf_float+0xc2>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4652      	mov	r2, sl
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b8      	blx	r7
 8007e50:	3001      	adds	r0, #1
 8007e52:	f43f ae52 	beq.w	8007afa <_printf_float+0xc2>
 8007e56:	f108 0801 	add.w	r8, r8, #1
 8007e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	4543      	cmp	r3, r8
 8007e60:	dcf1      	bgt.n	8007e46 <_printf_float+0x40e>
 8007e62:	464b      	mov	r3, r9
 8007e64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e68:	e6dc      	b.n	8007c24 <_printf_float+0x1ec>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	f104 0a1a 	add.w	sl, r4, #26
 8007e72:	e7f2      	b.n	8007e5a <_printf_float+0x422>
 8007e74:	2301      	movs	r3, #1
 8007e76:	4642      	mov	r2, r8
 8007e78:	e7df      	b.n	8007e3a <_printf_float+0x402>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	464a      	mov	r2, r9
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b8      	blx	r7
 8007e84:	3001      	adds	r0, #1
 8007e86:	f43f ae38 	beq.w	8007afa <_printf_float+0xc2>
 8007e8a:	f108 0801 	add.w	r8, r8, #1
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e92:	1a5b      	subs	r3, r3, r1
 8007e94:	4543      	cmp	r3, r8
 8007e96:	dcf0      	bgt.n	8007e7a <_printf_float+0x442>
 8007e98:	e6fa      	b.n	8007c90 <_printf_float+0x258>
 8007e9a:	f04f 0800 	mov.w	r8, #0
 8007e9e:	f104 0919 	add.w	r9, r4, #25
 8007ea2:	e7f4      	b.n	8007e8e <_printf_float+0x456>

08007ea4 <_printf_common>:
 8007ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	4616      	mov	r6, r2
 8007eaa:	4699      	mov	r9, r3
 8007eac:	688a      	ldr	r2, [r1, #8]
 8007eae:	690b      	ldr	r3, [r1, #16]
 8007eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	bfb8      	it	lt
 8007eb8:	4613      	movlt	r3, r2
 8007eba:	6033      	str	r3, [r6, #0]
 8007ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	b10a      	cbz	r2, 8007eca <_printf_common+0x26>
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	6033      	str	r3, [r6, #0]
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	0699      	lsls	r1, r3, #26
 8007ece:	bf42      	ittt	mi
 8007ed0:	6833      	ldrmi	r3, [r6, #0]
 8007ed2:	3302      	addmi	r3, #2
 8007ed4:	6033      	strmi	r3, [r6, #0]
 8007ed6:	6825      	ldr	r5, [r4, #0]
 8007ed8:	f015 0506 	ands.w	r5, r5, #6
 8007edc:	d106      	bne.n	8007eec <_printf_common+0x48>
 8007ede:	f104 0a19 	add.w	sl, r4, #25
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	6832      	ldr	r2, [r6, #0]
 8007ee6:	1a9b      	subs	r3, r3, r2
 8007ee8:	42ab      	cmp	r3, r5
 8007eea:	dc26      	bgt.n	8007f3a <_printf_common+0x96>
 8007eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ef0:	1e13      	subs	r3, r2, #0
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	bf18      	it	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	0692      	lsls	r2, r2, #26
 8007efa:	d42b      	bmi.n	8007f54 <_printf_common+0xb0>
 8007efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f00:	4649      	mov	r1, r9
 8007f02:	4638      	mov	r0, r7
 8007f04:	47c0      	blx	r8
 8007f06:	3001      	adds	r0, #1
 8007f08:	d01e      	beq.n	8007f48 <_printf_common+0xa4>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	68e5      	ldr	r5, [r4, #12]
 8007f0e:	6832      	ldr	r2, [r6, #0]
 8007f10:	f003 0306 	and.w	r3, r3, #6
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	bf08      	it	eq
 8007f18:	1aad      	subeq	r5, r5, r2
 8007f1a:	68a3      	ldr	r3, [r4, #8]
 8007f1c:	6922      	ldr	r2, [r4, #16]
 8007f1e:	bf0c      	ite	eq
 8007f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f24:	2500      	movne	r5, #0
 8007f26:	4293      	cmp	r3, r2
 8007f28:	bfc4      	itt	gt
 8007f2a:	1a9b      	subgt	r3, r3, r2
 8007f2c:	18ed      	addgt	r5, r5, r3
 8007f2e:	2600      	movs	r6, #0
 8007f30:	341a      	adds	r4, #26
 8007f32:	42b5      	cmp	r5, r6
 8007f34:	d11a      	bne.n	8007f6c <_printf_common+0xc8>
 8007f36:	2000      	movs	r0, #0
 8007f38:	e008      	b.n	8007f4c <_printf_common+0xa8>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4652      	mov	r2, sl
 8007f3e:	4649      	mov	r1, r9
 8007f40:	4638      	mov	r0, r7
 8007f42:	47c0      	blx	r8
 8007f44:	3001      	adds	r0, #1
 8007f46:	d103      	bne.n	8007f50 <_printf_common+0xac>
 8007f48:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f50:	3501      	adds	r5, #1
 8007f52:	e7c6      	b.n	8007ee2 <_printf_common+0x3e>
 8007f54:	18e1      	adds	r1, r4, r3
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	2030      	movs	r0, #48	; 0x30
 8007f5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f5e:	4422      	add	r2, r4
 8007f60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f68:	3302      	adds	r3, #2
 8007f6a:	e7c7      	b.n	8007efc <_printf_common+0x58>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	4622      	mov	r2, r4
 8007f70:	4649      	mov	r1, r9
 8007f72:	4638      	mov	r0, r7
 8007f74:	47c0      	blx	r8
 8007f76:	3001      	adds	r0, #1
 8007f78:	d0e6      	beq.n	8007f48 <_printf_common+0xa4>
 8007f7a:	3601      	adds	r6, #1
 8007f7c:	e7d9      	b.n	8007f32 <_printf_common+0x8e>
	...

08007f80 <_printf_i>:
 8007f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f84:	7e0f      	ldrb	r7, [r1, #24]
 8007f86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f88:	2f78      	cmp	r7, #120	; 0x78
 8007f8a:	4691      	mov	r9, r2
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	469a      	mov	sl, r3
 8007f92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f96:	d807      	bhi.n	8007fa8 <_printf_i+0x28>
 8007f98:	2f62      	cmp	r7, #98	; 0x62
 8007f9a:	d80a      	bhi.n	8007fb2 <_printf_i+0x32>
 8007f9c:	2f00      	cmp	r7, #0
 8007f9e:	f000 80d8 	beq.w	8008152 <_printf_i+0x1d2>
 8007fa2:	2f58      	cmp	r7, #88	; 0x58
 8007fa4:	f000 80a3 	beq.w	80080ee <_printf_i+0x16e>
 8007fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fb0:	e03a      	b.n	8008028 <_printf_i+0xa8>
 8007fb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fb6:	2b15      	cmp	r3, #21
 8007fb8:	d8f6      	bhi.n	8007fa8 <_printf_i+0x28>
 8007fba:	a101      	add	r1, pc, #4	; (adr r1, 8007fc0 <_printf_i+0x40>)
 8007fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fc0:	08008019 	.word	0x08008019
 8007fc4:	0800802d 	.word	0x0800802d
 8007fc8:	08007fa9 	.word	0x08007fa9
 8007fcc:	08007fa9 	.word	0x08007fa9
 8007fd0:	08007fa9 	.word	0x08007fa9
 8007fd4:	08007fa9 	.word	0x08007fa9
 8007fd8:	0800802d 	.word	0x0800802d
 8007fdc:	08007fa9 	.word	0x08007fa9
 8007fe0:	08007fa9 	.word	0x08007fa9
 8007fe4:	08007fa9 	.word	0x08007fa9
 8007fe8:	08007fa9 	.word	0x08007fa9
 8007fec:	08008139 	.word	0x08008139
 8007ff0:	0800805d 	.word	0x0800805d
 8007ff4:	0800811b 	.word	0x0800811b
 8007ff8:	08007fa9 	.word	0x08007fa9
 8007ffc:	08007fa9 	.word	0x08007fa9
 8008000:	0800815b 	.word	0x0800815b
 8008004:	08007fa9 	.word	0x08007fa9
 8008008:	0800805d 	.word	0x0800805d
 800800c:	08007fa9 	.word	0x08007fa9
 8008010:	08007fa9 	.word	0x08007fa9
 8008014:	08008123 	.word	0x08008123
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	1d1a      	adds	r2, r3, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	602a      	str	r2, [r5, #0]
 8008020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008028:	2301      	movs	r3, #1
 800802a:	e0a3      	b.n	8008174 <_printf_i+0x1f4>
 800802c:	6820      	ldr	r0, [r4, #0]
 800802e:	6829      	ldr	r1, [r5, #0]
 8008030:	0606      	lsls	r6, r0, #24
 8008032:	f101 0304 	add.w	r3, r1, #4
 8008036:	d50a      	bpl.n	800804e <_printf_i+0xce>
 8008038:	680e      	ldr	r6, [r1, #0]
 800803a:	602b      	str	r3, [r5, #0]
 800803c:	2e00      	cmp	r6, #0
 800803e:	da03      	bge.n	8008048 <_printf_i+0xc8>
 8008040:	232d      	movs	r3, #45	; 0x2d
 8008042:	4276      	negs	r6, r6
 8008044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008048:	485e      	ldr	r0, [pc, #376]	; (80081c4 <_printf_i+0x244>)
 800804a:	230a      	movs	r3, #10
 800804c:	e019      	b.n	8008082 <_printf_i+0x102>
 800804e:	680e      	ldr	r6, [r1, #0]
 8008050:	602b      	str	r3, [r5, #0]
 8008052:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008056:	bf18      	it	ne
 8008058:	b236      	sxthne	r6, r6
 800805a:	e7ef      	b.n	800803c <_printf_i+0xbc>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	6820      	ldr	r0, [r4, #0]
 8008060:	1d19      	adds	r1, r3, #4
 8008062:	6029      	str	r1, [r5, #0]
 8008064:	0601      	lsls	r1, r0, #24
 8008066:	d501      	bpl.n	800806c <_printf_i+0xec>
 8008068:	681e      	ldr	r6, [r3, #0]
 800806a:	e002      	b.n	8008072 <_printf_i+0xf2>
 800806c:	0646      	lsls	r6, r0, #25
 800806e:	d5fb      	bpl.n	8008068 <_printf_i+0xe8>
 8008070:	881e      	ldrh	r6, [r3, #0]
 8008072:	4854      	ldr	r0, [pc, #336]	; (80081c4 <_printf_i+0x244>)
 8008074:	2f6f      	cmp	r7, #111	; 0x6f
 8008076:	bf0c      	ite	eq
 8008078:	2308      	moveq	r3, #8
 800807a:	230a      	movne	r3, #10
 800807c:	2100      	movs	r1, #0
 800807e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008082:	6865      	ldr	r5, [r4, #4]
 8008084:	60a5      	str	r5, [r4, #8]
 8008086:	2d00      	cmp	r5, #0
 8008088:	bfa2      	ittt	ge
 800808a:	6821      	ldrge	r1, [r4, #0]
 800808c:	f021 0104 	bicge.w	r1, r1, #4
 8008090:	6021      	strge	r1, [r4, #0]
 8008092:	b90e      	cbnz	r6, 8008098 <_printf_i+0x118>
 8008094:	2d00      	cmp	r5, #0
 8008096:	d04d      	beq.n	8008134 <_printf_i+0x1b4>
 8008098:	4615      	mov	r5, r2
 800809a:	fbb6 f1f3 	udiv	r1, r6, r3
 800809e:	fb03 6711 	mls	r7, r3, r1, r6
 80080a2:	5dc7      	ldrb	r7, [r0, r7]
 80080a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080a8:	4637      	mov	r7, r6
 80080aa:	42bb      	cmp	r3, r7
 80080ac:	460e      	mov	r6, r1
 80080ae:	d9f4      	bls.n	800809a <_printf_i+0x11a>
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d10b      	bne.n	80080cc <_printf_i+0x14c>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	07de      	lsls	r6, r3, #31
 80080b8:	d508      	bpl.n	80080cc <_printf_i+0x14c>
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	6861      	ldr	r1, [r4, #4]
 80080be:	4299      	cmp	r1, r3
 80080c0:	bfde      	ittt	le
 80080c2:	2330      	movle	r3, #48	; 0x30
 80080c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080cc:	1b52      	subs	r2, r2, r5
 80080ce:	6122      	str	r2, [r4, #16]
 80080d0:	f8cd a000 	str.w	sl, [sp]
 80080d4:	464b      	mov	r3, r9
 80080d6:	aa03      	add	r2, sp, #12
 80080d8:	4621      	mov	r1, r4
 80080da:	4640      	mov	r0, r8
 80080dc:	f7ff fee2 	bl	8007ea4 <_printf_common>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d14c      	bne.n	800817e <_printf_i+0x1fe>
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295
 80080e8:	b004      	add	sp, #16
 80080ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ee:	4835      	ldr	r0, [pc, #212]	; (80081c4 <_printf_i+0x244>)
 80080f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080f4:	6829      	ldr	r1, [r5, #0]
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80080fc:	6029      	str	r1, [r5, #0]
 80080fe:	061d      	lsls	r5, r3, #24
 8008100:	d514      	bpl.n	800812c <_printf_i+0x1ac>
 8008102:	07df      	lsls	r7, r3, #31
 8008104:	bf44      	itt	mi
 8008106:	f043 0320 	orrmi.w	r3, r3, #32
 800810a:	6023      	strmi	r3, [r4, #0]
 800810c:	b91e      	cbnz	r6, 8008116 <_printf_i+0x196>
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	f023 0320 	bic.w	r3, r3, #32
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	2310      	movs	r3, #16
 8008118:	e7b0      	b.n	800807c <_printf_i+0xfc>
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	f043 0320 	orr.w	r3, r3, #32
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	2378      	movs	r3, #120	; 0x78
 8008124:	4828      	ldr	r0, [pc, #160]	; (80081c8 <_printf_i+0x248>)
 8008126:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800812a:	e7e3      	b.n	80080f4 <_printf_i+0x174>
 800812c:	0659      	lsls	r1, r3, #25
 800812e:	bf48      	it	mi
 8008130:	b2b6      	uxthmi	r6, r6
 8008132:	e7e6      	b.n	8008102 <_printf_i+0x182>
 8008134:	4615      	mov	r5, r2
 8008136:	e7bb      	b.n	80080b0 <_printf_i+0x130>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	6826      	ldr	r6, [r4, #0]
 800813c:	6961      	ldr	r1, [r4, #20]
 800813e:	1d18      	adds	r0, r3, #4
 8008140:	6028      	str	r0, [r5, #0]
 8008142:	0635      	lsls	r5, r6, #24
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	d501      	bpl.n	800814c <_printf_i+0x1cc>
 8008148:	6019      	str	r1, [r3, #0]
 800814a:	e002      	b.n	8008152 <_printf_i+0x1d2>
 800814c:	0670      	lsls	r0, r6, #25
 800814e:	d5fb      	bpl.n	8008148 <_printf_i+0x1c8>
 8008150:	8019      	strh	r1, [r3, #0]
 8008152:	2300      	movs	r3, #0
 8008154:	6123      	str	r3, [r4, #16]
 8008156:	4615      	mov	r5, r2
 8008158:	e7ba      	b.n	80080d0 <_printf_i+0x150>
 800815a:	682b      	ldr	r3, [r5, #0]
 800815c:	1d1a      	adds	r2, r3, #4
 800815e:	602a      	str	r2, [r5, #0]
 8008160:	681d      	ldr	r5, [r3, #0]
 8008162:	6862      	ldr	r2, [r4, #4]
 8008164:	2100      	movs	r1, #0
 8008166:	4628      	mov	r0, r5
 8008168:	f7f8 f83a 	bl	80001e0 <memchr>
 800816c:	b108      	cbz	r0, 8008172 <_printf_i+0x1f2>
 800816e:	1b40      	subs	r0, r0, r5
 8008170:	6060      	str	r0, [r4, #4]
 8008172:	6863      	ldr	r3, [r4, #4]
 8008174:	6123      	str	r3, [r4, #16]
 8008176:	2300      	movs	r3, #0
 8008178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800817c:	e7a8      	b.n	80080d0 <_printf_i+0x150>
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	462a      	mov	r2, r5
 8008182:	4649      	mov	r1, r9
 8008184:	4640      	mov	r0, r8
 8008186:	47d0      	blx	sl
 8008188:	3001      	adds	r0, #1
 800818a:	d0ab      	beq.n	80080e4 <_printf_i+0x164>
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	079b      	lsls	r3, r3, #30
 8008190:	d413      	bmi.n	80081ba <_printf_i+0x23a>
 8008192:	68e0      	ldr	r0, [r4, #12]
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	4298      	cmp	r0, r3
 8008198:	bfb8      	it	lt
 800819a:	4618      	movlt	r0, r3
 800819c:	e7a4      	b.n	80080e8 <_printf_i+0x168>
 800819e:	2301      	movs	r3, #1
 80081a0:	4632      	mov	r2, r6
 80081a2:	4649      	mov	r1, r9
 80081a4:	4640      	mov	r0, r8
 80081a6:	47d0      	blx	sl
 80081a8:	3001      	adds	r0, #1
 80081aa:	d09b      	beq.n	80080e4 <_printf_i+0x164>
 80081ac:	3501      	adds	r5, #1
 80081ae:	68e3      	ldr	r3, [r4, #12]
 80081b0:	9903      	ldr	r1, [sp, #12]
 80081b2:	1a5b      	subs	r3, r3, r1
 80081b4:	42ab      	cmp	r3, r5
 80081b6:	dcf2      	bgt.n	800819e <_printf_i+0x21e>
 80081b8:	e7eb      	b.n	8008192 <_printf_i+0x212>
 80081ba:	2500      	movs	r5, #0
 80081bc:	f104 0619 	add.w	r6, r4, #25
 80081c0:	e7f5      	b.n	80081ae <_printf_i+0x22e>
 80081c2:	bf00      	nop
 80081c4:	0800c0de 	.word	0x0800c0de
 80081c8:	0800c0ef 	.word	0x0800c0ef

080081cc <_scanf_float>:
 80081cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d0:	b087      	sub	sp, #28
 80081d2:	4617      	mov	r7, r2
 80081d4:	9303      	str	r3, [sp, #12]
 80081d6:	688b      	ldr	r3, [r1, #8]
 80081d8:	1e5a      	subs	r2, r3, #1
 80081da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80081de:	bf83      	ittte	hi
 80081e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80081e4:	195b      	addhi	r3, r3, r5
 80081e6:	9302      	strhi	r3, [sp, #8]
 80081e8:	2300      	movls	r3, #0
 80081ea:	bf86      	itte	hi
 80081ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80081f0:	608b      	strhi	r3, [r1, #8]
 80081f2:	9302      	strls	r3, [sp, #8]
 80081f4:	680b      	ldr	r3, [r1, #0]
 80081f6:	468b      	mov	fp, r1
 80081f8:	2500      	movs	r5, #0
 80081fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80081fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8008202:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008206:	4680      	mov	r8, r0
 8008208:	460c      	mov	r4, r1
 800820a:	465e      	mov	r6, fp
 800820c:	46aa      	mov	sl, r5
 800820e:	46a9      	mov	r9, r5
 8008210:	9501      	str	r5, [sp, #4]
 8008212:	68a2      	ldr	r2, [r4, #8]
 8008214:	b152      	cbz	r2, 800822c <_scanf_float+0x60>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b4e      	cmp	r3, #78	; 0x4e
 800821c:	d864      	bhi.n	80082e8 <_scanf_float+0x11c>
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d83c      	bhi.n	800829c <_scanf_float+0xd0>
 8008222:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008226:	b2c8      	uxtb	r0, r1
 8008228:	280e      	cmp	r0, #14
 800822a:	d93a      	bls.n	80082a2 <_scanf_float+0xd6>
 800822c:	f1b9 0f00 	cmp.w	r9, #0
 8008230:	d003      	beq.n	800823a <_scanf_float+0x6e>
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800823e:	f1ba 0f01 	cmp.w	sl, #1
 8008242:	f200 8113 	bhi.w	800846c <_scanf_float+0x2a0>
 8008246:	455e      	cmp	r6, fp
 8008248:	f200 8105 	bhi.w	8008456 <_scanf_float+0x28a>
 800824c:	2501      	movs	r5, #1
 800824e:	4628      	mov	r0, r5
 8008250:	b007      	add	sp, #28
 8008252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008256:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800825a:	2a0d      	cmp	r2, #13
 800825c:	d8e6      	bhi.n	800822c <_scanf_float+0x60>
 800825e:	a101      	add	r1, pc, #4	; (adr r1, 8008264 <_scanf_float+0x98>)
 8008260:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008264:	080083a3 	.word	0x080083a3
 8008268:	0800822d 	.word	0x0800822d
 800826c:	0800822d 	.word	0x0800822d
 8008270:	0800822d 	.word	0x0800822d
 8008274:	08008403 	.word	0x08008403
 8008278:	080083db 	.word	0x080083db
 800827c:	0800822d 	.word	0x0800822d
 8008280:	0800822d 	.word	0x0800822d
 8008284:	080083b1 	.word	0x080083b1
 8008288:	0800822d 	.word	0x0800822d
 800828c:	0800822d 	.word	0x0800822d
 8008290:	0800822d 	.word	0x0800822d
 8008294:	0800822d 	.word	0x0800822d
 8008298:	08008369 	.word	0x08008369
 800829c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80082a0:	e7db      	b.n	800825a <_scanf_float+0x8e>
 80082a2:	290e      	cmp	r1, #14
 80082a4:	d8c2      	bhi.n	800822c <_scanf_float+0x60>
 80082a6:	a001      	add	r0, pc, #4	; (adr r0, 80082ac <_scanf_float+0xe0>)
 80082a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082ac:	0800835b 	.word	0x0800835b
 80082b0:	0800822d 	.word	0x0800822d
 80082b4:	0800835b 	.word	0x0800835b
 80082b8:	080083ef 	.word	0x080083ef
 80082bc:	0800822d 	.word	0x0800822d
 80082c0:	08008309 	.word	0x08008309
 80082c4:	08008345 	.word	0x08008345
 80082c8:	08008345 	.word	0x08008345
 80082cc:	08008345 	.word	0x08008345
 80082d0:	08008345 	.word	0x08008345
 80082d4:	08008345 	.word	0x08008345
 80082d8:	08008345 	.word	0x08008345
 80082dc:	08008345 	.word	0x08008345
 80082e0:	08008345 	.word	0x08008345
 80082e4:	08008345 	.word	0x08008345
 80082e8:	2b6e      	cmp	r3, #110	; 0x6e
 80082ea:	d809      	bhi.n	8008300 <_scanf_float+0x134>
 80082ec:	2b60      	cmp	r3, #96	; 0x60
 80082ee:	d8b2      	bhi.n	8008256 <_scanf_float+0x8a>
 80082f0:	2b54      	cmp	r3, #84	; 0x54
 80082f2:	d077      	beq.n	80083e4 <_scanf_float+0x218>
 80082f4:	2b59      	cmp	r3, #89	; 0x59
 80082f6:	d199      	bne.n	800822c <_scanf_float+0x60>
 80082f8:	2d07      	cmp	r5, #7
 80082fa:	d197      	bne.n	800822c <_scanf_float+0x60>
 80082fc:	2508      	movs	r5, #8
 80082fe:	e029      	b.n	8008354 <_scanf_float+0x188>
 8008300:	2b74      	cmp	r3, #116	; 0x74
 8008302:	d06f      	beq.n	80083e4 <_scanf_float+0x218>
 8008304:	2b79      	cmp	r3, #121	; 0x79
 8008306:	e7f6      	b.n	80082f6 <_scanf_float+0x12a>
 8008308:	6821      	ldr	r1, [r4, #0]
 800830a:	05c8      	lsls	r0, r1, #23
 800830c:	d51a      	bpl.n	8008344 <_scanf_float+0x178>
 800830e:	9b02      	ldr	r3, [sp, #8]
 8008310:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008314:	6021      	str	r1, [r4, #0]
 8008316:	f109 0901 	add.w	r9, r9, #1
 800831a:	b11b      	cbz	r3, 8008324 <_scanf_float+0x158>
 800831c:	3b01      	subs	r3, #1
 800831e:	3201      	adds	r2, #1
 8008320:	9302      	str	r3, [sp, #8]
 8008322:	60a2      	str	r2, [r4, #8]
 8008324:	68a3      	ldr	r3, [r4, #8]
 8008326:	3b01      	subs	r3, #1
 8008328:	60a3      	str	r3, [r4, #8]
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	3301      	adds	r3, #1
 800832e:	6123      	str	r3, [r4, #16]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	3b01      	subs	r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	607b      	str	r3, [r7, #4]
 8008338:	f340 8084 	ble.w	8008444 <_scanf_float+0x278>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	3301      	adds	r3, #1
 8008340:	603b      	str	r3, [r7, #0]
 8008342:	e766      	b.n	8008212 <_scanf_float+0x46>
 8008344:	eb1a 0f05 	cmn.w	sl, r5
 8008348:	f47f af70 	bne.w	800822c <_scanf_float+0x60>
 800834c:	6822      	ldr	r2, [r4, #0]
 800834e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008352:	6022      	str	r2, [r4, #0]
 8008354:	f806 3b01 	strb.w	r3, [r6], #1
 8008358:	e7e4      	b.n	8008324 <_scanf_float+0x158>
 800835a:	6822      	ldr	r2, [r4, #0]
 800835c:	0610      	lsls	r0, r2, #24
 800835e:	f57f af65 	bpl.w	800822c <_scanf_float+0x60>
 8008362:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008366:	e7f4      	b.n	8008352 <_scanf_float+0x186>
 8008368:	f1ba 0f00 	cmp.w	sl, #0
 800836c:	d10e      	bne.n	800838c <_scanf_float+0x1c0>
 800836e:	f1b9 0f00 	cmp.w	r9, #0
 8008372:	d10e      	bne.n	8008392 <_scanf_float+0x1c6>
 8008374:	6822      	ldr	r2, [r4, #0]
 8008376:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800837a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800837e:	d108      	bne.n	8008392 <_scanf_float+0x1c6>
 8008380:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008384:	6022      	str	r2, [r4, #0]
 8008386:	f04f 0a01 	mov.w	sl, #1
 800838a:	e7e3      	b.n	8008354 <_scanf_float+0x188>
 800838c:	f1ba 0f02 	cmp.w	sl, #2
 8008390:	d055      	beq.n	800843e <_scanf_float+0x272>
 8008392:	2d01      	cmp	r5, #1
 8008394:	d002      	beq.n	800839c <_scanf_float+0x1d0>
 8008396:	2d04      	cmp	r5, #4
 8008398:	f47f af48 	bne.w	800822c <_scanf_float+0x60>
 800839c:	3501      	adds	r5, #1
 800839e:	b2ed      	uxtb	r5, r5
 80083a0:	e7d8      	b.n	8008354 <_scanf_float+0x188>
 80083a2:	f1ba 0f01 	cmp.w	sl, #1
 80083a6:	f47f af41 	bne.w	800822c <_scanf_float+0x60>
 80083aa:	f04f 0a02 	mov.w	sl, #2
 80083ae:	e7d1      	b.n	8008354 <_scanf_float+0x188>
 80083b0:	b97d      	cbnz	r5, 80083d2 <_scanf_float+0x206>
 80083b2:	f1b9 0f00 	cmp.w	r9, #0
 80083b6:	f47f af3c 	bne.w	8008232 <_scanf_float+0x66>
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80083c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80083c4:	f47f af39 	bne.w	800823a <_scanf_float+0x6e>
 80083c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083cc:	6022      	str	r2, [r4, #0]
 80083ce:	2501      	movs	r5, #1
 80083d0:	e7c0      	b.n	8008354 <_scanf_float+0x188>
 80083d2:	2d03      	cmp	r5, #3
 80083d4:	d0e2      	beq.n	800839c <_scanf_float+0x1d0>
 80083d6:	2d05      	cmp	r5, #5
 80083d8:	e7de      	b.n	8008398 <_scanf_float+0x1cc>
 80083da:	2d02      	cmp	r5, #2
 80083dc:	f47f af26 	bne.w	800822c <_scanf_float+0x60>
 80083e0:	2503      	movs	r5, #3
 80083e2:	e7b7      	b.n	8008354 <_scanf_float+0x188>
 80083e4:	2d06      	cmp	r5, #6
 80083e6:	f47f af21 	bne.w	800822c <_scanf_float+0x60>
 80083ea:	2507      	movs	r5, #7
 80083ec:	e7b2      	b.n	8008354 <_scanf_float+0x188>
 80083ee:	6822      	ldr	r2, [r4, #0]
 80083f0:	0591      	lsls	r1, r2, #22
 80083f2:	f57f af1b 	bpl.w	800822c <_scanf_float+0x60>
 80083f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80083fa:	6022      	str	r2, [r4, #0]
 80083fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008400:	e7a8      	b.n	8008354 <_scanf_float+0x188>
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008408:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800840c:	d006      	beq.n	800841c <_scanf_float+0x250>
 800840e:	0550      	lsls	r0, r2, #21
 8008410:	f57f af0c 	bpl.w	800822c <_scanf_float+0x60>
 8008414:	f1b9 0f00 	cmp.w	r9, #0
 8008418:	f43f af0f 	beq.w	800823a <_scanf_float+0x6e>
 800841c:	0591      	lsls	r1, r2, #22
 800841e:	bf58      	it	pl
 8008420:	9901      	ldrpl	r1, [sp, #4]
 8008422:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008426:	bf58      	it	pl
 8008428:	eba9 0101 	subpl.w	r1, r9, r1
 800842c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008430:	bf58      	it	pl
 8008432:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008436:	6022      	str	r2, [r4, #0]
 8008438:	f04f 0900 	mov.w	r9, #0
 800843c:	e78a      	b.n	8008354 <_scanf_float+0x188>
 800843e:	f04f 0a03 	mov.w	sl, #3
 8008442:	e787      	b.n	8008354 <_scanf_float+0x188>
 8008444:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008448:	4639      	mov	r1, r7
 800844a:	4640      	mov	r0, r8
 800844c:	4798      	blx	r3
 800844e:	2800      	cmp	r0, #0
 8008450:	f43f aedf 	beq.w	8008212 <_scanf_float+0x46>
 8008454:	e6ea      	b.n	800822c <_scanf_float+0x60>
 8008456:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800845a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800845e:	463a      	mov	r2, r7
 8008460:	4640      	mov	r0, r8
 8008462:	4798      	blx	r3
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	3b01      	subs	r3, #1
 8008468:	6123      	str	r3, [r4, #16]
 800846a:	e6ec      	b.n	8008246 <_scanf_float+0x7a>
 800846c:	1e6b      	subs	r3, r5, #1
 800846e:	2b06      	cmp	r3, #6
 8008470:	d825      	bhi.n	80084be <_scanf_float+0x2f2>
 8008472:	2d02      	cmp	r5, #2
 8008474:	d836      	bhi.n	80084e4 <_scanf_float+0x318>
 8008476:	455e      	cmp	r6, fp
 8008478:	f67f aee8 	bls.w	800824c <_scanf_float+0x80>
 800847c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008480:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008484:	463a      	mov	r2, r7
 8008486:	4640      	mov	r0, r8
 8008488:	4798      	blx	r3
 800848a:	6923      	ldr	r3, [r4, #16]
 800848c:	3b01      	subs	r3, #1
 800848e:	6123      	str	r3, [r4, #16]
 8008490:	e7f1      	b.n	8008476 <_scanf_float+0x2aa>
 8008492:	9802      	ldr	r0, [sp, #8]
 8008494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008498:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800849c:	9002      	str	r0, [sp, #8]
 800849e:	463a      	mov	r2, r7
 80084a0:	4640      	mov	r0, r8
 80084a2:	4798      	blx	r3
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	6123      	str	r3, [r4, #16]
 80084aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ae:	fa5f fa8a 	uxtb.w	sl, sl
 80084b2:	f1ba 0f02 	cmp.w	sl, #2
 80084b6:	d1ec      	bne.n	8008492 <_scanf_float+0x2c6>
 80084b8:	3d03      	subs	r5, #3
 80084ba:	b2ed      	uxtb	r5, r5
 80084bc:	1b76      	subs	r6, r6, r5
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	05da      	lsls	r2, r3, #23
 80084c2:	d52f      	bpl.n	8008524 <_scanf_float+0x358>
 80084c4:	055b      	lsls	r3, r3, #21
 80084c6:	d510      	bpl.n	80084ea <_scanf_float+0x31e>
 80084c8:	455e      	cmp	r6, fp
 80084ca:	f67f aebf 	bls.w	800824c <_scanf_float+0x80>
 80084ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084d6:	463a      	mov	r2, r7
 80084d8:	4640      	mov	r0, r8
 80084da:	4798      	blx	r3
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	3b01      	subs	r3, #1
 80084e0:	6123      	str	r3, [r4, #16]
 80084e2:	e7f1      	b.n	80084c8 <_scanf_float+0x2fc>
 80084e4:	46aa      	mov	sl, r5
 80084e6:	9602      	str	r6, [sp, #8]
 80084e8:	e7df      	b.n	80084aa <_scanf_float+0x2de>
 80084ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	2965      	cmp	r1, #101	; 0x65
 80084f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80084f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80084fa:	6123      	str	r3, [r4, #16]
 80084fc:	d00c      	beq.n	8008518 <_scanf_float+0x34c>
 80084fe:	2945      	cmp	r1, #69	; 0x45
 8008500:	d00a      	beq.n	8008518 <_scanf_float+0x34c>
 8008502:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008506:	463a      	mov	r2, r7
 8008508:	4640      	mov	r0, r8
 800850a:	4798      	blx	r3
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008512:	3b01      	subs	r3, #1
 8008514:	1eb5      	subs	r5, r6, #2
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800851c:	463a      	mov	r2, r7
 800851e:	4640      	mov	r0, r8
 8008520:	4798      	blx	r3
 8008522:	462e      	mov	r6, r5
 8008524:	6825      	ldr	r5, [r4, #0]
 8008526:	f015 0510 	ands.w	r5, r5, #16
 800852a:	d159      	bne.n	80085e0 <_scanf_float+0x414>
 800852c:	7035      	strb	r5, [r6, #0]
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008538:	d11b      	bne.n	8008572 <_scanf_float+0x3a6>
 800853a:	9b01      	ldr	r3, [sp, #4]
 800853c:	454b      	cmp	r3, r9
 800853e:	eba3 0209 	sub.w	r2, r3, r9
 8008542:	d123      	bne.n	800858c <_scanf_float+0x3c0>
 8008544:	2200      	movs	r2, #0
 8008546:	4659      	mov	r1, fp
 8008548:	4640      	mov	r0, r8
 800854a:	f000 fea7 	bl	800929c <_strtod_r>
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	9b03      	ldr	r3, [sp, #12]
 8008552:	f012 0f02 	tst.w	r2, #2
 8008556:	ec57 6b10 	vmov	r6, r7, d0
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	d021      	beq.n	80085a2 <_scanf_float+0x3d6>
 800855e:	9903      	ldr	r1, [sp, #12]
 8008560:	1d1a      	adds	r2, r3, #4
 8008562:	600a      	str	r2, [r1, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	e9c3 6700 	strd	r6, r7, [r3]
 800856a:	68e3      	ldr	r3, [r4, #12]
 800856c:	3301      	adds	r3, #1
 800856e:	60e3      	str	r3, [r4, #12]
 8008570:	e66d      	b.n	800824e <_scanf_float+0x82>
 8008572:	9b04      	ldr	r3, [sp, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d0e5      	beq.n	8008544 <_scanf_float+0x378>
 8008578:	9905      	ldr	r1, [sp, #20]
 800857a:	230a      	movs	r3, #10
 800857c:	462a      	mov	r2, r5
 800857e:	3101      	adds	r1, #1
 8008580:	4640      	mov	r0, r8
 8008582:	f000 ff13 	bl	80093ac <_strtol_r>
 8008586:	9b04      	ldr	r3, [sp, #16]
 8008588:	9e05      	ldr	r6, [sp, #20]
 800858a:	1ac2      	subs	r2, r0, r3
 800858c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008590:	429e      	cmp	r6, r3
 8008592:	bf28      	it	cs
 8008594:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008598:	4912      	ldr	r1, [pc, #72]	; (80085e4 <_scanf_float+0x418>)
 800859a:	4630      	mov	r0, r6
 800859c:	f000 f83c 	bl	8008618 <siprintf>
 80085a0:	e7d0      	b.n	8008544 <_scanf_float+0x378>
 80085a2:	9903      	ldr	r1, [sp, #12]
 80085a4:	f012 0f04 	tst.w	r2, #4
 80085a8:	f103 0204 	add.w	r2, r3, #4
 80085ac:	600a      	str	r2, [r1, #0]
 80085ae:	d1d9      	bne.n	8008564 <_scanf_float+0x398>
 80085b0:	f8d3 8000 	ldr.w	r8, [r3]
 80085b4:	ee10 2a10 	vmov	r2, s0
 80085b8:	ee10 0a10 	vmov	r0, s0
 80085bc:	463b      	mov	r3, r7
 80085be:	4639      	mov	r1, r7
 80085c0:	f7f8 fab4 	bl	8000b2c <__aeabi_dcmpun>
 80085c4:	b128      	cbz	r0, 80085d2 <_scanf_float+0x406>
 80085c6:	4808      	ldr	r0, [pc, #32]	; (80085e8 <_scanf_float+0x41c>)
 80085c8:	f000 f820 	bl	800860c <nanf>
 80085cc:	ed88 0a00 	vstr	s0, [r8]
 80085d0:	e7cb      	b.n	800856a <_scanf_float+0x39e>
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f8 fb07 	bl	8000be8 <__aeabi_d2f>
 80085da:	f8c8 0000 	str.w	r0, [r8]
 80085de:	e7c4      	b.n	800856a <_scanf_float+0x39e>
 80085e0:	2500      	movs	r5, #0
 80085e2:	e634      	b.n	800824e <_scanf_float+0x82>
 80085e4:	0800c100 	.word	0x0800c100
 80085e8:	0800c508 	.word	0x0800c508

080085ec <_sbrk_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4d06      	ldr	r5, [pc, #24]	; (8008608 <_sbrk_r+0x1c>)
 80085f0:	2300      	movs	r3, #0
 80085f2:	4604      	mov	r4, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	602b      	str	r3, [r5, #0]
 80085f8:	f7f9 feb6 	bl	8002368 <_sbrk>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d102      	bne.n	8008606 <_sbrk_r+0x1a>
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	b103      	cbz	r3, 8008606 <_sbrk_r+0x1a>
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	200008ac 	.word	0x200008ac

0800860c <nanf>:
 800860c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008614 <nanf+0x8>
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	7fc00000 	.word	0x7fc00000

08008618 <siprintf>:
 8008618:	b40e      	push	{r1, r2, r3}
 800861a:	b500      	push	{lr}
 800861c:	b09c      	sub	sp, #112	; 0x70
 800861e:	ab1d      	add	r3, sp, #116	; 0x74
 8008620:	9002      	str	r0, [sp, #8]
 8008622:	9006      	str	r0, [sp, #24]
 8008624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008628:	4809      	ldr	r0, [pc, #36]	; (8008650 <siprintf+0x38>)
 800862a:	9107      	str	r1, [sp, #28]
 800862c:	9104      	str	r1, [sp, #16]
 800862e:	4909      	ldr	r1, [pc, #36]	; (8008654 <siprintf+0x3c>)
 8008630:	f853 2b04 	ldr.w	r2, [r3], #4
 8008634:	9105      	str	r1, [sp, #20]
 8008636:	6800      	ldr	r0, [r0, #0]
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	a902      	add	r1, sp, #8
 800863c:	f002 fdf6 	bl	800b22c <_svfiprintf_r>
 8008640:	9b02      	ldr	r3, [sp, #8]
 8008642:	2200      	movs	r2, #0
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	b01c      	add	sp, #112	; 0x70
 8008648:	f85d eb04 	ldr.w	lr, [sp], #4
 800864c:	b003      	add	sp, #12
 800864e:	4770      	bx	lr
 8008650:	2000000c 	.word	0x2000000c
 8008654:	ffff0208 	.word	0xffff0208

08008658 <sulp>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	4604      	mov	r4, r0
 800865c:	460d      	mov	r5, r1
 800865e:	ec45 4b10 	vmov	d0, r4, r5
 8008662:	4616      	mov	r6, r2
 8008664:	f002 fc22 	bl	800aeac <__ulp>
 8008668:	ec51 0b10 	vmov	r0, r1, d0
 800866c:	b17e      	cbz	r6, 800868e <sulp+0x36>
 800866e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008672:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008676:	2b00      	cmp	r3, #0
 8008678:	dd09      	ble.n	800868e <sulp+0x36>
 800867a:	051b      	lsls	r3, r3, #20
 800867c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008680:	2400      	movs	r4, #0
 8008682:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008686:	4622      	mov	r2, r4
 8008688:	462b      	mov	r3, r5
 800868a:	f7f7 ffb5 	bl	80005f8 <__aeabi_dmul>
 800868e:	bd70      	pop	{r4, r5, r6, pc}

08008690 <_strtod_l>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	ed2d 8b02 	vpush	{d8}
 8008698:	b09d      	sub	sp, #116	; 0x74
 800869a:	461f      	mov	r7, r3
 800869c:	2300      	movs	r3, #0
 800869e:	9318      	str	r3, [sp, #96]	; 0x60
 80086a0:	4ba2      	ldr	r3, [pc, #648]	; (800892c <_strtod_l+0x29c>)
 80086a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	9305      	str	r3, [sp, #20]
 80086a8:	4604      	mov	r4, r0
 80086aa:	4618      	mov	r0, r3
 80086ac:	4688      	mov	r8, r1
 80086ae:	f7f7 fd8f 	bl	80001d0 <strlen>
 80086b2:	f04f 0a00 	mov.w	sl, #0
 80086b6:	4605      	mov	r5, r0
 80086b8:	f04f 0b00 	mov.w	fp, #0
 80086bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80086c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086c2:	781a      	ldrb	r2, [r3, #0]
 80086c4:	2a2b      	cmp	r2, #43	; 0x2b
 80086c6:	d04e      	beq.n	8008766 <_strtod_l+0xd6>
 80086c8:	d83b      	bhi.n	8008742 <_strtod_l+0xb2>
 80086ca:	2a0d      	cmp	r2, #13
 80086cc:	d834      	bhi.n	8008738 <_strtod_l+0xa8>
 80086ce:	2a08      	cmp	r2, #8
 80086d0:	d834      	bhi.n	800873c <_strtod_l+0xac>
 80086d2:	2a00      	cmp	r2, #0
 80086d4:	d03e      	beq.n	8008754 <_strtod_l+0xc4>
 80086d6:	2300      	movs	r3, #0
 80086d8:	930a      	str	r3, [sp, #40]	; 0x28
 80086da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80086dc:	7833      	ldrb	r3, [r6, #0]
 80086de:	2b30      	cmp	r3, #48	; 0x30
 80086e0:	f040 80b0 	bne.w	8008844 <_strtod_l+0x1b4>
 80086e4:	7873      	ldrb	r3, [r6, #1]
 80086e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086ea:	2b58      	cmp	r3, #88	; 0x58
 80086ec:	d168      	bne.n	80087c0 <_strtod_l+0x130>
 80086ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	ab18      	add	r3, sp, #96	; 0x60
 80086f4:	9702      	str	r7, [sp, #8]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	4a8d      	ldr	r2, [pc, #564]	; (8008930 <_strtod_l+0x2a0>)
 80086fa:	ab19      	add	r3, sp, #100	; 0x64
 80086fc:	a917      	add	r1, sp, #92	; 0x5c
 80086fe:	4620      	mov	r0, r4
 8008700:	f001 fd38 	bl	800a174 <__gethex>
 8008704:	f010 0707 	ands.w	r7, r0, #7
 8008708:	4605      	mov	r5, r0
 800870a:	d005      	beq.n	8008718 <_strtod_l+0x88>
 800870c:	2f06      	cmp	r7, #6
 800870e:	d12c      	bne.n	800876a <_strtod_l+0xda>
 8008710:	3601      	adds	r6, #1
 8008712:	2300      	movs	r3, #0
 8008714:	9617      	str	r6, [sp, #92]	; 0x5c
 8008716:	930a      	str	r3, [sp, #40]	; 0x28
 8008718:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800871a:	2b00      	cmp	r3, #0
 800871c:	f040 8590 	bne.w	8009240 <_strtod_l+0xbb0>
 8008720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008722:	b1eb      	cbz	r3, 8008760 <_strtod_l+0xd0>
 8008724:	4652      	mov	r2, sl
 8008726:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800872a:	ec43 2b10 	vmov	d0, r2, r3
 800872e:	b01d      	add	sp, #116	; 0x74
 8008730:	ecbd 8b02 	vpop	{d8}
 8008734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008738:	2a20      	cmp	r2, #32
 800873a:	d1cc      	bne.n	80086d6 <_strtod_l+0x46>
 800873c:	3301      	adds	r3, #1
 800873e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008740:	e7be      	b.n	80086c0 <_strtod_l+0x30>
 8008742:	2a2d      	cmp	r2, #45	; 0x2d
 8008744:	d1c7      	bne.n	80086d6 <_strtod_l+0x46>
 8008746:	2201      	movs	r2, #1
 8008748:	920a      	str	r2, [sp, #40]	; 0x28
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	9217      	str	r2, [sp, #92]	; 0x5c
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1c2      	bne.n	80086da <_strtod_l+0x4a>
 8008754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008756:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800875a:	2b00      	cmp	r3, #0
 800875c:	f040 856e 	bne.w	800923c <_strtod_l+0xbac>
 8008760:	4652      	mov	r2, sl
 8008762:	465b      	mov	r3, fp
 8008764:	e7e1      	b.n	800872a <_strtod_l+0x9a>
 8008766:	2200      	movs	r2, #0
 8008768:	e7ee      	b.n	8008748 <_strtod_l+0xb8>
 800876a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800876c:	b13a      	cbz	r2, 800877e <_strtod_l+0xee>
 800876e:	2135      	movs	r1, #53	; 0x35
 8008770:	a81a      	add	r0, sp, #104	; 0x68
 8008772:	f002 fca6 	bl	800b0c2 <__copybits>
 8008776:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008778:	4620      	mov	r0, r4
 800877a:	f002 f865 	bl	800a848 <_Bfree>
 800877e:	3f01      	subs	r7, #1
 8008780:	2f04      	cmp	r7, #4
 8008782:	d806      	bhi.n	8008792 <_strtod_l+0x102>
 8008784:	e8df f007 	tbb	[pc, r7]
 8008788:	1714030a 	.word	0x1714030a
 800878c:	0a          	.byte	0x0a
 800878d:	00          	.byte	0x00
 800878e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008792:	0728      	lsls	r0, r5, #28
 8008794:	d5c0      	bpl.n	8008718 <_strtod_l+0x88>
 8008796:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800879a:	e7bd      	b.n	8008718 <_strtod_l+0x88>
 800879c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80087a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80087a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80087a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80087aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80087ae:	e7f0      	b.n	8008792 <_strtod_l+0x102>
 80087b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008934 <_strtod_l+0x2a4>
 80087b4:	e7ed      	b.n	8008792 <_strtod_l+0x102>
 80087b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80087ba:	f04f 3aff 	mov.w	sl, #4294967295
 80087be:	e7e8      	b.n	8008792 <_strtod_l+0x102>
 80087c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	2b30      	cmp	r3, #48	; 0x30
 80087ca:	d0f9      	beq.n	80087c0 <_strtod_l+0x130>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d0a3      	beq.n	8008718 <_strtod_l+0x88>
 80087d0:	2301      	movs	r3, #1
 80087d2:	f04f 0900 	mov.w	r9, #0
 80087d6:	9304      	str	r3, [sp, #16]
 80087d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087da:	9308      	str	r3, [sp, #32]
 80087dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80087e0:	464f      	mov	r7, r9
 80087e2:	220a      	movs	r2, #10
 80087e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80087e6:	7806      	ldrb	r6, [r0, #0]
 80087e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80087ec:	b2d9      	uxtb	r1, r3
 80087ee:	2909      	cmp	r1, #9
 80087f0:	d92a      	bls.n	8008848 <_strtod_l+0x1b8>
 80087f2:	9905      	ldr	r1, [sp, #20]
 80087f4:	462a      	mov	r2, r5
 80087f6:	f002 fe23 	bl	800b440 <strncmp>
 80087fa:	b398      	cbz	r0, 8008864 <_strtod_l+0x1d4>
 80087fc:	2000      	movs	r0, #0
 80087fe:	4632      	mov	r2, r6
 8008800:	463d      	mov	r5, r7
 8008802:	9005      	str	r0, [sp, #20]
 8008804:	4603      	mov	r3, r0
 8008806:	2a65      	cmp	r2, #101	; 0x65
 8008808:	d001      	beq.n	800880e <_strtod_l+0x17e>
 800880a:	2a45      	cmp	r2, #69	; 0x45
 800880c:	d118      	bne.n	8008840 <_strtod_l+0x1b0>
 800880e:	b91d      	cbnz	r5, 8008818 <_strtod_l+0x188>
 8008810:	9a04      	ldr	r2, [sp, #16]
 8008812:	4302      	orrs	r2, r0
 8008814:	d09e      	beq.n	8008754 <_strtod_l+0xc4>
 8008816:	2500      	movs	r5, #0
 8008818:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800881c:	f108 0201 	add.w	r2, r8, #1
 8008820:	9217      	str	r2, [sp, #92]	; 0x5c
 8008822:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008826:	2a2b      	cmp	r2, #43	; 0x2b
 8008828:	d075      	beq.n	8008916 <_strtod_l+0x286>
 800882a:	2a2d      	cmp	r2, #45	; 0x2d
 800882c:	d07b      	beq.n	8008926 <_strtod_l+0x296>
 800882e:	f04f 0c00 	mov.w	ip, #0
 8008832:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008836:	2909      	cmp	r1, #9
 8008838:	f240 8082 	bls.w	8008940 <_strtod_l+0x2b0>
 800883c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008840:	2600      	movs	r6, #0
 8008842:	e09d      	b.n	8008980 <_strtod_l+0x2f0>
 8008844:	2300      	movs	r3, #0
 8008846:	e7c4      	b.n	80087d2 <_strtod_l+0x142>
 8008848:	2f08      	cmp	r7, #8
 800884a:	bfd8      	it	le
 800884c:	9907      	ldrle	r1, [sp, #28]
 800884e:	f100 0001 	add.w	r0, r0, #1
 8008852:	bfda      	itte	le
 8008854:	fb02 3301 	mlale	r3, r2, r1, r3
 8008858:	9307      	strle	r3, [sp, #28]
 800885a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800885e:	3701      	adds	r7, #1
 8008860:	9017      	str	r0, [sp, #92]	; 0x5c
 8008862:	e7bf      	b.n	80087e4 <_strtod_l+0x154>
 8008864:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008866:	195a      	adds	r2, r3, r5
 8008868:	9217      	str	r2, [sp, #92]	; 0x5c
 800886a:	5d5a      	ldrb	r2, [r3, r5]
 800886c:	2f00      	cmp	r7, #0
 800886e:	d037      	beq.n	80088e0 <_strtod_l+0x250>
 8008870:	9005      	str	r0, [sp, #20]
 8008872:	463d      	mov	r5, r7
 8008874:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008878:	2b09      	cmp	r3, #9
 800887a:	d912      	bls.n	80088a2 <_strtod_l+0x212>
 800887c:	2301      	movs	r3, #1
 800887e:	e7c2      	b.n	8008806 <_strtod_l+0x176>
 8008880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	9217      	str	r2, [sp, #92]	; 0x5c
 8008886:	785a      	ldrb	r2, [r3, #1]
 8008888:	3001      	adds	r0, #1
 800888a:	2a30      	cmp	r2, #48	; 0x30
 800888c:	d0f8      	beq.n	8008880 <_strtod_l+0x1f0>
 800888e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008892:	2b08      	cmp	r3, #8
 8008894:	f200 84d9 	bhi.w	800924a <_strtod_l+0xbba>
 8008898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800889a:	9005      	str	r0, [sp, #20]
 800889c:	2000      	movs	r0, #0
 800889e:	9308      	str	r3, [sp, #32]
 80088a0:	4605      	mov	r5, r0
 80088a2:	3a30      	subs	r2, #48	; 0x30
 80088a4:	f100 0301 	add.w	r3, r0, #1
 80088a8:	d014      	beq.n	80088d4 <_strtod_l+0x244>
 80088aa:	9905      	ldr	r1, [sp, #20]
 80088ac:	4419      	add	r1, r3
 80088ae:	9105      	str	r1, [sp, #20]
 80088b0:	462b      	mov	r3, r5
 80088b2:	eb00 0e05 	add.w	lr, r0, r5
 80088b6:	210a      	movs	r1, #10
 80088b8:	4573      	cmp	r3, lr
 80088ba:	d113      	bne.n	80088e4 <_strtod_l+0x254>
 80088bc:	182b      	adds	r3, r5, r0
 80088be:	2b08      	cmp	r3, #8
 80088c0:	f105 0501 	add.w	r5, r5, #1
 80088c4:	4405      	add	r5, r0
 80088c6:	dc1c      	bgt.n	8008902 <_strtod_l+0x272>
 80088c8:	9907      	ldr	r1, [sp, #28]
 80088ca:	230a      	movs	r3, #10
 80088cc:	fb03 2301 	mla	r3, r3, r1, r2
 80088d0:	9307      	str	r3, [sp, #28]
 80088d2:	2300      	movs	r3, #0
 80088d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088d6:	1c51      	adds	r1, r2, #1
 80088d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80088da:	7852      	ldrb	r2, [r2, #1]
 80088dc:	4618      	mov	r0, r3
 80088de:	e7c9      	b.n	8008874 <_strtod_l+0x1e4>
 80088e0:	4638      	mov	r0, r7
 80088e2:	e7d2      	b.n	800888a <_strtod_l+0x1fa>
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	dc04      	bgt.n	80088f2 <_strtod_l+0x262>
 80088e8:	9e07      	ldr	r6, [sp, #28]
 80088ea:	434e      	muls	r6, r1
 80088ec:	9607      	str	r6, [sp, #28]
 80088ee:	3301      	adds	r3, #1
 80088f0:	e7e2      	b.n	80088b8 <_strtod_l+0x228>
 80088f2:	f103 0c01 	add.w	ip, r3, #1
 80088f6:	f1bc 0f10 	cmp.w	ip, #16
 80088fa:	bfd8      	it	le
 80088fc:	fb01 f909 	mulle.w	r9, r1, r9
 8008900:	e7f5      	b.n	80088ee <_strtod_l+0x25e>
 8008902:	2d10      	cmp	r5, #16
 8008904:	bfdc      	itt	le
 8008906:	230a      	movle	r3, #10
 8008908:	fb03 2909 	mlale	r9, r3, r9, r2
 800890c:	e7e1      	b.n	80088d2 <_strtod_l+0x242>
 800890e:	2300      	movs	r3, #0
 8008910:	9305      	str	r3, [sp, #20]
 8008912:	2301      	movs	r3, #1
 8008914:	e77c      	b.n	8008810 <_strtod_l+0x180>
 8008916:	f04f 0c00 	mov.w	ip, #0
 800891a:	f108 0202 	add.w	r2, r8, #2
 800891e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008920:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008924:	e785      	b.n	8008832 <_strtod_l+0x1a2>
 8008926:	f04f 0c01 	mov.w	ip, #1
 800892a:	e7f6      	b.n	800891a <_strtod_l+0x28a>
 800892c:	0800c350 	.word	0x0800c350
 8008930:	0800c108 	.word	0x0800c108
 8008934:	7ff00000 	.word	0x7ff00000
 8008938:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800893a:	1c51      	adds	r1, r2, #1
 800893c:	9117      	str	r1, [sp, #92]	; 0x5c
 800893e:	7852      	ldrb	r2, [r2, #1]
 8008940:	2a30      	cmp	r2, #48	; 0x30
 8008942:	d0f9      	beq.n	8008938 <_strtod_l+0x2a8>
 8008944:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008948:	2908      	cmp	r1, #8
 800894a:	f63f af79 	bhi.w	8008840 <_strtod_l+0x1b0>
 800894e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008952:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008954:	9206      	str	r2, [sp, #24]
 8008956:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008958:	1c51      	adds	r1, r2, #1
 800895a:	9117      	str	r1, [sp, #92]	; 0x5c
 800895c:	7852      	ldrb	r2, [r2, #1]
 800895e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008962:	2e09      	cmp	r6, #9
 8008964:	d937      	bls.n	80089d6 <_strtod_l+0x346>
 8008966:	9e06      	ldr	r6, [sp, #24]
 8008968:	1b89      	subs	r1, r1, r6
 800896a:	2908      	cmp	r1, #8
 800896c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008970:	dc02      	bgt.n	8008978 <_strtod_l+0x2e8>
 8008972:	4576      	cmp	r6, lr
 8008974:	bfa8      	it	ge
 8008976:	4676      	movge	r6, lr
 8008978:	f1bc 0f00 	cmp.w	ip, #0
 800897c:	d000      	beq.n	8008980 <_strtod_l+0x2f0>
 800897e:	4276      	negs	r6, r6
 8008980:	2d00      	cmp	r5, #0
 8008982:	d14d      	bne.n	8008a20 <_strtod_l+0x390>
 8008984:	9904      	ldr	r1, [sp, #16]
 8008986:	4301      	orrs	r1, r0
 8008988:	f47f aec6 	bne.w	8008718 <_strtod_l+0x88>
 800898c:	2b00      	cmp	r3, #0
 800898e:	f47f aee1 	bne.w	8008754 <_strtod_l+0xc4>
 8008992:	2a69      	cmp	r2, #105	; 0x69
 8008994:	d027      	beq.n	80089e6 <_strtod_l+0x356>
 8008996:	dc24      	bgt.n	80089e2 <_strtod_l+0x352>
 8008998:	2a49      	cmp	r2, #73	; 0x49
 800899a:	d024      	beq.n	80089e6 <_strtod_l+0x356>
 800899c:	2a4e      	cmp	r2, #78	; 0x4e
 800899e:	f47f aed9 	bne.w	8008754 <_strtod_l+0xc4>
 80089a2:	499f      	ldr	r1, [pc, #636]	; (8008c20 <_strtod_l+0x590>)
 80089a4:	a817      	add	r0, sp, #92	; 0x5c
 80089a6:	f001 fe3d 	bl	800a624 <__match>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	f43f aed2 	beq.w	8008754 <_strtod_l+0xc4>
 80089b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b28      	cmp	r3, #40	; 0x28
 80089b6:	d12d      	bne.n	8008a14 <_strtod_l+0x384>
 80089b8:	499a      	ldr	r1, [pc, #616]	; (8008c24 <_strtod_l+0x594>)
 80089ba:	aa1a      	add	r2, sp, #104	; 0x68
 80089bc:	a817      	add	r0, sp, #92	; 0x5c
 80089be:	f001 fe45 	bl	800a64c <__hexnan>
 80089c2:	2805      	cmp	r0, #5
 80089c4:	d126      	bne.n	8008a14 <_strtod_l+0x384>
 80089c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80089cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80089d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80089d4:	e6a0      	b.n	8008718 <_strtod_l+0x88>
 80089d6:	210a      	movs	r1, #10
 80089d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80089dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80089e0:	e7b9      	b.n	8008956 <_strtod_l+0x2c6>
 80089e2:	2a6e      	cmp	r2, #110	; 0x6e
 80089e4:	e7db      	b.n	800899e <_strtod_l+0x30e>
 80089e6:	4990      	ldr	r1, [pc, #576]	; (8008c28 <_strtod_l+0x598>)
 80089e8:	a817      	add	r0, sp, #92	; 0x5c
 80089ea:	f001 fe1b 	bl	800a624 <__match>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f43f aeb0 	beq.w	8008754 <_strtod_l+0xc4>
 80089f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089f6:	498d      	ldr	r1, [pc, #564]	; (8008c2c <_strtod_l+0x59c>)
 80089f8:	3b01      	subs	r3, #1
 80089fa:	a817      	add	r0, sp, #92	; 0x5c
 80089fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80089fe:	f001 fe11 	bl	800a624 <__match>
 8008a02:	b910      	cbnz	r0, 8008a0a <_strtod_l+0x37a>
 8008a04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a06:	3301      	adds	r3, #1
 8008a08:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a0a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008c3c <_strtod_l+0x5ac>
 8008a0e:	f04f 0a00 	mov.w	sl, #0
 8008a12:	e681      	b.n	8008718 <_strtod_l+0x88>
 8008a14:	4886      	ldr	r0, [pc, #536]	; (8008c30 <_strtod_l+0x5a0>)
 8008a16:	f002 fd0b 	bl	800b430 <nan>
 8008a1a:	ec5b ab10 	vmov	sl, fp, d0
 8008a1e:	e67b      	b.n	8008718 <_strtod_l+0x88>
 8008a20:	9b05      	ldr	r3, [sp, #20]
 8008a22:	9807      	ldr	r0, [sp, #28]
 8008a24:	1af3      	subs	r3, r6, r3
 8008a26:	2f00      	cmp	r7, #0
 8008a28:	bf08      	it	eq
 8008a2a:	462f      	moveq	r7, r5
 8008a2c:	2d10      	cmp	r5, #16
 8008a2e:	9306      	str	r3, [sp, #24]
 8008a30:	46a8      	mov	r8, r5
 8008a32:	bfa8      	it	ge
 8008a34:	f04f 0810 	movge.w	r8, #16
 8008a38:	f7f7 fd64 	bl	8000504 <__aeabi_ui2d>
 8008a3c:	2d09      	cmp	r5, #9
 8008a3e:	4682      	mov	sl, r0
 8008a40:	468b      	mov	fp, r1
 8008a42:	dd13      	ble.n	8008a6c <_strtod_l+0x3dc>
 8008a44:	4b7b      	ldr	r3, [pc, #492]	; (8008c34 <_strtod_l+0x5a4>)
 8008a46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008a4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008a4e:	f7f7 fdd3 	bl	80005f8 <__aeabi_dmul>
 8008a52:	4682      	mov	sl, r0
 8008a54:	4648      	mov	r0, r9
 8008a56:	468b      	mov	fp, r1
 8008a58:	f7f7 fd54 	bl	8000504 <__aeabi_ui2d>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4650      	mov	r0, sl
 8008a62:	4659      	mov	r1, fp
 8008a64:	f7f7 fc12 	bl	800028c <__adddf3>
 8008a68:	4682      	mov	sl, r0
 8008a6a:	468b      	mov	fp, r1
 8008a6c:	2d0f      	cmp	r5, #15
 8008a6e:	dc38      	bgt.n	8008ae2 <_strtod_l+0x452>
 8008a70:	9b06      	ldr	r3, [sp, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f43f ae50 	beq.w	8008718 <_strtod_l+0x88>
 8008a78:	dd24      	ble.n	8008ac4 <_strtod_l+0x434>
 8008a7a:	2b16      	cmp	r3, #22
 8008a7c:	dc0b      	bgt.n	8008a96 <_strtod_l+0x406>
 8008a7e:	496d      	ldr	r1, [pc, #436]	; (8008c34 <_strtod_l+0x5a4>)
 8008a80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a88:	4652      	mov	r2, sl
 8008a8a:	465b      	mov	r3, fp
 8008a8c:	f7f7 fdb4 	bl	80005f8 <__aeabi_dmul>
 8008a90:	4682      	mov	sl, r0
 8008a92:	468b      	mov	fp, r1
 8008a94:	e640      	b.n	8008718 <_strtod_l+0x88>
 8008a96:	9a06      	ldr	r2, [sp, #24]
 8008a98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	db20      	blt.n	8008ae2 <_strtod_l+0x452>
 8008aa0:	4c64      	ldr	r4, [pc, #400]	; (8008c34 <_strtod_l+0x5a4>)
 8008aa2:	f1c5 050f 	rsb	r5, r5, #15
 8008aa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008aaa:	4652      	mov	r2, sl
 8008aac:	465b      	mov	r3, fp
 8008aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ab2:	f7f7 fda1 	bl	80005f8 <__aeabi_dmul>
 8008ab6:	9b06      	ldr	r3, [sp, #24]
 8008ab8:	1b5d      	subs	r5, r3, r5
 8008aba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008abe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ac2:	e7e3      	b.n	8008a8c <_strtod_l+0x3fc>
 8008ac4:	9b06      	ldr	r3, [sp, #24]
 8008ac6:	3316      	adds	r3, #22
 8008ac8:	db0b      	blt.n	8008ae2 <_strtod_l+0x452>
 8008aca:	9b05      	ldr	r3, [sp, #20]
 8008acc:	1b9e      	subs	r6, r3, r6
 8008ace:	4b59      	ldr	r3, [pc, #356]	; (8008c34 <_strtod_l+0x5a4>)
 8008ad0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008ad4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ad8:	4650      	mov	r0, sl
 8008ada:	4659      	mov	r1, fp
 8008adc:	f7f7 feb6 	bl	800084c <__aeabi_ddiv>
 8008ae0:	e7d6      	b.n	8008a90 <_strtod_l+0x400>
 8008ae2:	9b06      	ldr	r3, [sp, #24]
 8008ae4:	eba5 0808 	sub.w	r8, r5, r8
 8008ae8:	4498      	add	r8, r3
 8008aea:	f1b8 0f00 	cmp.w	r8, #0
 8008aee:	dd74      	ble.n	8008bda <_strtod_l+0x54a>
 8008af0:	f018 030f 	ands.w	r3, r8, #15
 8008af4:	d00a      	beq.n	8008b0c <_strtod_l+0x47c>
 8008af6:	494f      	ldr	r1, [pc, #316]	; (8008c34 <_strtod_l+0x5a4>)
 8008af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008afc:	4652      	mov	r2, sl
 8008afe:	465b      	mov	r3, fp
 8008b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b04:	f7f7 fd78 	bl	80005f8 <__aeabi_dmul>
 8008b08:	4682      	mov	sl, r0
 8008b0a:	468b      	mov	fp, r1
 8008b0c:	f038 080f 	bics.w	r8, r8, #15
 8008b10:	d04f      	beq.n	8008bb2 <_strtod_l+0x522>
 8008b12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008b16:	dd22      	ble.n	8008b5e <_strtod_l+0x4ce>
 8008b18:	2500      	movs	r5, #0
 8008b1a:	462e      	mov	r6, r5
 8008b1c:	9507      	str	r5, [sp, #28]
 8008b1e:	9505      	str	r5, [sp, #20]
 8008b20:	2322      	movs	r3, #34	; 0x22
 8008b22:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008c3c <_strtod_l+0x5ac>
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	f04f 0a00 	mov.w	sl, #0
 8008b2c:	9b07      	ldr	r3, [sp, #28]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f43f adf2 	beq.w	8008718 <_strtod_l+0x88>
 8008b34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b36:	4620      	mov	r0, r4
 8008b38:	f001 fe86 	bl	800a848 <_Bfree>
 8008b3c:	9905      	ldr	r1, [sp, #20]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f001 fe82 	bl	800a848 <_Bfree>
 8008b44:	4631      	mov	r1, r6
 8008b46:	4620      	mov	r0, r4
 8008b48:	f001 fe7e 	bl	800a848 <_Bfree>
 8008b4c:	9907      	ldr	r1, [sp, #28]
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f001 fe7a 	bl	800a848 <_Bfree>
 8008b54:	4629      	mov	r1, r5
 8008b56:	4620      	mov	r0, r4
 8008b58:	f001 fe76 	bl	800a848 <_Bfree>
 8008b5c:	e5dc      	b.n	8008718 <_strtod_l+0x88>
 8008b5e:	4b36      	ldr	r3, [pc, #216]	; (8008c38 <_strtod_l+0x5a8>)
 8008b60:	9304      	str	r3, [sp, #16]
 8008b62:	2300      	movs	r3, #0
 8008b64:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008b68:	4650      	mov	r0, sl
 8008b6a:	4659      	mov	r1, fp
 8008b6c:	4699      	mov	r9, r3
 8008b6e:	f1b8 0f01 	cmp.w	r8, #1
 8008b72:	dc21      	bgt.n	8008bb8 <_strtod_l+0x528>
 8008b74:	b10b      	cbz	r3, 8008b7a <_strtod_l+0x4ea>
 8008b76:	4682      	mov	sl, r0
 8008b78:	468b      	mov	fp, r1
 8008b7a:	4b2f      	ldr	r3, [pc, #188]	; (8008c38 <_strtod_l+0x5a8>)
 8008b7c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008b80:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008b84:	4652      	mov	r2, sl
 8008b86:	465b      	mov	r3, fp
 8008b88:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008b8c:	f7f7 fd34 	bl	80005f8 <__aeabi_dmul>
 8008b90:	4b2a      	ldr	r3, [pc, #168]	; (8008c3c <_strtod_l+0x5ac>)
 8008b92:	460a      	mov	r2, r1
 8008b94:	400b      	ands	r3, r1
 8008b96:	492a      	ldr	r1, [pc, #168]	; (8008c40 <_strtod_l+0x5b0>)
 8008b98:	428b      	cmp	r3, r1
 8008b9a:	4682      	mov	sl, r0
 8008b9c:	d8bc      	bhi.n	8008b18 <_strtod_l+0x488>
 8008b9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008ba2:	428b      	cmp	r3, r1
 8008ba4:	bf86      	itte	hi
 8008ba6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008c44 <_strtod_l+0x5b4>
 8008baa:	f04f 3aff 	movhi.w	sl, #4294967295
 8008bae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	e084      	b.n	8008cc2 <_strtod_l+0x632>
 8008bb8:	f018 0f01 	tst.w	r8, #1
 8008bbc:	d005      	beq.n	8008bca <_strtod_l+0x53a>
 8008bbe:	9b04      	ldr	r3, [sp, #16]
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fd18 	bl	80005f8 <__aeabi_dmul>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	9a04      	ldr	r2, [sp, #16]
 8008bcc:	3208      	adds	r2, #8
 8008bce:	f109 0901 	add.w	r9, r9, #1
 8008bd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008bd6:	9204      	str	r2, [sp, #16]
 8008bd8:	e7c9      	b.n	8008b6e <_strtod_l+0x4de>
 8008bda:	d0ea      	beq.n	8008bb2 <_strtod_l+0x522>
 8008bdc:	f1c8 0800 	rsb	r8, r8, #0
 8008be0:	f018 020f 	ands.w	r2, r8, #15
 8008be4:	d00a      	beq.n	8008bfc <_strtod_l+0x56c>
 8008be6:	4b13      	ldr	r3, [pc, #76]	; (8008c34 <_strtod_l+0x5a4>)
 8008be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bec:	4650      	mov	r0, sl
 8008bee:	4659      	mov	r1, fp
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	f7f7 fe2a 	bl	800084c <__aeabi_ddiv>
 8008bf8:	4682      	mov	sl, r0
 8008bfa:	468b      	mov	fp, r1
 8008bfc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008c00:	d0d7      	beq.n	8008bb2 <_strtod_l+0x522>
 8008c02:	f1b8 0f1f 	cmp.w	r8, #31
 8008c06:	dd1f      	ble.n	8008c48 <_strtod_l+0x5b8>
 8008c08:	2500      	movs	r5, #0
 8008c0a:	462e      	mov	r6, r5
 8008c0c:	9507      	str	r5, [sp, #28]
 8008c0e:	9505      	str	r5, [sp, #20]
 8008c10:	2322      	movs	r3, #34	; 0x22
 8008c12:	f04f 0a00 	mov.w	sl, #0
 8008c16:	f04f 0b00 	mov.w	fp, #0
 8008c1a:	6023      	str	r3, [r4, #0]
 8008c1c:	e786      	b.n	8008b2c <_strtod_l+0x49c>
 8008c1e:	bf00      	nop
 8008c20:	0800c0d9 	.word	0x0800c0d9
 8008c24:	0800c11c 	.word	0x0800c11c
 8008c28:	0800c0d1 	.word	0x0800c0d1
 8008c2c:	0800c25c 	.word	0x0800c25c
 8008c30:	0800c508 	.word	0x0800c508
 8008c34:	0800c3e8 	.word	0x0800c3e8
 8008c38:	0800c3c0 	.word	0x0800c3c0
 8008c3c:	7ff00000 	.word	0x7ff00000
 8008c40:	7ca00000 	.word	0x7ca00000
 8008c44:	7fefffff 	.word	0x7fefffff
 8008c48:	f018 0310 	ands.w	r3, r8, #16
 8008c4c:	bf18      	it	ne
 8008c4e:	236a      	movne	r3, #106	; 0x6a
 8008c50:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009000 <_strtod_l+0x970>
 8008c54:	9304      	str	r3, [sp, #16]
 8008c56:	4650      	mov	r0, sl
 8008c58:	4659      	mov	r1, fp
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f018 0f01 	tst.w	r8, #1
 8008c60:	d004      	beq.n	8008c6c <_strtod_l+0x5dc>
 8008c62:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c66:	f7f7 fcc7 	bl	80005f8 <__aeabi_dmul>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008c70:	f109 0908 	add.w	r9, r9, #8
 8008c74:	d1f2      	bne.n	8008c5c <_strtod_l+0x5cc>
 8008c76:	b10b      	cbz	r3, 8008c7c <_strtod_l+0x5ec>
 8008c78:	4682      	mov	sl, r0
 8008c7a:	468b      	mov	fp, r1
 8008c7c:	9b04      	ldr	r3, [sp, #16]
 8008c7e:	b1c3      	cbz	r3, 8008cb2 <_strtod_l+0x622>
 8008c80:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008c84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	4659      	mov	r1, fp
 8008c8c:	dd11      	ble.n	8008cb2 <_strtod_l+0x622>
 8008c8e:	2b1f      	cmp	r3, #31
 8008c90:	f340 8124 	ble.w	8008edc <_strtod_l+0x84c>
 8008c94:	2b34      	cmp	r3, #52	; 0x34
 8008c96:	bfde      	ittt	le
 8008c98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008c9c:	f04f 33ff 	movle.w	r3, #4294967295
 8008ca0:	fa03 f202 	lslle.w	r2, r3, r2
 8008ca4:	f04f 0a00 	mov.w	sl, #0
 8008ca8:	bfcc      	ite	gt
 8008caa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008cae:	ea02 0b01 	andle.w	fp, r2, r1
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4650      	mov	r0, sl
 8008cb8:	4659      	mov	r1, fp
 8008cba:	f7f7 ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d1a2      	bne.n	8008c08 <_strtod_l+0x578>
 8008cc2:	9b07      	ldr	r3, [sp, #28]
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	9908      	ldr	r1, [sp, #32]
 8008cc8:	462b      	mov	r3, r5
 8008cca:	463a      	mov	r2, r7
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f001 fe23 	bl	800a918 <__s2b>
 8008cd2:	9007      	str	r0, [sp, #28]
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	f43f af1f 	beq.w	8008b18 <_strtod_l+0x488>
 8008cda:	9b05      	ldr	r3, [sp, #20]
 8008cdc:	1b9e      	subs	r6, r3, r6
 8008cde:	9b06      	ldr	r3, [sp, #24]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	bfb4      	ite	lt
 8008ce4:	4633      	movlt	r3, r6
 8008ce6:	2300      	movge	r3, #0
 8008ce8:	930c      	str	r3, [sp, #48]	; 0x30
 8008cea:	9b06      	ldr	r3, [sp, #24]
 8008cec:	2500      	movs	r5, #0
 8008cee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8008cf4:	462e      	mov	r6, r5
 8008cf6:	9b07      	ldr	r3, [sp, #28]
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	6859      	ldr	r1, [r3, #4]
 8008cfc:	f001 fd64 	bl	800a7c8 <_Balloc>
 8008d00:	9005      	str	r0, [sp, #20]
 8008d02:	2800      	cmp	r0, #0
 8008d04:	f43f af0c 	beq.w	8008b20 <_strtod_l+0x490>
 8008d08:	9b07      	ldr	r3, [sp, #28]
 8008d0a:	691a      	ldr	r2, [r3, #16]
 8008d0c:	3202      	adds	r2, #2
 8008d0e:	f103 010c 	add.w	r1, r3, #12
 8008d12:	0092      	lsls	r2, r2, #2
 8008d14:	300c      	adds	r0, #12
 8008d16:	f7fe fcf9 	bl	800770c <memcpy>
 8008d1a:	ec4b ab10 	vmov	d0, sl, fp
 8008d1e:	aa1a      	add	r2, sp, #104	; 0x68
 8008d20:	a919      	add	r1, sp, #100	; 0x64
 8008d22:	4620      	mov	r0, r4
 8008d24:	f002 f93e 	bl	800afa4 <__d2b>
 8008d28:	ec4b ab18 	vmov	d8, sl, fp
 8008d2c:	9018      	str	r0, [sp, #96]	; 0x60
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	f43f aef6 	beq.w	8008b20 <_strtod_l+0x490>
 8008d34:	2101      	movs	r1, #1
 8008d36:	4620      	mov	r0, r4
 8008d38:	f001 fe88 	bl	800aa4c <__i2b>
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f43f aeee 	beq.w	8008b20 <_strtod_l+0x490>
 8008d44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d46:	9904      	ldr	r1, [sp, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bfab      	itete	ge
 8008d4c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008d4e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008d50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008d52:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008d56:	bfac      	ite	ge
 8008d58:	eb03 0902 	addge.w	r9, r3, r2
 8008d5c:	1ad7      	sublt	r7, r2, r3
 8008d5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008d60:	eba3 0801 	sub.w	r8, r3, r1
 8008d64:	4490      	add	r8, r2
 8008d66:	4ba1      	ldr	r3, [pc, #644]	; (8008fec <_strtod_l+0x95c>)
 8008d68:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d6c:	4598      	cmp	r8, r3
 8008d6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008d72:	f280 80c7 	bge.w	8008f04 <_strtod_l+0x874>
 8008d76:	eba3 0308 	sub.w	r3, r3, r8
 8008d7a:	2b1f      	cmp	r3, #31
 8008d7c:	eba2 0203 	sub.w	r2, r2, r3
 8008d80:	f04f 0101 	mov.w	r1, #1
 8008d84:	f300 80b1 	bgt.w	8008eea <_strtod_l+0x85a>
 8008d88:	fa01 f303 	lsl.w	r3, r1, r3
 8008d8c:	930d      	str	r3, [sp, #52]	; 0x34
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9308      	str	r3, [sp, #32]
 8008d92:	eb09 0802 	add.w	r8, r9, r2
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	45c1      	cmp	r9, r8
 8008d9a:	4417      	add	r7, r2
 8008d9c:	441f      	add	r7, r3
 8008d9e:	464b      	mov	r3, r9
 8008da0:	bfa8      	it	ge
 8008da2:	4643      	movge	r3, r8
 8008da4:	42bb      	cmp	r3, r7
 8008da6:	bfa8      	it	ge
 8008da8:	463b      	movge	r3, r7
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	bfc2      	ittt	gt
 8008dae:	eba8 0803 	subgt.w	r8, r8, r3
 8008db2:	1aff      	subgt	r7, r7, r3
 8008db4:	eba9 0903 	subgt.w	r9, r9, r3
 8008db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dd17      	ble.n	8008dee <_strtod_l+0x75e>
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f001 ff02 	bl	800abcc <__pow5mult>
 8008dc8:	4606      	mov	r6, r0
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	f43f aea8 	beq.w	8008b20 <_strtod_l+0x490>
 8008dd0:	4601      	mov	r1, r0
 8008dd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f001 fe4f 	bl	800aa78 <__multiply>
 8008dda:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	f43f ae9f 	beq.w	8008b20 <_strtod_l+0x490>
 8008de2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008de4:	4620      	mov	r0, r4
 8008de6:	f001 fd2f 	bl	800a848 <_Bfree>
 8008dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dec:	9318      	str	r3, [sp, #96]	; 0x60
 8008dee:	f1b8 0f00 	cmp.w	r8, #0
 8008df2:	f300 808c 	bgt.w	8008f0e <_strtod_l+0x87e>
 8008df6:	9b06      	ldr	r3, [sp, #24]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dd08      	ble.n	8008e0e <_strtod_l+0x77e>
 8008dfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dfe:	9905      	ldr	r1, [sp, #20]
 8008e00:	4620      	mov	r0, r4
 8008e02:	f001 fee3 	bl	800abcc <__pow5mult>
 8008e06:	9005      	str	r0, [sp, #20]
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	f43f ae89 	beq.w	8008b20 <_strtod_l+0x490>
 8008e0e:	2f00      	cmp	r7, #0
 8008e10:	dd08      	ble.n	8008e24 <_strtod_l+0x794>
 8008e12:	9905      	ldr	r1, [sp, #20]
 8008e14:	463a      	mov	r2, r7
 8008e16:	4620      	mov	r0, r4
 8008e18:	f001 ff32 	bl	800ac80 <__lshift>
 8008e1c:	9005      	str	r0, [sp, #20]
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	f43f ae7e 	beq.w	8008b20 <_strtod_l+0x490>
 8008e24:	f1b9 0f00 	cmp.w	r9, #0
 8008e28:	dd08      	ble.n	8008e3c <_strtod_l+0x7ac>
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	464a      	mov	r2, r9
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f001 ff26 	bl	800ac80 <__lshift>
 8008e34:	4606      	mov	r6, r0
 8008e36:	2800      	cmp	r0, #0
 8008e38:	f43f ae72 	beq.w	8008b20 <_strtod_l+0x490>
 8008e3c:	9a05      	ldr	r2, [sp, #20]
 8008e3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e40:	4620      	mov	r0, r4
 8008e42:	f001 ffa9 	bl	800ad98 <__mdiff>
 8008e46:	4605      	mov	r5, r0
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	f43f ae69 	beq.w	8008b20 <_strtod_l+0x490>
 8008e4e:	68c3      	ldr	r3, [r0, #12]
 8008e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e52:	2300      	movs	r3, #0
 8008e54:	60c3      	str	r3, [r0, #12]
 8008e56:	4631      	mov	r1, r6
 8008e58:	f001 ff82 	bl	800ad60 <__mcmp>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	da60      	bge.n	8008f22 <_strtod_l+0x892>
 8008e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e62:	ea53 030a 	orrs.w	r3, r3, sl
 8008e66:	f040 8082 	bne.w	8008f6e <_strtod_l+0x8de>
 8008e6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d17d      	bne.n	8008f6e <_strtod_l+0x8de>
 8008e72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e76:	0d1b      	lsrs	r3, r3, #20
 8008e78:	051b      	lsls	r3, r3, #20
 8008e7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008e7e:	d976      	bls.n	8008f6e <_strtod_l+0x8de>
 8008e80:	696b      	ldr	r3, [r5, #20]
 8008e82:	b913      	cbnz	r3, 8008e8a <_strtod_l+0x7fa>
 8008e84:	692b      	ldr	r3, [r5, #16]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	dd71      	ble.n	8008f6e <_strtod_l+0x8de>
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f001 fef6 	bl	800ac80 <__lshift>
 8008e94:	4631      	mov	r1, r6
 8008e96:	4605      	mov	r5, r0
 8008e98:	f001 ff62 	bl	800ad60 <__mcmp>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	dd66      	ble.n	8008f6e <_strtod_l+0x8de>
 8008ea0:	9904      	ldr	r1, [sp, #16]
 8008ea2:	4a53      	ldr	r2, [pc, #332]	; (8008ff0 <_strtod_l+0x960>)
 8008ea4:	465b      	mov	r3, fp
 8008ea6:	2900      	cmp	r1, #0
 8008ea8:	f000 8081 	beq.w	8008fae <_strtod_l+0x91e>
 8008eac:	ea02 010b 	and.w	r1, r2, fp
 8008eb0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008eb4:	dc7b      	bgt.n	8008fae <_strtod_l+0x91e>
 8008eb6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008eba:	f77f aea9 	ble.w	8008c10 <_strtod_l+0x580>
 8008ebe:	4b4d      	ldr	r3, [pc, #308]	; (8008ff4 <_strtod_l+0x964>)
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	4659      	mov	r1, fp
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f7f7 fb97 	bl	80005f8 <__aeabi_dmul>
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4303      	orrs	r3, r0
 8008ece:	bf08      	it	eq
 8008ed0:	2322      	moveq	r3, #34	; 0x22
 8008ed2:	4682      	mov	sl, r0
 8008ed4:	468b      	mov	fp, r1
 8008ed6:	bf08      	it	eq
 8008ed8:	6023      	streq	r3, [r4, #0]
 8008eda:	e62b      	b.n	8008b34 <_strtod_l+0x4a4>
 8008edc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee4:	ea03 0a0a 	and.w	sl, r3, sl
 8008ee8:	e6e3      	b.n	8008cb2 <_strtod_l+0x622>
 8008eea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008eee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008ef2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008ef6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008efa:	fa01 f308 	lsl.w	r3, r1, r8
 8008efe:	9308      	str	r3, [sp, #32]
 8008f00:	910d      	str	r1, [sp, #52]	; 0x34
 8008f02:	e746      	b.n	8008d92 <_strtod_l+0x702>
 8008f04:	2300      	movs	r3, #0
 8008f06:	9308      	str	r3, [sp, #32]
 8008f08:	2301      	movs	r3, #1
 8008f0a:	930d      	str	r3, [sp, #52]	; 0x34
 8008f0c:	e741      	b.n	8008d92 <_strtod_l+0x702>
 8008f0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f10:	4642      	mov	r2, r8
 8008f12:	4620      	mov	r0, r4
 8008f14:	f001 feb4 	bl	800ac80 <__lshift>
 8008f18:	9018      	str	r0, [sp, #96]	; 0x60
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	f47f af6b 	bne.w	8008df6 <_strtod_l+0x766>
 8008f20:	e5fe      	b.n	8008b20 <_strtod_l+0x490>
 8008f22:	465f      	mov	r7, fp
 8008f24:	d16e      	bne.n	8009004 <_strtod_l+0x974>
 8008f26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f2c:	b342      	cbz	r2, 8008f80 <_strtod_l+0x8f0>
 8008f2e:	4a32      	ldr	r2, [pc, #200]	; (8008ff8 <_strtod_l+0x968>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d128      	bne.n	8008f86 <_strtod_l+0x8f6>
 8008f34:	9b04      	ldr	r3, [sp, #16]
 8008f36:	4651      	mov	r1, sl
 8008f38:	b1eb      	cbz	r3, 8008f76 <_strtod_l+0x8e6>
 8008f3a:	4b2d      	ldr	r3, [pc, #180]	; (8008ff0 <_strtod_l+0x960>)
 8008f3c:	403b      	ands	r3, r7
 8008f3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f42:	f04f 32ff 	mov.w	r2, #4294967295
 8008f46:	d819      	bhi.n	8008f7c <_strtod_l+0x8ec>
 8008f48:	0d1b      	lsrs	r3, r3, #20
 8008f4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	4299      	cmp	r1, r3
 8008f54:	d117      	bne.n	8008f86 <_strtod_l+0x8f6>
 8008f56:	4b29      	ldr	r3, [pc, #164]	; (8008ffc <_strtod_l+0x96c>)
 8008f58:	429f      	cmp	r7, r3
 8008f5a:	d102      	bne.n	8008f62 <_strtod_l+0x8d2>
 8008f5c:	3101      	adds	r1, #1
 8008f5e:	f43f addf 	beq.w	8008b20 <_strtod_l+0x490>
 8008f62:	4b23      	ldr	r3, [pc, #140]	; (8008ff0 <_strtod_l+0x960>)
 8008f64:	403b      	ands	r3, r7
 8008f66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008f6a:	f04f 0a00 	mov.w	sl, #0
 8008f6e:	9b04      	ldr	r3, [sp, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1a4      	bne.n	8008ebe <_strtod_l+0x82e>
 8008f74:	e5de      	b.n	8008b34 <_strtod_l+0x4a4>
 8008f76:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7a:	e7ea      	b.n	8008f52 <_strtod_l+0x8c2>
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	e7e8      	b.n	8008f52 <_strtod_l+0x8c2>
 8008f80:	ea53 030a 	orrs.w	r3, r3, sl
 8008f84:	d08c      	beq.n	8008ea0 <_strtod_l+0x810>
 8008f86:	9b08      	ldr	r3, [sp, #32]
 8008f88:	b1db      	cbz	r3, 8008fc2 <_strtod_l+0x932>
 8008f8a:	423b      	tst	r3, r7
 8008f8c:	d0ef      	beq.n	8008f6e <_strtod_l+0x8de>
 8008f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f90:	9a04      	ldr	r2, [sp, #16]
 8008f92:	4650      	mov	r0, sl
 8008f94:	4659      	mov	r1, fp
 8008f96:	b1c3      	cbz	r3, 8008fca <_strtod_l+0x93a>
 8008f98:	f7ff fb5e 	bl	8008658 <sulp>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	ec51 0b18 	vmov	r0, r1, d8
 8008fa4:	f7f7 f972 	bl	800028c <__adddf3>
 8008fa8:	4682      	mov	sl, r0
 8008faa:	468b      	mov	fp, r1
 8008fac:	e7df      	b.n	8008f6e <_strtod_l+0x8de>
 8008fae:	4013      	ands	r3, r2
 8008fb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008fb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008fb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008fbc:	f04f 3aff 	mov.w	sl, #4294967295
 8008fc0:	e7d5      	b.n	8008f6e <_strtod_l+0x8de>
 8008fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fc4:	ea13 0f0a 	tst.w	r3, sl
 8008fc8:	e7e0      	b.n	8008f8c <_strtod_l+0x8fc>
 8008fca:	f7ff fb45 	bl	8008658 <sulp>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	ec51 0b18 	vmov	r0, r1, d8
 8008fd6:	f7f7 f957 	bl	8000288 <__aeabi_dsub>
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2300      	movs	r3, #0
 8008fde:	4682      	mov	sl, r0
 8008fe0:	468b      	mov	fp, r1
 8008fe2:	f7f7 fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d0c1      	beq.n	8008f6e <_strtod_l+0x8de>
 8008fea:	e611      	b.n	8008c10 <_strtod_l+0x580>
 8008fec:	fffffc02 	.word	0xfffffc02
 8008ff0:	7ff00000 	.word	0x7ff00000
 8008ff4:	39500000 	.word	0x39500000
 8008ff8:	000fffff 	.word	0x000fffff
 8008ffc:	7fefffff 	.word	0x7fefffff
 8009000:	0800c130 	.word	0x0800c130
 8009004:	4631      	mov	r1, r6
 8009006:	4628      	mov	r0, r5
 8009008:	f002 f828 	bl	800b05c <__ratio>
 800900c:	ec59 8b10 	vmov	r8, r9, d0
 8009010:	ee10 0a10 	vmov	r0, s0
 8009014:	2200      	movs	r2, #0
 8009016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800901a:	4649      	mov	r1, r9
 800901c:	f7f7 fd68 	bl	8000af0 <__aeabi_dcmple>
 8009020:	2800      	cmp	r0, #0
 8009022:	d07a      	beq.n	800911a <_strtod_l+0xa8a>
 8009024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009026:	2b00      	cmp	r3, #0
 8009028:	d04a      	beq.n	80090c0 <_strtod_l+0xa30>
 800902a:	4b95      	ldr	r3, [pc, #596]	; (8009280 <_strtod_l+0xbf0>)
 800902c:	2200      	movs	r2, #0
 800902e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009032:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009280 <_strtod_l+0xbf0>
 8009036:	f04f 0800 	mov.w	r8, #0
 800903a:	4b92      	ldr	r3, [pc, #584]	; (8009284 <_strtod_l+0xbf4>)
 800903c:	403b      	ands	r3, r7
 800903e:	930d      	str	r3, [sp, #52]	; 0x34
 8009040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009042:	4b91      	ldr	r3, [pc, #580]	; (8009288 <_strtod_l+0xbf8>)
 8009044:	429a      	cmp	r2, r3
 8009046:	f040 80b0 	bne.w	80091aa <_strtod_l+0xb1a>
 800904a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800904e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009052:	ec4b ab10 	vmov	d0, sl, fp
 8009056:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800905a:	f001 ff27 	bl	800aeac <__ulp>
 800905e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009062:	ec53 2b10 	vmov	r2, r3, d0
 8009066:	f7f7 fac7 	bl	80005f8 <__aeabi_dmul>
 800906a:	4652      	mov	r2, sl
 800906c:	465b      	mov	r3, fp
 800906e:	f7f7 f90d 	bl	800028c <__adddf3>
 8009072:	460b      	mov	r3, r1
 8009074:	4983      	ldr	r1, [pc, #524]	; (8009284 <_strtod_l+0xbf4>)
 8009076:	4a85      	ldr	r2, [pc, #532]	; (800928c <_strtod_l+0xbfc>)
 8009078:	4019      	ands	r1, r3
 800907a:	4291      	cmp	r1, r2
 800907c:	4682      	mov	sl, r0
 800907e:	d960      	bls.n	8009142 <_strtod_l+0xab2>
 8009080:	ee18 3a90 	vmov	r3, s17
 8009084:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009088:	4293      	cmp	r3, r2
 800908a:	d104      	bne.n	8009096 <_strtod_l+0xa06>
 800908c:	ee18 3a10 	vmov	r3, s16
 8009090:	3301      	adds	r3, #1
 8009092:	f43f ad45 	beq.w	8008b20 <_strtod_l+0x490>
 8009096:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009298 <_strtod_l+0xc08>
 800909a:	f04f 3aff 	mov.w	sl, #4294967295
 800909e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090a0:	4620      	mov	r0, r4
 80090a2:	f001 fbd1 	bl	800a848 <_Bfree>
 80090a6:	9905      	ldr	r1, [sp, #20]
 80090a8:	4620      	mov	r0, r4
 80090aa:	f001 fbcd 	bl	800a848 <_Bfree>
 80090ae:	4631      	mov	r1, r6
 80090b0:	4620      	mov	r0, r4
 80090b2:	f001 fbc9 	bl	800a848 <_Bfree>
 80090b6:	4629      	mov	r1, r5
 80090b8:	4620      	mov	r0, r4
 80090ba:	f001 fbc5 	bl	800a848 <_Bfree>
 80090be:	e61a      	b.n	8008cf6 <_strtod_l+0x666>
 80090c0:	f1ba 0f00 	cmp.w	sl, #0
 80090c4:	d11b      	bne.n	80090fe <_strtod_l+0xa6e>
 80090c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090ca:	b9f3      	cbnz	r3, 800910a <_strtod_l+0xa7a>
 80090cc:	4b6c      	ldr	r3, [pc, #432]	; (8009280 <_strtod_l+0xbf0>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	4640      	mov	r0, r8
 80090d2:	4649      	mov	r1, r9
 80090d4:	f7f7 fd02 	bl	8000adc <__aeabi_dcmplt>
 80090d8:	b9d0      	cbnz	r0, 8009110 <_strtod_l+0xa80>
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	4b6c      	ldr	r3, [pc, #432]	; (8009290 <_strtod_l+0xc00>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	f7f7 fa89 	bl	80005f8 <__aeabi_dmul>
 80090e6:	4680      	mov	r8, r0
 80090e8:	4689      	mov	r9, r1
 80090ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80090ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80090f2:	9315      	str	r3, [sp, #84]	; 0x54
 80090f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80090f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80090fc:	e79d      	b.n	800903a <_strtod_l+0x9aa>
 80090fe:	f1ba 0f01 	cmp.w	sl, #1
 8009102:	d102      	bne.n	800910a <_strtod_l+0xa7a>
 8009104:	2f00      	cmp	r7, #0
 8009106:	f43f ad83 	beq.w	8008c10 <_strtod_l+0x580>
 800910a:	4b62      	ldr	r3, [pc, #392]	; (8009294 <_strtod_l+0xc04>)
 800910c:	2200      	movs	r2, #0
 800910e:	e78e      	b.n	800902e <_strtod_l+0x99e>
 8009110:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009290 <_strtod_l+0xc00>
 8009114:	f04f 0800 	mov.w	r8, #0
 8009118:	e7e7      	b.n	80090ea <_strtod_l+0xa5a>
 800911a:	4b5d      	ldr	r3, [pc, #372]	; (8009290 <_strtod_l+0xc00>)
 800911c:	4640      	mov	r0, r8
 800911e:	4649      	mov	r1, r9
 8009120:	2200      	movs	r2, #0
 8009122:	f7f7 fa69 	bl	80005f8 <__aeabi_dmul>
 8009126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009128:	4680      	mov	r8, r0
 800912a:	4689      	mov	r9, r1
 800912c:	b933      	cbnz	r3, 800913c <_strtod_l+0xaac>
 800912e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009132:	900e      	str	r0, [sp, #56]	; 0x38
 8009134:	930f      	str	r3, [sp, #60]	; 0x3c
 8009136:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800913a:	e7dd      	b.n	80090f8 <_strtod_l+0xa68>
 800913c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009140:	e7f9      	b.n	8009136 <_strtod_l+0xaa6>
 8009142:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1a8      	bne.n	800909e <_strtod_l+0xa0e>
 800914c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009152:	0d1b      	lsrs	r3, r3, #20
 8009154:	051b      	lsls	r3, r3, #20
 8009156:	429a      	cmp	r2, r3
 8009158:	d1a1      	bne.n	800909e <_strtod_l+0xa0e>
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f7f7 fdab 	bl	8000cb8 <__aeabi_d2lz>
 8009162:	f7f7 fa1b 	bl	800059c <__aeabi_l2d>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	f7f7 f88b 	bl	8000288 <__aeabi_dsub>
 8009172:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009178:	ea43 030a 	orr.w	r3, r3, sl
 800917c:	4313      	orrs	r3, r2
 800917e:	4680      	mov	r8, r0
 8009180:	4689      	mov	r9, r1
 8009182:	d055      	beq.n	8009230 <_strtod_l+0xba0>
 8009184:	a336      	add	r3, pc, #216	; (adr r3, 8009260 <_strtod_l+0xbd0>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f7f7 fca7 	bl	8000adc <__aeabi_dcmplt>
 800918e:	2800      	cmp	r0, #0
 8009190:	f47f acd0 	bne.w	8008b34 <_strtod_l+0x4a4>
 8009194:	a334      	add	r3, pc, #208	; (adr r3, 8009268 <_strtod_l+0xbd8>)
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	4640      	mov	r0, r8
 800919c:	4649      	mov	r1, r9
 800919e:	f7f7 fcbb 	bl	8000b18 <__aeabi_dcmpgt>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	f43f af7b 	beq.w	800909e <_strtod_l+0xa0e>
 80091a8:	e4c4      	b.n	8008b34 <_strtod_l+0x4a4>
 80091aa:	9b04      	ldr	r3, [sp, #16]
 80091ac:	b333      	cbz	r3, 80091fc <_strtod_l+0xb6c>
 80091ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80091b4:	d822      	bhi.n	80091fc <_strtod_l+0xb6c>
 80091b6:	a32e      	add	r3, pc, #184	; (adr r3, 8009270 <_strtod_l+0xbe0>)
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	4640      	mov	r0, r8
 80091be:	4649      	mov	r1, r9
 80091c0:	f7f7 fc96 	bl	8000af0 <__aeabi_dcmple>
 80091c4:	b1a0      	cbz	r0, 80091f0 <_strtod_l+0xb60>
 80091c6:	4649      	mov	r1, r9
 80091c8:	4640      	mov	r0, r8
 80091ca:	f7f7 fced 	bl	8000ba8 <__aeabi_d2uiz>
 80091ce:	2801      	cmp	r0, #1
 80091d0:	bf38      	it	cc
 80091d2:	2001      	movcc	r0, #1
 80091d4:	f7f7 f996 	bl	8000504 <__aeabi_ui2d>
 80091d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091da:	4680      	mov	r8, r0
 80091dc:	4689      	mov	r9, r1
 80091de:	bb23      	cbnz	r3, 800922a <_strtod_l+0xb9a>
 80091e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091e4:	9010      	str	r0, [sp, #64]	; 0x40
 80091e6:	9311      	str	r3, [sp, #68]	; 0x44
 80091e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80091f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80091f8:	1a9b      	subs	r3, r3, r2
 80091fa:	9309      	str	r3, [sp, #36]	; 0x24
 80091fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009200:	eeb0 0a48 	vmov.f32	s0, s16
 8009204:	eef0 0a68 	vmov.f32	s1, s17
 8009208:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800920c:	f001 fe4e 	bl	800aeac <__ulp>
 8009210:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009214:	ec53 2b10 	vmov	r2, r3, d0
 8009218:	f7f7 f9ee 	bl	80005f8 <__aeabi_dmul>
 800921c:	ec53 2b18 	vmov	r2, r3, d8
 8009220:	f7f7 f834 	bl	800028c <__adddf3>
 8009224:	4682      	mov	sl, r0
 8009226:	468b      	mov	fp, r1
 8009228:	e78d      	b.n	8009146 <_strtod_l+0xab6>
 800922a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800922e:	e7db      	b.n	80091e8 <_strtod_l+0xb58>
 8009230:	a311      	add	r3, pc, #68	; (adr r3, 8009278 <_strtod_l+0xbe8>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f7f7 fc51 	bl	8000adc <__aeabi_dcmplt>
 800923a:	e7b2      	b.n	80091a2 <_strtod_l+0xb12>
 800923c:	2300      	movs	r3, #0
 800923e:	930a      	str	r3, [sp, #40]	; 0x28
 8009240:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009242:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	f7ff ba6b 	b.w	8008720 <_strtod_l+0x90>
 800924a:	2a65      	cmp	r2, #101	; 0x65
 800924c:	f43f ab5f 	beq.w	800890e <_strtod_l+0x27e>
 8009250:	2a45      	cmp	r2, #69	; 0x45
 8009252:	f43f ab5c 	beq.w	800890e <_strtod_l+0x27e>
 8009256:	2301      	movs	r3, #1
 8009258:	f7ff bb94 	b.w	8008984 <_strtod_l+0x2f4>
 800925c:	f3af 8000 	nop.w
 8009260:	94a03595 	.word	0x94a03595
 8009264:	3fdfffff 	.word	0x3fdfffff
 8009268:	35afe535 	.word	0x35afe535
 800926c:	3fe00000 	.word	0x3fe00000
 8009270:	ffc00000 	.word	0xffc00000
 8009274:	41dfffff 	.word	0x41dfffff
 8009278:	94a03595 	.word	0x94a03595
 800927c:	3fcfffff 	.word	0x3fcfffff
 8009280:	3ff00000 	.word	0x3ff00000
 8009284:	7ff00000 	.word	0x7ff00000
 8009288:	7fe00000 	.word	0x7fe00000
 800928c:	7c9fffff 	.word	0x7c9fffff
 8009290:	3fe00000 	.word	0x3fe00000
 8009294:	bff00000 	.word	0xbff00000
 8009298:	7fefffff 	.word	0x7fefffff

0800929c <_strtod_r>:
 800929c:	4b01      	ldr	r3, [pc, #4]	; (80092a4 <_strtod_r+0x8>)
 800929e:	f7ff b9f7 	b.w	8008690 <_strtod_l>
 80092a2:	bf00      	nop
 80092a4:	20000074 	.word	0x20000074

080092a8 <_strtol_l.constprop.0>:
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ae:	d001      	beq.n	80092b4 <_strtol_l.constprop.0+0xc>
 80092b0:	2b24      	cmp	r3, #36	; 0x24
 80092b2:	d906      	bls.n	80092c2 <_strtol_l.constprop.0+0x1a>
 80092b4:	f7fe f9f8 	bl	80076a8 <__errno>
 80092b8:	2316      	movs	r3, #22
 80092ba:	6003      	str	r3, [r0, #0]
 80092bc:	2000      	movs	r0, #0
 80092be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80093a8 <_strtol_l.constprop.0+0x100>
 80092c6:	460d      	mov	r5, r1
 80092c8:	462e      	mov	r6, r5
 80092ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092ce:	f814 700c 	ldrb.w	r7, [r4, ip]
 80092d2:	f017 0708 	ands.w	r7, r7, #8
 80092d6:	d1f7      	bne.n	80092c8 <_strtol_l.constprop.0+0x20>
 80092d8:	2c2d      	cmp	r4, #45	; 0x2d
 80092da:	d132      	bne.n	8009342 <_strtol_l.constprop.0+0x9a>
 80092dc:	782c      	ldrb	r4, [r5, #0]
 80092de:	2701      	movs	r7, #1
 80092e0:	1cb5      	adds	r5, r6, #2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d05b      	beq.n	800939e <_strtol_l.constprop.0+0xf6>
 80092e6:	2b10      	cmp	r3, #16
 80092e8:	d109      	bne.n	80092fe <_strtol_l.constprop.0+0x56>
 80092ea:	2c30      	cmp	r4, #48	; 0x30
 80092ec:	d107      	bne.n	80092fe <_strtol_l.constprop.0+0x56>
 80092ee:	782c      	ldrb	r4, [r5, #0]
 80092f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80092f4:	2c58      	cmp	r4, #88	; 0x58
 80092f6:	d14d      	bne.n	8009394 <_strtol_l.constprop.0+0xec>
 80092f8:	786c      	ldrb	r4, [r5, #1]
 80092fa:	2310      	movs	r3, #16
 80092fc:	3502      	adds	r5, #2
 80092fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009302:	f108 38ff 	add.w	r8, r8, #4294967295
 8009306:	f04f 0c00 	mov.w	ip, #0
 800930a:	fbb8 f9f3 	udiv	r9, r8, r3
 800930e:	4666      	mov	r6, ip
 8009310:	fb03 8a19 	mls	sl, r3, r9, r8
 8009314:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009318:	f1be 0f09 	cmp.w	lr, #9
 800931c:	d816      	bhi.n	800934c <_strtol_l.constprop.0+0xa4>
 800931e:	4674      	mov	r4, lr
 8009320:	42a3      	cmp	r3, r4
 8009322:	dd24      	ble.n	800936e <_strtol_l.constprop.0+0xc6>
 8009324:	f1bc 0f00 	cmp.w	ip, #0
 8009328:	db1e      	blt.n	8009368 <_strtol_l.constprop.0+0xc0>
 800932a:	45b1      	cmp	r9, r6
 800932c:	d31c      	bcc.n	8009368 <_strtol_l.constprop.0+0xc0>
 800932e:	d101      	bne.n	8009334 <_strtol_l.constprop.0+0x8c>
 8009330:	45a2      	cmp	sl, r4
 8009332:	db19      	blt.n	8009368 <_strtol_l.constprop.0+0xc0>
 8009334:	fb06 4603 	mla	r6, r6, r3, r4
 8009338:	f04f 0c01 	mov.w	ip, #1
 800933c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009340:	e7e8      	b.n	8009314 <_strtol_l.constprop.0+0x6c>
 8009342:	2c2b      	cmp	r4, #43	; 0x2b
 8009344:	bf04      	itt	eq
 8009346:	782c      	ldrbeq	r4, [r5, #0]
 8009348:	1cb5      	addeq	r5, r6, #2
 800934a:	e7ca      	b.n	80092e2 <_strtol_l.constprop.0+0x3a>
 800934c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009350:	f1be 0f19 	cmp.w	lr, #25
 8009354:	d801      	bhi.n	800935a <_strtol_l.constprop.0+0xb2>
 8009356:	3c37      	subs	r4, #55	; 0x37
 8009358:	e7e2      	b.n	8009320 <_strtol_l.constprop.0+0x78>
 800935a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800935e:	f1be 0f19 	cmp.w	lr, #25
 8009362:	d804      	bhi.n	800936e <_strtol_l.constprop.0+0xc6>
 8009364:	3c57      	subs	r4, #87	; 0x57
 8009366:	e7db      	b.n	8009320 <_strtol_l.constprop.0+0x78>
 8009368:	f04f 3cff 	mov.w	ip, #4294967295
 800936c:	e7e6      	b.n	800933c <_strtol_l.constprop.0+0x94>
 800936e:	f1bc 0f00 	cmp.w	ip, #0
 8009372:	da05      	bge.n	8009380 <_strtol_l.constprop.0+0xd8>
 8009374:	2322      	movs	r3, #34	; 0x22
 8009376:	6003      	str	r3, [r0, #0]
 8009378:	4646      	mov	r6, r8
 800937a:	b942      	cbnz	r2, 800938e <_strtol_l.constprop.0+0xe6>
 800937c:	4630      	mov	r0, r6
 800937e:	e79e      	b.n	80092be <_strtol_l.constprop.0+0x16>
 8009380:	b107      	cbz	r7, 8009384 <_strtol_l.constprop.0+0xdc>
 8009382:	4276      	negs	r6, r6
 8009384:	2a00      	cmp	r2, #0
 8009386:	d0f9      	beq.n	800937c <_strtol_l.constprop.0+0xd4>
 8009388:	f1bc 0f00 	cmp.w	ip, #0
 800938c:	d000      	beq.n	8009390 <_strtol_l.constprop.0+0xe8>
 800938e:	1e69      	subs	r1, r5, #1
 8009390:	6011      	str	r1, [r2, #0]
 8009392:	e7f3      	b.n	800937c <_strtol_l.constprop.0+0xd4>
 8009394:	2430      	movs	r4, #48	; 0x30
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1b1      	bne.n	80092fe <_strtol_l.constprop.0+0x56>
 800939a:	2308      	movs	r3, #8
 800939c:	e7af      	b.n	80092fe <_strtol_l.constprop.0+0x56>
 800939e:	2c30      	cmp	r4, #48	; 0x30
 80093a0:	d0a5      	beq.n	80092ee <_strtol_l.constprop.0+0x46>
 80093a2:	230a      	movs	r3, #10
 80093a4:	e7ab      	b.n	80092fe <_strtol_l.constprop.0+0x56>
 80093a6:	bf00      	nop
 80093a8:	0800c159 	.word	0x0800c159

080093ac <_strtol_r>:
 80093ac:	f7ff bf7c 	b.w	80092a8 <_strtol_l.constprop.0>

080093b0 <quorem>:
 80093b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	6903      	ldr	r3, [r0, #16]
 80093b6:	690c      	ldr	r4, [r1, #16]
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	4607      	mov	r7, r0
 80093bc:	f2c0 8081 	blt.w	80094c2 <quorem+0x112>
 80093c0:	3c01      	subs	r4, #1
 80093c2:	f101 0814 	add.w	r8, r1, #20
 80093c6:	f100 0514 	add.w	r5, r0, #20
 80093ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ce:	9301      	str	r3, [sp, #4]
 80093d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093d8:	3301      	adds	r3, #1
 80093da:	429a      	cmp	r2, r3
 80093dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80093e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80093e8:	d331      	bcc.n	800944e <quorem+0x9e>
 80093ea:	f04f 0e00 	mov.w	lr, #0
 80093ee:	4640      	mov	r0, r8
 80093f0:	46ac      	mov	ip, r5
 80093f2:	46f2      	mov	sl, lr
 80093f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80093f8:	b293      	uxth	r3, r2
 80093fa:	fb06 e303 	mla	r3, r6, r3, lr
 80093fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009402:	b29b      	uxth	r3, r3
 8009404:	ebaa 0303 	sub.w	r3, sl, r3
 8009408:	f8dc a000 	ldr.w	sl, [ip]
 800940c:	0c12      	lsrs	r2, r2, #16
 800940e:	fa13 f38a 	uxtah	r3, r3, sl
 8009412:	fb06 e202 	mla	r2, r6, r2, lr
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	9b00      	ldr	r3, [sp, #0]
 800941a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800941e:	b292      	uxth	r2, r2
 8009420:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009428:	f8bd 3000 	ldrh.w	r3, [sp]
 800942c:	4581      	cmp	r9, r0
 800942e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009432:	f84c 3b04 	str.w	r3, [ip], #4
 8009436:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800943a:	d2db      	bcs.n	80093f4 <quorem+0x44>
 800943c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009440:	b92b      	cbnz	r3, 800944e <quorem+0x9e>
 8009442:	9b01      	ldr	r3, [sp, #4]
 8009444:	3b04      	subs	r3, #4
 8009446:	429d      	cmp	r5, r3
 8009448:	461a      	mov	r2, r3
 800944a:	d32e      	bcc.n	80094aa <quorem+0xfa>
 800944c:	613c      	str	r4, [r7, #16]
 800944e:	4638      	mov	r0, r7
 8009450:	f001 fc86 	bl	800ad60 <__mcmp>
 8009454:	2800      	cmp	r0, #0
 8009456:	db24      	blt.n	80094a2 <quorem+0xf2>
 8009458:	3601      	adds	r6, #1
 800945a:	4628      	mov	r0, r5
 800945c:	f04f 0c00 	mov.w	ip, #0
 8009460:	f858 2b04 	ldr.w	r2, [r8], #4
 8009464:	f8d0 e000 	ldr.w	lr, [r0]
 8009468:	b293      	uxth	r3, r2
 800946a:	ebac 0303 	sub.w	r3, ip, r3
 800946e:	0c12      	lsrs	r2, r2, #16
 8009470:	fa13 f38e 	uxtah	r3, r3, lr
 8009474:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800947c:	b29b      	uxth	r3, r3
 800947e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009482:	45c1      	cmp	r9, r8
 8009484:	f840 3b04 	str.w	r3, [r0], #4
 8009488:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800948c:	d2e8      	bcs.n	8009460 <quorem+0xb0>
 800948e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009496:	b922      	cbnz	r2, 80094a2 <quorem+0xf2>
 8009498:	3b04      	subs	r3, #4
 800949a:	429d      	cmp	r5, r3
 800949c:	461a      	mov	r2, r3
 800949e:	d30a      	bcc.n	80094b6 <quorem+0x106>
 80094a0:	613c      	str	r4, [r7, #16]
 80094a2:	4630      	mov	r0, r6
 80094a4:	b003      	add	sp, #12
 80094a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094aa:	6812      	ldr	r2, [r2, #0]
 80094ac:	3b04      	subs	r3, #4
 80094ae:	2a00      	cmp	r2, #0
 80094b0:	d1cc      	bne.n	800944c <quorem+0x9c>
 80094b2:	3c01      	subs	r4, #1
 80094b4:	e7c7      	b.n	8009446 <quorem+0x96>
 80094b6:	6812      	ldr	r2, [r2, #0]
 80094b8:	3b04      	subs	r3, #4
 80094ba:	2a00      	cmp	r2, #0
 80094bc:	d1f0      	bne.n	80094a0 <quorem+0xf0>
 80094be:	3c01      	subs	r4, #1
 80094c0:	e7eb      	b.n	800949a <quorem+0xea>
 80094c2:	2000      	movs	r0, #0
 80094c4:	e7ee      	b.n	80094a4 <quorem+0xf4>
	...

080094c8 <_dtoa_r>:
 80094c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	ed2d 8b04 	vpush	{d8-d9}
 80094d0:	ec57 6b10 	vmov	r6, r7, d0
 80094d4:	b093      	sub	sp, #76	; 0x4c
 80094d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80094dc:	9106      	str	r1, [sp, #24]
 80094de:	ee10 aa10 	vmov	sl, s0
 80094e2:	4604      	mov	r4, r0
 80094e4:	9209      	str	r2, [sp, #36]	; 0x24
 80094e6:	930c      	str	r3, [sp, #48]	; 0x30
 80094e8:	46bb      	mov	fp, r7
 80094ea:	b975      	cbnz	r5, 800950a <_dtoa_r+0x42>
 80094ec:	2010      	movs	r0, #16
 80094ee:	f7fe f905 	bl	80076fc <malloc>
 80094f2:	4602      	mov	r2, r0
 80094f4:	6260      	str	r0, [r4, #36]	; 0x24
 80094f6:	b920      	cbnz	r0, 8009502 <_dtoa_r+0x3a>
 80094f8:	4ba7      	ldr	r3, [pc, #668]	; (8009798 <_dtoa_r+0x2d0>)
 80094fa:	21ea      	movs	r1, #234	; 0xea
 80094fc:	48a7      	ldr	r0, [pc, #668]	; (800979c <_dtoa_r+0x2d4>)
 80094fe:	f001 ffc1 	bl	800b484 <__assert_func>
 8009502:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009506:	6005      	str	r5, [r0, #0]
 8009508:	60c5      	str	r5, [r0, #12]
 800950a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800950c:	6819      	ldr	r1, [r3, #0]
 800950e:	b151      	cbz	r1, 8009526 <_dtoa_r+0x5e>
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	604a      	str	r2, [r1, #4]
 8009514:	2301      	movs	r3, #1
 8009516:	4093      	lsls	r3, r2
 8009518:	608b      	str	r3, [r1, #8]
 800951a:	4620      	mov	r0, r4
 800951c:	f001 f994 	bl	800a848 <_Bfree>
 8009520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	1e3b      	subs	r3, r7, #0
 8009528:	bfaa      	itet	ge
 800952a:	2300      	movge	r3, #0
 800952c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009530:	f8c8 3000 	strge.w	r3, [r8]
 8009534:	4b9a      	ldr	r3, [pc, #616]	; (80097a0 <_dtoa_r+0x2d8>)
 8009536:	bfbc      	itt	lt
 8009538:	2201      	movlt	r2, #1
 800953a:	f8c8 2000 	strlt.w	r2, [r8]
 800953e:	ea33 030b 	bics.w	r3, r3, fp
 8009542:	d11b      	bne.n	800957c <_dtoa_r+0xb4>
 8009544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009546:	f242 730f 	movw	r3, #9999	; 0x270f
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009550:	4333      	orrs	r3, r6
 8009552:	f000 8592 	beq.w	800a07a <_dtoa_r+0xbb2>
 8009556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009558:	b963      	cbnz	r3, 8009574 <_dtoa_r+0xac>
 800955a:	4b92      	ldr	r3, [pc, #584]	; (80097a4 <_dtoa_r+0x2dc>)
 800955c:	e022      	b.n	80095a4 <_dtoa_r+0xdc>
 800955e:	4b92      	ldr	r3, [pc, #584]	; (80097a8 <_dtoa_r+0x2e0>)
 8009560:	9301      	str	r3, [sp, #4]
 8009562:	3308      	adds	r3, #8
 8009564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	9801      	ldr	r0, [sp, #4]
 800956a:	b013      	add	sp, #76	; 0x4c
 800956c:	ecbd 8b04 	vpop	{d8-d9}
 8009570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009574:	4b8b      	ldr	r3, [pc, #556]	; (80097a4 <_dtoa_r+0x2dc>)
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	3303      	adds	r3, #3
 800957a:	e7f3      	b.n	8009564 <_dtoa_r+0x9c>
 800957c:	2200      	movs	r2, #0
 800957e:	2300      	movs	r3, #0
 8009580:	4650      	mov	r0, sl
 8009582:	4659      	mov	r1, fp
 8009584:	f7f7 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009588:	ec4b ab19 	vmov	d9, sl, fp
 800958c:	4680      	mov	r8, r0
 800958e:	b158      	cbz	r0, 80095a8 <_dtoa_r+0xe0>
 8009590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009592:	2301      	movs	r3, #1
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 856b 	beq.w	800a074 <_dtoa_r+0xbac>
 800959e:	4883      	ldr	r0, [pc, #524]	; (80097ac <_dtoa_r+0x2e4>)
 80095a0:	6018      	str	r0, [r3, #0]
 80095a2:	1e43      	subs	r3, r0, #1
 80095a4:	9301      	str	r3, [sp, #4]
 80095a6:	e7df      	b.n	8009568 <_dtoa_r+0xa0>
 80095a8:	ec4b ab10 	vmov	d0, sl, fp
 80095ac:	aa10      	add	r2, sp, #64	; 0x40
 80095ae:	a911      	add	r1, sp, #68	; 0x44
 80095b0:	4620      	mov	r0, r4
 80095b2:	f001 fcf7 	bl	800afa4 <__d2b>
 80095b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80095ba:	ee08 0a10 	vmov	s16, r0
 80095be:	2d00      	cmp	r5, #0
 80095c0:	f000 8084 	beq.w	80096cc <_dtoa_r+0x204>
 80095c4:	ee19 3a90 	vmov	r3, s19
 80095c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80095d0:	4656      	mov	r6, sl
 80095d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80095d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80095da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80095de:	4b74      	ldr	r3, [pc, #464]	; (80097b0 <_dtoa_r+0x2e8>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	4630      	mov	r0, r6
 80095e4:	4639      	mov	r1, r7
 80095e6:	f7f6 fe4f 	bl	8000288 <__aeabi_dsub>
 80095ea:	a365      	add	r3, pc, #404	; (adr r3, 8009780 <_dtoa_r+0x2b8>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	f7f7 f802 	bl	80005f8 <__aeabi_dmul>
 80095f4:	a364      	add	r3, pc, #400	; (adr r3, 8009788 <_dtoa_r+0x2c0>)
 80095f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fa:	f7f6 fe47 	bl	800028c <__adddf3>
 80095fe:	4606      	mov	r6, r0
 8009600:	4628      	mov	r0, r5
 8009602:	460f      	mov	r7, r1
 8009604:	f7f6 ff8e 	bl	8000524 <__aeabi_i2d>
 8009608:	a361      	add	r3, pc, #388	; (adr r3, 8009790 <_dtoa_r+0x2c8>)
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	f7f6 fff3 	bl	80005f8 <__aeabi_dmul>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	4630      	mov	r0, r6
 8009618:	4639      	mov	r1, r7
 800961a:	f7f6 fe37 	bl	800028c <__adddf3>
 800961e:	4606      	mov	r6, r0
 8009620:	460f      	mov	r7, r1
 8009622:	f7f7 fa99 	bl	8000b58 <__aeabi_d2iz>
 8009626:	2200      	movs	r2, #0
 8009628:	9000      	str	r0, [sp, #0]
 800962a:	2300      	movs	r3, #0
 800962c:	4630      	mov	r0, r6
 800962e:	4639      	mov	r1, r7
 8009630:	f7f7 fa54 	bl	8000adc <__aeabi_dcmplt>
 8009634:	b150      	cbz	r0, 800964c <_dtoa_r+0x184>
 8009636:	9800      	ldr	r0, [sp, #0]
 8009638:	f7f6 ff74 	bl	8000524 <__aeabi_i2d>
 800963c:	4632      	mov	r2, r6
 800963e:	463b      	mov	r3, r7
 8009640:	f7f7 fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 8009644:	b910      	cbnz	r0, 800964c <_dtoa_r+0x184>
 8009646:	9b00      	ldr	r3, [sp, #0]
 8009648:	3b01      	subs	r3, #1
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	9b00      	ldr	r3, [sp, #0]
 800964e:	2b16      	cmp	r3, #22
 8009650:	d85a      	bhi.n	8009708 <_dtoa_r+0x240>
 8009652:	9a00      	ldr	r2, [sp, #0]
 8009654:	4b57      	ldr	r3, [pc, #348]	; (80097b4 <_dtoa_r+0x2ec>)
 8009656:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	ec51 0b19 	vmov	r0, r1, d9
 8009662:	f7f7 fa3b 	bl	8000adc <__aeabi_dcmplt>
 8009666:	2800      	cmp	r0, #0
 8009668:	d050      	beq.n	800970c <_dtoa_r+0x244>
 800966a:	9b00      	ldr	r3, [sp, #0]
 800966c:	3b01      	subs	r3, #1
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	2300      	movs	r3, #0
 8009672:	930b      	str	r3, [sp, #44]	; 0x2c
 8009674:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009676:	1b5d      	subs	r5, r3, r5
 8009678:	1e6b      	subs	r3, r5, #1
 800967a:	9305      	str	r3, [sp, #20]
 800967c:	bf45      	ittet	mi
 800967e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009682:	9304      	strmi	r3, [sp, #16]
 8009684:	2300      	movpl	r3, #0
 8009686:	2300      	movmi	r3, #0
 8009688:	bf4c      	ite	mi
 800968a:	9305      	strmi	r3, [sp, #20]
 800968c:	9304      	strpl	r3, [sp, #16]
 800968e:	9b00      	ldr	r3, [sp, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	db3d      	blt.n	8009710 <_dtoa_r+0x248>
 8009694:	9b05      	ldr	r3, [sp, #20]
 8009696:	9a00      	ldr	r2, [sp, #0]
 8009698:	920a      	str	r2, [sp, #40]	; 0x28
 800969a:	4413      	add	r3, r2
 800969c:	9305      	str	r3, [sp, #20]
 800969e:	2300      	movs	r3, #0
 80096a0:	9307      	str	r3, [sp, #28]
 80096a2:	9b06      	ldr	r3, [sp, #24]
 80096a4:	2b09      	cmp	r3, #9
 80096a6:	f200 8089 	bhi.w	80097bc <_dtoa_r+0x2f4>
 80096aa:	2b05      	cmp	r3, #5
 80096ac:	bfc4      	itt	gt
 80096ae:	3b04      	subgt	r3, #4
 80096b0:	9306      	strgt	r3, [sp, #24]
 80096b2:	9b06      	ldr	r3, [sp, #24]
 80096b4:	f1a3 0302 	sub.w	r3, r3, #2
 80096b8:	bfcc      	ite	gt
 80096ba:	2500      	movgt	r5, #0
 80096bc:	2501      	movle	r5, #1
 80096be:	2b03      	cmp	r3, #3
 80096c0:	f200 8087 	bhi.w	80097d2 <_dtoa_r+0x30a>
 80096c4:	e8df f003 	tbb	[pc, r3]
 80096c8:	59383a2d 	.word	0x59383a2d
 80096cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80096d0:	441d      	add	r5, r3
 80096d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80096d6:	2b20      	cmp	r3, #32
 80096d8:	bfc1      	itttt	gt
 80096da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80096de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80096e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80096e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80096ea:	bfda      	itte	le
 80096ec:	f1c3 0320 	rsble	r3, r3, #32
 80096f0:	fa06 f003 	lslle.w	r0, r6, r3
 80096f4:	4318      	orrgt	r0, r3
 80096f6:	f7f6 ff05 	bl	8000504 <__aeabi_ui2d>
 80096fa:	2301      	movs	r3, #1
 80096fc:	4606      	mov	r6, r0
 80096fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009702:	3d01      	subs	r5, #1
 8009704:	930e      	str	r3, [sp, #56]	; 0x38
 8009706:	e76a      	b.n	80095de <_dtoa_r+0x116>
 8009708:	2301      	movs	r3, #1
 800970a:	e7b2      	b.n	8009672 <_dtoa_r+0x1aa>
 800970c:	900b      	str	r0, [sp, #44]	; 0x2c
 800970e:	e7b1      	b.n	8009674 <_dtoa_r+0x1ac>
 8009710:	9b04      	ldr	r3, [sp, #16]
 8009712:	9a00      	ldr	r2, [sp, #0]
 8009714:	1a9b      	subs	r3, r3, r2
 8009716:	9304      	str	r3, [sp, #16]
 8009718:	4253      	negs	r3, r2
 800971a:	9307      	str	r3, [sp, #28]
 800971c:	2300      	movs	r3, #0
 800971e:	930a      	str	r3, [sp, #40]	; 0x28
 8009720:	e7bf      	b.n	80096a2 <_dtoa_r+0x1da>
 8009722:	2300      	movs	r3, #0
 8009724:	9308      	str	r3, [sp, #32]
 8009726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009728:	2b00      	cmp	r3, #0
 800972a:	dc55      	bgt.n	80097d8 <_dtoa_r+0x310>
 800972c:	2301      	movs	r3, #1
 800972e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009732:	461a      	mov	r2, r3
 8009734:	9209      	str	r2, [sp, #36]	; 0x24
 8009736:	e00c      	b.n	8009752 <_dtoa_r+0x28a>
 8009738:	2301      	movs	r3, #1
 800973a:	e7f3      	b.n	8009724 <_dtoa_r+0x25c>
 800973c:	2300      	movs	r3, #0
 800973e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009740:	9308      	str	r3, [sp, #32]
 8009742:	9b00      	ldr	r3, [sp, #0]
 8009744:	4413      	add	r3, r2
 8009746:	9302      	str	r3, [sp, #8]
 8009748:	3301      	adds	r3, #1
 800974a:	2b01      	cmp	r3, #1
 800974c:	9303      	str	r3, [sp, #12]
 800974e:	bfb8      	it	lt
 8009750:	2301      	movlt	r3, #1
 8009752:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009754:	2200      	movs	r2, #0
 8009756:	6042      	str	r2, [r0, #4]
 8009758:	2204      	movs	r2, #4
 800975a:	f102 0614 	add.w	r6, r2, #20
 800975e:	429e      	cmp	r6, r3
 8009760:	6841      	ldr	r1, [r0, #4]
 8009762:	d93d      	bls.n	80097e0 <_dtoa_r+0x318>
 8009764:	4620      	mov	r0, r4
 8009766:	f001 f82f 	bl	800a7c8 <_Balloc>
 800976a:	9001      	str	r0, [sp, #4]
 800976c:	2800      	cmp	r0, #0
 800976e:	d13b      	bne.n	80097e8 <_dtoa_r+0x320>
 8009770:	4b11      	ldr	r3, [pc, #68]	; (80097b8 <_dtoa_r+0x2f0>)
 8009772:	4602      	mov	r2, r0
 8009774:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009778:	e6c0      	b.n	80094fc <_dtoa_r+0x34>
 800977a:	2301      	movs	r3, #1
 800977c:	e7df      	b.n	800973e <_dtoa_r+0x276>
 800977e:	bf00      	nop
 8009780:	636f4361 	.word	0x636f4361
 8009784:	3fd287a7 	.word	0x3fd287a7
 8009788:	8b60c8b3 	.word	0x8b60c8b3
 800978c:	3fc68a28 	.word	0x3fc68a28
 8009790:	509f79fb 	.word	0x509f79fb
 8009794:	3fd34413 	.word	0x3fd34413
 8009798:	0800c266 	.word	0x0800c266
 800979c:	0800c27d 	.word	0x0800c27d
 80097a0:	7ff00000 	.word	0x7ff00000
 80097a4:	0800c262 	.word	0x0800c262
 80097a8:	0800c259 	.word	0x0800c259
 80097ac:	0800c0dd 	.word	0x0800c0dd
 80097b0:	3ff80000 	.word	0x3ff80000
 80097b4:	0800c3e8 	.word	0x0800c3e8
 80097b8:	0800c2d8 	.word	0x0800c2d8
 80097bc:	2501      	movs	r5, #1
 80097be:	2300      	movs	r3, #0
 80097c0:	9306      	str	r3, [sp, #24]
 80097c2:	9508      	str	r5, [sp, #32]
 80097c4:	f04f 33ff 	mov.w	r3, #4294967295
 80097c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097cc:	2200      	movs	r2, #0
 80097ce:	2312      	movs	r3, #18
 80097d0:	e7b0      	b.n	8009734 <_dtoa_r+0x26c>
 80097d2:	2301      	movs	r3, #1
 80097d4:	9308      	str	r3, [sp, #32]
 80097d6:	e7f5      	b.n	80097c4 <_dtoa_r+0x2fc>
 80097d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80097de:	e7b8      	b.n	8009752 <_dtoa_r+0x28a>
 80097e0:	3101      	adds	r1, #1
 80097e2:	6041      	str	r1, [r0, #4]
 80097e4:	0052      	lsls	r2, r2, #1
 80097e6:	e7b8      	b.n	800975a <_dtoa_r+0x292>
 80097e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097ea:	9a01      	ldr	r2, [sp, #4]
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	2b0e      	cmp	r3, #14
 80097f2:	f200 809d 	bhi.w	8009930 <_dtoa_r+0x468>
 80097f6:	2d00      	cmp	r5, #0
 80097f8:	f000 809a 	beq.w	8009930 <_dtoa_r+0x468>
 80097fc:	9b00      	ldr	r3, [sp, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dd32      	ble.n	8009868 <_dtoa_r+0x3a0>
 8009802:	4ab7      	ldr	r2, [pc, #732]	; (8009ae0 <_dtoa_r+0x618>)
 8009804:	f003 030f 	and.w	r3, r3, #15
 8009808:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800980c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009810:	9b00      	ldr	r3, [sp, #0]
 8009812:	05d8      	lsls	r0, r3, #23
 8009814:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009818:	d516      	bpl.n	8009848 <_dtoa_r+0x380>
 800981a:	4bb2      	ldr	r3, [pc, #712]	; (8009ae4 <_dtoa_r+0x61c>)
 800981c:	ec51 0b19 	vmov	r0, r1, d9
 8009820:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009824:	f7f7 f812 	bl	800084c <__aeabi_ddiv>
 8009828:	f007 070f 	and.w	r7, r7, #15
 800982c:	4682      	mov	sl, r0
 800982e:	468b      	mov	fp, r1
 8009830:	2503      	movs	r5, #3
 8009832:	4eac      	ldr	r6, [pc, #688]	; (8009ae4 <_dtoa_r+0x61c>)
 8009834:	b957      	cbnz	r7, 800984c <_dtoa_r+0x384>
 8009836:	4642      	mov	r2, r8
 8009838:	464b      	mov	r3, r9
 800983a:	4650      	mov	r0, sl
 800983c:	4659      	mov	r1, fp
 800983e:	f7f7 f805 	bl	800084c <__aeabi_ddiv>
 8009842:	4682      	mov	sl, r0
 8009844:	468b      	mov	fp, r1
 8009846:	e028      	b.n	800989a <_dtoa_r+0x3d2>
 8009848:	2502      	movs	r5, #2
 800984a:	e7f2      	b.n	8009832 <_dtoa_r+0x36a>
 800984c:	07f9      	lsls	r1, r7, #31
 800984e:	d508      	bpl.n	8009862 <_dtoa_r+0x39a>
 8009850:	4640      	mov	r0, r8
 8009852:	4649      	mov	r1, r9
 8009854:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009858:	f7f6 fece 	bl	80005f8 <__aeabi_dmul>
 800985c:	3501      	adds	r5, #1
 800985e:	4680      	mov	r8, r0
 8009860:	4689      	mov	r9, r1
 8009862:	107f      	asrs	r7, r7, #1
 8009864:	3608      	adds	r6, #8
 8009866:	e7e5      	b.n	8009834 <_dtoa_r+0x36c>
 8009868:	f000 809b 	beq.w	80099a2 <_dtoa_r+0x4da>
 800986c:	9b00      	ldr	r3, [sp, #0]
 800986e:	4f9d      	ldr	r7, [pc, #628]	; (8009ae4 <_dtoa_r+0x61c>)
 8009870:	425e      	negs	r6, r3
 8009872:	4b9b      	ldr	r3, [pc, #620]	; (8009ae0 <_dtoa_r+0x618>)
 8009874:	f006 020f 	and.w	r2, r6, #15
 8009878:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	ec51 0b19 	vmov	r0, r1, d9
 8009884:	f7f6 feb8 	bl	80005f8 <__aeabi_dmul>
 8009888:	1136      	asrs	r6, r6, #4
 800988a:	4682      	mov	sl, r0
 800988c:	468b      	mov	fp, r1
 800988e:	2300      	movs	r3, #0
 8009890:	2502      	movs	r5, #2
 8009892:	2e00      	cmp	r6, #0
 8009894:	d17a      	bne.n	800998c <_dtoa_r+0x4c4>
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1d3      	bne.n	8009842 <_dtoa_r+0x37a>
 800989a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8082 	beq.w	80099a6 <_dtoa_r+0x4de>
 80098a2:	4b91      	ldr	r3, [pc, #580]	; (8009ae8 <_dtoa_r+0x620>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	4650      	mov	r0, sl
 80098a8:	4659      	mov	r1, fp
 80098aa:	f7f7 f917 	bl	8000adc <__aeabi_dcmplt>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d079      	beq.n	80099a6 <_dtoa_r+0x4de>
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d076      	beq.n	80099a6 <_dtoa_r+0x4de>
 80098b8:	9b02      	ldr	r3, [sp, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	dd36      	ble.n	800992c <_dtoa_r+0x464>
 80098be:	9b00      	ldr	r3, [sp, #0]
 80098c0:	4650      	mov	r0, sl
 80098c2:	4659      	mov	r1, fp
 80098c4:	1e5f      	subs	r7, r3, #1
 80098c6:	2200      	movs	r2, #0
 80098c8:	4b88      	ldr	r3, [pc, #544]	; (8009aec <_dtoa_r+0x624>)
 80098ca:	f7f6 fe95 	bl	80005f8 <__aeabi_dmul>
 80098ce:	9e02      	ldr	r6, [sp, #8]
 80098d0:	4682      	mov	sl, r0
 80098d2:	468b      	mov	fp, r1
 80098d4:	3501      	adds	r5, #1
 80098d6:	4628      	mov	r0, r5
 80098d8:	f7f6 fe24 	bl	8000524 <__aeabi_i2d>
 80098dc:	4652      	mov	r2, sl
 80098de:	465b      	mov	r3, fp
 80098e0:	f7f6 fe8a 	bl	80005f8 <__aeabi_dmul>
 80098e4:	4b82      	ldr	r3, [pc, #520]	; (8009af0 <_dtoa_r+0x628>)
 80098e6:	2200      	movs	r2, #0
 80098e8:	f7f6 fcd0 	bl	800028c <__adddf3>
 80098ec:	46d0      	mov	r8, sl
 80098ee:	46d9      	mov	r9, fp
 80098f0:	4682      	mov	sl, r0
 80098f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80098f6:	2e00      	cmp	r6, #0
 80098f8:	d158      	bne.n	80099ac <_dtoa_r+0x4e4>
 80098fa:	4b7e      	ldr	r3, [pc, #504]	; (8009af4 <_dtoa_r+0x62c>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	4640      	mov	r0, r8
 8009900:	4649      	mov	r1, r9
 8009902:	f7f6 fcc1 	bl	8000288 <__aeabi_dsub>
 8009906:	4652      	mov	r2, sl
 8009908:	465b      	mov	r3, fp
 800990a:	4680      	mov	r8, r0
 800990c:	4689      	mov	r9, r1
 800990e:	f7f7 f903 	bl	8000b18 <__aeabi_dcmpgt>
 8009912:	2800      	cmp	r0, #0
 8009914:	f040 8295 	bne.w	8009e42 <_dtoa_r+0x97a>
 8009918:	4652      	mov	r2, sl
 800991a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800991e:	4640      	mov	r0, r8
 8009920:	4649      	mov	r1, r9
 8009922:	f7f7 f8db 	bl	8000adc <__aeabi_dcmplt>
 8009926:	2800      	cmp	r0, #0
 8009928:	f040 8289 	bne.w	8009e3e <_dtoa_r+0x976>
 800992c:	ec5b ab19 	vmov	sl, fp, d9
 8009930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009932:	2b00      	cmp	r3, #0
 8009934:	f2c0 8148 	blt.w	8009bc8 <_dtoa_r+0x700>
 8009938:	9a00      	ldr	r2, [sp, #0]
 800993a:	2a0e      	cmp	r2, #14
 800993c:	f300 8144 	bgt.w	8009bc8 <_dtoa_r+0x700>
 8009940:	4b67      	ldr	r3, [pc, #412]	; (8009ae0 <_dtoa_r+0x618>)
 8009942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009946:	e9d3 8900 	ldrd	r8, r9, [r3]
 800994a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800994c:	2b00      	cmp	r3, #0
 800994e:	f280 80d5 	bge.w	8009afc <_dtoa_r+0x634>
 8009952:	9b03      	ldr	r3, [sp, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	f300 80d1 	bgt.w	8009afc <_dtoa_r+0x634>
 800995a:	f040 826f 	bne.w	8009e3c <_dtoa_r+0x974>
 800995e:	4b65      	ldr	r3, [pc, #404]	; (8009af4 <_dtoa_r+0x62c>)
 8009960:	2200      	movs	r2, #0
 8009962:	4640      	mov	r0, r8
 8009964:	4649      	mov	r1, r9
 8009966:	f7f6 fe47 	bl	80005f8 <__aeabi_dmul>
 800996a:	4652      	mov	r2, sl
 800996c:	465b      	mov	r3, fp
 800996e:	f7f7 f8c9 	bl	8000b04 <__aeabi_dcmpge>
 8009972:	9e03      	ldr	r6, [sp, #12]
 8009974:	4637      	mov	r7, r6
 8009976:	2800      	cmp	r0, #0
 8009978:	f040 8245 	bne.w	8009e06 <_dtoa_r+0x93e>
 800997c:	9d01      	ldr	r5, [sp, #4]
 800997e:	2331      	movs	r3, #49	; 0x31
 8009980:	f805 3b01 	strb.w	r3, [r5], #1
 8009984:	9b00      	ldr	r3, [sp, #0]
 8009986:	3301      	adds	r3, #1
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	e240      	b.n	8009e0e <_dtoa_r+0x946>
 800998c:	07f2      	lsls	r2, r6, #31
 800998e:	d505      	bpl.n	800999c <_dtoa_r+0x4d4>
 8009990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009994:	f7f6 fe30 	bl	80005f8 <__aeabi_dmul>
 8009998:	3501      	adds	r5, #1
 800999a:	2301      	movs	r3, #1
 800999c:	1076      	asrs	r6, r6, #1
 800999e:	3708      	adds	r7, #8
 80099a0:	e777      	b.n	8009892 <_dtoa_r+0x3ca>
 80099a2:	2502      	movs	r5, #2
 80099a4:	e779      	b.n	800989a <_dtoa_r+0x3d2>
 80099a6:	9f00      	ldr	r7, [sp, #0]
 80099a8:	9e03      	ldr	r6, [sp, #12]
 80099aa:	e794      	b.n	80098d6 <_dtoa_r+0x40e>
 80099ac:	9901      	ldr	r1, [sp, #4]
 80099ae:	4b4c      	ldr	r3, [pc, #304]	; (8009ae0 <_dtoa_r+0x618>)
 80099b0:	4431      	add	r1, r6
 80099b2:	910d      	str	r1, [sp, #52]	; 0x34
 80099b4:	9908      	ldr	r1, [sp, #32]
 80099b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80099ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099be:	2900      	cmp	r1, #0
 80099c0:	d043      	beq.n	8009a4a <_dtoa_r+0x582>
 80099c2:	494d      	ldr	r1, [pc, #308]	; (8009af8 <_dtoa_r+0x630>)
 80099c4:	2000      	movs	r0, #0
 80099c6:	f7f6 ff41 	bl	800084c <__aeabi_ddiv>
 80099ca:	4652      	mov	r2, sl
 80099cc:	465b      	mov	r3, fp
 80099ce:	f7f6 fc5b 	bl	8000288 <__aeabi_dsub>
 80099d2:	9d01      	ldr	r5, [sp, #4]
 80099d4:	4682      	mov	sl, r0
 80099d6:	468b      	mov	fp, r1
 80099d8:	4649      	mov	r1, r9
 80099da:	4640      	mov	r0, r8
 80099dc:	f7f7 f8bc 	bl	8000b58 <__aeabi_d2iz>
 80099e0:	4606      	mov	r6, r0
 80099e2:	f7f6 fd9f 	bl	8000524 <__aeabi_i2d>
 80099e6:	4602      	mov	r2, r0
 80099e8:	460b      	mov	r3, r1
 80099ea:	4640      	mov	r0, r8
 80099ec:	4649      	mov	r1, r9
 80099ee:	f7f6 fc4b 	bl	8000288 <__aeabi_dsub>
 80099f2:	3630      	adds	r6, #48	; 0x30
 80099f4:	f805 6b01 	strb.w	r6, [r5], #1
 80099f8:	4652      	mov	r2, sl
 80099fa:	465b      	mov	r3, fp
 80099fc:	4680      	mov	r8, r0
 80099fe:	4689      	mov	r9, r1
 8009a00:	f7f7 f86c 	bl	8000adc <__aeabi_dcmplt>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d163      	bne.n	8009ad0 <_dtoa_r+0x608>
 8009a08:	4642      	mov	r2, r8
 8009a0a:	464b      	mov	r3, r9
 8009a0c:	4936      	ldr	r1, [pc, #216]	; (8009ae8 <_dtoa_r+0x620>)
 8009a0e:	2000      	movs	r0, #0
 8009a10:	f7f6 fc3a 	bl	8000288 <__aeabi_dsub>
 8009a14:	4652      	mov	r2, sl
 8009a16:	465b      	mov	r3, fp
 8009a18:	f7f7 f860 	bl	8000adc <__aeabi_dcmplt>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	f040 80b5 	bne.w	8009b8c <_dtoa_r+0x6c4>
 8009a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a24:	429d      	cmp	r5, r3
 8009a26:	d081      	beq.n	800992c <_dtoa_r+0x464>
 8009a28:	4b30      	ldr	r3, [pc, #192]	; (8009aec <_dtoa_r+0x624>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	4650      	mov	r0, sl
 8009a2e:	4659      	mov	r1, fp
 8009a30:	f7f6 fde2 	bl	80005f8 <__aeabi_dmul>
 8009a34:	4b2d      	ldr	r3, [pc, #180]	; (8009aec <_dtoa_r+0x624>)
 8009a36:	4682      	mov	sl, r0
 8009a38:	468b      	mov	fp, r1
 8009a3a:	4640      	mov	r0, r8
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f7f6 fdda 	bl	80005f8 <__aeabi_dmul>
 8009a44:	4680      	mov	r8, r0
 8009a46:	4689      	mov	r9, r1
 8009a48:	e7c6      	b.n	80099d8 <_dtoa_r+0x510>
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	4659      	mov	r1, fp
 8009a4e:	f7f6 fdd3 	bl	80005f8 <__aeabi_dmul>
 8009a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a54:	9d01      	ldr	r5, [sp, #4]
 8009a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a58:	4682      	mov	sl, r0
 8009a5a:	468b      	mov	fp, r1
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	4640      	mov	r0, r8
 8009a60:	f7f7 f87a 	bl	8000b58 <__aeabi_d2iz>
 8009a64:	4606      	mov	r6, r0
 8009a66:	f7f6 fd5d 	bl	8000524 <__aeabi_i2d>
 8009a6a:	3630      	adds	r6, #48	; 0x30
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4640      	mov	r0, r8
 8009a72:	4649      	mov	r1, r9
 8009a74:	f7f6 fc08 	bl	8000288 <__aeabi_dsub>
 8009a78:	f805 6b01 	strb.w	r6, [r5], #1
 8009a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a7e:	429d      	cmp	r5, r3
 8009a80:	4680      	mov	r8, r0
 8009a82:	4689      	mov	r9, r1
 8009a84:	f04f 0200 	mov.w	r2, #0
 8009a88:	d124      	bne.n	8009ad4 <_dtoa_r+0x60c>
 8009a8a:	4b1b      	ldr	r3, [pc, #108]	; (8009af8 <_dtoa_r+0x630>)
 8009a8c:	4650      	mov	r0, sl
 8009a8e:	4659      	mov	r1, fp
 8009a90:	f7f6 fbfc 	bl	800028c <__adddf3>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4640      	mov	r0, r8
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	f7f7 f83c 	bl	8000b18 <__aeabi_dcmpgt>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d173      	bne.n	8009b8c <_dtoa_r+0x6c4>
 8009aa4:	4652      	mov	r2, sl
 8009aa6:	465b      	mov	r3, fp
 8009aa8:	4913      	ldr	r1, [pc, #76]	; (8009af8 <_dtoa_r+0x630>)
 8009aaa:	2000      	movs	r0, #0
 8009aac:	f7f6 fbec 	bl	8000288 <__aeabi_dsub>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	f7f7 f810 	bl	8000adc <__aeabi_dcmplt>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	f43f af35 	beq.w	800992c <_dtoa_r+0x464>
 8009ac2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ac4:	1e6b      	subs	r3, r5, #1
 8009ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ac8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009acc:	2b30      	cmp	r3, #48	; 0x30
 8009ace:	d0f8      	beq.n	8009ac2 <_dtoa_r+0x5fa>
 8009ad0:	9700      	str	r7, [sp, #0]
 8009ad2:	e049      	b.n	8009b68 <_dtoa_r+0x6a0>
 8009ad4:	4b05      	ldr	r3, [pc, #20]	; (8009aec <_dtoa_r+0x624>)
 8009ad6:	f7f6 fd8f 	bl	80005f8 <__aeabi_dmul>
 8009ada:	4680      	mov	r8, r0
 8009adc:	4689      	mov	r9, r1
 8009ade:	e7bd      	b.n	8009a5c <_dtoa_r+0x594>
 8009ae0:	0800c3e8 	.word	0x0800c3e8
 8009ae4:	0800c3c0 	.word	0x0800c3c0
 8009ae8:	3ff00000 	.word	0x3ff00000
 8009aec:	40240000 	.word	0x40240000
 8009af0:	401c0000 	.word	0x401c0000
 8009af4:	40140000 	.word	0x40140000
 8009af8:	3fe00000 	.word	0x3fe00000
 8009afc:	9d01      	ldr	r5, [sp, #4]
 8009afe:	4656      	mov	r6, sl
 8009b00:	465f      	mov	r7, fp
 8009b02:	4642      	mov	r2, r8
 8009b04:	464b      	mov	r3, r9
 8009b06:	4630      	mov	r0, r6
 8009b08:	4639      	mov	r1, r7
 8009b0a:	f7f6 fe9f 	bl	800084c <__aeabi_ddiv>
 8009b0e:	f7f7 f823 	bl	8000b58 <__aeabi_d2iz>
 8009b12:	4682      	mov	sl, r0
 8009b14:	f7f6 fd06 	bl	8000524 <__aeabi_i2d>
 8009b18:	4642      	mov	r2, r8
 8009b1a:	464b      	mov	r3, r9
 8009b1c:	f7f6 fd6c 	bl	80005f8 <__aeabi_dmul>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4630      	mov	r0, r6
 8009b26:	4639      	mov	r1, r7
 8009b28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009b2c:	f7f6 fbac 	bl	8000288 <__aeabi_dsub>
 8009b30:	f805 6b01 	strb.w	r6, [r5], #1
 8009b34:	9e01      	ldr	r6, [sp, #4]
 8009b36:	9f03      	ldr	r7, [sp, #12]
 8009b38:	1bae      	subs	r6, r5, r6
 8009b3a:	42b7      	cmp	r7, r6
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	d135      	bne.n	8009bae <_dtoa_r+0x6e6>
 8009b42:	f7f6 fba3 	bl	800028c <__adddf3>
 8009b46:	4642      	mov	r2, r8
 8009b48:	464b      	mov	r3, r9
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	f7f6 ffe3 	bl	8000b18 <__aeabi_dcmpgt>
 8009b52:	b9d0      	cbnz	r0, 8009b8a <_dtoa_r+0x6c2>
 8009b54:	4642      	mov	r2, r8
 8009b56:	464b      	mov	r3, r9
 8009b58:	4630      	mov	r0, r6
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	f7f6 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b60:	b110      	cbz	r0, 8009b68 <_dtoa_r+0x6a0>
 8009b62:	f01a 0f01 	tst.w	sl, #1
 8009b66:	d110      	bne.n	8009b8a <_dtoa_r+0x6c2>
 8009b68:	4620      	mov	r0, r4
 8009b6a:	ee18 1a10 	vmov	r1, s16
 8009b6e:	f000 fe6b 	bl	800a848 <_Bfree>
 8009b72:	2300      	movs	r3, #0
 8009b74:	9800      	ldr	r0, [sp, #0]
 8009b76:	702b      	strb	r3, [r5, #0]
 8009b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	6018      	str	r0, [r3, #0]
 8009b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f43f acf1 	beq.w	8009568 <_dtoa_r+0xa0>
 8009b86:	601d      	str	r5, [r3, #0]
 8009b88:	e4ee      	b.n	8009568 <_dtoa_r+0xa0>
 8009b8a:	9f00      	ldr	r7, [sp, #0]
 8009b8c:	462b      	mov	r3, r5
 8009b8e:	461d      	mov	r5, r3
 8009b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b94:	2a39      	cmp	r2, #57	; 0x39
 8009b96:	d106      	bne.n	8009ba6 <_dtoa_r+0x6de>
 8009b98:	9a01      	ldr	r2, [sp, #4]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d1f7      	bne.n	8009b8e <_dtoa_r+0x6c6>
 8009b9e:	9901      	ldr	r1, [sp, #4]
 8009ba0:	2230      	movs	r2, #48	; 0x30
 8009ba2:	3701      	adds	r7, #1
 8009ba4:	700a      	strb	r2, [r1, #0]
 8009ba6:	781a      	ldrb	r2, [r3, #0]
 8009ba8:	3201      	adds	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
 8009bac:	e790      	b.n	8009ad0 <_dtoa_r+0x608>
 8009bae:	4ba6      	ldr	r3, [pc, #664]	; (8009e48 <_dtoa_r+0x980>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f7f6 fd21 	bl	80005f8 <__aeabi_dmul>
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460f      	mov	r7, r1
 8009bbe:	f7f6 ff83 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d09d      	beq.n	8009b02 <_dtoa_r+0x63a>
 8009bc6:	e7cf      	b.n	8009b68 <_dtoa_r+0x6a0>
 8009bc8:	9a08      	ldr	r2, [sp, #32]
 8009bca:	2a00      	cmp	r2, #0
 8009bcc:	f000 80d7 	beq.w	8009d7e <_dtoa_r+0x8b6>
 8009bd0:	9a06      	ldr	r2, [sp, #24]
 8009bd2:	2a01      	cmp	r2, #1
 8009bd4:	f300 80ba 	bgt.w	8009d4c <_dtoa_r+0x884>
 8009bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bda:	2a00      	cmp	r2, #0
 8009bdc:	f000 80b2 	beq.w	8009d44 <_dtoa_r+0x87c>
 8009be0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009be4:	9e07      	ldr	r6, [sp, #28]
 8009be6:	9d04      	ldr	r5, [sp, #16]
 8009be8:	9a04      	ldr	r2, [sp, #16]
 8009bea:	441a      	add	r2, r3
 8009bec:	9204      	str	r2, [sp, #16]
 8009bee:	9a05      	ldr	r2, [sp, #20]
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	441a      	add	r2, r3
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	9205      	str	r2, [sp, #20]
 8009bf8:	f000 ff28 	bl	800aa4c <__i2b>
 8009bfc:	4607      	mov	r7, r0
 8009bfe:	2d00      	cmp	r5, #0
 8009c00:	dd0c      	ble.n	8009c1c <_dtoa_r+0x754>
 8009c02:	9b05      	ldr	r3, [sp, #20]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	dd09      	ble.n	8009c1c <_dtoa_r+0x754>
 8009c08:	42ab      	cmp	r3, r5
 8009c0a:	9a04      	ldr	r2, [sp, #16]
 8009c0c:	bfa8      	it	ge
 8009c0e:	462b      	movge	r3, r5
 8009c10:	1ad2      	subs	r2, r2, r3
 8009c12:	9204      	str	r2, [sp, #16]
 8009c14:	9a05      	ldr	r2, [sp, #20]
 8009c16:	1aed      	subs	r5, r5, r3
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	9305      	str	r3, [sp, #20]
 8009c1c:	9b07      	ldr	r3, [sp, #28]
 8009c1e:	b31b      	cbz	r3, 8009c68 <_dtoa_r+0x7a0>
 8009c20:	9b08      	ldr	r3, [sp, #32]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 80af 	beq.w	8009d86 <_dtoa_r+0x8be>
 8009c28:	2e00      	cmp	r6, #0
 8009c2a:	dd13      	ble.n	8009c54 <_dtoa_r+0x78c>
 8009c2c:	4639      	mov	r1, r7
 8009c2e:	4632      	mov	r2, r6
 8009c30:	4620      	mov	r0, r4
 8009c32:	f000 ffcb 	bl	800abcc <__pow5mult>
 8009c36:	ee18 2a10 	vmov	r2, s16
 8009c3a:	4601      	mov	r1, r0
 8009c3c:	4607      	mov	r7, r0
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f000 ff1a 	bl	800aa78 <__multiply>
 8009c44:	ee18 1a10 	vmov	r1, s16
 8009c48:	4680      	mov	r8, r0
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f000 fdfc 	bl	800a848 <_Bfree>
 8009c50:	ee08 8a10 	vmov	s16, r8
 8009c54:	9b07      	ldr	r3, [sp, #28]
 8009c56:	1b9a      	subs	r2, r3, r6
 8009c58:	d006      	beq.n	8009c68 <_dtoa_r+0x7a0>
 8009c5a:	ee18 1a10 	vmov	r1, s16
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f000 ffb4 	bl	800abcc <__pow5mult>
 8009c64:	ee08 0a10 	vmov	s16, r0
 8009c68:	2101      	movs	r1, #1
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 feee 	bl	800aa4c <__i2b>
 8009c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	4606      	mov	r6, r0
 8009c76:	f340 8088 	ble.w	8009d8a <_dtoa_r+0x8c2>
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 ffa4 	bl	800abcc <__pow5mult>
 8009c84:	9b06      	ldr	r3, [sp, #24]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	4606      	mov	r6, r0
 8009c8a:	f340 8081 	ble.w	8009d90 <_dtoa_r+0x8c8>
 8009c8e:	f04f 0800 	mov.w	r8, #0
 8009c92:	6933      	ldr	r3, [r6, #16]
 8009c94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c98:	6918      	ldr	r0, [r3, #16]
 8009c9a:	f000 fe87 	bl	800a9ac <__hi0bits>
 8009c9e:	f1c0 0020 	rsb	r0, r0, #32
 8009ca2:	9b05      	ldr	r3, [sp, #20]
 8009ca4:	4418      	add	r0, r3
 8009ca6:	f010 001f 	ands.w	r0, r0, #31
 8009caa:	f000 8092 	beq.w	8009dd2 <_dtoa_r+0x90a>
 8009cae:	f1c0 0320 	rsb	r3, r0, #32
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	f340 808a 	ble.w	8009dcc <_dtoa_r+0x904>
 8009cb8:	f1c0 001c 	rsb	r0, r0, #28
 8009cbc:	9b04      	ldr	r3, [sp, #16]
 8009cbe:	4403      	add	r3, r0
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	9b05      	ldr	r3, [sp, #20]
 8009cc4:	4403      	add	r3, r0
 8009cc6:	4405      	add	r5, r0
 8009cc8:	9305      	str	r3, [sp, #20]
 8009cca:	9b04      	ldr	r3, [sp, #16]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	dd07      	ble.n	8009ce0 <_dtoa_r+0x818>
 8009cd0:	ee18 1a10 	vmov	r1, s16
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f000 ffd2 	bl	800ac80 <__lshift>
 8009cdc:	ee08 0a10 	vmov	s16, r0
 8009ce0:	9b05      	ldr	r3, [sp, #20]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	dd05      	ble.n	8009cf2 <_dtoa_r+0x82a>
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 ffc8 	bl	800ac80 <__lshift>
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d06e      	beq.n	8009dd6 <_dtoa_r+0x90e>
 8009cf8:	ee18 0a10 	vmov	r0, s16
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	f001 f82f 	bl	800ad60 <__mcmp>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	da67      	bge.n	8009dd6 <_dtoa_r+0x90e>
 8009d06:	9b00      	ldr	r3, [sp, #0]
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	ee18 1a10 	vmov	r1, s16
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	220a      	movs	r2, #10
 8009d12:	2300      	movs	r3, #0
 8009d14:	4620      	mov	r0, r4
 8009d16:	f000 fdb9 	bl	800a88c <__multadd>
 8009d1a:	9b08      	ldr	r3, [sp, #32]
 8009d1c:	ee08 0a10 	vmov	s16, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 81b1 	beq.w	800a088 <_dtoa_r+0xbc0>
 8009d26:	2300      	movs	r3, #0
 8009d28:	4639      	mov	r1, r7
 8009d2a:	220a      	movs	r2, #10
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 fdad 	bl	800a88c <__multadd>
 8009d32:	9b02      	ldr	r3, [sp, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	4607      	mov	r7, r0
 8009d38:	f300 808e 	bgt.w	8009e58 <_dtoa_r+0x990>
 8009d3c:	9b06      	ldr	r3, [sp, #24]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	dc51      	bgt.n	8009de6 <_dtoa_r+0x91e>
 8009d42:	e089      	b.n	8009e58 <_dtoa_r+0x990>
 8009d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d4a:	e74b      	b.n	8009be4 <_dtoa_r+0x71c>
 8009d4c:	9b03      	ldr	r3, [sp, #12]
 8009d4e:	1e5e      	subs	r6, r3, #1
 8009d50:	9b07      	ldr	r3, [sp, #28]
 8009d52:	42b3      	cmp	r3, r6
 8009d54:	bfbf      	itttt	lt
 8009d56:	9b07      	ldrlt	r3, [sp, #28]
 8009d58:	9607      	strlt	r6, [sp, #28]
 8009d5a:	1af2      	sublt	r2, r6, r3
 8009d5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009d5e:	bfb6      	itet	lt
 8009d60:	189b      	addlt	r3, r3, r2
 8009d62:	1b9e      	subge	r6, r3, r6
 8009d64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	bfb8      	it	lt
 8009d6a:	2600      	movlt	r6, #0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bfb7      	itett	lt
 8009d70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009d74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009d78:	1a9d      	sublt	r5, r3, r2
 8009d7a:	2300      	movlt	r3, #0
 8009d7c:	e734      	b.n	8009be8 <_dtoa_r+0x720>
 8009d7e:	9e07      	ldr	r6, [sp, #28]
 8009d80:	9d04      	ldr	r5, [sp, #16]
 8009d82:	9f08      	ldr	r7, [sp, #32]
 8009d84:	e73b      	b.n	8009bfe <_dtoa_r+0x736>
 8009d86:	9a07      	ldr	r2, [sp, #28]
 8009d88:	e767      	b.n	8009c5a <_dtoa_r+0x792>
 8009d8a:	9b06      	ldr	r3, [sp, #24]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	dc18      	bgt.n	8009dc2 <_dtoa_r+0x8fa>
 8009d90:	f1ba 0f00 	cmp.w	sl, #0
 8009d94:	d115      	bne.n	8009dc2 <_dtoa_r+0x8fa>
 8009d96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d9a:	b993      	cbnz	r3, 8009dc2 <_dtoa_r+0x8fa>
 8009d9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009da0:	0d1b      	lsrs	r3, r3, #20
 8009da2:	051b      	lsls	r3, r3, #20
 8009da4:	b183      	cbz	r3, 8009dc8 <_dtoa_r+0x900>
 8009da6:	9b04      	ldr	r3, [sp, #16]
 8009da8:	3301      	adds	r3, #1
 8009daa:	9304      	str	r3, [sp, #16]
 8009dac:	9b05      	ldr	r3, [sp, #20]
 8009dae:	3301      	adds	r3, #1
 8009db0:	9305      	str	r3, [sp, #20]
 8009db2:	f04f 0801 	mov.w	r8, #1
 8009db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f47f af6a 	bne.w	8009c92 <_dtoa_r+0x7ca>
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	e76f      	b.n	8009ca2 <_dtoa_r+0x7da>
 8009dc2:	f04f 0800 	mov.w	r8, #0
 8009dc6:	e7f6      	b.n	8009db6 <_dtoa_r+0x8ee>
 8009dc8:	4698      	mov	r8, r3
 8009dca:	e7f4      	b.n	8009db6 <_dtoa_r+0x8ee>
 8009dcc:	f43f af7d 	beq.w	8009cca <_dtoa_r+0x802>
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	301c      	adds	r0, #28
 8009dd4:	e772      	b.n	8009cbc <_dtoa_r+0x7f4>
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	dc37      	bgt.n	8009e4c <_dtoa_r+0x984>
 8009ddc:	9b06      	ldr	r3, [sp, #24]
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	dd34      	ble.n	8009e4c <_dtoa_r+0x984>
 8009de2:	9b03      	ldr	r3, [sp, #12]
 8009de4:	9302      	str	r3, [sp, #8]
 8009de6:	9b02      	ldr	r3, [sp, #8]
 8009de8:	b96b      	cbnz	r3, 8009e06 <_dtoa_r+0x93e>
 8009dea:	4631      	mov	r1, r6
 8009dec:	2205      	movs	r2, #5
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 fd4c 	bl	800a88c <__multadd>
 8009df4:	4601      	mov	r1, r0
 8009df6:	4606      	mov	r6, r0
 8009df8:	ee18 0a10 	vmov	r0, s16
 8009dfc:	f000 ffb0 	bl	800ad60 <__mcmp>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	f73f adbb 	bgt.w	800997c <_dtoa_r+0x4b4>
 8009e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e08:	9d01      	ldr	r5, [sp, #4]
 8009e0a:	43db      	mvns	r3, r3
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	f04f 0800 	mov.w	r8, #0
 8009e12:	4631      	mov	r1, r6
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 fd17 	bl	800a848 <_Bfree>
 8009e1a:	2f00      	cmp	r7, #0
 8009e1c:	f43f aea4 	beq.w	8009b68 <_dtoa_r+0x6a0>
 8009e20:	f1b8 0f00 	cmp.w	r8, #0
 8009e24:	d005      	beq.n	8009e32 <_dtoa_r+0x96a>
 8009e26:	45b8      	cmp	r8, r7
 8009e28:	d003      	beq.n	8009e32 <_dtoa_r+0x96a>
 8009e2a:	4641      	mov	r1, r8
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 fd0b 	bl	800a848 <_Bfree>
 8009e32:	4639      	mov	r1, r7
 8009e34:	4620      	mov	r0, r4
 8009e36:	f000 fd07 	bl	800a848 <_Bfree>
 8009e3a:	e695      	b.n	8009b68 <_dtoa_r+0x6a0>
 8009e3c:	2600      	movs	r6, #0
 8009e3e:	4637      	mov	r7, r6
 8009e40:	e7e1      	b.n	8009e06 <_dtoa_r+0x93e>
 8009e42:	9700      	str	r7, [sp, #0]
 8009e44:	4637      	mov	r7, r6
 8009e46:	e599      	b.n	800997c <_dtoa_r+0x4b4>
 8009e48:	40240000 	.word	0x40240000
 8009e4c:	9b08      	ldr	r3, [sp, #32]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f000 80ca 	beq.w	8009fe8 <_dtoa_r+0xb20>
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	9302      	str	r3, [sp, #8]
 8009e58:	2d00      	cmp	r5, #0
 8009e5a:	dd05      	ble.n	8009e68 <_dtoa_r+0x9a0>
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	462a      	mov	r2, r5
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 ff0d 	bl	800ac80 <__lshift>
 8009e66:	4607      	mov	r7, r0
 8009e68:	f1b8 0f00 	cmp.w	r8, #0
 8009e6c:	d05b      	beq.n	8009f26 <_dtoa_r+0xa5e>
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	4620      	mov	r0, r4
 8009e72:	f000 fca9 	bl	800a7c8 <_Balloc>
 8009e76:	4605      	mov	r5, r0
 8009e78:	b928      	cbnz	r0, 8009e86 <_dtoa_r+0x9be>
 8009e7a:	4b87      	ldr	r3, [pc, #540]	; (800a098 <_dtoa_r+0xbd0>)
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009e82:	f7ff bb3b 	b.w	80094fc <_dtoa_r+0x34>
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	3202      	adds	r2, #2
 8009e8a:	0092      	lsls	r2, r2, #2
 8009e8c:	f107 010c 	add.w	r1, r7, #12
 8009e90:	300c      	adds	r0, #12
 8009e92:	f7fd fc3b 	bl	800770c <memcpy>
 8009e96:	2201      	movs	r2, #1
 8009e98:	4629      	mov	r1, r5
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f000 fef0 	bl	800ac80 <__lshift>
 8009ea0:	9b01      	ldr	r3, [sp, #4]
 8009ea2:	f103 0901 	add.w	r9, r3, #1
 8009ea6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009eaa:	4413      	add	r3, r2
 8009eac:	9305      	str	r3, [sp, #20]
 8009eae:	f00a 0301 	and.w	r3, sl, #1
 8009eb2:	46b8      	mov	r8, r7
 8009eb4:	9304      	str	r3, [sp, #16]
 8009eb6:	4607      	mov	r7, r0
 8009eb8:	4631      	mov	r1, r6
 8009eba:	ee18 0a10 	vmov	r0, s16
 8009ebe:	f7ff fa77 	bl	80093b0 <quorem>
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	9002      	str	r0, [sp, #8]
 8009ec6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009eca:	ee18 0a10 	vmov	r0, s16
 8009ece:	f000 ff47 	bl	800ad60 <__mcmp>
 8009ed2:	463a      	mov	r2, r7
 8009ed4:	9003      	str	r0, [sp, #12]
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 ff5d 	bl	800ad98 <__mdiff>
 8009ede:	68c2      	ldr	r2, [r0, #12]
 8009ee0:	f109 3bff 	add.w	fp, r9, #4294967295
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	bb02      	cbnz	r2, 8009f2a <_dtoa_r+0xa62>
 8009ee8:	4601      	mov	r1, r0
 8009eea:	ee18 0a10 	vmov	r0, s16
 8009eee:	f000 ff37 	bl	800ad60 <__mcmp>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	9207      	str	r2, [sp, #28]
 8009efa:	f000 fca5 	bl	800a848 <_Bfree>
 8009efe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009f02:	ea43 0102 	orr.w	r1, r3, r2
 8009f06:	9b04      	ldr	r3, [sp, #16]
 8009f08:	430b      	orrs	r3, r1
 8009f0a:	464d      	mov	r5, r9
 8009f0c:	d10f      	bne.n	8009f2e <_dtoa_r+0xa66>
 8009f0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f12:	d02a      	beq.n	8009f6a <_dtoa_r+0xaa2>
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	dd02      	ble.n	8009f20 <_dtoa_r+0xa58>
 8009f1a:	9b02      	ldr	r3, [sp, #8]
 8009f1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009f20:	f88b a000 	strb.w	sl, [fp]
 8009f24:	e775      	b.n	8009e12 <_dtoa_r+0x94a>
 8009f26:	4638      	mov	r0, r7
 8009f28:	e7ba      	b.n	8009ea0 <_dtoa_r+0x9d8>
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	e7e2      	b.n	8009ef4 <_dtoa_r+0xa2c>
 8009f2e:	9b03      	ldr	r3, [sp, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	db04      	blt.n	8009f3e <_dtoa_r+0xa76>
 8009f34:	9906      	ldr	r1, [sp, #24]
 8009f36:	430b      	orrs	r3, r1
 8009f38:	9904      	ldr	r1, [sp, #16]
 8009f3a:	430b      	orrs	r3, r1
 8009f3c:	d122      	bne.n	8009f84 <_dtoa_r+0xabc>
 8009f3e:	2a00      	cmp	r2, #0
 8009f40:	ddee      	ble.n	8009f20 <_dtoa_r+0xa58>
 8009f42:	ee18 1a10 	vmov	r1, s16
 8009f46:	2201      	movs	r2, #1
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 fe99 	bl	800ac80 <__lshift>
 8009f4e:	4631      	mov	r1, r6
 8009f50:	ee08 0a10 	vmov	s16, r0
 8009f54:	f000 ff04 	bl	800ad60 <__mcmp>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	dc03      	bgt.n	8009f64 <_dtoa_r+0xa9c>
 8009f5c:	d1e0      	bne.n	8009f20 <_dtoa_r+0xa58>
 8009f5e:	f01a 0f01 	tst.w	sl, #1
 8009f62:	d0dd      	beq.n	8009f20 <_dtoa_r+0xa58>
 8009f64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f68:	d1d7      	bne.n	8009f1a <_dtoa_r+0xa52>
 8009f6a:	2339      	movs	r3, #57	; 0x39
 8009f6c:	f88b 3000 	strb.w	r3, [fp]
 8009f70:	462b      	mov	r3, r5
 8009f72:	461d      	mov	r5, r3
 8009f74:	3b01      	subs	r3, #1
 8009f76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f7a:	2a39      	cmp	r2, #57	; 0x39
 8009f7c:	d071      	beq.n	800a062 <_dtoa_r+0xb9a>
 8009f7e:	3201      	adds	r2, #1
 8009f80:	701a      	strb	r2, [r3, #0]
 8009f82:	e746      	b.n	8009e12 <_dtoa_r+0x94a>
 8009f84:	2a00      	cmp	r2, #0
 8009f86:	dd07      	ble.n	8009f98 <_dtoa_r+0xad0>
 8009f88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f8c:	d0ed      	beq.n	8009f6a <_dtoa_r+0xaa2>
 8009f8e:	f10a 0301 	add.w	r3, sl, #1
 8009f92:	f88b 3000 	strb.w	r3, [fp]
 8009f96:	e73c      	b.n	8009e12 <_dtoa_r+0x94a>
 8009f98:	9b05      	ldr	r3, [sp, #20]
 8009f9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009f9e:	4599      	cmp	r9, r3
 8009fa0:	d047      	beq.n	800a032 <_dtoa_r+0xb6a>
 8009fa2:	ee18 1a10 	vmov	r1, s16
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	220a      	movs	r2, #10
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 fc6e 	bl	800a88c <__multadd>
 8009fb0:	45b8      	cmp	r8, r7
 8009fb2:	ee08 0a10 	vmov	s16, r0
 8009fb6:	f04f 0300 	mov.w	r3, #0
 8009fba:	f04f 020a 	mov.w	r2, #10
 8009fbe:	4641      	mov	r1, r8
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	d106      	bne.n	8009fd2 <_dtoa_r+0xb0a>
 8009fc4:	f000 fc62 	bl	800a88c <__multadd>
 8009fc8:	4680      	mov	r8, r0
 8009fca:	4607      	mov	r7, r0
 8009fcc:	f109 0901 	add.w	r9, r9, #1
 8009fd0:	e772      	b.n	8009eb8 <_dtoa_r+0x9f0>
 8009fd2:	f000 fc5b 	bl	800a88c <__multadd>
 8009fd6:	4639      	mov	r1, r7
 8009fd8:	4680      	mov	r8, r0
 8009fda:	2300      	movs	r3, #0
 8009fdc:	220a      	movs	r2, #10
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 fc54 	bl	800a88c <__multadd>
 8009fe4:	4607      	mov	r7, r0
 8009fe6:	e7f1      	b.n	8009fcc <_dtoa_r+0xb04>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	9302      	str	r3, [sp, #8]
 8009fec:	9d01      	ldr	r5, [sp, #4]
 8009fee:	ee18 0a10 	vmov	r0, s16
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	f7ff f9dc 	bl	80093b0 <quorem>
 8009ff8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	f805 ab01 	strb.w	sl, [r5], #1
 800a002:	1aea      	subs	r2, r5, r3
 800a004:	9b02      	ldr	r3, [sp, #8]
 800a006:	4293      	cmp	r3, r2
 800a008:	dd09      	ble.n	800a01e <_dtoa_r+0xb56>
 800a00a:	ee18 1a10 	vmov	r1, s16
 800a00e:	2300      	movs	r3, #0
 800a010:	220a      	movs	r2, #10
 800a012:	4620      	mov	r0, r4
 800a014:	f000 fc3a 	bl	800a88c <__multadd>
 800a018:	ee08 0a10 	vmov	s16, r0
 800a01c:	e7e7      	b.n	8009fee <_dtoa_r+0xb26>
 800a01e:	9b02      	ldr	r3, [sp, #8]
 800a020:	2b00      	cmp	r3, #0
 800a022:	bfc8      	it	gt
 800a024:	461d      	movgt	r5, r3
 800a026:	9b01      	ldr	r3, [sp, #4]
 800a028:	bfd8      	it	le
 800a02a:	2501      	movle	r5, #1
 800a02c:	441d      	add	r5, r3
 800a02e:	f04f 0800 	mov.w	r8, #0
 800a032:	ee18 1a10 	vmov	r1, s16
 800a036:	2201      	movs	r2, #1
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fe21 	bl	800ac80 <__lshift>
 800a03e:	4631      	mov	r1, r6
 800a040:	ee08 0a10 	vmov	s16, r0
 800a044:	f000 fe8c 	bl	800ad60 <__mcmp>
 800a048:	2800      	cmp	r0, #0
 800a04a:	dc91      	bgt.n	8009f70 <_dtoa_r+0xaa8>
 800a04c:	d102      	bne.n	800a054 <_dtoa_r+0xb8c>
 800a04e:	f01a 0f01 	tst.w	sl, #1
 800a052:	d18d      	bne.n	8009f70 <_dtoa_r+0xaa8>
 800a054:	462b      	mov	r3, r5
 800a056:	461d      	mov	r5, r3
 800a058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a05c:	2a30      	cmp	r2, #48	; 0x30
 800a05e:	d0fa      	beq.n	800a056 <_dtoa_r+0xb8e>
 800a060:	e6d7      	b.n	8009e12 <_dtoa_r+0x94a>
 800a062:	9a01      	ldr	r2, [sp, #4]
 800a064:	429a      	cmp	r2, r3
 800a066:	d184      	bne.n	8009f72 <_dtoa_r+0xaaa>
 800a068:	9b00      	ldr	r3, [sp, #0]
 800a06a:	3301      	adds	r3, #1
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	2331      	movs	r3, #49	; 0x31
 800a070:	7013      	strb	r3, [r2, #0]
 800a072:	e6ce      	b.n	8009e12 <_dtoa_r+0x94a>
 800a074:	4b09      	ldr	r3, [pc, #36]	; (800a09c <_dtoa_r+0xbd4>)
 800a076:	f7ff ba95 	b.w	80095a4 <_dtoa_r+0xdc>
 800a07a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f47f aa6e 	bne.w	800955e <_dtoa_r+0x96>
 800a082:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <_dtoa_r+0xbd8>)
 800a084:	f7ff ba8e 	b.w	80095a4 <_dtoa_r+0xdc>
 800a088:	9b02      	ldr	r3, [sp, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	dcae      	bgt.n	8009fec <_dtoa_r+0xb24>
 800a08e:	9b06      	ldr	r3, [sp, #24]
 800a090:	2b02      	cmp	r3, #2
 800a092:	f73f aea8 	bgt.w	8009de6 <_dtoa_r+0x91e>
 800a096:	e7a9      	b.n	8009fec <_dtoa_r+0xb24>
 800a098:	0800c2d8 	.word	0x0800c2d8
 800a09c:	0800c0dc 	.word	0x0800c0dc
 800a0a0:	0800c259 	.word	0x0800c259

0800a0a4 <rshift>:
 800a0a4:	6903      	ldr	r3, [r0, #16]
 800a0a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a0aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a0b2:	f100 0414 	add.w	r4, r0, #20
 800a0b6:	dd45      	ble.n	800a144 <rshift+0xa0>
 800a0b8:	f011 011f 	ands.w	r1, r1, #31
 800a0bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0c4:	d10c      	bne.n	800a0e0 <rshift+0x3c>
 800a0c6:	f100 0710 	add.w	r7, r0, #16
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	42b1      	cmp	r1, r6
 800a0ce:	d334      	bcc.n	800a13a <rshift+0x96>
 800a0d0:	1a9b      	subs	r3, r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	1eea      	subs	r2, r5, #3
 800a0d6:	4296      	cmp	r6, r2
 800a0d8:	bf38      	it	cc
 800a0da:	2300      	movcc	r3, #0
 800a0dc:	4423      	add	r3, r4
 800a0de:	e015      	b.n	800a10c <rshift+0x68>
 800a0e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a0e4:	f1c1 0820 	rsb	r8, r1, #32
 800a0e8:	40cf      	lsrs	r7, r1
 800a0ea:	f105 0e04 	add.w	lr, r5, #4
 800a0ee:	46a1      	mov	r9, r4
 800a0f0:	4576      	cmp	r6, lr
 800a0f2:	46f4      	mov	ip, lr
 800a0f4:	d815      	bhi.n	800a122 <rshift+0x7e>
 800a0f6:	1a9a      	subs	r2, r3, r2
 800a0f8:	0092      	lsls	r2, r2, #2
 800a0fa:	3a04      	subs	r2, #4
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	42ae      	cmp	r6, r5
 800a100:	bf38      	it	cc
 800a102:	2200      	movcc	r2, #0
 800a104:	18a3      	adds	r3, r4, r2
 800a106:	50a7      	str	r7, [r4, r2]
 800a108:	b107      	cbz	r7, 800a10c <rshift+0x68>
 800a10a:	3304      	adds	r3, #4
 800a10c:	1b1a      	subs	r2, r3, r4
 800a10e:	42a3      	cmp	r3, r4
 800a110:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a114:	bf08      	it	eq
 800a116:	2300      	moveq	r3, #0
 800a118:	6102      	str	r2, [r0, #16]
 800a11a:	bf08      	it	eq
 800a11c:	6143      	streq	r3, [r0, #20]
 800a11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a122:	f8dc c000 	ldr.w	ip, [ip]
 800a126:	fa0c fc08 	lsl.w	ip, ip, r8
 800a12a:	ea4c 0707 	orr.w	r7, ip, r7
 800a12e:	f849 7b04 	str.w	r7, [r9], #4
 800a132:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a136:	40cf      	lsrs	r7, r1
 800a138:	e7da      	b.n	800a0f0 <rshift+0x4c>
 800a13a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a13e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a142:	e7c3      	b.n	800a0cc <rshift+0x28>
 800a144:	4623      	mov	r3, r4
 800a146:	e7e1      	b.n	800a10c <rshift+0x68>

0800a148 <__hexdig_fun>:
 800a148:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a14c:	2b09      	cmp	r3, #9
 800a14e:	d802      	bhi.n	800a156 <__hexdig_fun+0xe>
 800a150:	3820      	subs	r0, #32
 800a152:	b2c0      	uxtb	r0, r0
 800a154:	4770      	bx	lr
 800a156:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a15a:	2b05      	cmp	r3, #5
 800a15c:	d801      	bhi.n	800a162 <__hexdig_fun+0x1a>
 800a15e:	3847      	subs	r0, #71	; 0x47
 800a160:	e7f7      	b.n	800a152 <__hexdig_fun+0xa>
 800a162:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a166:	2b05      	cmp	r3, #5
 800a168:	d801      	bhi.n	800a16e <__hexdig_fun+0x26>
 800a16a:	3827      	subs	r0, #39	; 0x27
 800a16c:	e7f1      	b.n	800a152 <__hexdig_fun+0xa>
 800a16e:	2000      	movs	r0, #0
 800a170:	4770      	bx	lr
	...

0800a174 <__gethex>:
 800a174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a178:	ed2d 8b02 	vpush	{d8}
 800a17c:	b089      	sub	sp, #36	; 0x24
 800a17e:	ee08 0a10 	vmov	s16, r0
 800a182:	9304      	str	r3, [sp, #16]
 800a184:	4bb4      	ldr	r3, [pc, #720]	; (800a458 <__gethex+0x2e4>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	4618      	mov	r0, r3
 800a18c:	468b      	mov	fp, r1
 800a18e:	4690      	mov	r8, r2
 800a190:	f7f6 f81e 	bl	80001d0 <strlen>
 800a194:	9b01      	ldr	r3, [sp, #4]
 800a196:	f8db 2000 	ldr.w	r2, [fp]
 800a19a:	4403      	add	r3, r0
 800a19c:	4682      	mov	sl, r0
 800a19e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a1a2:	9305      	str	r3, [sp, #20]
 800a1a4:	1c93      	adds	r3, r2, #2
 800a1a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a1aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a1ae:	32fe      	adds	r2, #254	; 0xfe
 800a1b0:	18d1      	adds	r1, r2, r3
 800a1b2:	461f      	mov	r7, r3
 800a1b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1b8:	9100      	str	r1, [sp, #0]
 800a1ba:	2830      	cmp	r0, #48	; 0x30
 800a1bc:	d0f8      	beq.n	800a1b0 <__gethex+0x3c>
 800a1be:	f7ff ffc3 	bl	800a148 <__hexdig_fun>
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d13a      	bne.n	800a23e <__gethex+0xca>
 800a1c8:	9901      	ldr	r1, [sp, #4]
 800a1ca:	4652      	mov	r2, sl
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f001 f937 	bl	800b440 <strncmp>
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d168      	bne.n	800a2aa <__gethex+0x136>
 800a1d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a1dc:	eb07 060a 	add.w	r6, r7, sl
 800a1e0:	f7ff ffb2 	bl	800a148 <__hexdig_fun>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d062      	beq.n	800a2ae <__gethex+0x13a>
 800a1e8:	4633      	mov	r3, r6
 800a1ea:	7818      	ldrb	r0, [r3, #0]
 800a1ec:	2830      	cmp	r0, #48	; 0x30
 800a1ee:	461f      	mov	r7, r3
 800a1f0:	f103 0301 	add.w	r3, r3, #1
 800a1f4:	d0f9      	beq.n	800a1ea <__gethex+0x76>
 800a1f6:	f7ff ffa7 	bl	800a148 <__hexdig_fun>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	fab0 f480 	clz	r4, r0
 800a200:	0964      	lsrs	r4, r4, #5
 800a202:	4635      	mov	r5, r6
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	463a      	mov	r2, r7
 800a208:	4616      	mov	r6, r2
 800a20a:	3201      	adds	r2, #1
 800a20c:	7830      	ldrb	r0, [r6, #0]
 800a20e:	f7ff ff9b 	bl	800a148 <__hexdig_fun>
 800a212:	2800      	cmp	r0, #0
 800a214:	d1f8      	bne.n	800a208 <__gethex+0x94>
 800a216:	9901      	ldr	r1, [sp, #4]
 800a218:	4652      	mov	r2, sl
 800a21a:	4630      	mov	r0, r6
 800a21c:	f001 f910 	bl	800b440 <strncmp>
 800a220:	b980      	cbnz	r0, 800a244 <__gethex+0xd0>
 800a222:	b94d      	cbnz	r5, 800a238 <__gethex+0xc4>
 800a224:	eb06 050a 	add.w	r5, r6, sl
 800a228:	462a      	mov	r2, r5
 800a22a:	4616      	mov	r6, r2
 800a22c:	3201      	adds	r2, #1
 800a22e:	7830      	ldrb	r0, [r6, #0]
 800a230:	f7ff ff8a 	bl	800a148 <__hexdig_fun>
 800a234:	2800      	cmp	r0, #0
 800a236:	d1f8      	bne.n	800a22a <__gethex+0xb6>
 800a238:	1bad      	subs	r5, r5, r6
 800a23a:	00ad      	lsls	r5, r5, #2
 800a23c:	e004      	b.n	800a248 <__gethex+0xd4>
 800a23e:	2400      	movs	r4, #0
 800a240:	4625      	mov	r5, r4
 800a242:	e7e0      	b.n	800a206 <__gethex+0x92>
 800a244:	2d00      	cmp	r5, #0
 800a246:	d1f7      	bne.n	800a238 <__gethex+0xc4>
 800a248:	7833      	ldrb	r3, [r6, #0]
 800a24a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a24e:	2b50      	cmp	r3, #80	; 0x50
 800a250:	d13b      	bne.n	800a2ca <__gethex+0x156>
 800a252:	7873      	ldrb	r3, [r6, #1]
 800a254:	2b2b      	cmp	r3, #43	; 0x2b
 800a256:	d02c      	beq.n	800a2b2 <__gethex+0x13e>
 800a258:	2b2d      	cmp	r3, #45	; 0x2d
 800a25a:	d02e      	beq.n	800a2ba <__gethex+0x146>
 800a25c:	1c71      	adds	r1, r6, #1
 800a25e:	f04f 0900 	mov.w	r9, #0
 800a262:	7808      	ldrb	r0, [r1, #0]
 800a264:	f7ff ff70 	bl	800a148 <__hexdig_fun>
 800a268:	1e43      	subs	r3, r0, #1
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b18      	cmp	r3, #24
 800a26e:	d82c      	bhi.n	800a2ca <__gethex+0x156>
 800a270:	f1a0 0210 	sub.w	r2, r0, #16
 800a274:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a278:	f7ff ff66 	bl	800a148 <__hexdig_fun>
 800a27c:	1e43      	subs	r3, r0, #1
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b18      	cmp	r3, #24
 800a282:	d91d      	bls.n	800a2c0 <__gethex+0x14c>
 800a284:	f1b9 0f00 	cmp.w	r9, #0
 800a288:	d000      	beq.n	800a28c <__gethex+0x118>
 800a28a:	4252      	negs	r2, r2
 800a28c:	4415      	add	r5, r2
 800a28e:	f8cb 1000 	str.w	r1, [fp]
 800a292:	b1e4      	cbz	r4, 800a2ce <__gethex+0x15a>
 800a294:	9b00      	ldr	r3, [sp, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	bf14      	ite	ne
 800a29a:	2700      	movne	r7, #0
 800a29c:	2706      	moveq	r7, #6
 800a29e:	4638      	mov	r0, r7
 800a2a0:	b009      	add	sp, #36	; 0x24
 800a2a2:	ecbd 8b02 	vpop	{d8}
 800a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2aa:	463e      	mov	r6, r7
 800a2ac:	4625      	mov	r5, r4
 800a2ae:	2401      	movs	r4, #1
 800a2b0:	e7ca      	b.n	800a248 <__gethex+0xd4>
 800a2b2:	f04f 0900 	mov.w	r9, #0
 800a2b6:	1cb1      	adds	r1, r6, #2
 800a2b8:	e7d3      	b.n	800a262 <__gethex+0xee>
 800a2ba:	f04f 0901 	mov.w	r9, #1
 800a2be:	e7fa      	b.n	800a2b6 <__gethex+0x142>
 800a2c0:	230a      	movs	r3, #10
 800a2c2:	fb03 0202 	mla	r2, r3, r2, r0
 800a2c6:	3a10      	subs	r2, #16
 800a2c8:	e7d4      	b.n	800a274 <__gethex+0x100>
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	e7df      	b.n	800a28e <__gethex+0x11a>
 800a2ce:	1bf3      	subs	r3, r6, r7
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	2b07      	cmp	r3, #7
 800a2d6:	dc0b      	bgt.n	800a2f0 <__gethex+0x17c>
 800a2d8:	ee18 0a10 	vmov	r0, s16
 800a2dc:	f000 fa74 	bl	800a7c8 <_Balloc>
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	b940      	cbnz	r0, 800a2f6 <__gethex+0x182>
 800a2e4:	4b5d      	ldr	r3, [pc, #372]	; (800a45c <__gethex+0x2e8>)
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	21de      	movs	r1, #222	; 0xde
 800a2ea:	485d      	ldr	r0, [pc, #372]	; (800a460 <__gethex+0x2ec>)
 800a2ec:	f001 f8ca 	bl	800b484 <__assert_func>
 800a2f0:	3101      	adds	r1, #1
 800a2f2:	105b      	asrs	r3, r3, #1
 800a2f4:	e7ee      	b.n	800a2d4 <__gethex+0x160>
 800a2f6:	f100 0914 	add.w	r9, r0, #20
 800a2fa:	f04f 0b00 	mov.w	fp, #0
 800a2fe:	f1ca 0301 	rsb	r3, sl, #1
 800a302:	f8cd 9008 	str.w	r9, [sp, #8]
 800a306:	f8cd b000 	str.w	fp, [sp]
 800a30a:	9306      	str	r3, [sp, #24]
 800a30c:	42b7      	cmp	r7, r6
 800a30e:	d340      	bcc.n	800a392 <__gethex+0x21e>
 800a310:	9802      	ldr	r0, [sp, #8]
 800a312:	9b00      	ldr	r3, [sp, #0]
 800a314:	f840 3b04 	str.w	r3, [r0], #4
 800a318:	eba0 0009 	sub.w	r0, r0, r9
 800a31c:	1080      	asrs	r0, r0, #2
 800a31e:	0146      	lsls	r6, r0, #5
 800a320:	6120      	str	r0, [r4, #16]
 800a322:	4618      	mov	r0, r3
 800a324:	f000 fb42 	bl	800a9ac <__hi0bits>
 800a328:	1a30      	subs	r0, r6, r0
 800a32a:	f8d8 6000 	ldr.w	r6, [r8]
 800a32e:	42b0      	cmp	r0, r6
 800a330:	dd63      	ble.n	800a3fa <__gethex+0x286>
 800a332:	1b87      	subs	r7, r0, r6
 800a334:	4639      	mov	r1, r7
 800a336:	4620      	mov	r0, r4
 800a338:	f000 fee6 	bl	800b108 <__any_on>
 800a33c:	4682      	mov	sl, r0
 800a33e:	b1a8      	cbz	r0, 800a36c <__gethex+0x1f8>
 800a340:	1e7b      	subs	r3, r7, #1
 800a342:	1159      	asrs	r1, r3, #5
 800a344:	f003 021f 	and.w	r2, r3, #31
 800a348:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a34c:	f04f 0a01 	mov.w	sl, #1
 800a350:	fa0a f202 	lsl.w	r2, sl, r2
 800a354:	420a      	tst	r2, r1
 800a356:	d009      	beq.n	800a36c <__gethex+0x1f8>
 800a358:	4553      	cmp	r3, sl
 800a35a:	dd05      	ble.n	800a368 <__gethex+0x1f4>
 800a35c:	1eb9      	subs	r1, r7, #2
 800a35e:	4620      	mov	r0, r4
 800a360:	f000 fed2 	bl	800b108 <__any_on>
 800a364:	2800      	cmp	r0, #0
 800a366:	d145      	bne.n	800a3f4 <__gethex+0x280>
 800a368:	f04f 0a02 	mov.w	sl, #2
 800a36c:	4639      	mov	r1, r7
 800a36e:	4620      	mov	r0, r4
 800a370:	f7ff fe98 	bl	800a0a4 <rshift>
 800a374:	443d      	add	r5, r7
 800a376:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a37a:	42ab      	cmp	r3, r5
 800a37c:	da4c      	bge.n	800a418 <__gethex+0x2a4>
 800a37e:	ee18 0a10 	vmov	r0, s16
 800a382:	4621      	mov	r1, r4
 800a384:	f000 fa60 	bl	800a848 <_Bfree>
 800a388:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a38a:	2300      	movs	r3, #0
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	27a3      	movs	r7, #163	; 0xa3
 800a390:	e785      	b.n	800a29e <__gethex+0x12a>
 800a392:	1e73      	subs	r3, r6, #1
 800a394:	9a05      	ldr	r2, [sp, #20]
 800a396:	9303      	str	r3, [sp, #12]
 800a398:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d019      	beq.n	800a3d4 <__gethex+0x260>
 800a3a0:	f1bb 0f20 	cmp.w	fp, #32
 800a3a4:	d107      	bne.n	800a3b6 <__gethex+0x242>
 800a3a6:	9b02      	ldr	r3, [sp, #8]
 800a3a8:	9a00      	ldr	r2, [sp, #0]
 800a3aa:	f843 2b04 	str.w	r2, [r3], #4
 800a3ae:	9302      	str	r3, [sp, #8]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	469b      	mov	fp, r3
 800a3b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a3ba:	f7ff fec5 	bl	800a148 <__hexdig_fun>
 800a3be:	9b00      	ldr	r3, [sp, #0]
 800a3c0:	f000 000f 	and.w	r0, r0, #15
 800a3c4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a3c8:	4303      	orrs	r3, r0
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	f10b 0b04 	add.w	fp, fp, #4
 800a3d0:	9b03      	ldr	r3, [sp, #12]
 800a3d2:	e00d      	b.n	800a3f0 <__gethex+0x27c>
 800a3d4:	9b03      	ldr	r3, [sp, #12]
 800a3d6:	9a06      	ldr	r2, [sp, #24]
 800a3d8:	4413      	add	r3, r2
 800a3da:	42bb      	cmp	r3, r7
 800a3dc:	d3e0      	bcc.n	800a3a0 <__gethex+0x22c>
 800a3de:	4618      	mov	r0, r3
 800a3e0:	9901      	ldr	r1, [sp, #4]
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	4652      	mov	r2, sl
 800a3e6:	f001 f82b 	bl	800b440 <strncmp>
 800a3ea:	9b07      	ldr	r3, [sp, #28]
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d1d7      	bne.n	800a3a0 <__gethex+0x22c>
 800a3f0:	461e      	mov	r6, r3
 800a3f2:	e78b      	b.n	800a30c <__gethex+0x198>
 800a3f4:	f04f 0a03 	mov.w	sl, #3
 800a3f8:	e7b8      	b.n	800a36c <__gethex+0x1f8>
 800a3fa:	da0a      	bge.n	800a412 <__gethex+0x29e>
 800a3fc:	1a37      	subs	r7, r6, r0
 800a3fe:	4621      	mov	r1, r4
 800a400:	ee18 0a10 	vmov	r0, s16
 800a404:	463a      	mov	r2, r7
 800a406:	f000 fc3b 	bl	800ac80 <__lshift>
 800a40a:	1bed      	subs	r5, r5, r7
 800a40c:	4604      	mov	r4, r0
 800a40e:	f100 0914 	add.w	r9, r0, #20
 800a412:	f04f 0a00 	mov.w	sl, #0
 800a416:	e7ae      	b.n	800a376 <__gethex+0x202>
 800a418:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a41c:	42a8      	cmp	r0, r5
 800a41e:	dd72      	ble.n	800a506 <__gethex+0x392>
 800a420:	1b45      	subs	r5, r0, r5
 800a422:	42ae      	cmp	r6, r5
 800a424:	dc36      	bgt.n	800a494 <__gethex+0x320>
 800a426:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d02a      	beq.n	800a484 <__gethex+0x310>
 800a42e:	2b03      	cmp	r3, #3
 800a430:	d02c      	beq.n	800a48c <__gethex+0x318>
 800a432:	2b01      	cmp	r3, #1
 800a434:	d11c      	bne.n	800a470 <__gethex+0x2fc>
 800a436:	42ae      	cmp	r6, r5
 800a438:	d11a      	bne.n	800a470 <__gethex+0x2fc>
 800a43a:	2e01      	cmp	r6, #1
 800a43c:	d112      	bne.n	800a464 <__gethex+0x2f0>
 800a43e:	9a04      	ldr	r2, [sp, #16]
 800a440:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a444:	6013      	str	r3, [r2, #0]
 800a446:	2301      	movs	r3, #1
 800a448:	6123      	str	r3, [r4, #16]
 800a44a:	f8c9 3000 	str.w	r3, [r9]
 800a44e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a450:	2762      	movs	r7, #98	; 0x62
 800a452:	601c      	str	r4, [r3, #0]
 800a454:	e723      	b.n	800a29e <__gethex+0x12a>
 800a456:	bf00      	nop
 800a458:	0800c350 	.word	0x0800c350
 800a45c:	0800c2d8 	.word	0x0800c2d8
 800a460:	0800c2e9 	.word	0x0800c2e9
 800a464:	1e71      	subs	r1, r6, #1
 800a466:	4620      	mov	r0, r4
 800a468:	f000 fe4e 	bl	800b108 <__any_on>
 800a46c:	2800      	cmp	r0, #0
 800a46e:	d1e6      	bne.n	800a43e <__gethex+0x2ca>
 800a470:	ee18 0a10 	vmov	r0, s16
 800a474:	4621      	mov	r1, r4
 800a476:	f000 f9e7 	bl	800a848 <_Bfree>
 800a47a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a47c:	2300      	movs	r3, #0
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	2750      	movs	r7, #80	; 0x50
 800a482:	e70c      	b.n	800a29e <__gethex+0x12a>
 800a484:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1f2      	bne.n	800a470 <__gethex+0x2fc>
 800a48a:	e7d8      	b.n	800a43e <__gethex+0x2ca>
 800a48c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1d5      	bne.n	800a43e <__gethex+0x2ca>
 800a492:	e7ed      	b.n	800a470 <__gethex+0x2fc>
 800a494:	1e6f      	subs	r7, r5, #1
 800a496:	f1ba 0f00 	cmp.w	sl, #0
 800a49a:	d131      	bne.n	800a500 <__gethex+0x38c>
 800a49c:	b127      	cbz	r7, 800a4a8 <__gethex+0x334>
 800a49e:	4639      	mov	r1, r7
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 fe31 	bl	800b108 <__any_on>
 800a4a6:	4682      	mov	sl, r0
 800a4a8:	117b      	asrs	r3, r7, #5
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a4b0:	f007 071f 	and.w	r7, r7, #31
 800a4b4:	fa01 f707 	lsl.w	r7, r1, r7
 800a4b8:	421f      	tst	r7, r3
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4620      	mov	r0, r4
 800a4be:	bf18      	it	ne
 800a4c0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a4c4:	1b76      	subs	r6, r6, r5
 800a4c6:	f7ff fded 	bl	800a0a4 <rshift>
 800a4ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4ce:	2702      	movs	r7, #2
 800a4d0:	f1ba 0f00 	cmp.w	sl, #0
 800a4d4:	d048      	beq.n	800a568 <__gethex+0x3f4>
 800a4d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d015      	beq.n	800a50a <__gethex+0x396>
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d017      	beq.n	800a512 <__gethex+0x39e>
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d109      	bne.n	800a4fa <__gethex+0x386>
 800a4e6:	f01a 0f02 	tst.w	sl, #2
 800a4ea:	d006      	beq.n	800a4fa <__gethex+0x386>
 800a4ec:	f8d9 0000 	ldr.w	r0, [r9]
 800a4f0:	ea4a 0a00 	orr.w	sl, sl, r0
 800a4f4:	f01a 0f01 	tst.w	sl, #1
 800a4f8:	d10e      	bne.n	800a518 <__gethex+0x3a4>
 800a4fa:	f047 0710 	orr.w	r7, r7, #16
 800a4fe:	e033      	b.n	800a568 <__gethex+0x3f4>
 800a500:	f04f 0a01 	mov.w	sl, #1
 800a504:	e7d0      	b.n	800a4a8 <__gethex+0x334>
 800a506:	2701      	movs	r7, #1
 800a508:	e7e2      	b.n	800a4d0 <__gethex+0x35c>
 800a50a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a50c:	f1c3 0301 	rsb	r3, r3, #1
 800a510:	9315      	str	r3, [sp, #84]	; 0x54
 800a512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a514:	2b00      	cmp	r3, #0
 800a516:	d0f0      	beq.n	800a4fa <__gethex+0x386>
 800a518:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a51c:	f104 0314 	add.w	r3, r4, #20
 800a520:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a524:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a528:	f04f 0c00 	mov.w	ip, #0
 800a52c:	4618      	mov	r0, r3
 800a52e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a532:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a536:	d01c      	beq.n	800a572 <__gethex+0x3fe>
 800a538:	3201      	adds	r2, #1
 800a53a:	6002      	str	r2, [r0, #0]
 800a53c:	2f02      	cmp	r7, #2
 800a53e:	f104 0314 	add.w	r3, r4, #20
 800a542:	d13f      	bne.n	800a5c4 <__gethex+0x450>
 800a544:	f8d8 2000 	ldr.w	r2, [r8]
 800a548:	3a01      	subs	r2, #1
 800a54a:	42b2      	cmp	r2, r6
 800a54c:	d10a      	bne.n	800a564 <__gethex+0x3f0>
 800a54e:	1171      	asrs	r1, r6, #5
 800a550:	2201      	movs	r2, #1
 800a552:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a556:	f006 061f 	and.w	r6, r6, #31
 800a55a:	fa02 f606 	lsl.w	r6, r2, r6
 800a55e:	421e      	tst	r6, r3
 800a560:	bf18      	it	ne
 800a562:	4617      	movne	r7, r2
 800a564:	f047 0720 	orr.w	r7, r7, #32
 800a568:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a56a:	601c      	str	r4, [r3, #0]
 800a56c:	9b04      	ldr	r3, [sp, #16]
 800a56e:	601d      	str	r5, [r3, #0]
 800a570:	e695      	b.n	800a29e <__gethex+0x12a>
 800a572:	4299      	cmp	r1, r3
 800a574:	f843 cc04 	str.w	ip, [r3, #-4]
 800a578:	d8d8      	bhi.n	800a52c <__gethex+0x3b8>
 800a57a:	68a3      	ldr	r3, [r4, #8]
 800a57c:	459b      	cmp	fp, r3
 800a57e:	db19      	blt.n	800a5b4 <__gethex+0x440>
 800a580:	6861      	ldr	r1, [r4, #4]
 800a582:	ee18 0a10 	vmov	r0, s16
 800a586:	3101      	adds	r1, #1
 800a588:	f000 f91e 	bl	800a7c8 <_Balloc>
 800a58c:	4681      	mov	r9, r0
 800a58e:	b918      	cbnz	r0, 800a598 <__gethex+0x424>
 800a590:	4b1a      	ldr	r3, [pc, #104]	; (800a5fc <__gethex+0x488>)
 800a592:	4602      	mov	r2, r0
 800a594:	2184      	movs	r1, #132	; 0x84
 800a596:	e6a8      	b.n	800a2ea <__gethex+0x176>
 800a598:	6922      	ldr	r2, [r4, #16]
 800a59a:	3202      	adds	r2, #2
 800a59c:	f104 010c 	add.w	r1, r4, #12
 800a5a0:	0092      	lsls	r2, r2, #2
 800a5a2:	300c      	adds	r0, #12
 800a5a4:	f7fd f8b2 	bl	800770c <memcpy>
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	ee18 0a10 	vmov	r0, s16
 800a5ae:	f000 f94b 	bl	800a848 <_Bfree>
 800a5b2:	464c      	mov	r4, r9
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	1c5a      	adds	r2, r3, #1
 800a5b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5bc:	6122      	str	r2, [r4, #16]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	615a      	str	r2, [r3, #20]
 800a5c2:	e7bb      	b.n	800a53c <__gethex+0x3c8>
 800a5c4:	6922      	ldr	r2, [r4, #16]
 800a5c6:	455a      	cmp	r2, fp
 800a5c8:	dd0b      	ble.n	800a5e2 <__gethex+0x46e>
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f7ff fd69 	bl	800a0a4 <rshift>
 800a5d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5d6:	3501      	adds	r5, #1
 800a5d8:	42ab      	cmp	r3, r5
 800a5da:	f6ff aed0 	blt.w	800a37e <__gethex+0x20a>
 800a5de:	2701      	movs	r7, #1
 800a5e0:	e7c0      	b.n	800a564 <__gethex+0x3f0>
 800a5e2:	f016 061f 	ands.w	r6, r6, #31
 800a5e6:	d0fa      	beq.n	800a5de <__gethex+0x46a>
 800a5e8:	4453      	add	r3, sl
 800a5ea:	f1c6 0620 	rsb	r6, r6, #32
 800a5ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a5f2:	f000 f9db 	bl	800a9ac <__hi0bits>
 800a5f6:	42b0      	cmp	r0, r6
 800a5f8:	dbe7      	blt.n	800a5ca <__gethex+0x456>
 800a5fa:	e7f0      	b.n	800a5de <__gethex+0x46a>
 800a5fc:	0800c2d8 	.word	0x0800c2d8

0800a600 <L_shift>:
 800a600:	f1c2 0208 	rsb	r2, r2, #8
 800a604:	0092      	lsls	r2, r2, #2
 800a606:	b570      	push	{r4, r5, r6, lr}
 800a608:	f1c2 0620 	rsb	r6, r2, #32
 800a60c:	6843      	ldr	r3, [r0, #4]
 800a60e:	6804      	ldr	r4, [r0, #0]
 800a610:	fa03 f506 	lsl.w	r5, r3, r6
 800a614:	432c      	orrs	r4, r5
 800a616:	40d3      	lsrs	r3, r2
 800a618:	6004      	str	r4, [r0, #0]
 800a61a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a61e:	4288      	cmp	r0, r1
 800a620:	d3f4      	bcc.n	800a60c <L_shift+0xc>
 800a622:	bd70      	pop	{r4, r5, r6, pc}

0800a624 <__match>:
 800a624:	b530      	push	{r4, r5, lr}
 800a626:	6803      	ldr	r3, [r0, #0]
 800a628:	3301      	adds	r3, #1
 800a62a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a62e:	b914      	cbnz	r4, 800a636 <__match+0x12>
 800a630:	6003      	str	r3, [r0, #0]
 800a632:	2001      	movs	r0, #1
 800a634:	bd30      	pop	{r4, r5, pc}
 800a636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a63a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a63e:	2d19      	cmp	r5, #25
 800a640:	bf98      	it	ls
 800a642:	3220      	addls	r2, #32
 800a644:	42a2      	cmp	r2, r4
 800a646:	d0f0      	beq.n	800a62a <__match+0x6>
 800a648:	2000      	movs	r0, #0
 800a64a:	e7f3      	b.n	800a634 <__match+0x10>

0800a64c <__hexnan>:
 800a64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a650:	680b      	ldr	r3, [r1, #0]
 800a652:	115e      	asrs	r6, r3, #5
 800a654:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a658:	f013 031f 	ands.w	r3, r3, #31
 800a65c:	b087      	sub	sp, #28
 800a65e:	bf18      	it	ne
 800a660:	3604      	addne	r6, #4
 800a662:	2500      	movs	r5, #0
 800a664:	1f37      	subs	r7, r6, #4
 800a666:	4690      	mov	r8, r2
 800a668:	6802      	ldr	r2, [r0, #0]
 800a66a:	9301      	str	r3, [sp, #4]
 800a66c:	4682      	mov	sl, r0
 800a66e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a672:	46b9      	mov	r9, r7
 800a674:	463c      	mov	r4, r7
 800a676:	9502      	str	r5, [sp, #8]
 800a678:	46ab      	mov	fp, r5
 800a67a:	7851      	ldrb	r1, [r2, #1]
 800a67c:	1c53      	adds	r3, r2, #1
 800a67e:	9303      	str	r3, [sp, #12]
 800a680:	b341      	cbz	r1, 800a6d4 <__hexnan+0x88>
 800a682:	4608      	mov	r0, r1
 800a684:	9205      	str	r2, [sp, #20]
 800a686:	9104      	str	r1, [sp, #16]
 800a688:	f7ff fd5e 	bl	800a148 <__hexdig_fun>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d14f      	bne.n	800a730 <__hexnan+0xe4>
 800a690:	9904      	ldr	r1, [sp, #16]
 800a692:	9a05      	ldr	r2, [sp, #20]
 800a694:	2920      	cmp	r1, #32
 800a696:	d818      	bhi.n	800a6ca <__hexnan+0x7e>
 800a698:	9b02      	ldr	r3, [sp, #8]
 800a69a:	459b      	cmp	fp, r3
 800a69c:	dd13      	ble.n	800a6c6 <__hexnan+0x7a>
 800a69e:	454c      	cmp	r4, r9
 800a6a0:	d206      	bcs.n	800a6b0 <__hexnan+0x64>
 800a6a2:	2d07      	cmp	r5, #7
 800a6a4:	dc04      	bgt.n	800a6b0 <__hexnan+0x64>
 800a6a6:	462a      	mov	r2, r5
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f7ff ffa8 	bl	800a600 <L_shift>
 800a6b0:	4544      	cmp	r4, r8
 800a6b2:	d950      	bls.n	800a756 <__hexnan+0x10a>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	f1a4 0904 	sub.w	r9, r4, #4
 800a6ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6be:	f8cd b008 	str.w	fp, [sp, #8]
 800a6c2:	464c      	mov	r4, r9
 800a6c4:	461d      	mov	r5, r3
 800a6c6:	9a03      	ldr	r2, [sp, #12]
 800a6c8:	e7d7      	b.n	800a67a <__hexnan+0x2e>
 800a6ca:	2929      	cmp	r1, #41	; 0x29
 800a6cc:	d156      	bne.n	800a77c <__hexnan+0x130>
 800a6ce:	3202      	adds	r2, #2
 800a6d0:	f8ca 2000 	str.w	r2, [sl]
 800a6d4:	f1bb 0f00 	cmp.w	fp, #0
 800a6d8:	d050      	beq.n	800a77c <__hexnan+0x130>
 800a6da:	454c      	cmp	r4, r9
 800a6dc:	d206      	bcs.n	800a6ec <__hexnan+0xa0>
 800a6de:	2d07      	cmp	r5, #7
 800a6e0:	dc04      	bgt.n	800a6ec <__hexnan+0xa0>
 800a6e2:	462a      	mov	r2, r5
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7ff ff8a 	bl	800a600 <L_shift>
 800a6ec:	4544      	cmp	r4, r8
 800a6ee:	d934      	bls.n	800a75a <__hexnan+0x10e>
 800a6f0:	f1a8 0204 	sub.w	r2, r8, #4
 800a6f4:	4623      	mov	r3, r4
 800a6f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6fa:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6fe:	429f      	cmp	r7, r3
 800a700:	d2f9      	bcs.n	800a6f6 <__hexnan+0xaa>
 800a702:	1b3b      	subs	r3, r7, r4
 800a704:	f023 0303 	bic.w	r3, r3, #3
 800a708:	3304      	adds	r3, #4
 800a70a:	3401      	adds	r4, #1
 800a70c:	3e03      	subs	r6, #3
 800a70e:	42b4      	cmp	r4, r6
 800a710:	bf88      	it	hi
 800a712:	2304      	movhi	r3, #4
 800a714:	4443      	add	r3, r8
 800a716:	2200      	movs	r2, #0
 800a718:	f843 2b04 	str.w	r2, [r3], #4
 800a71c:	429f      	cmp	r7, r3
 800a71e:	d2fb      	bcs.n	800a718 <__hexnan+0xcc>
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	b91b      	cbnz	r3, 800a72c <__hexnan+0xe0>
 800a724:	4547      	cmp	r7, r8
 800a726:	d127      	bne.n	800a778 <__hexnan+0x12c>
 800a728:	2301      	movs	r3, #1
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	2005      	movs	r0, #5
 800a72e:	e026      	b.n	800a77e <__hexnan+0x132>
 800a730:	3501      	adds	r5, #1
 800a732:	2d08      	cmp	r5, #8
 800a734:	f10b 0b01 	add.w	fp, fp, #1
 800a738:	dd06      	ble.n	800a748 <__hexnan+0xfc>
 800a73a:	4544      	cmp	r4, r8
 800a73c:	d9c3      	bls.n	800a6c6 <__hexnan+0x7a>
 800a73e:	2300      	movs	r3, #0
 800a740:	f844 3c04 	str.w	r3, [r4, #-4]
 800a744:	2501      	movs	r5, #1
 800a746:	3c04      	subs	r4, #4
 800a748:	6822      	ldr	r2, [r4, #0]
 800a74a:	f000 000f 	and.w	r0, r0, #15
 800a74e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a752:	6022      	str	r2, [r4, #0]
 800a754:	e7b7      	b.n	800a6c6 <__hexnan+0x7a>
 800a756:	2508      	movs	r5, #8
 800a758:	e7b5      	b.n	800a6c6 <__hexnan+0x7a>
 800a75a:	9b01      	ldr	r3, [sp, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d0df      	beq.n	800a720 <__hexnan+0xd4>
 800a760:	f04f 32ff 	mov.w	r2, #4294967295
 800a764:	f1c3 0320 	rsb	r3, r3, #32
 800a768:	fa22 f303 	lsr.w	r3, r2, r3
 800a76c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a770:	401a      	ands	r2, r3
 800a772:	f846 2c04 	str.w	r2, [r6, #-4]
 800a776:	e7d3      	b.n	800a720 <__hexnan+0xd4>
 800a778:	3f04      	subs	r7, #4
 800a77a:	e7d1      	b.n	800a720 <__hexnan+0xd4>
 800a77c:	2004      	movs	r0, #4
 800a77e:	b007      	add	sp, #28
 800a780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a784 <_localeconv_r>:
 800a784:	4800      	ldr	r0, [pc, #0]	; (800a788 <_localeconv_r+0x4>)
 800a786:	4770      	bx	lr
 800a788:	20000164 	.word	0x20000164

0800a78c <__ascii_mbtowc>:
 800a78c:	b082      	sub	sp, #8
 800a78e:	b901      	cbnz	r1, 800a792 <__ascii_mbtowc+0x6>
 800a790:	a901      	add	r1, sp, #4
 800a792:	b142      	cbz	r2, 800a7a6 <__ascii_mbtowc+0x1a>
 800a794:	b14b      	cbz	r3, 800a7aa <__ascii_mbtowc+0x1e>
 800a796:	7813      	ldrb	r3, [r2, #0]
 800a798:	600b      	str	r3, [r1, #0]
 800a79a:	7812      	ldrb	r2, [r2, #0]
 800a79c:	1e10      	subs	r0, r2, #0
 800a79e:	bf18      	it	ne
 800a7a0:	2001      	movne	r0, #1
 800a7a2:	b002      	add	sp, #8
 800a7a4:	4770      	bx	lr
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	e7fb      	b.n	800a7a2 <__ascii_mbtowc+0x16>
 800a7aa:	f06f 0001 	mvn.w	r0, #1
 800a7ae:	e7f8      	b.n	800a7a2 <__ascii_mbtowc+0x16>

0800a7b0 <__malloc_lock>:
 800a7b0:	4801      	ldr	r0, [pc, #4]	; (800a7b8 <__malloc_lock+0x8>)
 800a7b2:	f000 be98 	b.w	800b4e6 <__retarget_lock_acquire_recursive>
 800a7b6:	bf00      	nop
 800a7b8:	200008b0 	.word	0x200008b0

0800a7bc <__malloc_unlock>:
 800a7bc:	4801      	ldr	r0, [pc, #4]	; (800a7c4 <__malloc_unlock+0x8>)
 800a7be:	f000 be93 	b.w	800b4e8 <__retarget_lock_release_recursive>
 800a7c2:	bf00      	nop
 800a7c4:	200008b0 	.word	0x200008b0

0800a7c8 <_Balloc>:
 800a7c8:	b570      	push	{r4, r5, r6, lr}
 800a7ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	460d      	mov	r5, r1
 800a7d0:	b976      	cbnz	r6, 800a7f0 <_Balloc+0x28>
 800a7d2:	2010      	movs	r0, #16
 800a7d4:	f7fc ff92 	bl	80076fc <malloc>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	6260      	str	r0, [r4, #36]	; 0x24
 800a7dc:	b920      	cbnz	r0, 800a7e8 <_Balloc+0x20>
 800a7de:	4b18      	ldr	r3, [pc, #96]	; (800a840 <_Balloc+0x78>)
 800a7e0:	4818      	ldr	r0, [pc, #96]	; (800a844 <_Balloc+0x7c>)
 800a7e2:	2166      	movs	r1, #102	; 0x66
 800a7e4:	f000 fe4e 	bl	800b484 <__assert_func>
 800a7e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7ec:	6006      	str	r6, [r0, #0]
 800a7ee:	60c6      	str	r6, [r0, #12]
 800a7f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7f2:	68f3      	ldr	r3, [r6, #12]
 800a7f4:	b183      	cbz	r3, 800a818 <_Balloc+0x50>
 800a7f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7fe:	b9b8      	cbnz	r0, 800a830 <_Balloc+0x68>
 800a800:	2101      	movs	r1, #1
 800a802:	fa01 f605 	lsl.w	r6, r1, r5
 800a806:	1d72      	adds	r2, r6, #5
 800a808:	0092      	lsls	r2, r2, #2
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 fc9d 	bl	800b14a <_calloc_r>
 800a810:	b160      	cbz	r0, 800a82c <_Balloc+0x64>
 800a812:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a816:	e00e      	b.n	800a836 <_Balloc+0x6e>
 800a818:	2221      	movs	r2, #33	; 0x21
 800a81a:	2104      	movs	r1, #4
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 fc94 	bl	800b14a <_calloc_r>
 800a822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a824:	60f0      	str	r0, [r6, #12]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e4      	bne.n	800a7f6 <_Balloc+0x2e>
 800a82c:	2000      	movs	r0, #0
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	6802      	ldr	r2, [r0, #0]
 800a832:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a836:	2300      	movs	r3, #0
 800a838:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a83c:	e7f7      	b.n	800a82e <_Balloc+0x66>
 800a83e:	bf00      	nop
 800a840:	0800c266 	.word	0x0800c266
 800a844:	0800c364 	.word	0x0800c364

0800a848 <_Bfree>:
 800a848:	b570      	push	{r4, r5, r6, lr}
 800a84a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a84c:	4605      	mov	r5, r0
 800a84e:	460c      	mov	r4, r1
 800a850:	b976      	cbnz	r6, 800a870 <_Bfree+0x28>
 800a852:	2010      	movs	r0, #16
 800a854:	f7fc ff52 	bl	80076fc <malloc>
 800a858:	4602      	mov	r2, r0
 800a85a:	6268      	str	r0, [r5, #36]	; 0x24
 800a85c:	b920      	cbnz	r0, 800a868 <_Bfree+0x20>
 800a85e:	4b09      	ldr	r3, [pc, #36]	; (800a884 <_Bfree+0x3c>)
 800a860:	4809      	ldr	r0, [pc, #36]	; (800a888 <_Bfree+0x40>)
 800a862:	218a      	movs	r1, #138	; 0x8a
 800a864:	f000 fe0e 	bl	800b484 <__assert_func>
 800a868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a86c:	6006      	str	r6, [r0, #0]
 800a86e:	60c6      	str	r6, [r0, #12]
 800a870:	b13c      	cbz	r4, 800a882 <_Bfree+0x3a>
 800a872:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a874:	6862      	ldr	r2, [r4, #4]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a87c:	6021      	str	r1, [r4, #0]
 800a87e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	0800c266 	.word	0x0800c266
 800a888:	0800c364 	.word	0x0800c364

0800a88c <__multadd>:
 800a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	690d      	ldr	r5, [r1, #16]
 800a892:	4607      	mov	r7, r0
 800a894:	460c      	mov	r4, r1
 800a896:	461e      	mov	r6, r3
 800a898:	f101 0c14 	add.w	ip, r1, #20
 800a89c:	2000      	movs	r0, #0
 800a89e:	f8dc 3000 	ldr.w	r3, [ip]
 800a8a2:	b299      	uxth	r1, r3
 800a8a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a8a8:	0c1e      	lsrs	r6, r3, #16
 800a8aa:	0c0b      	lsrs	r3, r1, #16
 800a8ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a8b0:	b289      	uxth	r1, r1
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8b8:	4285      	cmp	r5, r0
 800a8ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a8be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8c2:	dcec      	bgt.n	800a89e <__multadd+0x12>
 800a8c4:	b30e      	cbz	r6, 800a90a <__multadd+0x7e>
 800a8c6:	68a3      	ldr	r3, [r4, #8]
 800a8c8:	42ab      	cmp	r3, r5
 800a8ca:	dc19      	bgt.n	800a900 <__multadd+0x74>
 800a8cc:	6861      	ldr	r1, [r4, #4]
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	3101      	adds	r1, #1
 800a8d2:	f7ff ff79 	bl	800a7c8 <_Balloc>
 800a8d6:	4680      	mov	r8, r0
 800a8d8:	b928      	cbnz	r0, 800a8e6 <__multadd+0x5a>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	4b0c      	ldr	r3, [pc, #48]	; (800a910 <__multadd+0x84>)
 800a8de:	480d      	ldr	r0, [pc, #52]	; (800a914 <__multadd+0x88>)
 800a8e0:	21b5      	movs	r1, #181	; 0xb5
 800a8e2:	f000 fdcf 	bl	800b484 <__assert_func>
 800a8e6:	6922      	ldr	r2, [r4, #16]
 800a8e8:	3202      	adds	r2, #2
 800a8ea:	f104 010c 	add.w	r1, r4, #12
 800a8ee:	0092      	lsls	r2, r2, #2
 800a8f0:	300c      	adds	r0, #12
 800a8f2:	f7fc ff0b 	bl	800770c <memcpy>
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	f7ff ffa5 	bl	800a848 <_Bfree>
 800a8fe:	4644      	mov	r4, r8
 800a900:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a904:	3501      	adds	r5, #1
 800a906:	615e      	str	r6, [r3, #20]
 800a908:	6125      	str	r5, [r4, #16]
 800a90a:	4620      	mov	r0, r4
 800a90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a910:	0800c2d8 	.word	0x0800c2d8
 800a914:	0800c364 	.word	0x0800c364

0800a918 <__s2b>:
 800a918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a91c:	460c      	mov	r4, r1
 800a91e:	4615      	mov	r5, r2
 800a920:	461f      	mov	r7, r3
 800a922:	2209      	movs	r2, #9
 800a924:	3308      	adds	r3, #8
 800a926:	4606      	mov	r6, r0
 800a928:	fb93 f3f2 	sdiv	r3, r3, r2
 800a92c:	2100      	movs	r1, #0
 800a92e:	2201      	movs	r2, #1
 800a930:	429a      	cmp	r2, r3
 800a932:	db09      	blt.n	800a948 <__s2b+0x30>
 800a934:	4630      	mov	r0, r6
 800a936:	f7ff ff47 	bl	800a7c8 <_Balloc>
 800a93a:	b940      	cbnz	r0, 800a94e <__s2b+0x36>
 800a93c:	4602      	mov	r2, r0
 800a93e:	4b19      	ldr	r3, [pc, #100]	; (800a9a4 <__s2b+0x8c>)
 800a940:	4819      	ldr	r0, [pc, #100]	; (800a9a8 <__s2b+0x90>)
 800a942:	21ce      	movs	r1, #206	; 0xce
 800a944:	f000 fd9e 	bl	800b484 <__assert_func>
 800a948:	0052      	lsls	r2, r2, #1
 800a94a:	3101      	adds	r1, #1
 800a94c:	e7f0      	b.n	800a930 <__s2b+0x18>
 800a94e:	9b08      	ldr	r3, [sp, #32]
 800a950:	6143      	str	r3, [r0, #20]
 800a952:	2d09      	cmp	r5, #9
 800a954:	f04f 0301 	mov.w	r3, #1
 800a958:	6103      	str	r3, [r0, #16]
 800a95a:	dd16      	ble.n	800a98a <__s2b+0x72>
 800a95c:	f104 0909 	add.w	r9, r4, #9
 800a960:	46c8      	mov	r8, r9
 800a962:	442c      	add	r4, r5
 800a964:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a968:	4601      	mov	r1, r0
 800a96a:	3b30      	subs	r3, #48	; 0x30
 800a96c:	220a      	movs	r2, #10
 800a96e:	4630      	mov	r0, r6
 800a970:	f7ff ff8c 	bl	800a88c <__multadd>
 800a974:	45a0      	cmp	r8, r4
 800a976:	d1f5      	bne.n	800a964 <__s2b+0x4c>
 800a978:	f1a5 0408 	sub.w	r4, r5, #8
 800a97c:	444c      	add	r4, r9
 800a97e:	1b2d      	subs	r5, r5, r4
 800a980:	1963      	adds	r3, r4, r5
 800a982:	42bb      	cmp	r3, r7
 800a984:	db04      	blt.n	800a990 <__s2b+0x78>
 800a986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a98a:	340a      	adds	r4, #10
 800a98c:	2509      	movs	r5, #9
 800a98e:	e7f6      	b.n	800a97e <__s2b+0x66>
 800a990:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a994:	4601      	mov	r1, r0
 800a996:	3b30      	subs	r3, #48	; 0x30
 800a998:	220a      	movs	r2, #10
 800a99a:	4630      	mov	r0, r6
 800a99c:	f7ff ff76 	bl	800a88c <__multadd>
 800a9a0:	e7ee      	b.n	800a980 <__s2b+0x68>
 800a9a2:	bf00      	nop
 800a9a4:	0800c2d8 	.word	0x0800c2d8
 800a9a8:	0800c364 	.word	0x0800c364

0800a9ac <__hi0bits>:
 800a9ac:	0c03      	lsrs	r3, r0, #16
 800a9ae:	041b      	lsls	r3, r3, #16
 800a9b0:	b9d3      	cbnz	r3, 800a9e8 <__hi0bits+0x3c>
 800a9b2:	0400      	lsls	r0, r0, #16
 800a9b4:	2310      	movs	r3, #16
 800a9b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a9ba:	bf04      	itt	eq
 800a9bc:	0200      	lsleq	r0, r0, #8
 800a9be:	3308      	addeq	r3, #8
 800a9c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a9c4:	bf04      	itt	eq
 800a9c6:	0100      	lsleq	r0, r0, #4
 800a9c8:	3304      	addeq	r3, #4
 800a9ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a9ce:	bf04      	itt	eq
 800a9d0:	0080      	lsleq	r0, r0, #2
 800a9d2:	3302      	addeq	r3, #2
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	db05      	blt.n	800a9e4 <__hi0bits+0x38>
 800a9d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9dc:	f103 0301 	add.w	r3, r3, #1
 800a9e0:	bf08      	it	eq
 800a9e2:	2320      	moveq	r3, #32
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	4770      	bx	lr
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e7e4      	b.n	800a9b6 <__hi0bits+0xa>

0800a9ec <__lo0bits>:
 800a9ec:	6803      	ldr	r3, [r0, #0]
 800a9ee:	f013 0207 	ands.w	r2, r3, #7
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	d00b      	beq.n	800aa0e <__lo0bits+0x22>
 800a9f6:	07da      	lsls	r2, r3, #31
 800a9f8:	d423      	bmi.n	800aa42 <__lo0bits+0x56>
 800a9fa:	0798      	lsls	r0, r3, #30
 800a9fc:	bf49      	itett	mi
 800a9fe:	085b      	lsrmi	r3, r3, #1
 800aa00:	089b      	lsrpl	r3, r3, #2
 800aa02:	2001      	movmi	r0, #1
 800aa04:	600b      	strmi	r3, [r1, #0]
 800aa06:	bf5c      	itt	pl
 800aa08:	600b      	strpl	r3, [r1, #0]
 800aa0a:	2002      	movpl	r0, #2
 800aa0c:	4770      	bx	lr
 800aa0e:	b298      	uxth	r0, r3
 800aa10:	b9a8      	cbnz	r0, 800aa3e <__lo0bits+0x52>
 800aa12:	0c1b      	lsrs	r3, r3, #16
 800aa14:	2010      	movs	r0, #16
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	b90a      	cbnz	r2, 800aa1e <__lo0bits+0x32>
 800aa1a:	3008      	adds	r0, #8
 800aa1c:	0a1b      	lsrs	r3, r3, #8
 800aa1e:	071a      	lsls	r2, r3, #28
 800aa20:	bf04      	itt	eq
 800aa22:	091b      	lsreq	r3, r3, #4
 800aa24:	3004      	addeq	r0, #4
 800aa26:	079a      	lsls	r2, r3, #30
 800aa28:	bf04      	itt	eq
 800aa2a:	089b      	lsreq	r3, r3, #2
 800aa2c:	3002      	addeq	r0, #2
 800aa2e:	07da      	lsls	r2, r3, #31
 800aa30:	d403      	bmi.n	800aa3a <__lo0bits+0x4e>
 800aa32:	085b      	lsrs	r3, r3, #1
 800aa34:	f100 0001 	add.w	r0, r0, #1
 800aa38:	d005      	beq.n	800aa46 <__lo0bits+0x5a>
 800aa3a:	600b      	str	r3, [r1, #0]
 800aa3c:	4770      	bx	lr
 800aa3e:	4610      	mov	r0, r2
 800aa40:	e7e9      	b.n	800aa16 <__lo0bits+0x2a>
 800aa42:	2000      	movs	r0, #0
 800aa44:	4770      	bx	lr
 800aa46:	2020      	movs	r0, #32
 800aa48:	4770      	bx	lr
	...

0800aa4c <__i2b>:
 800aa4c:	b510      	push	{r4, lr}
 800aa4e:	460c      	mov	r4, r1
 800aa50:	2101      	movs	r1, #1
 800aa52:	f7ff feb9 	bl	800a7c8 <_Balloc>
 800aa56:	4602      	mov	r2, r0
 800aa58:	b928      	cbnz	r0, 800aa66 <__i2b+0x1a>
 800aa5a:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <__i2b+0x24>)
 800aa5c:	4805      	ldr	r0, [pc, #20]	; (800aa74 <__i2b+0x28>)
 800aa5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa62:	f000 fd0f 	bl	800b484 <__assert_func>
 800aa66:	2301      	movs	r3, #1
 800aa68:	6144      	str	r4, [r0, #20]
 800aa6a:	6103      	str	r3, [r0, #16]
 800aa6c:	bd10      	pop	{r4, pc}
 800aa6e:	bf00      	nop
 800aa70:	0800c2d8 	.word	0x0800c2d8
 800aa74:	0800c364 	.word	0x0800c364

0800aa78 <__multiply>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	4691      	mov	r9, r2
 800aa7e:	690a      	ldr	r2, [r1, #16]
 800aa80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	bfb8      	it	lt
 800aa88:	460b      	movlt	r3, r1
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	bfbc      	itt	lt
 800aa8e:	464c      	movlt	r4, r9
 800aa90:	4699      	movlt	r9, r3
 800aa92:	6927      	ldr	r7, [r4, #16]
 800aa94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa98:	68a3      	ldr	r3, [r4, #8]
 800aa9a:	6861      	ldr	r1, [r4, #4]
 800aa9c:	eb07 060a 	add.w	r6, r7, sl
 800aaa0:	42b3      	cmp	r3, r6
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	bfb8      	it	lt
 800aaa6:	3101      	addlt	r1, #1
 800aaa8:	f7ff fe8e 	bl	800a7c8 <_Balloc>
 800aaac:	b930      	cbnz	r0, 800aabc <__multiply+0x44>
 800aaae:	4602      	mov	r2, r0
 800aab0:	4b44      	ldr	r3, [pc, #272]	; (800abc4 <__multiply+0x14c>)
 800aab2:	4845      	ldr	r0, [pc, #276]	; (800abc8 <__multiply+0x150>)
 800aab4:	f240 115d 	movw	r1, #349	; 0x15d
 800aab8:	f000 fce4 	bl	800b484 <__assert_func>
 800aabc:	f100 0514 	add.w	r5, r0, #20
 800aac0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aac4:	462b      	mov	r3, r5
 800aac6:	2200      	movs	r2, #0
 800aac8:	4543      	cmp	r3, r8
 800aaca:	d321      	bcc.n	800ab10 <__multiply+0x98>
 800aacc:	f104 0314 	add.w	r3, r4, #20
 800aad0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aad4:	f109 0314 	add.w	r3, r9, #20
 800aad8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aadc:	9202      	str	r2, [sp, #8]
 800aade:	1b3a      	subs	r2, r7, r4
 800aae0:	3a15      	subs	r2, #21
 800aae2:	f022 0203 	bic.w	r2, r2, #3
 800aae6:	3204      	adds	r2, #4
 800aae8:	f104 0115 	add.w	r1, r4, #21
 800aaec:	428f      	cmp	r7, r1
 800aaee:	bf38      	it	cc
 800aaf0:	2204      	movcc	r2, #4
 800aaf2:	9201      	str	r2, [sp, #4]
 800aaf4:	9a02      	ldr	r2, [sp, #8]
 800aaf6:	9303      	str	r3, [sp, #12]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d80c      	bhi.n	800ab16 <__multiply+0x9e>
 800aafc:	2e00      	cmp	r6, #0
 800aafe:	dd03      	ble.n	800ab08 <__multiply+0x90>
 800ab00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d05a      	beq.n	800abbe <__multiply+0x146>
 800ab08:	6106      	str	r6, [r0, #16]
 800ab0a:	b005      	add	sp, #20
 800ab0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab10:	f843 2b04 	str.w	r2, [r3], #4
 800ab14:	e7d8      	b.n	800aac8 <__multiply+0x50>
 800ab16:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab1a:	f1ba 0f00 	cmp.w	sl, #0
 800ab1e:	d024      	beq.n	800ab6a <__multiply+0xf2>
 800ab20:	f104 0e14 	add.w	lr, r4, #20
 800ab24:	46a9      	mov	r9, r5
 800ab26:	f04f 0c00 	mov.w	ip, #0
 800ab2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab2e:	f8d9 1000 	ldr.w	r1, [r9]
 800ab32:	fa1f fb82 	uxth.w	fp, r2
 800ab36:	b289      	uxth	r1, r1
 800ab38:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab40:	f8d9 2000 	ldr.w	r2, [r9]
 800ab44:	4461      	add	r1, ip
 800ab46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab4a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab52:	b289      	uxth	r1, r1
 800ab54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab58:	4577      	cmp	r7, lr
 800ab5a:	f849 1b04 	str.w	r1, [r9], #4
 800ab5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab62:	d8e2      	bhi.n	800ab2a <__multiply+0xb2>
 800ab64:	9a01      	ldr	r2, [sp, #4]
 800ab66:	f845 c002 	str.w	ip, [r5, r2]
 800ab6a:	9a03      	ldr	r2, [sp, #12]
 800ab6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab70:	3304      	adds	r3, #4
 800ab72:	f1b9 0f00 	cmp.w	r9, #0
 800ab76:	d020      	beq.n	800abba <__multiply+0x142>
 800ab78:	6829      	ldr	r1, [r5, #0]
 800ab7a:	f104 0c14 	add.w	ip, r4, #20
 800ab7e:	46ae      	mov	lr, r5
 800ab80:	f04f 0a00 	mov.w	sl, #0
 800ab84:	f8bc b000 	ldrh.w	fp, [ip]
 800ab88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab8c:	fb09 220b 	mla	r2, r9, fp, r2
 800ab90:	4492      	add	sl, r2
 800ab92:	b289      	uxth	r1, r1
 800ab94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab98:	f84e 1b04 	str.w	r1, [lr], #4
 800ab9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aba0:	f8be 1000 	ldrh.w	r1, [lr]
 800aba4:	0c12      	lsrs	r2, r2, #16
 800aba6:	fb09 1102 	mla	r1, r9, r2, r1
 800abaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800abae:	4567      	cmp	r7, ip
 800abb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800abb4:	d8e6      	bhi.n	800ab84 <__multiply+0x10c>
 800abb6:	9a01      	ldr	r2, [sp, #4]
 800abb8:	50a9      	str	r1, [r5, r2]
 800abba:	3504      	adds	r5, #4
 800abbc:	e79a      	b.n	800aaf4 <__multiply+0x7c>
 800abbe:	3e01      	subs	r6, #1
 800abc0:	e79c      	b.n	800aafc <__multiply+0x84>
 800abc2:	bf00      	nop
 800abc4:	0800c2d8 	.word	0x0800c2d8
 800abc8:	0800c364 	.word	0x0800c364

0800abcc <__pow5mult>:
 800abcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abd0:	4615      	mov	r5, r2
 800abd2:	f012 0203 	ands.w	r2, r2, #3
 800abd6:	4606      	mov	r6, r0
 800abd8:	460f      	mov	r7, r1
 800abda:	d007      	beq.n	800abec <__pow5mult+0x20>
 800abdc:	4c25      	ldr	r4, [pc, #148]	; (800ac74 <__pow5mult+0xa8>)
 800abde:	3a01      	subs	r2, #1
 800abe0:	2300      	movs	r3, #0
 800abe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abe6:	f7ff fe51 	bl	800a88c <__multadd>
 800abea:	4607      	mov	r7, r0
 800abec:	10ad      	asrs	r5, r5, #2
 800abee:	d03d      	beq.n	800ac6c <__pow5mult+0xa0>
 800abf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800abf2:	b97c      	cbnz	r4, 800ac14 <__pow5mult+0x48>
 800abf4:	2010      	movs	r0, #16
 800abf6:	f7fc fd81 	bl	80076fc <malloc>
 800abfa:	4602      	mov	r2, r0
 800abfc:	6270      	str	r0, [r6, #36]	; 0x24
 800abfe:	b928      	cbnz	r0, 800ac0c <__pow5mult+0x40>
 800ac00:	4b1d      	ldr	r3, [pc, #116]	; (800ac78 <__pow5mult+0xac>)
 800ac02:	481e      	ldr	r0, [pc, #120]	; (800ac7c <__pow5mult+0xb0>)
 800ac04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac08:	f000 fc3c 	bl	800b484 <__assert_func>
 800ac0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac10:	6004      	str	r4, [r0, #0]
 800ac12:	60c4      	str	r4, [r0, #12]
 800ac14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac1c:	b94c      	cbnz	r4, 800ac32 <__pow5mult+0x66>
 800ac1e:	f240 2171 	movw	r1, #625	; 0x271
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7ff ff12 	bl	800aa4c <__i2b>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac2e:	4604      	mov	r4, r0
 800ac30:	6003      	str	r3, [r0, #0]
 800ac32:	f04f 0900 	mov.w	r9, #0
 800ac36:	07eb      	lsls	r3, r5, #31
 800ac38:	d50a      	bpl.n	800ac50 <__pow5mult+0x84>
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	4622      	mov	r2, r4
 800ac3e:	4630      	mov	r0, r6
 800ac40:	f7ff ff1a 	bl	800aa78 <__multiply>
 800ac44:	4639      	mov	r1, r7
 800ac46:	4680      	mov	r8, r0
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f7ff fdfd 	bl	800a848 <_Bfree>
 800ac4e:	4647      	mov	r7, r8
 800ac50:	106d      	asrs	r5, r5, #1
 800ac52:	d00b      	beq.n	800ac6c <__pow5mult+0xa0>
 800ac54:	6820      	ldr	r0, [r4, #0]
 800ac56:	b938      	cbnz	r0, 800ac68 <__pow5mult+0x9c>
 800ac58:	4622      	mov	r2, r4
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f7ff ff0b 	bl	800aa78 <__multiply>
 800ac62:	6020      	str	r0, [r4, #0]
 800ac64:	f8c0 9000 	str.w	r9, [r0]
 800ac68:	4604      	mov	r4, r0
 800ac6a:	e7e4      	b.n	800ac36 <__pow5mult+0x6a>
 800ac6c:	4638      	mov	r0, r7
 800ac6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac72:	bf00      	nop
 800ac74:	0800c4b0 	.word	0x0800c4b0
 800ac78:	0800c266 	.word	0x0800c266
 800ac7c:	0800c364 	.word	0x0800c364

0800ac80 <__lshift>:
 800ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac84:	460c      	mov	r4, r1
 800ac86:	6849      	ldr	r1, [r1, #4]
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac8e:	68a3      	ldr	r3, [r4, #8]
 800ac90:	4607      	mov	r7, r0
 800ac92:	4691      	mov	r9, r2
 800ac94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac98:	f108 0601 	add.w	r6, r8, #1
 800ac9c:	42b3      	cmp	r3, r6
 800ac9e:	db0b      	blt.n	800acb8 <__lshift+0x38>
 800aca0:	4638      	mov	r0, r7
 800aca2:	f7ff fd91 	bl	800a7c8 <_Balloc>
 800aca6:	4605      	mov	r5, r0
 800aca8:	b948      	cbnz	r0, 800acbe <__lshift+0x3e>
 800acaa:	4602      	mov	r2, r0
 800acac:	4b2a      	ldr	r3, [pc, #168]	; (800ad58 <__lshift+0xd8>)
 800acae:	482b      	ldr	r0, [pc, #172]	; (800ad5c <__lshift+0xdc>)
 800acb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800acb4:	f000 fbe6 	bl	800b484 <__assert_func>
 800acb8:	3101      	adds	r1, #1
 800acba:	005b      	lsls	r3, r3, #1
 800acbc:	e7ee      	b.n	800ac9c <__lshift+0x1c>
 800acbe:	2300      	movs	r3, #0
 800acc0:	f100 0114 	add.w	r1, r0, #20
 800acc4:	f100 0210 	add.w	r2, r0, #16
 800acc8:	4618      	mov	r0, r3
 800acca:	4553      	cmp	r3, sl
 800accc:	db37      	blt.n	800ad3e <__lshift+0xbe>
 800acce:	6920      	ldr	r0, [r4, #16]
 800acd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acd4:	f104 0314 	add.w	r3, r4, #20
 800acd8:	f019 091f 	ands.w	r9, r9, #31
 800acdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ace0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ace4:	d02f      	beq.n	800ad46 <__lshift+0xc6>
 800ace6:	f1c9 0e20 	rsb	lr, r9, #32
 800acea:	468a      	mov	sl, r1
 800acec:	f04f 0c00 	mov.w	ip, #0
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	fa02 f209 	lsl.w	r2, r2, r9
 800acf6:	ea42 020c 	orr.w	r2, r2, ip
 800acfa:	f84a 2b04 	str.w	r2, [sl], #4
 800acfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad02:	4298      	cmp	r0, r3
 800ad04:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ad08:	d8f2      	bhi.n	800acf0 <__lshift+0x70>
 800ad0a:	1b03      	subs	r3, r0, r4
 800ad0c:	3b15      	subs	r3, #21
 800ad0e:	f023 0303 	bic.w	r3, r3, #3
 800ad12:	3304      	adds	r3, #4
 800ad14:	f104 0215 	add.w	r2, r4, #21
 800ad18:	4290      	cmp	r0, r2
 800ad1a:	bf38      	it	cc
 800ad1c:	2304      	movcc	r3, #4
 800ad1e:	f841 c003 	str.w	ip, [r1, r3]
 800ad22:	f1bc 0f00 	cmp.w	ip, #0
 800ad26:	d001      	beq.n	800ad2c <__lshift+0xac>
 800ad28:	f108 0602 	add.w	r6, r8, #2
 800ad2c:	3e01      	subs	r6, #1
 800ad2e:	4638      	mov	r0, r7
 800ad30:	612e      	str	r6, [r5, #16]
 800ad32:	4621      	mov	r1, r4
 800ad34:	f7ff fd88 	bl	800a848 <_Bfree>
 800ad38:	4628      	mov	r0, r5
 800ad3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad42:	3301      	adds	r3, #1
 800ad44:	e7c1      	b.n	800acca <__lshift+0x4a>
 800ad46:	3904      	subs	r1, #4
 800ad48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad50:	4298      	cmp	r0, r3
 800ad52:	d8f9      	bhi.n	800ad48 <__lshift+0xc8>
 800ad54:	e7ea      	b.n	800ad2c <__lshift+0xac>
 800ad56:	bf00      	nop
 800ad58:	0800c2d8 	.word	0x0800c2d8
 800ad5c:	0800c364 	.word	0x0800c364

0800ad60 <__mcmp>:
 800ad60:	b530      	push	{r4, r5, lr}
 800ad62:	6902      	ldr	r2, [r0, #16]
 800ad64:	690c      	ldr	r4, [r1, #16]
 800ad66:	1b12      	subs	r2, r2, r4
 800ad68:	d10e      	bne.n	800ad88 <__mcmp+0x28>
 800ad6a:	f100 0314 	add.w	r3, r0, #20
 800ad6e:	3114      	adds	r1, #20
 800ad70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad80:	42a5      	cmp	r5, r4
 800ad82:	d003      	beq.n	800ad8c <__mcmp+0x2c>
 800ad84:	d305      	bcc.n	800ad92 <__mcmp+0x32>
 800ad86:	2201      	movs	r2, #1
 800ad88:	4610      	mov	r0, r2
 800ad8a:	bd30      	pop	{r4, r5, pc}
 800ad8c:	4283      	cmp	r3, r0
 800ad8e:	d3f3      	bcc.n	800ad78 <__mcmp+0x18>
 800ad90:	e7fa      	b.n	800ad88 <__mcmp+0x28>
 800ad92:	f04f 32ff 	mov.w	r2, #4294967295
 800ad96:	e7f7      	b.n	800ad88 <__mcmp+0x28>

0800ad98 <__mdiff>:
 800ad98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9c:	460c      	mov	r4, r1
 800ad9e:	4606      	mov	r6, r0
 800ada0:	4611      	mov	r1, r2
 800ada2:	4620      	mov	r0, r4
 800ada4:	4690      	mov	r8, r2
 800ada6:	f7ff ffdb 	bl	800ad60 <__mcmp>
 800adaa:	1e05      	subs	r5, r0, #0
 800adac:	d110      	bne.n	800add0 <__mdiff+0x38>
 800adae:	4629      	mov	r1, r5
 800adb0:	4630      	mov	r0, r6
 800adb2:	f7ff fd09 	bl	800a7c8 <_Balloc>
 800adb6:	b930      	cbnz	r0, 800adc6 <__mdiff+0x2e>
 800adb8:	4b3a      	ldr	r3, [pc, #232]	; (800aea4 <__mdiff+0x10c>)
 800adba:	4602      	mov	r2, r0
 800adbc:	f240 2132 	movw	r1, #562	; 0x232
 800adc0:	4839      	ldr	r0, [pc, #228]	; (800aea8 <__mdiff+0x110>)
 800adc2:	f000 fb5f 	bl	800b484 <__assert_func>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add0:	bfa4      	itt	ge
 800add2:	4643      	movge	r3, r8
 800add4:	46a0      	movge	r8, r4
 800add6:	4630      	mov	r0, r6
 800add8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800addc:	bfa6      	itte	ge
 800adde:	461c      	movge	r4, r3
 800ade0:	2500      	movge	r5, #0
 800ade2:	2501      	movlt	r5, #1
 800ade4:	f7ff fcf0 	bl	800a7c8 <_Balloc>
 800ade8:	b920      	cbnz	r0, 800adf4 <__mdiff+0x5c>
 800adea:	4b2e      	ldr	r3, [pc, #184]	; (800aea4 <__mdiff+0x10c>)
 800adec:	4602      	mov	r2, r0
 800adee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800adf2:	e7e5      	b.n	800adc0 <__mdiff+0x28>
 800adf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800adf8:	6926      	ldr	r6, [r4, #16]
 800adfa:	60c5      	str	r5, [r0, #12]
 800adfc:	f104 0914 	add.w	r9, r4, #20
 800ae00:	f108 0514 	add.w	r5, r8, #20
 800ae04:	f100 0e14 	add.w	lr, r0, #20
 800ae08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae10:	f108 0210 	add.w	r2, r8, #16
 800ae14:	46f2      	mov	sl, lr
 800ae16:	2100      	movs	r1, #0
 800ae18:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae20:	fa1f f883 	uxth.w	r8, r3
 800ae24:	fa11 f18b 	uxtah	r1, r1, fp
 800ae28:	0c1b      	lsrs	r3, r3, #16
 800ae2a:	eba1 0808 	sub.w	r8, r1, r8
 800ae2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae36:	fa1f f888 	uxth.w	r8, r8
 800ae3a:	1419      	asrs	r1, r3, #16
 800ae3c:	454e      	cmp	r6, r9
 800ae3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae42:	f84a 3b04 	str.w	r3, [sl], #4
 800ae46:	d8e7      	bhi.n	800ae18 <__mdiff+0x80>
 800ae48:	1b33      	subs	r3, r6, r4
 800ae4a:	3b15      	subs	r3, #21
 800ae4c:	f023 0303 	bic.w	r3, r3, #3
 800ae50:	3304      	adds	r3, #4
 800ae52:	3415      	adds	r4, #21
 800ae54:	42a6      	cmp	r6, r4
 800ae56:	bf38      	it	cc
 800ae58:	2304      	movcc	r3, #4
 800ae5a:	441d      	add	r5, r3
 800ae5c:	4473      	add	r3, lr
 800ae5e:	469e      	mov	lr, r3
 800ae60:	462e      	mov	r6, r5
 800ae62:	4566      	cmp	r6, ip
 800ae64:	d30e      	bcc.n	800ae84 <__mdiff+0xec>
 800ae66:	f10c 0203 	add.w	r2, ip, #3
 800ae6a:	1b52      	subs	r2, r2, r5
 800ae6c:	f022 0203 	bic.w	r2, r2, #3
 800ae70:	3d03      	subs	r5, #3
 800ae72:	45ac      	cmp	ip, r5
 800ae74:	bf38      	it	cc
 800ae76:	2200      	movcc	r2, #0
 800ae78:	441a      	add	r2, r3
 800ae7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae7e:	b17b      	cbz	r3, 800aea0 <__mdiff+0x108>
 800ae80:	6107      	str	r7, [r0, #16]
 800ae82:	e7a3      	b.n	800adcc <__mdiff+0x34>
 800ae84:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae88:	fa11 f288 	uxtah	r2, r1, r8
 800ae8c:	1414      	asrs	r4, r2, #16
 800ae8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae92:	b292      	uxth	r2, r2
 800ae94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae98:	f84e 2b04 	str.w	r2, [lr], #4
 800ae9c:	1421      	asrs	r1, r4, #16
 800ae9e:	e7e0      	b.n	800ae62 <__mdiff+0xca>
 800aea0:	3f01      	subs	r7, #1
 800aea2:	e7ea      	b.n	800ae7a <__mdiff+0xe2>
 800aea4:	0800c2d8 	.word	0x0800c2d8
 800aea8:	0800c364 	.word	0x0800c364

0800aeac <__ulp>:
 800aeac:	b082      	sub	sp, #8
 800aeae:	ed8d 0b00 	vstr	d0, [sp]
 800aeb2:	9b01      	ldr	r3, [sp, #4]
 800aeb4:	4912      	ldr	r1, [pc, #72]	; (800af00 <__ulp+0x54>)
 800aeb6:	4019      	ands	r1, r3
 800aeb8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aebc:	2900      	cmp	r1, #0
 800aebe:	dd05      	ble.n	800aecc <__ulp+0x20>
 800aec0:	2200      	movs	r2, #0
 800aec2:	460b      	mov	r3, r1
 800aec4:	ec43 2b10 	vmov	d0, r2, r3
 800aec8:	b002      	add	sp, #8
 800aeca:	4770      	bx	lr
 800aecc:	4249      	negs	r1, r1
 800aece:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aed2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aed6:	f04f 0200 	mov.w	r2, #0
 800aeda:	f04f 0300 	mov.w	r3, #0
 800aede:	da04      	bge.n	800aeea <__ulp+0x3e>
 800aee0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aee4:	fa41 f300 	asr.w	r3, r1, r0
 800aee8:	e7ec      	b.n	800aec4 <__ulp+0x18>
 800aeea:	f1a0 0114 	sub.w	r1, r0, #20
 800aeee:	291e      	cmp	r1, #30
 800aef0:	bfda      	itte	le
 800aef2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aef6:	fa20 f101 	lsrle.w	r1, r0, r1
 800aefa:	2101      	movgt	r1, #1
 800aefc:	460a      	mov	r2, r1
 800aefe:	e7e1      	b.n	800aec4 <__ulp+0x18>
 800af00:	7ff00000 	.word	0x7ff00000

0800af04 <__b2d>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	6905      	ldr	r5, [r0, #16]
 800af08:	f100 0714 	add.w	r7, r0, #20
 800af0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800af10:	1f2e      	subs	r6, r5, #4
 800af12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800af16:	4620      	mov	r0, r4
 800af18:	f7ff fd48 	bl	800a9ac <__hi0bits>
 800af1c:	f1c0 0320 	rsb	r3, r0, #32
 800af20:	280a      	cmp	r0, #10
 800af22:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800afa0 <__b2d+0x9c>
 800af26:	600b      	str	r3, [r1, #0]
 800af28:	dc14      	bgt.n	800af54 <__b2d+0x50>
 800af2a:	f1c0 0e0b 	rsb	lr, r0, #11
 800af2e:	fa24 f10e 	lsr.w	r1, r4, lr
 800af32:	42b7      	cmp	r7, r6
 800af34:	ea41 030c 	orr.w	r3, r1, ip
 800af38:	bf34      	ite	cc
 800af3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af3e:	2100      	movcs	r1, #0
 800af40:	3015      	adds	r0, #21
 800af42:	fa04 f000 	lsl.w	r0, r4, r0
 800af46:	fa21 f10e 	lsr.w	r1, r1, lr
 800af4a:	ea40 0201 	orr.w	r2, r0, r1
 800af4e:	ec43 2b10 	vmov	d0, r2, r3
 800af52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af54:	42b7      	cmp	r7, r6
 800af56:	bf3a      	itte	cc
 800af58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af5c:	f1a5 0608 	subcc.w	r6, r5, #8
 800af60:	2100      	movcs	r1, #0
 800af62:	380b      	subs	r0, #11
 800af64:	d017      	beq.n	800af96 <__b2d+0x92>
 800af66:	f1c0 0c20 	rsb	ip, r0, #32
 800af6a:	fa04 f500 	lsl.w	r5, r4, r0
 800af6e:	42be      	cmp	r6, r7
 800af70:	fa21 f40c 	lsr.w	r4, r1, ip
 800af74:	ea45 0504 	orr.w	r5, r5, r4
 800af78:	bf8c      	ite	hi
 800af7a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800af7e:	2400      	movls	r4, #0
 800af80:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800af84:	fa01 f000 	lsl.w	r0, r1, r0
 800af88:	fa24 f40c 	lsr.w	r4, r4, ip
 800af8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800af90:	ea40 0204 	orr.w	r2, r0, r4
 800af94:	e7db      	b.n	800af4e <__b2d+0x4a>
 800af96:	ea44 030c 	orr.w	r3, r4, ip
 800af9a:	460a      	mov	r2, r1
 800af9c:	e7d7      	b.n	800af4e <__b2d+0x4a>
 800af9e:	bf00      	nop
 800afa0:	3ff00000 	.word	0x3ff00000

0800afa4 <__d2b>:
 800afa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	4689      	mov	r9, r1
 800afaa:	2101      	movs	r1, #1
 800afac:	ec57 6b10 	vmov	r6, r7, d0
 800afb0:	4690      	mov	r8, r2
 800afb2:	f7ff fc09 	bl	800a7c8 <_Balloc>
 800afb6:	4604      	mov	r4, r0
 800afb8:	b930      	cbnz	r0, 800afc8 <__d2b+0x24>
 800afba:	4602      	mov	r2, r0
 800afbc:	4b25      	ldr	r3, [pc, #148]	; (800b054 <__d2b+0xb0>)
 800afbe:	4826      	ldr	r0, [pc, #152]	; (800b058 <__d2b+0xb4>)
 800afc0:	f240 310a 	movw	r1, #778	; 0x30a
 800afc4:	f000 fa5e 	bl	800b484 <__assert_func>
 800afc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800afcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afd0:	bb35      	cbnz	r5, 800b020 <__d2b+0x7c>
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	d028      	beq.n	800b02a <__d2b+0x86>
 800afd8:	4668      	mov	r0, sp
 800afda:	9600      	str	r6, [sp, #0]
 800afdc:	f7ff fd06 	bl	800a9ec <__lo0bits>
 800afe0:	9900      	ldr	r1, [sp, #0]
 800afe2:	b300      	cbz	r0, 800b026 <__d2b+0x82>
 800afe4:	9a01      	ldr	r2, [sp, #4]
 800afe6:	f1c0 0320 	rsb	r3, r0, #32
 800afea:	fa02 f303 	lsl.w	r3, r2, r3
 800afee:	430b      	orrs	r3, r1
 800aff0:	40c2      	lsrs	r2, r0
 800aff2:	6163      	str	r3, [r4, #20]
 800aff4:	9201      	str	r2, [sp, #4]
 800aff6:	9b01      	ldr	r3, [sp, #4]
 800aff8:	61a3      	str	r3, [r4, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	bf14      	ite	ne
 800affe:	2202      	movne	r2, #2
 800b000:	2201      	moveq	r2, #1
 800b002:	6122      	str	r2, [r4, #16]
 800b004:	b1d5      	cbz	r5, 800b03c <__d2b+0x98>
 800b006:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b00a:	4405      	add	r5, r0
 800b00c:	f8c9 5000 	str.w	r5, [r9]
 800b010:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b014:	f8c8 0000 	str.w	r0, [r8]
 800b018:	4620      	mov	r0, r4
 800b01a:	b003      	add	sp, #12
 800b01c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b024:	e7d5      	b.n	800afd2 <__d2b+0x2e>
 800b026:	6161      	str	r1, [r4, #20]
 800b028:	e7e5      	b.n	800aff6 <__d2b+0x52>
 800b02a:	a801      	add	r0, sp, #4
 800b02c:	f7ff fcde 	bl	800a9ec <__lo0bits>
 800b030:	9b01      	ldr	r3, [sp, #4]
 800b032:	6163      	str	r3, [r4, #20]
 800b034:	2201      	movs	r2, #1
 800b036:	6122      	str	r2, [r4, #16]
 800b038:	3020      	adds	r0, #32
 800b03a:	e7e3      	b.n	800b004 <__d2b+0x60>
 800b03c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b044:	f8c9 0000 	str.w	r0, [r9]
 800b048:	6918      	ldr	r0, [r3, #16]
 800b04a:	f7ff fcaf 	bl	800a9ac <__hi0bits>
 800b04e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b052:	e7df      	b.n	800b014 <__d2b+0x70>
 800b054:	0800c2d8 	.word	0x0800c2d8
 800b058:	0800c364 	.word	0x0800c364

0800b05c <__ratio>:
 800b05c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b060:	4688      	mov	r8, r1
 800b062:	4669      	mov	r1, sp
 800b064:	4681      	mov	r9, r0
 800b066:	f7ff ff4d 	bl	800af04 <__b2d>
 800b06a:	a901      	add	r1, sp, #4
 800b06c:	4640      	mov	r0, r8
 800b06e:	ec55 4b10 	vmov	r4, r5, d0
 800b072:	f7ff ff47 	bl	800af04 <__b2d>
 800b076:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b07a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b07e:	eba3 0c02 	sub.w	ip, r3, r2
 800b082:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b086:	1a9b      	subs	r3, r3, r2
 800b088:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b08c:	ec51 0b10 	vmov	r0, r1, d0
 800b090:	2b00      	cmp	r3, #0
 800b092:	bfd6      	itet	le
 800b094:	460a      	movle	r2, r1
 800b096:	462a      	movgt	r2, r5
 800b098:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b09c:	468b      	mov	fp, r1
 800b09e:	462f      	mov	r7, r5
 800b0a0:	bfd4      	ite	le
 800b0a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b0a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	ee10 2a10 	vmov	r2, s0
 800b0b0:	465b      	mov	r3, fp
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	f7f5 fbca 	bl	800084c <__aeabi_ddiv>
 800b0b8:	ec41 0b10 	vmov	d0, r0, r1
 800b0bc:	b003      	add	sp, #12
 800b0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0c2 <__copybits>:
 800b0c2:	3901      	subs	r1, #1
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	1149      	asrs	r1, r1, #5
 800b0c8:	6914      	ldr	r4, [r2, #16]
 800b0ca:	3101      	adds	r1, #1
 800b0cc:	f102 0314 	add.w	r3, r2, #20
 800b0d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b0d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0d8:	1f05      	subs	r5, r0, #4
 800b0da:	42a3      	cmp	r3, r4
 800b0dc:	d30c      	bcc.n	800b0f8 <__copybits+0x36>
 800b0de:	1aa3      	subs	r3, r4, r2
 800b0e0:	3b11      	subs	r3, #17
 800b0e2:	f023 0303 	bic.w	r3, r3, #3
 800b0e6:	3211      	adds	r2, #17
 800b0e8:	42a2      	cmp	r2, r4
 800b0ea:	bf88      	it	hi
 800b0ec:	2300      	movhi	r3, #0
 800b0ee:	4418      	add	r0, r3
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	4288      	cmp	r0, r1
 800b0f4:	d305      	bcc.n	800b102 <__copybits+0x40>
 800b0f6:	bd70      	pop	{r4, r5, r6, pc}
 800b0f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b0fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800b100:	e7eb      	b.n	800b0da <__copybits+0x18>
 800b102:	f840 3b04 	str.w	r3, [r0], #4
 800b106:	e7f4      	b.n	800b0f2 <__copybits+0x30>

0800b108 <__any_on>:
 800b108:	f100 0214 	add.w	r2, r0, #20
 800b10c:	6900      	ldr	r0, [r0, #16]
 800b10e:	114b      	asrs	r3, r1, #5
 800b110:	4298      	cmp	r0, r3
 800b112:	b510      	push	{r4, lr}
 800b114:	db11      	blt.n	800b13a <__any_on+0x32>
 800b116:	dd0a      	ble.n	800b12e <__any_on+0x26>
 800b118:	f011 011f 	ands.w	r1, r1, #31
 800b11c:	d007      	beq.n	800b12e <__any_on+0x26>
 800b11e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b122:	fa24 f001 	lsr.w	r0, r4, r1
 800b126:	fa00 f101 	lsl.w	r1, r0, r1
 800b12a:	428c      	cmp	r4, r1
 800b12c:	d10b      	bne.n	800b146 <__any_on+0x3e>
 800b12e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b132:	4293      	cmp	r3, r2
 800b134:	d803      	bhi.n	800b13e <__any_on+0x36>
 800b136:	2000      	movs	r0, #0
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	4603      	mov	r3, r0
 800b13c:	e7f7      	b.n	800b12e <__any_on+0x26>
 800b13e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b142:	2900      	cmp	r1, #0
 800b144:	d0f5      	beq.n	800b132 <__any_on+0x2a>
 800b146:	2001      	movs	r0, #1
 800b148:	e7f6      	b.n	800b138 <__any_on+0x30>

0800b14a <_calloc_r>:
 800b14a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b14c:	fba1 2402 	umull	r2, r4, r1, r2
 800b150:	b94c      	cbnz	r4, 800b166 <_calloc_r+0x1c>
 800b152:	4611      	mov	r1, r2
 800b154:	9201      	str	r2, [sp, #4]
 800b156:	f7fc fb5b 	bl	8007810 <_malloc_r>
 800b15a:	9a01      	ldr	r2, [sp, #4]
 800b15c:	4605      	mov	r5, r0
 800b15e:	b930      	cbnz	r0, 800b16e <_calloc_r+0x24>
 800b160:	4628      	mov	r0, r5
 800b162:	b003      	add	sp, #12
 800b164:	bd30      	pop	{r4, r5, pc}
 800b166:	220c      	movs	r2, #12
 800b168:	6002      	str	r2, [r0, #0]
 800b16a:	2500      	movs	r5, #0
 800b16c:	e7f8      	b.n	800b160 <_calloc_r+0x16>
 800b16e:	4621      	mov	r1, r4
 800b170:	f7fc fada 	bl	8007728 <memset>
 800b174:	e7f4      	b.n	800b160 <_calloc_r+0x16>

0800b176 <__ssputs_r>:
 800b176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b17a:	688e      	ldr	r6, [r1, #8]
 800b17c:	429e      	cmp	r6, r3
 800b17e:	4682      	mov	sl, r0
 800b180:	460c      	mov	r4, r1
 800b182:	4690      	mov	r8, r2
 800b184:	461f      	mov	r7, r3
 800b186:	d838      	bhi.n	800b1fa <__ssputs_r+0x84>
 800b188:	898a      	ldrh	r2, [r1, #12]
 800b18a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b18e:	d032      	beq.n	800b1f6 <__ssputs_r+0x80>
 800b190:	6825      	ldr	r5, [r4, #0]
 800b192:	6909      	ldr	r1, [r1, #16]
 800b194:	eba5 0901 	sub.w	r9, r5, r1
 800b198:	6965      	ldr	r5, [r4, #20]
 800b19a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b19e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	444b      	add	r3, r9
 800b1a6:	106d      	asrs	r5, r5, #1
 800b1a8:	429d      	cmp	r5, r3
 800b1aa:	bf38      	it	cc
 800b1ac:	461d      	movcc	r5, r3
 800b1ae:	0553      	lsls	r3, r2, #21
 800b1b0:	d531      	bpl.n	800b216 <__ssputs_r+0xa0>
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	f7fc fb2c 	bl	8007810 <_malloc_r>
 800b1b8:	4606      	mov	r6, r0
 800b1ba:	b950      	cbnz	r0, 800b1d2 <__ssputs_r+0x5c>
 800b1bc:	230c      	movs	r3, #12
 800b1be:	f8ca 3000 	str.w	r3, [sl]
 800b1c2:	89a3      	ldrh	r3, [r4, #12]
 800b1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c8:	81a3      	strh	r3, [r4, #12]
 800b1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d2:	6921      	ldr	r1, [r4, #16]
 800b1d4:	464a      	mov	r2, r9
 800b1d6:	f7fc fa99 	bl	800770c <memcpy>
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e4:	81a3      	strh	r3, [r4, #12]
 800b1e6:	6126      	str	r6, [r4, #16]
 800b1e8:	6165      	str	r5, [r4, #20]
 800b1ea:	444e      	add	r6, r9
 800b1ec:	eba5 0509 	sub.w	r5, r5, r9
 800b1f0:	6026      	str	r6, [r4, #0]
 800b1f2:	60a5      	str	r5, [r4, #8]
 800b1f4:	463e      	mov	r6, r7
 800b1f6:	42be      	cmp	r6, r7
 800b1f8:	d900      	bls.n	800b1fc <__ssputs_r+0x86>
 800b1fa:	463e      	mov	r6, r7
 800b1fc:	6820      	ldr	r0, [r4, #0]
 800b1fe:	4632      	mov	r2, r6
 800b200:	4641      	mov	r1, r8
 800b202:	f000 f972 	bl	800b4ea <memmove>
 800b206:	68a3      	ldr	r3, [r4, #8]
 800b208:	1b9b      	subs	r3, r3, r6
 800b20a:	60a3      	str	r3, [r4, #8]
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	4433      	add	r3, r6
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	2000      	movs	r0, #0
 800b214:	e7db      	b.n	800b1ce <__ssputs_r+0x58>
 800b216:	462a      	mov	r2, r5
 800b218:	f000 f981 	bl	800b51e <_realloc_r>
 800b21c:	4606      	mov	r6, r0
 800b21e:	2800      	cmp	r0, #0
 800b220:	d1e1      	bne.n	800b1e6 <__ssputs_r+0x70>
 800b222:	6921      	ldr	r1, [r4, #16]
 800b224:	4650      	mov	r0, sl
 800b226:	f7fc fa87 	bl	8007738 <_free_r>
 800b22a:	e7c7      	b.n	800b1bc <__ssputs_r+0x46>

0800b22c <_svfiprintf_r>:
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	4698      	mov	r8, r3
 800b232:	898b      	ldrh	r3, [r1, #12]
 800b234:	061b      	lsls	r3, r3, #24
 800b236:	b09d      	sub	sp, #116	; 0x74
 800b238:	4607      	mov	r7, r0
 800b23a:	460d      	mov	r5, r1
 800b23c:	4614      	mov	r4, r2
 800b23e:	d50e      	bpl.n	800b25e <_svfiprintf_r+0x32>
 800b240:	690b      	ldr	r3, [r1, #16]
 800b242:	b963      	cbnz	r3, 800b25e <_svfiprintf_r+0x32>
 800b244:	2140      	movs	r1, #64	; 0x40
 800b246:	f7fc fae3 	bl	8007810 <_malloc_r>
 800b24a:	6028      	str	r0, [r5, #0]
 800b24c:	6128      	str	r0, [r5, #16]
 800b24e:	b920      	cbnz	r0, 800b25a <_svfiprintf_r+0x2e>
 800b250:	230c      	movs	r3, #12
 800b252:	603b      	str	r3, [r7, #0]
 800b254:	f04f 30ff 	mov.w	r0, #4294967295
 800b258:	e0d1      	b.n	800b3fe <_svfiprintf_r+0x1d2>
 800b25a:	2340      	movs	r3, #64	; 0x40
 800b25c:	616b      	str	r3, [r5, #20]
 800b25e:	2300      	movs	r3, #0
 800b260:	9309      	str	r3, [sp, #36]	; 0x24
 800b262:	2320      	movs	r3, #32
 800b264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b268:	f8cd 800c 	str.w	r8, [sp, #12]
 800b26c:	2330      	movs	r3, #48	; 0x30
 800b26e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b418 <_svfiprintf_r+0x1ec>
 800b272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b276:	f04f 0901 	mov.w	r9, #1
 800b27a:	4623      	mov	r3, r4
 800b27c:	469a      	mov	sl, r3
 800b27e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b282:	b10a      	cbz	r2, 800b288 <_svfiprintf_r+0x5c>
 800b284:	2a25      	cmp	r2, #37	; 0x25
 800b286:	d1f9      	bne.n	800b27c <_svfiprintf_r+0x50>
 800b288:	ebba 0b04 	subs.w	fp, sl, r4
 800b28c:	d00b      	beq.n	800b2a6 <_svfiprintf_r+0x7a>
 800b28e:	465b      	mov	r3, fp
 800b290:	4622      	mov	r2, r4
 800b292:	4629      	mov	r1, r5
 800b294:	4638      	mov	r0, r7
 800b296:	f7ff ff6e 	bl	800b176 <__ssputs_r>
 800b29a:	3001      	adds	r0, #1
 800b29c:	f000 80aa 	beq.w	800b3f4 <_svfiprintf_r+0x1c8>
 800b2a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a2:	445a      	add	r2, fp
 800b2a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b2a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 80a2 	beq.w	800b3f4 <_svfiprintf_r+0x1c8>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2ba:	f10a 0a01 	add.w	sl, sl, #1
 800b2be:	9304      	str	r3, [sp, #16]
 800b2c0:	9307      	str	r3, [sp, #28]
 800b2c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2c6:	931a      	str	r3, [sp, #104]	; 0x68
 800b2c8:	4654      	mov	r4, sl
 800b2ca:	2205      	movs	r2, #5
 800b2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d0:	4851      	ldr	r0, [pc, #324]	; (800b418 <_svfiprintf_r+0x1ec>)
 800b2d2:	f7f4 ff85 	bl	80001e0 <memchr>
 800b2d6:	9a04      	ldr	r2, [sp, #16]
 800b2d8:	b9d8      	cbnz	r0, 800b312 <_svfiprintf_r+0xe6>
 800b2da:	06d0      	lsls	r0, r2, #27
 800b2dc:	bf44      	itt	mi
 800b2de:	2320      	movmi	r3, #32
 800b2e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2e4:	0711      	lsls	r1, r2, #28
 800b2e6:	bf44      	itt	mi
 800b2e8:	232b      	movmi	r3, #43	; 0x2b
 800b2ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b2f4:	d015      	beq.n	800b322 <_svfiprintf_r+0xf6>
 800b2f6:	9a07      	ldr	r2, [sp, #28]
 800b2f8:	4654      	mov	r4, sl
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	f04f 0c0a 	mov.w	ip, #10
 800b300:	4621      	mov	r1, r4
 800b302:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b306:	3b30      	subs	r3, #48	; 0x30
 800b308:	2b09      	cmp	r3, #9
 800b30a:	d94e      	bls.n	800b3aa <_svfiprintf_r+0x17e>
 800b30c:	b1b0      	cbz	r0, 800b33c <_svfiprintf_r+0x110>
 800b30e:	9207      	str	r2, [sp, #28]
 800b310:	e014      	b.n	800b33c <_svfiprintf_r+0x110>
 800b312:	eba0 0308 	sub.w	r3, r0, r8
 800b316:	fa09 f303 	lsl.w	r3, r9, r3
 800b31a:	4313      	orrs	r3, r2
 800b31c:	9304      	str	r3, [sp, #16]
 800b31e:	46a2      	mov	sl, r4
 800b320:	e7d2      	b.n	800b2c8 <_svfiprintf_r+0x9c>
 800b322:	9b03      	ldr	r3, [sp, #12]
 800b324:	1d19      	adds	r1, r3, #4
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	9103      	str	r1, [sp, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	bfbb      	ittet	lt
 800b32e:	425b      	neglt	r3, r3
 800b330:	f042 0202 	orrlt.w	r2, r2, #2
 800b334:	9307      	strge	r3, [sp, #28]
 800b336:	9307      	strlt	r3, [sp, #28]
 800b338:	bfb8      	it	lt
 800b33a:	9204      	strlt	r2, [sp, #16]
 800b33c:	7823      	ldrb	r3, [r4, #0]
 800b33e:	2b2e      	cmp	r3, #46	; 0x2e
 800b340:	d10c      	bne.n	800b35c <_svfiprintf_r+0x130>
 800b342:	7863      	ldrb	r3, [r4, #1]
 800b344:	2b2a      	cmp	r3, #42	; 0x2a
 800b346:	d135      	bne.n	800b3b4 <_svfiprintf_r+0x188>
 800b348:	9b03      	ldr	r3, [sp, #12]
 800b34a:	1d1a      	adds	r2, r3, #4
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	9203      	str	r2, [sp, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	bfb8      	it	lt
 800b354:	f04f 33ff 	movlt.w	r3, #4294967295
 800b358:	3402      	adds	r4, #2
 800b35a:	9305      	str	r3, [sp, #20]
 800b35c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b428 <_svfiprintf_r+0x1fc>
 800b360:	7821      	ldrb	r1, [r4, #0]
 800b362:	2203      	movs	r2, #3
 800b364:	4650      	mov	r0, sl
 800b366:	f7f4 ff3b 	bl	80001e0 <memchr>
 800b36a:	b140      	cbz	r0, 800b37e <_svfiprintf_r+0x152>
 800b36c:	2340      	movs	r3, #64	; 0x40
 800b36e:	eba0 000a 	sub.w	r0, r0, sl
 800b372:	fa03 f000 	lsl.w	r0, r3, r0
 800b376:	9b04      	ldr	r3, [sp, #16]
 800b378:	4303      	orrs	r3, r0
 800b37a:	3401      	adds	r4, #1
 800b37c:	9304      	str	r3, [sp, #16]
 800b37e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b382:	4826      	ldr	r0, [pc, #152]	; (800b41c <_svfiprintf_r+0x1f0>)
 800b384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b388:	2206      	movs	r2, #6
 800b38a:	f7f4 ff29 	bl	80001e0 <memchr>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d038      	beq.n	800b404 <_svfiprintf_r+0x1d8>
 800b392:	4b23      	ldr	r3, [pc, #140]	; (800b420 <_svfiprintf_r+0x1f4>)
 800b394:	bb1b      	cbnz	r3, 800b3de <_svfiprintf_r+0x1b2>
 800b396:	9b03      	ldr	r3, [sp, #12]
 800b398:	3307      	adds	r3, #7
 800b39a:	f023 0307 	bic.w	r3, r3, #7
 800b39e:	3308      	adds	r3, #8
 800b3a0:	9303      	str	r3, [sp, #12]
 800b3a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a4:	4433      	add	r3, r6
 800b3a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a8:	e767      	b.n	800b27a <_svfiprintf_r+0x4e>
 800b3aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3ae:	460c      	mov	r4, r1
 800b3b0:	2001      	movs	r0, #1
 800b3b2:	e7a5      	b.n	800b300 <_svfiprintf_r+0xd4>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	3401      	adds	r4, #1
 800b3b8:	9305      	str	r3, [sp, #20]
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	f04f 0c0a 	mov.w	ip, #10
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3c6:	3a30      	subs	r2, #48	; 0x30
 800b3c8:	2a09      	cmp	r2, #9
 800b3ca:	d903      	bls.n	800b3d4 <_svfiprintf_r+0x1a8>
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0c5      	beq.n	800b35c <_svfiprintf_r+0x130>
 800b3d0:	9105      	str	r1, [sp, #20]
 800b3d2:	e7c3      	b.n	800b35c <_svfiprintf_r+0x130>
 800b3d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3d8:	4604      	mov	r4, r0
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e7f0      	b.n	800b3c0 <_svfiprintf_r+0x194>
 800b3de:	ab03      	add	r3, sp, #12
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	462a      	mov	r2, r5
 800b3e4:	4b0f      	ldr	r3, [pc, #60]	; (800b424 <_svfiprintf_r+0x1f8>)
 800b3e6:	a904      	add	r1, sp, #16
 800b3e8:	4638      	mov	r0, r7
 800b3ea:	f7fc fb25 	bl	8007a38 <_printf_float>
 800b3ee:	1c42      	adds	r2, r0, #1
 800b3f0:	4606      	mov	r6, r0
 800b3f2:	d1d6      	bne.n	800b3a2 <_svfiprintf_r+0x176>
 800b3f4:	89ab      	ldrh	r3, [r5, #12]
 800b3f6:	065b      	lsls	r3, r3, #25
 800b3f8:	f53f af2c 	bmi.w	800b254 <_svfiprintf_r+0x28>
 800b3fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3fe:	b01d      	add	sp, #116	; 0x74
 800b400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b404:	ab03      	add	r3, sp, #12
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	462a      	mov	r2, r5
 800b40a:	4b06      	ldr	r3, [pc, #24]	; (800b424 <_svfiprintf_r+0x1f8>)
 800b40c:	a904      	add	r1, sp, #16
 800b40e:	4638      	mov	r0, r7
 800b410:	f7fc fdb6 	bl	8007f80 <_printf_i>
 800b414:	e7eb      	b.n	800b3ee <_svfiprintf_r+0x1c2>
 800b416:	bf00      	nop
 800b418:	0800c4bc 	.word	0x0800c4bc
 800b41c:	0800c4c6 	.word	0x0800c4c6
 800b420:	08007a39 	.word	0x08007a39
 800b424:	0800b177 	.word	0x0800b177
 800b428:	0800c4c2 	.word	0x0800c4c2
 800b42c:	00000000 	.word	0x00000000

0800b430 <nan>:
 800b430:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b438 <nan+0x8>
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	00000000 	.word	0x00000000
 800b43c:	7ff80000 	.word	0x7ff80000

0800b440 <strncmp>:
 800b440:	b510      	push	{r4, lr}
 800b442:	b17a      	cbz	r2, 800b464 <strncmp+0x24>
 800b444:	4603      	mov	r3, r0
 800b446:	3901      	subs	r1, #1
 800b448:	1884      	adds	r4, r0, r2
 800b44a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b44e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b452:	4290      	cmp	r0, r2
 800b454:	d101      	bne.n	800b45a <strncmp+0x1a>
 800b456:	42a3      	cmp	r3, r4
 800b458:	d101      	bne.n	800b45e <strncmp+0x1e>
 800b45a:	1a80      	subs	r0, r0, r2
 800b45c:	bd10      	pop	{r4, pc}
 800b45e:	2800      	cmp	r0, #0
 800b460:	d1f3      	bne.n	800b44a <strncmp+0xa>
 800b462:	e7fa      	b.n	800b45a <strncmp+0x1a>
 800b464:	4610      	mov	r0, r2
 800b466:	e7f9      	b.n	800b45c <strncmp+0x1c>

0800b468 <__ascii_wctomb>:
 800b468:	b149      	cbz	r1, 800b47e <__ascii_wctomb+0x16>
 800b46a:	2aff      	cmp	r2, #255	; 0xff
 800b46c:	bf85      	ittet	hi
 800b46e:	238a      	movhi	r3, #138	; 0x8a
 800b470:	6003      	strhi	r3, [r0, #0]
 800b472:	700a      	strbls	r2, [r1, #0]
 800b474:	f04f 30ff 	movhi.w	r0, #4294967295
 800b478:	bf98      	it	ls
 800b47a:	2001      	movls	r0, #1
 800b47c:	4770      	bx	lr
 800b47e:	4608      	mov	r0, r1
 800b480:	4770      	bx	lr
	...

0800b484 <__assert_func>:
 800b484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b486:	4614      	mov	r4, r2
 800b488:	461a      	mov	r2, r3
 800b48a:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <__assert_func+0x2c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4605      	mov	r5, r0
 800b490:	68d8      	ldr	r0, [r3, #12]
 800b492:	b14c      	cbz	r4, 800b4a8 <__assert_func+0x24>
 800b494:	4b07      	ldr	r3, [pc, #28]	; (800b4b4 <__assert_func+0x30>)
 800b496:	9100      	str	r1, [sp, #0]
 800b498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b49c:	4906      	ldr	r1, [pc, #24]	; (800b4b8 <__assert_func+0x34>)
 800b49e:	462b      	mov	r3, r5
 800b4a0:	f000 f80e 	bl	800b4c0 <fiprintf>
 800b4a4:	f000 fa84 	bl	800b9b0 <abort>
 800b4a8:	4b04      	ldr	r3, [pc, #16]	; (800b4bc <__assert_func+0x38>)
 800b4aa:	461c      	mov	r4, r3
 800b4ac:	e7f3      	b.n	800b496 <__assert_func+0x12>
 800b4ae:	bf00      	nop
 800b4b0:	2000000c 	.word	0x2000000c
 800b4b4:	0800c4cd 	.word	0x0800c4cd
 800b4b8:	0800c4da 	.word	0x0800c4da
 800b4bc:	0800c508 	.word	0x0800c508

0800b4c0 <fiprintf>:
 800b4c0:	b40e      	push	{r1, r2, r3}
 800b4c2:	b503      	push	{r0, r1, lr}
 800b4c4:	4601      	mov	r1, r0
 800b4c6:	ab03      	add	r3, sp, #12
 800b4c8:	4805      	ldr	r0, [pc, #20]	; (800b4e0 <fiprintf+0x20>)
 800b4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ce:	6800      	ldr	r0, [r0, #0]
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	f000 f87d 	bl	800b5d0 <_vfiprintf_r>
 800b4d6:	b002      	add	sp, #8
 800b4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4dc:	b003      	add	sp, #12
 800b4de:	4770      	bx	lr
 800b4e0:	2000000c 	.word	0x2000000c

0800b4e4 <__retarget_lock_init_recursive>:
 800b4e4:	4770      	bx	lr

0800b4e6 <__retarget_lock_acquire_recursive>:
 800b4e6:	4770      	bx	lr

0800b4e8 <__retarget_lock_release_recursive>:
 800b4e8:	4770      	bx	lr

0800b4ea <memmove>:
 800b4ea:	4288      	cmp	r0, r1
 800b4ec:	b510      	push	{r4, lr}
 800b4ee:	eb01 0402 	add.w	r4, r1, r2
 800b4f2:	d902      	bls.n	800b4fa <memmove+0x10>
 800b4f4:	4284      	cmp	r4, r0
 800b4f6:	4623      	mov	r3, r4
 800b4f8:	d807      	bhi.n	800b50a <memmove+0x20>
 800b4fa:	1e43      	subs	r3, r0, #1
 800b4fc:	42a1      	cmp	r1, r4
 800b4fe:	d008      	beq.n	800b512 <memmove+0x28>
 800b500:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b504:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b508:	e7f8      	b.n	800b4fc <memmove+0x12>
 800b50a:	4402      	add	r2, r0
 800b50c:	4601      	mov	r1, r0
 800b50e:	428a      	cmp	r2, r1
 800b510:	d100      	bne.n	800b514 <memmove+0x2a>
 800b512:	bd10      	pop	{r4, pc}
 800b514:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b518:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b51c:	e7f7      	b.n	800b50e <memmove+0x24>

0800b51e <_realloc_r>:
 800b51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b522:	4680      	mov	r8, r0
 800b524:	4614      	mov	r4, r2
 800b526:	460e      	mov	r6, r1
 800b528:	b921      	cbnz	r1, 800b534 <_realloc_r+0x16>
 800b52a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b52e:	4611      	mov	r1, r2
 800b530:	f7fc b96e 	b.w	8007810 <_malloc_r>
 800b534:	b92a      	cbnz	r2, 800b542 <_realloc_r+0x24>
 800b536:	f7fc f8ff 	bl	8007738 <_free_r>
 800b53a:	4625      	mov	r5, r4
 800b53c:	4628      	mov	r0, r5
 800b53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b542:	f000 fc59 	bl	800bdf8 <_malloc_usable_size_r>
 800b546:	4284      	cmp	r4, r0
 800b548:	4607      	mov	r7, r0
 800b54a:	d802      	bhi.n	800b552 <_realloc_r+0x34>
 800b54c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b550:	d812      	bhi.n	800b578 <_realloc_r+0x5a>
 800b552:	4621      	mov	r1, r4
 800b554:	4640      	mov	r0, r8
 800b556:	f7fc f95b 	bl	8007810 <_malloc_r>
 800b55a:	4605      	mov	r5, r0
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d0ed      	beq.n	800b53c <_realloc_r+0x1e>
 800b560:	42bc      	cmp	r4, r7
 800b562:	4622      	mov	r2, r4
 800b564:	4631      	mov	r1, r6
 800b566:	bf28      	it	cs
 800b568:	463a      	movcs	r2, r7
 800b56a:	f7fc f8cf 	bl	800770c <memcpy>
 800b56e:	4631      	mov	r1, r6
 800b570:	4640      	mov	r0, r8
 800b572:	f7fc f8e1 	bl	8007738 <_free_r>
 800b576:	e7e1      	b.n	800b53c <_realloc_r+0x1e>
 800b578:	4635      	mov	r5, r6
 800b57a:	e7df      	b.n	800b53c <_realloc_r+0x1e>

0800b57c <__sfputc_r>:
 800b57c:	6893      	ldr	r3, [r2, #8]
 800b57e:	3b01      	subs	r3, #1
 800b580:	2b00      	cmp	r3, #0
 800b582:	b410      	push	{r4}
 800b584:	6093      	str	r3, [r2, #8]
 800b586:	da08      	bge.n	800b59a <__sfputc_r+0x1e>
 800b588:	6994      	ldr	r4, [r2, #24]
 800b58a:	42a3      	cmp	r3, r4
 800b58c:	db01      	blt.n	800b592 <__sfputc_r+0x16>
 800b58e:	290a      	cmp	r1, #10
 800b590:	d103      	bne.n	800b59a <__sfputc_r+0x1e>
 800b592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b596:	f000 b94b 	b.w	800b830 <__swbuf_r>
 800b59a:	6813      	ldr	r3, [r2, #0]
 800b59c:	1c58      	adds	r0, r3, #1
 800b59e:	6010      	str	r0, [r2, #0]
 800b5a0:	7019      	strb	r1, [r3, #0]
 800b5a2:	4608      	mov	r0, r1
 800b5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <__sfputs_r>:
 800b5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ac:	4606      	mov	r6, r0
 800b5ae:	460f      	mov	r7, r1
 800b5b0:	4614      	mov	r4, r2
 800b5b2:	18d5      	adds	r5, r2, r3
 800b5b4:	42ac      	cmp	r4, r5
 800b5b6:	d101      	bne.n	800b5bc <__sfputs_r+0x12>
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	e007      	b.n	800b5cc <__sfputs_r+0x22>
 800b5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5c0:	463a      	mov	r2, r7
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	f7ff ffda 	bl	800b57c <__sfputc_r>
 800b5c8:	1c43      	adds	r3, r0, #1
 800b5ca:	d1f3      	bne.n	800b5b4 <__sfputs_r+0xa>
 800b5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5d0 <_vfiprintf_r>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	460d      	mov	r5, r1
 800b5d6:	b09d      	sub	sp, #116	; 0x74
 800b5d8:	4614      	mov	r4, r2
 800b5da:	4698      	mov	r8, r3
 800b5dc:	4606      	mov	r6, r0
 800b5de:	b118      	cbz	r0, 800b5e8 <_vfiprintf_r+0x18>
 800b5e0:	6983      	ldr	r3, [r0, #24]
 800b5e2:	b90b      	cbnz	r3, 800b5e8 <_vfiprintf_r+0x18>
 800b5e4:	f000 fb06 	bl	800bbf4 <__sinit>
 800b5e8:	4b89      	ldr	r3, [pc, #548]	; (800b810 <_vfiprintf_r+0x240>)
 800b5ea:	429d      	cmp	r5, r3
 800b5ec:	d11b      	bne.n	800b626 <_vfiprintf_r+0x56>
 800b5ee:	6875      	ldr	r5, [r6, #4]
 800b5f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5f2:	07d9      	lsls	r1, r3, #31
 800b5f4:	d405      	bmi.n	800b602 <_vfiprintf_r+0x32>
 800b5f6:	89ab      	ldrh	r3, [r5, #12]
 800b5f8:	059a      	lsls	r2, r3, #22
 800b5fa:	d402      	bmi.n	800b602 <_vfiprintf_r+0x32>
 800b5fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5fe:	f7ff ff72 	bl	800b4e6 <__retarget_lock_acquire_recursive>
 800b602:	89ab      	ldrh	r3, [r5, #12]
 800b604:	071b      	lsls	r3, r3, #28
 800b606:	d501      	bpl.n	800b60c <_vfiprintf_r+0x3c>
 800b608:	692b      	ldr	r3, [r5, #16]
 800b60a:	b9eb      	cbnz	r3, 800b648 <_vfiprintf_r+0x78>
 800b60c:	4629      	mov	r1, r5
 800b60e:	4630      	mov	r0, r6
 800b610:	f000 f960 	bl	800b8d4 <__swsetup_r>
 800b614:	b1c0      	cbz	r0, 800b648 <_vfiprintf_r+0x78>
 800b616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b618:	07dc      	lsls	r4, r3, #31
 800b61a:	d50e      	bpl.n	800b63a <_vfiprintf_r+0x6a>
 800b61c:	f04f 30ff 	mov.w	r0, #4294967295
 800b620:	b01d      	add	sp, #116	; 0x74
 800b622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b626:	4b7b      	ldr	r3, [pc, #492]	; (800b814 <_vfiprintf_r+0x244>)
 800b628:	429d      	cmp	r5, r3
 800b62a:	d101      	bne.n	800b630 <_vfiprintf_r+0x60>
 800b62c:	68b5      	ldr	r5, [r6, #8]
 800b62e:	e7df      	b.n	800b5f0 <_vfiprintf_r+0x20>
 800b630:	4b79      	ldr	r3, [pc, #484]	; (800b818 <_vfiprintf_r+0x248>)
 800b632:	429d      	cmp	r5, r3
 800b634:	bf08      	it	eq
 800b636:	68f5      	ldreq	r5, [r6, #12]
 800b638:	e7da      	b.n	800b5f0 <_vfiprintf_r+0x20>
 800b63a:	89ab      	ldrh	r3, [r5, #12]
 800b63c:	0598      	lsls	r0, r3, #22
 800b63e:	d4ed      	bmi.n	800b61c <_vfiprintf_r+0x4c>
 800b640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b642:	f7ff ff51 	bl	800b4e8 <__retarget_lock_release_recursive>
 800b646:	e7e9      	b.n	800b61c <_vfiprintf_r+0x4c>
 800b648:	2300      	movs	r3, #0
 800b64a:	9309      	str	r3, [sp, #36]	; 0x24
 800b64c:	2320      	movs	r3, #32
 800b64e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b652:	f8cd 800c 	str.w	r8, [sp, #12]
 800b656:	2330      	movs	r3, #48	; 0x30
 800b658:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b81c <_vfiprintf_r+0x24c>
 800b65c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b660:	f04f 0901 	mov.w	r9, #1
 800b664:	4623      	mov	r3, r4
 800b666:	469a      	mov	sl, r3
 800b668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b66c:	b10a      	cbz	r2, 800b672 <_vfiprintf_r+0xa2>
 800b66e:	2a25      	cmp	r2, #37	; 0x25
 800b670:	d1f9      	bne.n	800b666 <_vfiprintf_r+0x96>
 800b672:	ebba 0b04 	subs.w	fp, sl, r4
 800b676:	d00b      	beq.n	800b690 <_vfiprintf_r+0xc0>
 800b678:	465b      	mov	r3, fp
 800b67a:	4622      	mov	r2, r4
 800b67c:	4629      	mov	r1, r5
 800b67e:	4630      	mov	r0, r6
 800b680:	f7ff ff93 	bl	800b5aa <__sfputs_r>
 800b684:	3001      	adds	r0, #1
 800b686:	f000 80aa 	beq.w	800b7de <_vfiprintf_r+0x20e>
 800b68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b68c:	445a      	add	r2, fp
 800b68e:	9209      	str	r2, [sp, #36]	; 0x24
 800b690:	f89a 3000 	ldrb.w	r3, [sl]
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 80a2 	beq.w	800b7de <_vfiprintf_r+0x20e>
 800b69a:	2300      	movs	r3, #0
 800b69c:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6a4:	f10a 0a01 	add.w	sl, sl, #1
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	9307      	str	r3, [sp, #28]
 800b6ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6b0:	931a      	str	r3, [sp, #104]	; 0x68
 800b6b2:	4654      	mov	r4, sl
 800b6b4:	2205      	movs	r2, #5
 800b6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ba:	4858      	ldr	r0, [pc, #352]	; (800b81c <_vfiprintf_r+0x24c>)
 800b6bc:	f7f4 fd90 	bl	80001e0 <memchr>
 800b6c0:	9a04      	ldr	r2, [sp, #16]
 800b6c2:	b9d8      	cbnz	r0, 800b6fc <_vfiprintf_r+0x12c>
 800b6c4:	06d1      	lsls	r1, r2, #27
 800b6c6:	bf44      	itt	mi
 800b6c8:	2320      	movmi	r3, #32
 800b6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ce:	0713      	lsls	r3, r2, #28
 800b6d0:	bf44      	itt	mi
 800b6d2:	232b      	movmi	r3, #43	; 0x2b
 800b6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b6de:	d015      	beq.n	800b70c <_vfiprintf_r+0x13c>
 800b6e0:	9a07      	ldr	r2, [sp, #28]
 800b6e2:	4654      	mov	r4, sl
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	f04f 0c0a 	mov.w	ip, #10
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f0:	3b30      	subs	r3, #48	; 0x30
 800b6f2:	2b09      	cmp	r3, #9
 800b6f4:	d94e      	bls.n	800b794 <_vfiprintf_r+0x1c4>
 800b6f6:	b1b0      	cbz	r0, 800b726 <_vfiprintf_r+0x156>
 800b6f8:	9207      	str	r2, [sp, #28]
 800b6fa:	e014      	b.n	800b726 <_vfiprintf_r+0x156>
 800b6fc:	eba0 0308 	sub.w	r3, r0, r8
 800b700:	fa09 f303 	lsl.w	r3, r9, r3
 800b704:	4313      	orrs	r3, r2
 800b706:	9304      	str	r3, [sp, #16]
 800b708:	46a2      	mov	sl, r4
 800b70a:	e7d2      	b.n	800b6b2 <_vfiprintf_r+0xe2>
 800b70c:	9b03      	ldr	r3, [sp, #12]
 800b70e:	1d19      	adds	r1, r3, #4
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	9103      	str	r1, [sp, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	bfbb      	ittet	lt
 800b718:	425b      	neglt	r3, r3
 800b71a:	f042 0202 	orrlt.w	r2, r2, #2
 800b71e:	9307      	strge	r3, [sp, #28]
 800b720:	9307      	strlt	r3, [sp, #28]
 800b722:	bfb8      	it	lt
 800b724:	9204      	strlt	r2, [sp, #16]
 800b726:	7823      	ldrb	r3, [r4, #0]
 800b728:	2b2e      	cmp	r3, #46	; 0x2e
 800b72a:	d10c      	bne.n	800b746 <_vfiprintf_r+0x176>
 800b72c:	7863      	ldrb	r3, [r4, #1]
 800b72e:	2b2a      	cmp	r3, #42	; 0x2a
 800b730:	d135      	bne.n	800b79e <_vfiprintf_r+0x1ce>
 800b732:	9b03      	ldr	r3, [sp, #12]
 800b734:	1d1a      	adds	r2, r3, #4
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	9203      	str	r2, [sp, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	bfb8      	it	lt
 800b73e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b742:	3402      	adds	r4, #2
 800b744:	9305      	str	r3, [sp, #20]
 800b746:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b82c <_vfiprintf_r+0x25c>
 800b74a:	7821      	ldrb	r1, [r4, #0]
 800b74c:	2203      	movs	r2, #3
 800b74e:	4650      	mov	r0, sl
 800b750:	f7f4 fd46 	bl	80001e0 <memchr>
 800b754:	b140      	cbz	r0, 800b768 <_vfiprintf_r+0x198>
 800b756:	2340      	movs	r3, #64	; 0x40
 800b758:	eba0 000a 	sub.w	r0, r0, sl
 800b75c:	fa03 f000 	lsl.w	r0, r3, r0
 800b760:	9b04      	ldr	r3, [sp, #16]
 800b762:	4303      	orrs	r3, r0
 800b764:	3401      	adds	r4, #1
 800b766:	9304      	str	r3, [sp, #16]
 800b768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76c:	482c      	ldr	r0, [pc, #176]	; (800b820 <_vfiprintf_r+0x250>)
 800b76e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b772:	2206      	movs	r2, #6
 800b774:	f7f4 fd34 	bl	80001e0 <memchr>
 800b778:	2800      	cmp	r0, #0
 800b77a:	d03f      	beq.n	800b7fc <_vfiprintf_r+0x22c>
 800b77c:	4b29      	ldr	r3, [pc, #164]	; (800b824 <_vfiprintf_r+0x254>)
 800b77e:	bb1b      	cbnz	r3, 800b7c8 <_vfiprintf_r+0x1f8>
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	3307      	adds	r3, #7
 800b784:	f023 0307 	bic.w	r3, r3, #7
 800b788:	3308      	adds	r3, #8
 800b78a:	9303      	str	r3, [sp, #12]
 800b78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78e:	443b      	add	r3, r7
 800b790:	9309      	str	r3, [sp, #36]	; 0x24
 800b792:	e767      	b.n	800b664 <_vfiprintf_r+0x94>
 800b794:	fb0c 3202 	mla	r2, ip, r2, r3
 800b798:	460c      	mov	r4, r1
 800b79a:	2001      	movs	r0, #1
 800b79c:	e7a5      	b.n	800b6ea <_vfiprintf_r+0x11a>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	3401      	adds	r4, #1
 800b7a2:	9305      	str	r3, [sp, #20]
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	f04f 0c0a 	mov.w	ip, #10
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b0:	3a30      	subs	r2, #48	; 0x30
 800b7b2:	2a09      	cmp	r2, #9
 800b7b4:	d903      	bls.n	800b7be <_vfiprintf_r+0x1ee>
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d0c5      	beq.n	800b746 <_vfiprintf_r+0x176>
 800b7ba:	9105      	str	r1, [sp, #20]
 800b7bc:	e7c3      	b.n	800b746 <_vfiprintf_r+0x176>
 800b7be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e7f0      	b.n	800b7aa <_vfiprintf_r+0x1da>
 800b7c8:	ab03      	add	r3, sp, #12
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	462a      	mov	r2, r5
 800b7ce:	4b16      	ldr	r3, [pc, #88]	; (800b828 <_vfiprintf_r+0x258>)
 800b7d0:	a904      	add	r1, sp, #16
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f7fc f930 	bl	8007a38 <_printf_float>
 800b7d8:	4607      	mov	r7, r0
 800b7da:	1c78      	adds	r0, r7, #1
 800b7dc:	d1d6      	bne.n	800b78c <_vfiprintf_r+0x1bc>
 800b7de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7e0:	07d9      	lsls	r1, r3, #31
 800b7e2:	d405      	bmi.n	800b7f0 <_vfiprintf_r+0x220>
 800b7e4:	89ab      	ldrh	r3, [r5, #12]
 800b7e6:	059a      	lsls	r2, r3, #22
 800b7e8:	d402      	bmi.n	800b7f0 <_vfiprintf_r+0x220>
 800b7ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ec:	f7ff fe7c 	bl	800b4e8 <__retarget_lock_release_recursive>
 800b7f0:	89ab      	ldrh	r3, [r5, #12]
 800b7f2:	065b      	lsls	r3, r3, #25
 800b7f4:	f53f af12 	bmi.w	800b61c <_vfiprintf_r+0x4c>
 800b7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7fa:	e711      	b.n	800b620 <_vfiprintf_r+0x50>
 800b7fc:	ab03      	add	r3, sp, #12
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	462a      	mov	r2, r5
 800b802:	4b09      	ldr	r3, [pc, #36]	; (800b828 <_vfiprintf_r+0x258>)
 800b804:	a904      	add	r1, sp, #16
 800b806:	4630      	mov	r0, r6
 800b808:	f7fc fbba 	bl	8007f80 <_printf_i>
 800b80c:	e7e4      	b.n	800b7d8 <_vfiprintf_r+0x208>
 800b80e:	bf00      	nop
 800b810:	0800c52c 	.word	0x0800c52c
 800b814:	0800c54c 	.word	0x0800c54c
 800b818:	0800c50c 	.word	0x0800c50c
 800b81c:	0800c4bc 	.word	0x0800c4bc
 800b820:	0800c4c6 	.word	0x0800c4c6
 800b824:	08007a39 	.word	0x08007a39
 800b828:	0800b5ab 	.word	0x0800b5ab
 800b82c:	0800c4c2 	.word	0x0800c4c2

0800b830 <__swbuf_r>:
 800b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b832:	460e      	mov	r6, r1
 800b834:	4614      	mov	r4, r2
 800b836:	4605      	mov	r5, r0
 800b838:	b118      	cbz	r0, 800b842 <__swbuf_r+0x12>
 800b83a:	6983      	ldr	r3, [r0, #24]
 800b83c:	b90b      	cbnz	r3, 800b842 <__swbuf_r+0x12>
 800b83e:	f000 f9d9 	bl	800bbf4 <__sinit>
 800b842:	4b21      	ldr	r3, [pc, #132]	; (800b8c8 <__swbuf_r+0x98>)
 800b844:	429c      	cmp	r4, r3
 800b846:	d12b      	bne.n	800b8a0 <__swbuf_r+0x70>
 800b848:	686c      	ldr	r4, [r5, #4]
 800b84a:	69a3      	ldr	r3, [r4, #24]
 800b84c:	60a3      	str	r3, [r4, #8]
 800b84e:	89a3      	ldrh	r3, [r4, #12]
 800b850:	071a      	lsls	r2, r3, #28
 800b852:	d52f      	bpl.n	800b8b4 <__swbuf_r+0x84>
 800b854:	6923      	ldr	r3, [r4, #16]
 800b856:	b36b      	cbz	r3, 800b8b4 <__swbuf_r+0x84>
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	6820      	ldr	r0, [r4, #0]
 800b85c:	1ac0      	subs	r0, r0, r3
 800b85e:	6963      	ldr	r3, [r4, #20]
 800b860:	b2f6      	uxtb	r6, r6
 800b862:	4283      	cmp	r3, r0
 800b864:	4637      	mov	r7, r6
 800b866:	dc04      	bgt.n	800b872 <__swbuf_r+0x42>
 800b868:	4621      	mov	r1, r4
 800b86a:	4628      	mov	r0, r5
 800b86c:	f000 f92e 	bl	800bacc <_fflush_r>
 800b870:	bb30      	cbnz	r0, 800b8c0 <__swbuf_r+0x90>
 800b872:	68a3      	ldr	r3, [r4, #8]
 800b874:	3b01      	subs	r3, #1
 800b876:	60a3      	str	r3, [r4, #8]
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	6022      	str	r2, [r4, #0]
 800b87e:	701e      	strb	r6, [r3, #0]
 800b880:	6963      	ldr	r3, [r4, #20]
 800b882:	3001      	adds	r0, #1
 800b884:	4283      	cmp	r3, r0
 800b886:	d004      	beq.n	800b892 <__swbuf_r+0x62>
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	07db      	lsls	r3, r3, #31
 800b88c:	d506      	bpl.n	800b89c <__swbuf_r+0x6c>
 800b88e:	2e0a      	cmp	r6, #10
 800b890:	d104      	bne.n	800b89c <__swbuf_r+0x6c>
 800b892:	4621      	mov	r1, r4
 800b894:	4628      	mov	r0, r5
 800b896:	f000 f919 	bl	800bacc <_fflush_r>
 800b89a:	b988      	cbnz	r0, 800b8c0 <__swbuf_r+0x90>
 800b89c:	4638      	mov	r0, r7
 800b89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8a0:	4b0a      	ldr	r3, [pc, #40]	; (800b8cc <__swbuf_r+0x9c>)
 800b8a2:	429c      	cmp	r4, r3
 800b8a4:	d101      	bne.n	800b8aa <__swbuf_r+0x7a>
 800b8a6:	68ac      	ldr	r4, [r5, #8]
 800b8a8:	e7cf      	b.n	800b84a <__swbuf_r+0x1a>
 800b8aa:	4b09      	ldr	r3, [pc, #36]	; (800b8d0 <__swbuf_r+0xa0>)
 800b8ac:	429c      	cmp	r4, r3
 800b8ae:	bf08      	it	eq
 800b8b0:	68ec      	ldreq	r4, [r5, #12]
 800b8b2:	e7ca      	b.n	800b84a <__swbuf_r+0x1a>
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f000 f80c 	bl	800b8d4 <__swsetup_r>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d0cb      	beq.n	800b858 <__swbuf_r+0x28>
 800b8c0:	f04f 37ff 	mov.w	r7, #4294967295
 800b8c4:	e7ea      	b.n	800b89c <__swbuf_r+0x6c>
 800b8c6:	bf00      	nop
 800b8c8:	0800c52c 	.word	0x0800c52c
 800b8cc:	0800c54c 	.word	0x0800c54c
 800b8d0:	0800c50c 	.word	0x0800c50c

0800b8d4 <__swsetup_r>:
 800b8d4:	4b32      	ldr	r3, [pc, #200]	; (800b9a0 <__swsetup_r+0xcc>)
 800b8d6:	b570      	push	{r4, r5, r6, lr}
 800b8d8:	681d      	ldr	r5, [r3, #0]
 800b8da:	4606      	mov	r6, r0
 800b8dc:	460c      	mov	r4, r1
 800b8de:	b125      	cbz	r5, 800b8ea <__swsetup_r+0x16>
 800b8e0:	69ab      	ldr	r3, [r5, #24]
 800b8e2:	b913      	cbnz	r3, 800b8ea <__swsetup_r+0x16>
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	f000 f985 	bl	800bbf4 <__sinit>
 800b8ea:	4b2e      	ldr	r3, [pc, #184]	; (800b9a4 <__swsetup_r+0xd0>)
 800b8ec:	429c      	cmp	r4, r3
 800b8ee:	d10f      	bne.n	800b910 <__swsetup_r+0x3c>
 800b8f0:	686c      	ldr	r4, [r5, #4]
 800b8f2:	89a3      	ldrh	r3, [r4, #12]
 800b8f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8f8:	0719      	lsls	r1, r3, #28
 800b8fa:	d42c      	bmi.n	800b956 <__swsetup_r+0x82>
 800b8fc:	06dd      	lsls	r5, r3, #27
 800b8fe:	d411      	bmi.n	800b924 <__swsetup_r+0x50>
 800b900:	2309      	movs	r3, #9
 800b902:	6033      	str	r3, [r6, #0]
 800b904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b908:	81a3      	strh	r3, [r4, #12]
 800b90a:	f04f 30ff 	mov.w	r0, #4294967295
 800b90e:	e03e      	b.n	800b98e <__swsetup_r+0xba>
 800b910:	4b25      	ldr	r3, [pc, #148]	; (800b9a8 <__swsetup_r+0xd4>)
 800b912:	429c      	cmp	r4, r3
 800b914:	d101      	bne.n	800b91a <__swsetup_r+0x46>
 800b916:	68ac      	ldr	r4, [r5, #8]
 800b918:	e7eb      	b.n	800b8f2 <__swsetup_r+0x1e>
 800b91a:	4b24      	ldr	r3, [pc, #144]	; (800b9ac <__swsetup_r+0xd8>)
 800b91c:	429c      	cmp	r4, r3
 800b91e:	bf08      	it	eq
 800b920:	68ec      	ldreq	r4, [r5, #12]
 800b922:	e7e6      	b.n	800b8f2 <__swsetup_r+0x1e>
 800b924:	0758      	lsls	r0, r3, #29
 800b926:	d512      	bpl.n	800b94e <__swsetup_r+0x7a>
 800b928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b92a:	b141      	cbz	r1, 800b93e <__swsetup_r+0x6a>
 800b92c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b930:	4299      	cmp	r1, r3
 800b932:	d002      	beq.n	800b93a <__swsetup_r+0x66>
 800b934:	4630      	mov	r0, r6
 800b936:	f7fb feff 	bl	8007738 <_free_r>
 800b93a:	2300      	movs	r3, #0
 800b93c:	6363      	str	r3, [r4, #52]	; 0x34
 800b93e:	89a3      	ldrh	r3, [r4, #12]
 800b940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b944:	81a3      	strh	r3, [r4, #12]
 800b946:	2300      	movs	r3, #0
 800b948:	6063      	str	r3, [r4, #4]
 800b94a:	6923      	ldr	r3, [r4, #16]
 800b94c:	6023      	str	r3, [r4, #0]
 800b94e:	89a3      	ldrh	r3, [r4, #12]
 800b950:	f043 0308 	orr.w	r3, r3, #8
 800b954:	81a3      	strh	r3, [r4, #12]
 800b956:	6923      	ldr	r3, [r4, #16]
 800b958:	b94b      	cbnz	r3, 800b96e <__swsetup_r+0x9a>
 800b95a:	89a3      	ldrh	r3, [r4, #12]
 800b95c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b964:	d003      	beq.n	800b96e <__swsetup_r+0x9a>
 800b966:	4621      	mov	r1, r4
 800b968:	4630      	mov	r0, r6
 800b96a:	f000 fa05 	bl	800bd78 <__smakebuf_r>
 800b96e:	89a0      	ldrh	r0, [r4, #12]
 800b970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b974:	f010 0301 	ands.w	r3, r0, #1
 800b978:	d00a      	beq.n	800b990 <__swsetup_r+0xbc>
 800b97a:	2300      	movs	r3, #0
 800b97c:	60a3      	str	r3, [r4, #8]
 800b97e:	6963      	ldr	r3, [r4, #20]
 800b980:	425b      	negs	r3, r3
 800b982:	61a3      	str	r3, [r4, #24]
 800b984:	6923      	ldr	r3, [r4, #16]
 800b986:	b943      	cbnz	r3, 800b99a <__swsetup_r+0xc6>
 800b988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b98c:	d1ba      	bne.n	800b904 <__swsetup_r+0x30>
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	0781      	lsls	r1, r0, #30
 800b992:	bf58      	it	pl
 800b994:	6963      	ldrpl	r3, [r4, #20]
 800b996:	60a3      	str	r3, [r4, #8]
 800b998:	e7f4      	b.n	800b984 <__swsetup_r+0xb0>
 800b99a:	2000      	movs	r0, #0
 800b99c:	e7f7      	b.n	800b98e <__swsetup_r+0xba>
 800b99e:	bf00      	nop
 800b9a0:	2000000c 	.word	0x2000000c
 800b9a4:	0800c52c 	.word	0x0800c52c
 800b9a8:	0800c54c 	.word	0x0800c54c
 800b9ac:	0800c50c 	.word	0x0800c50c

0800b9b0 <abort>:
 800b9b0:	b508      	push	{r3, lr}
 800b9b2:	2006      	movs	r0, #6
 800b9b4:	f000 fa50 	bl	800be58 <raise>
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	f7f6 fc5d 	bl	8002278 <_exit>
	...

0800b9c0 <__sflush_r>:
 800b9c0:	898a      	ldrh	r2, [r1, #12]
 800b9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	4605      	mov	r5, r0
 800b9c8:	0710      	lsls	r0, r2, #28
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	d458      	bmi.n	800ba80 <__sflush_r+0xc0>
 800b9ce:	684b      	ldr	r3, [r1, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	dc05      	bgt.n	800b9e0 <__sflush_r+0x20>
 800b9d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	dc02      	bgt.n	800b9e0 <__sflush_r+0x20>
 800b9da:	2000      	movs	r0, #0
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9e2:	2e00      	cmp	r6, #0
 800b9e4:	d0f9      	beq.n	800b9da <__sflush_r+0x1a>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9ec:	682f      	ldr	r7, [r5, #0]
 800b9ee:	602b      	str	r3, [r5, #0]
 800b9f0:	d032      	beq.n	800ba58 <__sflush_r+0x98>
 800b9f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	075a      	lsls	r2, r3, #29
 800b9f8:	d505      	bpl.n	800ba06 <__sflush_r+0x46>
 800b9fa:	6863      	ldr	r3, [r4, #4]
 800b9fc:	1ac0      	subs	r0, r0, r3
 800b9fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba00:	b10b      	cbz	r3, 800ba06 <__sflush_r+0x46>
 800ba02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba04:	1ac0      	subs	r0, r0, r3
 800ba06:	2300      	movs	r3, #0
 800ba08:	4602      	mov	r2, r0
 800ba0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba0c:	6a21      	ldr	r1, [r4, #32]
 800ba0e:	4628      	mov	r0, r5
 800ba10:	47b0      	blx	r6
 800ba12:	1c43      	adds	r3, r0, #1
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	d106      	bne.n	800ba26 <__sflush_r+0x66>
 800ba18:	6829      	ldr	r1, [r5, #0]
 800ba1a:	291d      	cmp	r1, #29
 800ba1c:	d82c      	bhi.n	800ba78 <__sflush_r+0xb8>
 800ba1e:	4a2a      	ldr	r2, [pc, #168]	; (800bac8 <__sflush_r+0x108>)
 800ba20:	40ca      	lsrs	r2, r1
 800ba22:	07d6      	lsls	r6, r2, #31
 800ba24:	d528      	bpl.n	800ba78 <__sflush_r+0xb8>
 800ba26:	2200      	movs	r2, #0
 800ba28:	6062      	str	r2, [r4, #4]
 800ba2a:	04d9      	lsls	r1, r3, #19
 800ba2c:	6922      	ldr	r2, [r4, #16]
 800ba2e:	6022      	str	r2, [r4, #0]
 800ba30:	d504      	bpl.n	800ba3c <__sflush_r+0x7c>
 800ba32:	1c42      	adds	r2, r0, #1
 800ba34:	d101      	bne.n	800ba3a <__sflush_r+0x7a>
 800ba36:	682b      	ldr	r3, [r5, #0]
 800ba38:	b903      	cbnz	r3, 800ba3c <__sflush_r+0x7c>
 800ba3a:	6560      	str	r0, [r4, #84]	; 0x54
 800ba3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba3e:	602f      	str	r7, [r5, #0]
 800ba40:	2900      	cmp	r1, #0
 800ba42:	d0ca      	beq.n	800b9da <__sflush_r+0x1a>
 800ba44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba48:	4299      	cmp	r1, r3
 800ba4a:	d002      	beq.n	800ba52 <__sflush_r+0x92>
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	f7fb fe73 	bl	8007738 <_free_r>
 800ba52:	2000      	movs	r0, #0
 800ba54:	6360      	str	r0, [r4, #52]	; 0x34
 800ba56:	e7c1      	b.n	800b9dc <__sflush_r+0x1c>
 800ba58:	6a21      	ldr	r1, [r4, #32]
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	47b0      	blx	r6
 800ba60:	1c41      	adds	r1, r0, #1
 800ba62:	d1c7      	bne.n	800b9f4 <__sflush_r+0x34>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d0c4      	beq.n	800b9f4 <__sflush_r+0x34>
 800ba6a:	2b1d      	cmp	r3, #29
 800ba6c:	d001      	beq.n	800ba72 <__sflush_r+0xb2>
 800ba6e:	2b16      	cmp	r3, #22
 800ba70:	d101      	bne.n	800ba76 <__sflush_r+0xb6>
 800ba72:	602f      	str	r7, [r5, #0]
 800ba74:	e7b1      	b.n	800b9da <__sflush_r+0x1a>
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	e7ad      	b.n	800b9dc <__sflush_r+0x1c>
 800ba80:	690f      	ldr	r7, [r1, #16]
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	d0a9      	beq.n	800b9da <__sflush_r+0x1a>
 800ba86:	0793      	lsls	r3, r2, #30
 800ba88:	680e      	ldr	r6, [r1, #0]
 800ba8a:	bf08      	it	eq
 800ba8c:	694b      	ldreq	r3, [r1, #20]
 800ba8e:	600f      	str	r7, [r1, #0]
 800ba90:	bf18      	it	ne
 800ba92:	2300      	movne	r3, #0
 800ba94:	eba6 0807 	sub.w	r8, r6, r7
 800ba98:	608b      	str	r3, [r1, #8]
 800ba9a:	f1b8 0f00 	cmp.w	r8, #0
 800ba9e:	dd9c      	ble.n	800b9da <__sflush_r+0x1a>
 800baa0:	6a21      	ldr	r1, [r4, #32]
 800baa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800baa4:	4643      	mov	r3, r8
 800baa6:	463a      	mov	r2, r7
 800baa8:	4628      	mov	r0, r5
 800baaa:	47b0      	blx	r6
 800baac:	2800      	cmp	r0, #0
 800baae:	dc06      	bgt.n	800babe <__sflush_r+0xfe>
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bab6:	81a3      	strh	r3, [r4, #12]
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295
 800babc:	e78e      	b.n	800b9dc <__sflush_r+0x1c>
 800babe:	4407      	add	r7, r0
 800bac0:	eba8 0800 	sub.w	r8, r8, r0
 800bac4:	e7e9      	b.n	800ba9a <__sflush_r+0xda>
 800bac6:	bf00      	nop
 800bac8:	20400001 	.word	0x20400001

0800bacc <_fflush_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	690b      	ldr	r3, [r1, #16]
 800bad0:	4605      	mov	r5, r0
 800bad2:	460c      	mov	r4, r1
 800bad4:	b913      	cbnz	r3, 800badc <_fflush_r+0x10>
 800bad6:	2500      	movs	r5, #0
 800bad8:	4628      	mov	r0, r5
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	b118      	cbz	r0, 800bae6 <_fflush_r+0x1a>
 800bade:	6983      	ldr	r3, [r0, #24]
 800bae0:	b90b      	cbnz	r3, 800bae6 <_fflush_r+0x1a>
 800bae2:	f000 f887 	bl	800bbf4 <__sinit>
 800bae6:	4b14      	ldr	r3, [pc, #80]	; (800bb38 <_fflush_r+0x6c>)
 800bae8:	429c      	cmp	r4, r3
 800baea:	d11b      	bne.n	800bb24 <_fflush_r+0x58>
 800baec:	686c      	ldr	r4, [r5, #4]
 800baee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d0ef      	beq.n	800bad6 <_fflush_r+0xa>
 800baf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800baf8:	07d0      	lsls	r0, r2, #31
 800bafa:	d404      	bmi.n	800bb06 <_fflush_r+0x3a>
 800bafc:	0599      	lsls	r1, r3, #22
 800bafe:	d402      	bmi.n	800bb06 <_fflush_r+0x3a>
 800bb00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb02:	f7ff fcf0 	bl	800b4e6 <__retarget_lock_acquire_recursive>
 800bb06:	4628      	mov	r0, r5
 800bb08:	4621      	mov	r1, r4
 800bb0a:	f7ff ff59 	bl	800b9c0 <__sflush_r>
 800bb0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb10:	07da      	lsls	r2, r3, #31
 800bb12:	4605      	mov	r5, r0
 800bb14:	d4e0      	bmi.n	800bad8 <_fflush_r+0xc>
 800bb16:	89a3      	ldrh	r3, [r4, #12]
 800bb18:	059b      	lsls	r3, r3, #22
 800bb1a:	d4dd      	bmi.n	800bad8 <_fflush_r+0xc>
 800bb1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb1e:	f7ff fce3 	bl	800b4e8 <__retarget_lock_release_recursive>
 800bb22:	e7d9      	b.n	800bad8 <_fflush_r+0xc>
 800bb24:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <_fflush_r+0x70>)
 800bb26:	429c      	cmp	r4, r3
 800bb28:	d101      	bne.n	800bb2e <_fflush_r+0x62>
 800bb2a:	68ac      	ldr	r4, [r5, #8]
 800bb2c:	e7df      	b.n	800baee <_fflush_r+0x22>
 800bb2e:	4b04      	ldr	r3, [pc, #16]	; (800bb40 <_fflush_r+0x74>)
 800bb30:	429c      	cmp	r4, r3
 800bb32:	bf08      	it	eq
 800bb34:	68ec      	ldreq	r4, [r5, #12]
 800bb36:	e7da      	b.n	800baee <_fflush_r+0x22>
 800bb38:	0800c52c 	.word	0x0800c52c
 800bb3c:	0800c54c 	.word	0x0800c54c
 800bb40:	0800c50c 	.word	0x0800c50c

0800bb44 <std>:
 800bb44:	2300      	movs	r3, #0
 800bb46:	b510      	push	{r4, lr}
 800bb48:	4604      	mov	r4, r0
 800bb4a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb52:	6083      	str	r3, [r0, #8]
 800bb54:	8181      	strh	r1, [r0, #12]
 800bb56:	6643      	str	r3, [r0, #100]	; 0x64
 800bb58:	81c2      	strh	r2, [r0, #14]
 800bb5a:	6183      	str	r3, [r0, #24]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	2208      	movs	r2, #8
 800bb60:	305c      	adds	r0, #92	; 0x5c
 800bb62:	f7fb fde1 	bl	8007728 <memset>
 800bb66:	4b05      	ldr	r3, [pc, #20]	; (800bb7c <std+0x38>)
 800bb68:	6263      	str	r3, [r4, #36]	; 0x24
 800bb6a:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <std+0x3c>)
 800bb6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <std+0x40>)
 800bb70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb72:	4b05      	ldr	r3, [pc, #20]	; (800bb88 <std+0x44>)
 800bb74:	6224      	str	r4, [r4, #32]
 800bb76:	6323      	str	r3, [r4, #48]	; 0x30
 800bb78:	bd10      	pop	{r4, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0800be91 	.word	0x0800be91
 800bb80:	0800beb3 	.word	0x0800beb3
 800bb84:	0800beeb 	.word	0x0800beeb
 800bb88:	0800bf0f 	.word	0x0800bf0f

0800bb8c <_cleanup_r>:
 800bb8c:	4901      	ldr	r1, [pc, #4]	; (800bb94 <_cleanup_r+0x8>)
 800bb8e:	f000 b8af 	b.w	800bcf0 <_fwalk_reent>
 800bb92:	bf00      	nop
 800bb94:	0800bacd 	.word	0x0800bacd

0800bb98 <__sfmoreglue>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	2268      	movs	r2, #104	; 0x68
 800bb9c:	1e4d      	subs	r5, r1, #1
 800bb9e:	4355      	muls	r5, r2
 800bba0:	460e      	mov	r6, r1
 800bba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bba6:	f7fb fe33 	bl	8007810 <_malloc_r>
 800bbaa:	4604      	mov	r4, r0
 800bbac:	b140      	cbz	r0, 800bbc0 <__sfmoreglue+0x28>
 800bbae:	2100      	movs	r1, #0
 800bbb0:	e9c0 1600 	strd	r1, r6, [r0]
 800bbb4:	300c      	adds	r0, #12
 800bbb6:	60a0      	str	r0, [r4, #8]
 800bbb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbbc:	f7fb fdb4 	bl	8007728 <memset>
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}

0800bbc4 <__sfp_lock_acquire>:
 800bbc4:	4801      	ldr	r0, [pc, #4]	; (800bbcc <__sfp_lock_acquire+0x8>)
 800bbc6:	f7ff bc8e 	b.w	800b4e6 <__retarget_lock_acquire_recursive>
 800bbca:	bf00      	nop
 800bbcc:	200008b1 	.word	0x200008b1

0800bbd0 <__sfp_lock_release>:
 800bbd0:	4801      	ldr	r0, [pc, #4]	; (800bbd8 <__sfp_lock_release+0x8>)
 800bbd2:	f7ff bc89 	b.w	800b4e8 <__retarget_lock_release_recursive>
 800bbd6:	bf00      	nop
 800bbd8:	200008b1 	.word	0x200008b1

0800bbdc <__sinit_lock_acquire>:
 800bbdc:	4801      	ldr	r0, [pc, #4]	; (800bbe4 <__sinit_lock_acquire+0x8>)
 800bbde:	f7ff bc82 	b.w	800b4e6 <__retarget_lock_acquire_recursive>
 800bbe2:	bf00      	nop
 800bbe4:	200008b2 	.word	0x200008b2

0800bbe8 <__sinit_lock_release>:
 800bbe8:	4801      	ldr	r0, [pc, #4]	; (800bbf0 <__sinit_lock_release+0x8>)
 800bbea:	f7ff bc7d 	b.w	800b4e8 <__retarget_lock_release_recursive>
 800bbee:	bf00      	nop
 800bbf0:	200008b2 	.word	0x200008b2

0800bbf4 <__sinit>:
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	f7ff fff0 	bl	800bbdc <__sinit_lock_acquire>
 800bbfc:	69a3      	ldr	r3, [r4, #24]
 800bbfe:	b11b      	cbz	r3, 800bc08 <__sinit+0x14>
 800bc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc04:	f7ff bff0 	b.w	800bbe8 <__sinit_lock_release>
 800bc08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc0c:	6523      	str	r3, [r4, #80]	; 0x50
 800bc0e:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <__sinit+0x68>)
 800bc10:	4a13      	ldr	r2, [pc, #76]	; (800bc60 <__sinit+0x6c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc16:	42a3      	cmp	r3, r4
 800bc18:	bf04      	itt	eq
 800bc1a:	2301      	moveq	r3, #1
 800bc1c:	61a3      	streq	r3, [r4, #24]
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f000 f820 	bl	800bc64 <__sfp>
 800bc24:	6060      	str	r0, [r4, #4]
 800bc26:	4620      	mov	r0, r4
 800bc28:	f000 f81c 	bl	800bc64 <__sfp>
 800bc2c:	60a0      	str	r0, [r4, #8]
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 f818 	bl	800bc64 <__sfp>
 800bc34:	2200      	movs	r2, #0
 800bc36:	60e0      	str	r0, [r4, #12]
 800bc38:	2104      	movs	r1, #4
 800bc3a:	6860      	ldr	r0, [r4, #4]
 800bc3c:	f7ff ff82 	bl	800bb44 <std>
 800bc40:	68a0      	ldr	r0, [r4, #8]
 800bc42:	2201      	movs	r2, #1
 800bc44:	2109      	movs	r1, #9
 800bc46:	f7ff ff7d 	bl	800bb44 <std>
 800bc4a:	68e0      	ldr	r0, [r4, #12]
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	2112      	movs	r1, #18
 800bc50:	f7ff ff78 	bl	800bb44 <std>
 800bc54:	2301      	movs	r3, #1
 800bc56:	61a3      	str	r3, [r4, #24]
 800bc58:	e7d2      	b.n	800bc00 <__sinit+0xc>
 800bc5a:	bf00      	nop
 800bc5c:	0800c0c8 	.word	0x0800c0c8
 800bc60:	0800bb8d 	.word	0x0800bb8d

0800bc64 <__sfp>:
 800bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc66:	4607      	mov	r7, r0
 800bc68:	f7ff ffac 	bl	800bbc4 <__sfp_lock_acquire>
 800bc6c:	4b1e      	ldr	r3, [pc, #120]	; (800bce8 <__sfp+0x84>)
 800bc6e:	681e      	ldr	r6, [r3, #0]
 800bc70:	69b3      	ldr	r3, [r6, #24]
 800bc72:	b913      	cbnz	r3, 800bc7a <__sfp+0x16>
 800bc74:	4630      	mov	r0, r6
 800bc76:	f7ff ffbd 	bl	800bbf4 <__sinit>
 800bc7a:	3648      	adds	r6, #72	; 0x48
 800bc7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	d503      	bpl.n	800bc8c <__sfp+0x28>
 800bc84:	6833      	ldr	r3, [r6, #0]
 800bc86:	b30b      	cbz	r3, 800bccc <__sfp+0x68>
 800bc88:	6836      	ldr	r6, [r6, #0]
 800bc8a:	e7f7      	b.n	800bc7c <__sfp+0x18>
 800bc8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc90:	b9d5      	cbnz	r5, 800bcc8 <__sfp+0x64>
 800bc92:	4b16      	ldr	r3, [pc, #88]	; (800bcec <__sfp+0x88>)
 800bc94:	60e3      	str	r3, [r4, #12]
 800bc96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc9a:	6665      	str	r5, [r4, #100]	; 0x64
 800bc9c:	f7ff fc22 	bl	800b4e4 <__retarget_lock_init_recursive>
 800bca0:	f7ff ff96 	bl	800bbd0 <__sfp_lock_release>
 800bca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bcac:	6025      	str	r5, [r4, #0]
 800bcae:	61a5      	str	r5, [r4, #24]
 800bcb0:	2208      	movs	r2, #8
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcb8:	f7fb fd36 	bl	8007728 <memset>
 800bcbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bcc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc8:	3468      	adds	r4, #104	; 0x68
 800bcca:	e7d9      	b.n	800bc80 <__sfp+0x1c>
 800bccc:	2104      	movs	r1, #4
 800bcce:	4638      	mov	r0, r7
 800bcd0:	f7ff ff62 	bl	800bb98 <__sfmoreglue>
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	6030      	str	r0, [r6, #0]
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d1d5      	bne.n	800bc88 <__sfp+0x24>
 800bcdc:	f7ff ff78 	bl	800bbd0 <__sfp_lock_release>
 800bce0:	230c      	movs	r3, #12
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	e7ee      	b.n	800bcc4 <__sfp+0x60>
 800bce6:	bf00      	nop
 800bce8:	0800c0c8 	.word	0x0800c0c8
 800bcec:	ffff0001 	.word	0xffff0001

0800bcf0 <_fwalk_reent>:
 800bcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	4688      	mov	r8, r1
 800bcf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcfc:	2700      	movs	r7, #0
 800bcfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd02:	f1b9 0901 	subs.w	r9, r9, #1
 800bd06:	d505      	bpl.n	800bd14 <_fwalk_reent+0x24>
 800bd08:	6824      	ldr	r4, [r4, #0]
 800bd0a:	2c00      	cmp	r4, #0
 800bd0c:	d1f7      	bne.n	800bcfe <_fwalk_reent+0xe>
 800bd0e:	4638      	mov	r0, r7
 800bd10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd14:	89ab      	ldrh	r3, [r5, #12]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d907      	bls.n	800bd2a <_fwalk_reent+0x3a>
 800bd1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	d003      	beq.n	800bd2a <_fwalk_reent+0x3a>
 800bd22:	4629      	mov	r1, r5
 800bd24:	4630      	mov	r0, r6
 800bd26:	47c0      	blx	r8
 800bd28:	4307      	orrs	r7, r0
 800bd2a:	3568      	adds	r5, #104	; 0x68
 800bd2c:	e7e9      	b.n	800bd02 <_fwalk_reent+0x12>

0800bd2e <__swhatbuf_r>:
 800bd2e:	b570      	push	{r4, r5, r6, lr}
 800bd30:	460e      	mov	r6, r1
 800bd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd36:	2900      	cmp	r1, #0
 800bd38:	b096      	sub	sp, #88	; 0x58
 800bd3a:	4614      	mov	r4, r2
 800bd3c:	461d      	mov	r5, r3
 800bd3e:	da08      	bge.n	800bd52 <__swhatbuf_r+0x24>
 800bd40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	602a      	str	r2, [r5, #0]
 800bd48:	061a      	lsls	r2, r3, #24
 800bd4a:	d410      	bmi.n	800bd6e <__swhatbuf_r+0x40>
 800bd4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd50:	e00e      	b.n	800bd70 <__swhatbuf_r+0x42>
 800bd52:	466a      	mov	r2, sp
 800bd54:	f000 f902 	bl	800bf5c <_fstat_r>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	dbf1      	blt.n	800bd40 <__swhatbuf_r+0x12>
 800bd5c:	9a01      	ldr	r2, [sp, #4]
 800bd5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd66:	425a      	negs	r2, r3
 800bd68:	415a      	adcs	r2, r3
 800bd6a:	602a      	str	r2, [r5, #0]
 800bd6c:	e7ee      	b.n	800bd4c <__swhatbuf_r+0x1e>
 800bd6e:	2340      	movs	r3, #64	; 0x40
 800bd70:	2000      	movs	r0, #0
 800bd72:	6023      	str	r3, [r4, #0]
 800bd74:	b016      	add	sp, #88	; 0x58
 800bd76:	bd70      	pop	{r4, r5, r6, pc}

0800bd78 <__smakebuf_r>:
 800bd78:	898b      	ldrh	r3, [r1, #12]
 800bd7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd7c:	079d      	lsls	r5, r3, #30
 800bd7e:	4606      	mov	r6, r0
 800bd80:	460c      	mov	r4, r1
 800bd82:	d507      	bpl.n	800bd94 <__smakebuf_r+0x1c>
 800bd84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd88:	6023      	str	r3, [r4, #0]
 800bd8a:	6123      	str	r3, [r4, #16]
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	6163      	str	r3, [r4, #20]
 800bd90:	b002      	add	sp, #8
 800bd92:	bd70      	pop	{r4, r5, r6, pc}
 800bd94:	ab01      	add	r3, sp, #4
 800bd96:	466a      	mov	r2, sp
 800bd98:	f7ff ffc9 	bl	800bd2e <__swhatbuf_r>
 800bd9c:	9900      	ldr	r1, [sp, #0]
 800bd9e:	4605      	mov	r5, r0
 800bda0:	4630      	mov	r0, r6
 800bda2:	f7fb fd35 	bl	8007810 <_malloc_r>
 800bda6:	b948      	cbnz	r0, 800bdbc <__smakebuf_r+0x44>
 800bda8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdac:	059a      	lsls	r2, r3, #22
 800bdae:	d4ef      	bmi.n	800bd90 <__smakebuf_r+0x18>
 800bdb0:	f023 0303 	bic.w	r3, r3, #3
 800bdb4:	f043 0302 	orr.w	r3, r3, #2
 800bdb8:	81a3      	strh	r3, [r4, #12]
 800bdba:	e7e3      	b.n	800bd84 <__smakebuf_r+0xc>
 800bdbc:	4b0d      	ldr	r3, [pc, #52]	; (800bdf4 <__smakebuf_r+0x7c>)
 800bdbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800bdc0:	89a3      	ldrh	r3, [r4, #12]
 800bdc2:	6020      	str	r0, [r4, #0]
 800bdc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdc8:	81a3      	strh	r3, [r4, #12]
 800bdca:	9b00      	ldr	r3, [sp, #0]
 800bdcc:	6163      	str	r3, [r4, #20]
 800bdce:	9b01      	ldr	r3, [sp, #4]
 800bdd0:	6120      	str	r0, [r4, #16]
 800bdd2:	b15b      	cbz	r3, 800bdec <__smakebuf_r+0x74>
 800bdd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f000 f8d1 	bl	800bf80 <_isatty_r>
 800bdde:	b128      	cbz	r0, 800bdec <__smakebuf_r+0x74>
 800bde0:	89a3      	ldrh	r3, [r4, #12]
 800bde2:	f023 0303 	bic.w	r3, r3, #3
 800bde6:	f043 0301 	orr.w	r3, r3, #1
 800bdea:	81a3      	strh	r3, [r4, #12]
 800bdec:	89a0      	ldrh	r0, [r4, #12]
 800bdee:	4305      	orrs	r5, r0
 800bdf0:	81a5      	strh	r5, [r4, #12]
 800bdf2:	e7cd      	b.n	800bd90 <__smakebuf_r+0x18>
 800bdf4:	0800bb8d 	.word	0x0800bb8d

0800bdf8 <_malloc_usable_size_r>:
 800bdf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdfc:	1f18      	subs	r0, r3, #4
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	bfbc      	itt	lt
 800be02:	580b      	ldrlt	r3, [r1, r0]
 800be04:	18c0      	addlt	r0, r0, r3
 800be06:	4770      	bx	lr

0800be08 <_raise_r>:
 800be08:	291f      	cmp	r1, #31
 800be0a:	b538      	push	{r3, r4, r5, lr}
 800be0c:	4604      	mov	r4, r0
 800be0e:	460d      	mov	r5, r1
 800be10:	d904      	bls.n	800be1c <_raise_r+0x14>
 800be12:	2316      	movs	r3, #22
 800be14:	6003      	str	r3, [r0, #0]
 800be16:	f04f 30ff 	mov.w	r0, #4294967295
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be1e:	b112      	cbz	r2, 800be26 <_raise_r+0x1e>
 800be20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be24:	b94b      	cbnz	r3, 800be3a <_raise_r+0x32>
 800be26:	4620      	mov	r0, r4
 800be28:	f000 f830 	bl	800be8c <_getpid_r>
 800be2c:	462a      	mov	r2, r5
 800be2e:	4601      	mov	r1, r0
 800be30:	4620      	mov	r0, r4
 800be32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be36:	f000 b817 	b.w	800be68 <_kill_r>
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d00a      	beq.n	800be54 <_raise_r+0x4c>
 800be3e:	1c59      	adds	r1, r3, #1
 800be40:	d103      	bne.n	800be4a <_raise_r+0x42>
 800be42:	2316      	movs	r3, #22
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	2001      	movs	r0, #1
 800be48:	e7e7      	b.n	800be1a <_raise_r+0x12>
 800be4a:	2400      	movs	r4, #0
 800be4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be50:	4628      	mov	r0, r5
 800be52:	4798      	blx	r3
 800be54:	2000      	movs	r0, #0
 800be56:	e7e0      	b.n	800be1a <_raise_r+0x12>

0800be58 <raise>:
 800be58:	4b02      	ldr	r3, [pc, #8]	; (800be64 <raise+0xc>)
 800be5a:	4601      	mov	r1, r0
 800be5c:	6818      	ldr	r0, [r3, #0]
 800be5e:	f7ff bfd3 	b.w	800be08 <_raise_r>
 800be62:	bf00      	nop
 800be64:	2000000c 	.word	0x2000000c

0800be68 <_kill_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4d07      	ldr	r5, [pc, #28]	; (800be88 <_kill_r+0x20>)
 800be6c:	2300      	movs	r3, #0
 800be6e:	4604      	mov	r4, r0
 800be70:	4608      	mov	r0, r1
 800be72:	4611      	mov	r1, r2
 800be74:	602b      	str	r3, [r5, #0]
 800be76:	f7f6 f9ef 	bl	8002258 <_kill>
 800be7a:	1c43      	adds	r3, r0, #1
 800be7c:	d102      	bne.n	800be84 <_kill_r+0x1c>
 800be7e:	682b      	ldr	r3, [r5, #0]
 800be80:	b103      	cbz	r3, 800be84 <_kill_r+0x1c>
 800be82:	6023      	str	r3, [r4, #0]
 800be84:	bd38      	pop	{r3, r4, r5, pc}
 800be86:	bf00      	nop
 800be88:	200008ac 	.word	0x200008ac

0800be8c <_getpid_r>:
 800be8c:	f7f6 b9dc 	b.w	8002248 <_getpid>

0800be90 <__sread>:
 800be90:	b510      	push	{r4, lr}
 800be92:	460c      	mov	r4, r1
 800be94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be98:	f000 f894 	bl	800bfc4 <_read_r>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	bfab      	itete	ge
 800bea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bea2:	89a3      	ldrhlt	r3, [r4, #12]
 800bea4:	181b      	addge	r3, r3, r0
 800bea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800beaa:	bfac      	ite	ge
 800beac:	6563      	strge	r3, [r4, #84]	; 0x54
 800beae:	81a3      	strhlt	r3, [r4, #12]
 800beb0:	bd10      	pop	{r4, pc}

0800beb2 <__swrite>:
 800beb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb6:	461f      	mov	r7, r3
 800beb8:	898b      	ldrh	r3, [r1, #12]
 800beba:	05db      	lsls	r3, r3, #23
 800bebc:	4605      	mov	r5, r0
 800bebe:	460c      	mov	r4, r1
 800bec0:	4616      	mov	r6, r2
 800bec2:	d505      	bpl.n	800bed0 <__swrite+0x1e>
 800bec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec8:	2302      	movs	r3, #2
 800beca:	2200      	movs	r2, #0
 800becc:	f000 f868 	bl	800bfa0 <_lseek_r>
 800bed0:	89a3      	ldrh	r3, [r4, #12]
 800bed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800beda:	81a3      	strh	r3, [r4, #12]
 800bedc:	4632      	mov	r2, r6
 800bede:	463b      	mov	r3, r7
 800bee0:	4628      	mov	r0, r5
 800bee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bee6:	f000 b817 	b.w	800bf18 <_write_r>

0800beea <__sseek>:
 800beea:	b510      	push	{r4, lr}
 800beec:	460c      	mov	r4, r1
 800beee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bef2:	f000 f855 	bl	800bfa0 <_lseek_r>
 800bef6:	1c43      	adds	r3, r0, #1
 800bef8:	89a3      	ldrh	r3, [r4, #12]
 800befa:	bf15      	itete	ne
 800befc:	6560      	strne	r0, [r4, #84]	; 0x54
 800befe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf06:	81a3      	strheq	r3, [r4, #12]
 800bf08:	bf18      	it	ne
 800bf0a:	81a3      	strhne	r3, [r4, #12]
 800bf0c:	bd10      	pop	{r4, pc}

0800bf0e <__sclose>:
 800bf0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf12:	f000 b813 	b.w	800bf3c <_close_r>
	...

0800bf18 <_write_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d07      	ldr	r5, [pc, #28]	; (800bf38 <_write_r+0x20>)
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	4608      	mov	r0, r1
 800bf20:	4611      	mov	r1, r2
 800bf22:	2200      	movs	r2, #0
 800bf24:	602a      	str	r2, [r5, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	f7f6 f9cd 	bl	80022c6 <_write>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d102      	bne.n	800bf36 <_write_r+0x1e>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	b103      	cbz	r3, 800bf36 <_write_r+0x1e>
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	200008ac 	.word	0x200008ac

0800bf3c <_close_r>:
 800bf3c:	b538      	push	{r3, r4, r5, lr}
 800bf3e:	4d06      	ldr	r5, [pc, #24]	; (800bf58 <_close_r+0x1c>)
 800bf40:	2300      	movs	r3, #0
 800bf42:	4604      	mov	r4, r0
 800bf44:	4608      	mov	r0, r1
 800bf46:	602b      	str	r3, [r5, #0]
 800bf48:	f7f6 f9d9 	bl	80022fe <_close>
 800bf4c:	1c43      	adds	r3, r0, #1
 800bf4e:	d102      	bne.n	800bf56 <_close_r+0x1a>
 800bf50:	682b      	ldr	r3, [r5, #0]
 800bf52:	b103      	cbz	r3, 800bf56 <_close_r+0x1a>
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	bd38      	pop	{r3, r4, r5, pc}
 800bf58:	200008ac 	.word	0x200008ac

0800bf5c <_fstat_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	4d07      	ldr	r5, [pc, #28]	; (800bf7c <_fstat_r+0x20>)
 800bf60:	2300      	movs	r3, #0
 800bf62:	4604      	mov	r4, r0
 800bf64:	4608      	mov	r0, r1
 800bf66:	4611      	mov	r1, r2
 800bf68:	602b      	str	r3, [r5, #0]
 800bf6a:	f7f6 f9d4 	bl	8002316 <_fstat>
 800bf6e:	1c43      	adds	r3, r0, #1
 800bf70:	d102      	bne.n	800bf78 <_fstat_r+0x1c>
 800bf72:	682b      	ldr	r3, [r5, #0]
 800bf74:	b103      	cbz	r3, 800bf78 <_fstat_r+0x1c>
 800bf76:	6023      	str	r3, [r4, #0]
 800bf78:	bd38      	pop	{r3, r4, r5, pc}
 800bf7a:	bf00      	nop
 800bf7c:	200008ac 	.word	0x200008ac

0800bf80 <_isatty_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4d06      	ldr	r5, [pc, #24]	; (800bf9c <_isatty_r+0x1c>)
 800bf84:	2300      	movs	r3, #0
 800bf86:	4604      	mov	r4, r0
 800bf88:	4608      	mov	r0, r1
 800bf8a:	602b      	str	r3, [r5, #0]
 800bf8c:	f7f6 f9d3 	bl	8002336 <_isatty>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d102      	bne.n	800bf9a <_isatty_r+0x1a>
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	b103      	cbz	r3, 800bf9a <_isatty_r+0x1a>
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	200008ac 	.word	0x200008ac

0800bfa0 <_lseek_r>:
 800bfa0:	b538      	push	{r3, r4, r5, lr}
 800bfa2:	4d07      	ldr	r5, [pc, #28]	; (800bfc0 <_lseek_r+0x20>)
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	4608      	mov	r0, r1
 800bfa8:	4611      	mov	r1, r2
 800bfaa:	2200      	movs	r2, #0
 800bfac:	602a      	str	r2, [r5, #0]
 800bfae:	461a      	mov	r2, r3
 800bfb0:	f7f6 f9cc 	bl	800234c <_lseek>
 800bfb4:	1c43      	adds	r3, r0, #1
 800bfb6:	d102      	bne.n	800bfbe <_lseek_r+0x1e>
 800bfb8:	682b      	ldr	r3, [r5, #0]
 800bfba:	b103      	cbz	r3, 800bfbe <_lseek_r+0x1e>
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	bd38      	pop	{r3, r4, r5, pc}
 800bfc0:	200008ac 	.word	0x200008ac

0800bfc4 <_read_r>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	4d07      	ldr	r5, [pc, #28]	; (800bfe4 <_read_r+0x20>)
 800bfc8:	4604      	mov	r4, r0
 800bfca:	4608      	mov	r0, r1
 800bfcc:	4611      	mov	r1, r2
 800bfce:	2200      	movs	r2, #0
 800bfd0:	602a      	str	r2, [r5, #0]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	f7f6 f95a 	bl	800228c <_read>
 800bfd8:	1c43      	adds	r3, r0, #1
 800bfda:	d102      	bne.n	800bfe2 <_read_r+0x1e>
 800bfdc:	682b      	ldr	r3, [r5, #0]
 800bfde:	b103      	cbz	r3, 800bfe2 <_read_r+0x1e>
 800bfe0:	6023      	str	r3, [r4, #0]
 800bfe2:	bd38      	pop	{r3, r4, r5, pc}
 800bfe4:	200008ac 	.word	0x200008ac

0800bfe8 <_init>:
 800bfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfea:	bf00      	nop
 800bfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfee:	bc08      	pop	{r3}
 800bff0:	469e      	mov	lr, r3
 800bff2:	4770      	bx	lr

0800bff4 <_fini>:
 800bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff6:	bf00      	nop
 800bff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffa:	bc08      	pop	{r3}
 800bffc:	469e      	mov	lr, r3
 800bffe:	4770      	bx	lr
