
gun20_i2cdma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009294  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800941c  0800941c  0001941c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009440  08009440  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009440  08009440  00019440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009448  08009448  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009448  08009448  00019448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800944c  0800944c  0001944c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000008f0  20000098  20000098  00020098  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000988  20000988  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017127  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b52  00000000  00000000  000371eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  0003ad40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001050  00000000  00000000  0003bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000249ff  00000000  00000000  0003cf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b21  00000000  00000000  0006196f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc62e  00000000  00000000  0007a490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146abe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bc8  00000000  00000000  00146b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009404 	.word	0x08009404

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08009404 	.word	0x08009404

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fd6d 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f825 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f949 	bl	8000770 <MX_GPIO_Init>
  MX_DMA_Init();
 80004de:	f000 f91f 	bl	8000720 <MX_DMA_Init>
  MX_I2S3_Init();
 80004e2:	f000 f8b7 	bl	8000654 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e6:	f000 f8e5 	bl	80006b4 <MX_SPI1_Init>

  MX_USB_HOST_Init();
 80004ea:	f008 fb43 	bl	8008b74 <MX_USB_HOST_Init>
  MX_I2C3_Init();
 80004ee:	f000 f883 	bl	80005f8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  setupr();
 80004f2:	f000 fa51 	bl	8000998 <setupr>

  //HAL_I2C_Mem_Read_DMA(&hi2c3, 0xd1, 0x3B, 1, pDataa, 6);
  HAL_Delay(5);
 80004f6:	2005      	movs	r0, #5
 80004f8:	f000 fdcc 	bl	8001094 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_Mem_Read_DMA(&hi2c3, 0xd1, 0x3B, 1, pDataa, 6);
 80004fc:	2306      	movs	r3, #6
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <main+0x50>)
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2301      	movs	r3, #1
 8000506:	223b      	movs	r2, #59	; 0x3b
 8000508:	21d1      	movs	r1, #209	; 0xd1
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <main+0x54>)
 800050c:	f003 fa94 	bl	8003a38 <HAL_I2C_Mem_Read_DMA>
	  //HAL_I2C_Mem_Read(&hi2c3, 0xd1, 0x3B, 1, pDataa, 6,100);
	  HAL_Delay(5);
 8000510:	2005      	movs	r0, #5
 8000512:	f000 fdbf 	bl	8001094 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000516:	f008 fb53 	bl	8008bc0 <MX_USB_HOST_Process>
	  HAL_I2C_Mem_Read_DMA(&hi2c3, 0xd1, 0x3B, 1, pDataa, 6);
 800051a:	e7ef      	b.n	80004fc <main+0x30>
 800051c:	200000b4 	.word	0x200000b4
 8000520:	200000c0 	.word	0x200000c0

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f008 fe60 	bl	80091f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xd0>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000594:	2308      	movs	r3, #8
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000598:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a2:	2307      	movs	r3, #7
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 fcc2 	bl	8004f34 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b6:	f000 f9e9 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2105      	movs	r1, #5
 80005d8:	4618      	mov	r0, r3
 80005da:	f004 ff23 	bl	8005424 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e4:	f000 f9d2 	bl	800098c <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2C3_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_I2C3_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_I2C3_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_I2C3_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_I2C3_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_I2C3_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_I2C3_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_I2C3_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_I2C3_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_I2C3_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_I2C3_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_I2C3_Init+0x50>)
 8000636:	f002 ffc1 	bl	80035bc <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f9a4 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000c0 	.word	0x200000c0
 800064c:	40005c00 	.word	0x40005c00
 8000650:	000186a0 	.word	0x000186a0

08000654 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_I2S3_Init+0x54>)
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <MX_I2S3_Init+0x58>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000664:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_I2S3_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000678:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_I2S3_Init+0x54>)
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <MX_I2S3_Init+0x5c>)
 800067e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000694:	f003 ffae 	bl	80045f4 <HAL_I2S_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800069e:	f000 f975 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200001d4 	.word	0x200001d4
 80006ac:	40003c00 	.word	0x40003c00
 80006b0:	00017700 	.word	0x00017700

080006b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <MX_SPI1_Init+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_SPI1_Init+0x64>)
 8000700:	220a      	movs	r2, #10
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_SPI1_Init+0x64>)
 8000706:	f005 f9d9 	bl	8005abc <HAL_SPI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 f93c 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000021c 	.word	0x2000021c
 800071c:	40013000 	.word	0x40013000

08000720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_DMA_Init+0x4c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <MX_DMA_Init+0x4c>)
 8000730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_DMA_Init+0x4c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	200d      	movs	r0, #13
 8000748:	f000 fda3 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800074c:	200d      	movs	r0, #13
 800074e:	f000 fdbc 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	200f      	movs	r0, #15
 8000758:	f000 fd9b 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800075c:	200f      	movs	r0, #15
 800075e:	f000 fdb4 	bl	80012ca <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	4b7a      	ldr	r3, [pc, #488]	; (8000974 <MX_GPIO_Init+0x204>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a79      	ldr	r2, [pc, #484]	; (8000974 <MX_GPIO_Init+0x204>)
 8000790:	f043 0310 	orr.w	r3, r3, #16
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b77      	ldr	r3, [pc, #476]	; (8000974 <MX_GPIO_Init+0x204>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	4b73      	ldr	r3, [pc, #460]	; (8000974 <MX_GPIO_Init+0x204>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a72      	ldr	r2, [pc, #456]	; (8000974 <MX_GPIO_Init+0x204>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b70      	ldr	r3, [pc, #448]	; (8000974 <MX_GPIO_Init+0x204>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b6c      	ldr	r3, [pc, #432]	; (8000974 <MX_GPIO_Init+0x204>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a6b      	ldr	r2, [pc, #428]	; (8000974 <MX_GPIO_Init+0x204>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b69      	ldr	r3, [pc, #420]	; (8000974 <MX_GPIO_Init+0x204>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b65      	ldr	r3, [pc, #404]	; (8000974 <MX_GPIO_Init+0x204>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a64      	ldr	r2, [pc, #400]	; (8000974 <MX_GPIO_Init+0x204>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b62      	ldr	r3, [pc, #392]	; (8000974 <MX_GPIO_Init+0x204>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <MX_GPIO_Init+0x204>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a5d      	ldr	r2, [pc, #372]	; (8000974 <MX_GPIO_Init+0x204>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b5b      	ldr	r3, [pc, #364]	; (8000974 <MX_GPIO_Init+0x204>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b57      	ldr	r3, [pc, #348]	; (8000974 <MX_GPIO_Init+0x204>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a56      	ldr	r2, [pc, #344]	; (8000974 <MX_GPIO_Init+0x204>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b54      	ldr	r3, [pc, #336]	; (8000974 <MX_GPIO_Init+0x204>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	4851      	ldr	r0, [pc, #324]	; (8000978 <MX_GPIO_Init+0x208>)
 8000834:	f001 fa9e 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2101      	movs	r1, #1
 800083c:	484f      	ldr	r0, [pc, #316]	; (800097c <MX_GPIO_Init+0x20c>)
 800083e:	f001 fa99 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000842:	2200      	movs	r2, #0
 8000844:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000848:	484d      	ldr	r0, [pc, #308]	; (8000980 <MX_GPIO_Init+0x210>)
 800084a:	f001 fa93 	bl	8001d74 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084e:	2308      	movs	r3, #8
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4844      	ldr	r0, [pc, #272]	; (8000978 <MX_GPIO_Init+0x208>)
 8000866:	f001 f8e9 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800086a:	2301      	movs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	483e      	ldr	r0, [pc, #248]	; (800097c <MX_GPIO_Init+0x20c>)
 8000882:	f001 f8db 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000886:	2308      	movs	r3, #8
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000896:	2305      	movs	r3, #5
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4836      	ldr	r0, [pc, #216]	; (800097c <MX_GPIO_Init+0x20c>)
 80008a2:	f001 f8cb 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008aa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4832      	ldr	r0, [pc, #200]	; (8000984 <MX_GPIO_Init+0x214>)
 80008bc:	f001 f8be 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c0:	2304      	movs	r3, #4
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	482d      	ldr	r0, [pc, #180]	; (8000988 <MX_GPIO_Init+0x218>)
 80008d4:	f001 f8b2 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4824      	ldr	r0, [pc, #144]	; (8000988 <MX_GPIO_Init+0x218>)
 80008f6:	f001 f8a1 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	481b      	ldr	r0, [pc, #108]	; (8000980 <MX_GPIO_Init+0x210>)
 8000914:	f001 f892 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000918:	2320      	movs	r3, #32
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4815      	ldr	r0, [pc, #84]	; (8000980 <MX_GPIO_Init+0x210>)
 800092c:	f001 f886 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000930:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000936:	2312      	movs	r3, #18
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000942:	2304      	movs	r3, #4
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	480e      	ldr	r0, [pc, #56]	; (8000988 <MX_GPIO_Init+0x218>)
 800094e:	f001 f875 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000952:	2302      	movs	r3, #2
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000956:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_GPIO_Init+0x208>)
 8000968:	f001 f868 	bl	8001a3c <HAL_GPIO_Init>

}
 800096c:	bf00      	nop
 800096e:	3730      	adds	r7, #48	; 0x30
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40021000 	.word	0x40021000
 800097c:	40020800 	.word	0x40020800
 8000980:	40020c00 	.word	0x40020c00
 8000984:	40020000 	.word	0x40020000
 8000988:	40020400 	.word	0x40020400

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <setupr>:
int mpu9250inst, ak8963inst;

char init_seq = 0;

void setupr(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x6B, 1, &deger1, 1, 100);
 800099e:	2364      	movs	r3, #100	; 0x64
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	2301      	movs	r3, #1
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <setupr+0x100>)
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2301      	movs	r3, #1
 80009ac:	226b      	movs	r2, #107	; 0x6b
 80009ae:	21d0      	movs	r1, #208	; 0xd0
 80009b0:	483a      	ldr	r0, [pc, #232]	; (8000a9c <setupr+0x104>)
 80009b2:	f002 ff47 	bl	8003844 <HAL_I2C_Mem_Write>
	// Accel Range +-2g
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1C, 1, &deger1, 1, 100);
 80009b6:	2364      	movs	r3, #100	; 0x64
 80009b8:	9302      	str	r3, [sp, #8]
 80009ba:	2301      	movs	r3, #1
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <setupr+0x100>)
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2301      	movs	r3, #1
 80009c4:	221c      	movs	r2, #28
 80009c6:	21d0      	movs	r1, #208	; 0xd0
 80009c8:	4834      	ldr	r0, [pc, #208]	; (8000a9c <setupr+0x104>)
 80009ca:	f002 ff3b 	bl	8003844 <HAL_I2C_Mem_Write>
	accl_scale = 16384.0;
 80009ce:	4934      	ldr	r1, [pc, #208]	; (8000aa0 <setupr+0x108>)
 80009d0:	f04f 0200 	mov.w	r2, #0
 80009d4:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <setupr+0x10c>)
 80009d6:	e9c1 2300 	strd	r2, r3, [r1]
	// Filter 420 Hz
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1D, 1, &deger4, 1, 100);
 80009da:	2364      	movs	r3, #100	; 0x64
 80009dc:	9302      	str	r3, [sp, #8]
 80009de:	2301      	movs	r3, #1
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <setupr+0x110>)
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2301      	movs	r3, #1
 80009e8:	221d      	movs	r2, #29
 80009ea:	21d0      	movs	r1, #208	; 0xd0
 80009ec:	482b      	ldr	r0, [pc, #172]	; (8000a9c <setupr+0x104>)
 80009ee:	f002 ff29 	bl	8003844 <HAL_I2C_Mem_Write>
	 // Gyro Range +-250 degrees/s
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1B, 1, &deger1, 1, 100);
 80009f2:	2364      	movs	r3, #100	; 0x64
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	2301      	movs	r3, #1
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <setupr+0x100>)
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2301      	movs	r3, #1
 8000a00:	221b      	movs	r2, #27
 8000a02:	21d0      	movs	r1, #208	; 0xd0
 8000a04:	4825      	ldr	r0, [pc, #148]	; (8000a9c <setupr+0x104>)
 8000a06:	f002 ff1d 	bl	8003844 <HAL_I2C_Mem_Write>
	gyro_scale = 131.0;
 8000a0a:	4928      	ldr	r1, [pc, #160]	; (8000aac <setupr+0x114>)
 8000a0c:	a31e      	add	r3, pc, #120	; (adr r3, 8000a88 <setupr+0xf0>)
 8000a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a12:	e9c1 2300 	strd	r2, r3, [r1]
	// DLPF Bandwidth = 10
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1A, 1, &deger3, 1, 100);
 8000a16:	2364      	movs	r3, #100	; 0x64
 8000a18:	9302      	str	r3, [sp, #8]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <setupr+0x118>)
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2301      	movs	r3, #1
 8000a24:	221a      	movs	r2, #26
 8000a26:	21d0      	movs	r1, #208	; 0xd0
 8000a28:	481c      	ldr	r0, [pc, #112]	; (8000a9c <setupr+0x104>)
 8000a2a:	f002 ff0b 	bl	8003844 <HAL_I2C_Mem_Write>
	// Enable Magnetometer (address 0x0c)
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x37, 1, &deger2, 1, 100);
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	9302      	str	r3, [sp, #8]
 8000a32:	2301      	movs	r3, #1
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <setupr+0x11c>)
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	2237      	movs	r2, #55	; 0x37
 8000a3e:	21d0      	movs	r1, #208	; 0xd0
 8000a40:	4816      	ldr	r0, [pc, #88]	; (8000a9c <setupr+0x104>)
 8000a42:	f002 feff 	bl	8003844 <HAL_I2C_Mem_Write>
	// Set power-down mode before the transition to another mode.
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x0A, 1, &deger1, 1, 100);
 8000a46:	2364      	movs	r3, #100	; 0x64
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <setupr+0x100>)
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	220a      	movs	r2, #10
 8000a56:	21d0      	movs	r1, #208	; 0xd0
 8000a58:	4810      	ldr	r0, [pc, #64]	; (8000a9c <setupr+0x104>)
 8000a5a:	f002 fef3 	bl	8003844 <HAL_I2C_Mem_Write>
	// Set Continuous measurement mode 0x12 - 8Hz & 16-bit; 0x16 - 100 Hz & 16-bit
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x0A, 1, &deger5, 1, 100);
 8000a5e:	2364      	movs	r3, #100	; 0x64
 8000a60:	9302      	str	r3, [sp, #8]
 8000a62:	2301      	movs	r3, #1
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <setupr+0x120>)
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	220a      	movs	r2, #10
 8000a6e:	21d0      	movs	r1, #208	; 0xd0
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <setupr+0x104>)
 8000a72:	f002 fee7 	bl	8003844 <HAL_I2C_Mem_Write>
	magn_scale = 6826.7;
 8000a76:	4911      	ldr	r1, [pc, #68]	; (8000abc <setupr+0x124>)
 8000a78:	a305      	add	r3, pc, #20	; (adr r3, 8000a90 <setupr+0xf8>)
 8000a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7e:	e9c1 2300 	strd	r2, r3, [r1]

}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	00000000 	.word	0x00000000
 8000a8c:	40606000 	.word	0x40606000
 8000a90:	33333333 	.word	0x33333333
 8000a94:	40baaab3 	.word	0x40baaab3
 8000a98:	20000274 	.word	0x20000274
 8000a9c:	200000c0 	.word	0x200000c0
 8000aa0:	20000278 	.word	0x20000278
 8000aa4:	40d00000 	.word	0x40d00000
 8000aa8:	20000002 	.word	0x20000002
 8000aac:	20000280 	.word	0x20000280
 8000ab0:	20000001 	.word	0x20000001
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000003 	.word	0x20000003
 8000abc:	20000288 	.word	0x20000288

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afe:	2007      	movs	r0, #7
 8000b00:	f000 fbbc 	bl	800127c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a57      	ldr	r2, [pc, #348]	; (8000c8c <HAL_I2C_MspInit+0x17c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	f040 80a8 	bne.w	8000c84 <HAL_I2C_MspInit+0x174>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b55      	ldr	r3, [pc, #340]	; (8000c90 <HAL_I2C_MspInit+0x180>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a54      	ldr	r2, [pc, #336]	; (8000c90 <HAL_I2C_MspInit+0x180>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b52      	ldr	r3, [pc, #328]	; (8000c90 <HAL_I2C_MspInit+0x180>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b4e      	ldr	r3, [pc, #312]	; (8000c90 <HAL_I2C_MspInit+0x180>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a4d      	ldr	r2, [pc, #308]	; (8000c90 <HAL_I2C_MspInit+0x180>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b4b      	ldr	r3, [pc, #300]	; (8000c90 <HAL_I2C_MspInit+0x180>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b72:	2312      	movs	r3, #18
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4842      	ldr	r0, [pc, #264]	; (8000c94 <HAL_I2C_MspInit+0x184>)
 8000b8a:	f000 ff57 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b94:	2312      	movs	r3, #18
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	483b      	ldr	r0, [pc, #236]	; (8000c98 <HAL_I2C_MspInit+0x188>)
 8000bac:	f000 ff46 	bl	8001a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <HAL_I2C_MspInit+0x180>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a35      	ldr	r2, [pc, #212]	; (8000c90 <HAL_I2C_MspInit+0x180>)
 8000bba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <HAL_I2C_MspInit+0x180>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8000bcc:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000bce:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <HAL_I2C_MspInit+0x190>)
 8000bd0:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8000bd2:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000bd4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000bd8:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bda:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be0:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000be6:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bec:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf4:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c06:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8000c0c:	4823      	ldr	r0, [pc, #140]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000c0e:	f000 fb77 	bl	8001300 <HAL_DMA_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 8000c18:	f7ff feb8 	bl	800098c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38
 8000c22:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <HAL_I2C_MspInit+0x18c>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <HAL_I2C_MspInit+0x198>)
 8000c2c:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c30:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c34:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c38:	2240      	movs	r2, #64	; 0x40
 8000c3a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c48:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8000c68:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c6a:	f000 fb49 	bl	8001300 <HAL_DMA_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8000c74:	f7ff fe8a 	bl	800098c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c7e:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <HAL_I2C_MspInit+0x194>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40005c00 	.word	0x40005c00
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020800 	.word	0x40020800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	20000114 	.word	0x20000114
 8000ca0:	40026040 	.word	0x40026040
 8000ca4:	20000174 	.word	0x20000174
 8000ca8:	40026070 	.word	0x40026070

08000cac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a31      	ldr	r2, [pc, #196]	; (8000d9c <HAL_I2S_MspInit+0xf0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d15a      	bne.n	8000d92 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ce0:	23c0      	movs	r3, #192	; 0xc0
 8000ce2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4618      	mov	r0, r3
 8000cee:	f004 fda5 	bl	800583c <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cf8:	f7ff fe48 	bl	800098c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_I2S_MspInit+0xf4>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d50:	2310      	movs	r3, #16
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d60:	2306      	movs	r3, #6
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480e      	ldr	r0, [pc, #56]	; (8000da4 <HAL_I2S_MspInit+0xf8>)
 8000d6c:	f000 fe66 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d70:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d82:	2306      	movs	r3, #6
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <HAL_I2S_MspInit+0xfc>)
 8000d8e:	f000 fe55 	bl	8001a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3738      	adds	r7, #56	; 0x38
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40003c00 	.word	0x40003c00
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020800 	.word	0x40020800

08000dac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_SPI_MspInit+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12b      	bne.n	8000e26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_SPI_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e06:	23e0      	movs	r3, #224	; 0xe0
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e16:	2305      	movs	r3, #5
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_SPI_MspInit+0x8c>)
 8000e22:	f000 fe0b 	bl	8001a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40013000 	.word	0x40013000
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 f8e4 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA1_Stream2_IRQHandler+0x10>)
 8000e96:	f000 fb5b 	bl	8001550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000114 	.word	0x20000114

08000ea4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <DMA1_Stream4_IRQHandler+0x10>)
 8000eaa:	f000 fb51 	bl	8001550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000174 	.word	0x20000174

08000eb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <OTG_FS_IRQHandler+0x10>)
 8000ebe:	f001 f9dd 	bl	800227c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000674 	.word	0x20000674

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f008 f942 	bl	8009184 <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20020000 	.word	0x20020000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	20000290 	.word	0x20000290
 8000f34:	20000988 	.word	0x20000988

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f62:	490e      	ldr	r1, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f78:	4c0b      	ldr	r4, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f86:	f7ff ffd7 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f008 f901 	bl	8009190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fa9d 	bl	80004cc <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000fa0:	08009450 	.word	0x08009450
  ldr r2, =_sbss
 8000fa4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000fa8:	20000988 	.word	0x20000988

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f94f 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fd6c 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f967 	bl	80012e6 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f92f 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000004 	.word	0x20000004
 800104c:	2000000c 	.word	0x2000000c
 8001050:	20000008 	.word	0x20000008

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	2000000c 	.word	0x2000000c
 8001078:	20000294 	.word	0x20000294

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000294 	.word	0x20000294

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000000c 	.word	0x2000000c

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff3e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff31 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff feb6 	bl	800107c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e099      	b.n	8001450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133c:	e00f      	b.n	800135e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800133e:	f7ff fe9d 	bl	800107c <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b05      	cmp	r3, #5
 800134a:	d908      	bls.n	800135e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2220      	movs	r2, #32
 8001350:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e078      	b.n	8001450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e8      	bne.n	800133e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <HAL_DMA_Init+0x158>)
 8001378:	4013      	ands	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d107      	bne.n	80013c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4313      	orrs	r3, r2
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f023 0307 	bic.w	r3, r3, #7
 80013de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d117      	bne.n	8001422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00e      	beq.n	8001422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fa9d 	bl	8001944 <DMA_CheckFifoParam>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2240      	movs	r2, #64	; 0x40
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800141e:	2301      	movs	r3, #1
 8001420:	e016      	b.n	8001450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fa54 	bl	80018d8 <DMA_CalcBaseAndBitshift>
 8001430:	4603      	mov	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001438:	223f      	movs	r2, #63	; 0x3f
 800143a:	409a      	lsls	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	f010803f 	.word	0xf010803f

0800145c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_DMA_Start_IT+0x26>
 800147e:	2302      	movs	r3, #2
 8001480:	e040      	b.n	8001504 <HAL_DMA_Start_IT+0xa8>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b01      	cmp	r3, #1
 8001494:	d12f      	bne.n	80014f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2202      	movs	r2, #2
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f9e6 	bl	800187c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	223f      	movs	r2, #63	; 0x3f
 80014b6:	409a      	lsls	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0216 	orr.w	r2, r2, #22
 80014ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0208 	orr.w	r2, r2, #8
 80014e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e005      	b.n	8001502 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014fe:	2302      	movs	r3, #2
 8001500:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001502:	7dfb      	ldrb	r3, [r7, #23]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d004      	beq.n	800152a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00c      	b.n	8001544 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2205      	movs	r2, #5
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800155c:	4b8e      	ldr	r3, [pc, #568]	; (8001798 <HAL_DMA_IRQHandler+0x248>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a8e      	ldr	r2, [pc, #568]	; (800179c <HAL_DMA_IRQHandler+0x24c>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	0a9b      	lsrs	r3, r3, #10
 8001568:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157a:	2208      	movs	r2, #8
 800157c:	409a      	lsls	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4013      	ands	r3, r2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d01a      	beq.n	80015bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d013      	beq.n	80015bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0204 	bic.w	r2, r2, #4
 80015a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	2208      	movs	r2, #8
 80015aa:	409a      	lsls	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	2201      	movs	r2, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d012      	beq.n	80015f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2201      	movs	r2, #1
 80015e0:	409a      	lsls	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ea:	f043 0202 	orr.w	r2, r3, #2
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	2204      	movs	r2, #4
 80015f8:	409a      	lsls	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d012      	beq.n	8001628 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00b      	beq.n	8001628 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	2204      	movs	r2, #4
 8001616:	409a      	lsls	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	f043 0204 	orr.w	r2, r3, #4
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	2210      	movs	r2, #16
 800162e:	409a      	lsls	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d043      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d03c      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	2210      	movs	r2, #16
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d018      	beq.n	8001692 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d108      	bne.n	8001680 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	2b00      	cmp	r3, #0
 8001674:	d024      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	4798      	blx	r3
 800167e:	e01f      	b.n	80016c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01b      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
 8001690:	e016      	b.n	80016c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d107      	bne.n	80016b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0208 	bic.w	r2, r2, #8
 80016ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	2220      	movs	r2, #32
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 808f 	beq.w	80017f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 8087 	beq.w	80017f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e6:	2220      	movs	r2, #32
 80016e8:	409a      	lsls	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d136      	bne.n	8001768 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0216 	bic.w	r2, r2, #22
 8001708:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001718:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <HAL_DMA_IRQHandler+0x1da>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0208 	bic.w	r2, r2, #8
 8001738:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	223f      	movs	r2, #63	; 0x3f
 8001740:	409a      	lsls	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175a:	2b00      	cmp	r3, #0
 800175c:	d07e      	beq.n	800185c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
        }
        return;
 8001766:	e079      	b.n	800185c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d01d      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10d      	bne.n	80017a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	2b00      	cmp	r3, #0
 800178a:	d031      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
 8001794:	e02c      	b.n	80017f0 <HAL_DMA_IRQHandler+0x2a0>
 8001796:	bf00      	nop
 8001798:	20000004 	.word	0x20000004
 800179c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d023      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
 80017b0:	e01e      	b.n	80017f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10f      	bne.n	80017e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0210 	bic.w	r2, r2, #16
 80017ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d032      	beq.n	800185e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d022      	beq.n	800184a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2205      	movs	r2, #5
 8001808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	3301      	adds	r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	429a      	cmp	r2, r3
 8001826:	d307      	bcc.n	8001838 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f2      	bne.n	800181c <HAL_DMA_IRQHandler+0x2cc>
 8001836:	e000      	b.n	800183a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001838:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
 800185a:	e000      	b.n	800185e <HAL_DMA_IRQHandler+0x30e>
        return;
 800185c:	bf00      	nop
    }
  }
}
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001898:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	d108      	bne.n	80018bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018ba:	e007      	b.n	80018cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	60da      	str	r2, [r3, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3b10      	subs	r3, #16
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <DMA_CalcBaseAndBitshift+0x64>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018f2:	4a13      	ldr	r2, [pc, #76]	; (8001940 <DMA_CalcBaseAndBitshift+0x68>)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d909      	bls.n	800191a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	1d1a      	adds	r2, r3, #4
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	659a      	str	r2, [r3, #88]	; 0x58
 8001918:	e007      	b.n	800192a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001922:	f023 0303 	bic.w	r3, r3, #3
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	aaaaaaab 	.word	0xaaaaaaab
 8001940:	08009438 	.word	0x08009438

08001944 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d11f      	bne.n	800199e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d856      	bhi.n	8001a12 <DMA_CheckFifoParam+0xce>
 8001964:	a201      	add	r2, pc, #4	; (adr r2, 800196c <DMA_CheckFifoParam+0x28>)
 8001966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196a:	bf00      	nop
 800196c:	0800197d 	.word	0x0800197d
 8001970:	0800198f 	.word	0x0800198f
 8001974:	0800197d 	.word	0x0800197d
 8001978:	08001a13 	.word	0x08001a13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d046      	beq.n	8001a16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800198c:	e043      	b.n	8001a16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001996:	d140      	bne.n	8001a1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800199c:	e03d      	b.n	8001a1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a6:	d121      	bne.n	80019ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d837      	bhi.n	8001a1e <DMA_CheckFifoParam+0xda>
 80019ae:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <DMA_CheckFifoParam+0x70>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019cb 	.word	0x080019cb
 80019bc:	080019c5 	.word	0x080019c5
 80019c0:	080019dd 	.word	0x080019dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
      break;
 80019c8:	e030      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d025      	beq.n	8001a22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019da:	e022      	b.n	8001a22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019e4:	d11f      	bne.n	8001a26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019ea:	e01c      	b.n	8001a26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d903      	bls.n	80019fa <DMA_CheckFifoParam+0xb6>
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d003      	beq.n	8001a00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019f8:	e018      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
      break;
 80019fe:	e015      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00e      	beq.n	8001a2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a10:	e00b      	b.n	8001a2a <DMA_CheckFifoParam+0xe6>
      break;
 8001a12:	bf00      	nop
 8001a14:	e00a      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;
 8001a16:	bf00      	nop
 8001a18:	e008      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e006      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e004      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;
 8001a22:	bf00      	nop
 8001a24:	e002      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a26:	bf00      	nop
 8001a28:	e000      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;
 8001a2a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e16b      	b.n	8001d30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 815a 	bne.w	8001d2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d130      	bne.n	8001af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0201 	and.w	r2, r3, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d017      	beq.n	8001b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d123      	bne.n	8001b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80b4 	beq.w	8001d2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b60      	ldr	r3, [pc, #384]	; (8001d48 <HAL_GPIO_Init+0x30c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a5f      	ldr	r2, [pc, #380]	; (8001d48 <HAL_GPIO_Init+0x30c>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b5d      	ldr	r3, [pc, #372]	; (8001d48 <HAL_GPIO_Init+0x30c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bde:	4a5b      	ldr	r2, [pc, #364]	; (8001d4c <HAL_GPIO_Init+0x310>)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_GPIO_Init+0x314>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d02b      	beq.n	8001c62 <HAL_GPIO_Init+0x226>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a51      	ldr	r2, [pc, #324]	; (8001d54 <HAL_GPIO_Init+0x318>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d025      	beq.n	8001c5e <HAL_GPIO_Init+0x222>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a50      	ldr	r2, [pc, #320]	; (8001d58 <HAL_GPIO_Init+0x31c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01f      	beq.n	8001c5a <HAL_GPIO_Init+0x21e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4f      	ldr	r2, [pc, #316]	; (8001d5c <HAL_GPIO_Init+0x320>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d019      	beq.n	8001c56 <HAL_GPIO_Init+0x21a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4e      	ldr	r2, [pc, #312]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x216>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4d      	ldr	r2, [pc, #308]	; (8001d64 <HAL_GPIO_Init+0x328>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x212>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4c      	ldr	r2, [pc, #304]	; (8001d68 <HAL_GPIO_Init+0x32c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x20e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4b      	ldr	r2, [pc, #300]	; (8001d6c <HAL_GPIO_Init+0x330>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x20a>
 8001c42:	2307      	movs	r3, #7
 8001c44:	e00e      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c46:	2308      	movs	r3, #8
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	; (8001d4c <HAL_GPIO_Init+0x310>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d24:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f ae90 	bls.w	8001a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40021400 	.word	0x40021400
 8001d68:	40021800 	.word	0x40021800
 8001d6c:	40021c00 	.word	0x40021c00
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d90:	e003      	b.n	8001d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001da6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da8:	b08f      	sub	sp, #60	; 0x3c
 8001daa:	af0a      	add	r7, sp, #40	; 0x28
 8001dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e054      	b.n	8001e62 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f006 ff2c 	bl	8008c30 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 ff5b 	bl	8005cb2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	687e      	ldr	r6, [r7, #4]
 8001e04:	466d      	mov	r5, sp
 8001e06:	f106 0410 	add.w	r4, r6, #16
 8001e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e1a:	1d33      	adds	r3, r6, #4
 8001e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1e:	6838      	ldr	r0, [r7, #0]
 8001e20:	f003 fed5 	bl	8005bce <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 ff52 	bl	8005cd4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	687e      	ldr	r6, [r7, #4]
 8001e38:	466d      	mov	r5, sp
 8001e3a:	f106 0410 	add.w	r4, r6, #16
 8001e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e4e:	1d33      	adds	r3, r6, #4
 8001e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e52:	6838      	ldr	r0, [r7, #0]
 8001e54:	f004 f8da 	bl	800600c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e6a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e6a:	b590      	push	{r4, r7, lr}
 8001e6c:	b089      	sub	sp, #36	; 0x24
 8001e6e:	af04      	add	r7, sp, #16
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	4608      	mov	r0, r1
 8001e74:	4611      	mov	r1, r2
 8001e76:	461a      	mov	r2, r3
 8001e78:	4603      	mov	r3, r0
 8001e7a:	70fb      	strb	r3, [r7, #3]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70bb      	strb	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_HCD_HC_Init+0x28>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e076      	b.n	8001f80 <HAL_HCD_HC_Init+0x116>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	212c      	movs	r1, #44	; 0x2c
 8001ea0:	fb01 f303 	mul.w	r3, r1, r3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	333d      	adds	r3, #61	; 0x3d
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	212c      	movs	r1, #44	; 0x2c
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3338      	adds	r3, #56	; 0x38
 8001eba:	787a      	ldrb	r2, [r7, #1]
 8001ebc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	212c      	movs	r1, #44	; 0x2c
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	3340      	adds	r3, #64	; 0x40
 8001ecc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ece:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	212c      	movs	r1, #44	; 0x2c
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	3339      	adds	r3, #57	; 0x39
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	333f      	adds	r3, #63	; 0x3f
 8001ef0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ef4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	78ba      	ldrb	r2, [r7, #2]
 8001efa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001efe:	b2d0      	uxtb	r0, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	212c      	movs	r1, #44	; 0x2c
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	333a      	adds	r3, #58	; 0x3a
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da09      	bge.n	8001f2c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	333b      	adds	r3, #59	; 0x3b
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e008      	b.n	8001f3e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	212c      	movs	r1, #44	; 0x2c
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	333b      	adds	r3, #59	; 0x3b
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	333c      	adds	r3, #60	; 0x3c
 8001f4c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f50:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	787c      	ldrb	r4, [r7, #1]
 8001f58:	78ba      	ldrb	r2, [r7, #2]
 8001f5a:	78f9      	ldrb	r1, [r7, #3]
 8001f5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f5e:	9302      	str	r3, [sp, #8]
 8001f60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	4623      	mov	r3, r4
 8001f6e:	f004 f9d3 	bl	8006318 <USB_HC_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd90      	pop	{r4, r7, pc}

08001f88 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_HCD_HC_Halt+0x1e>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e00f      	b.n	8001fc6 <HAL_HCD_HC_Halt+0x3e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 fc23 	bl	8006802 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	70fb      	strb	r3, [r7, #3]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70bb      	strb	r3, [r7, #2]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	333b      	adds	r3, #59	; 0x3b
 8001ff8:	78ba      	ldrb	r2, [r7, #2]
 8001ffa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	333f      	adds	r3, #63	; 0x3f
 800200a:	787a      	ldrb	r2, [r7, #1]
 800200c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800200e:	7c3b      	ldrb	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d112      	bne.n	800203a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3342      	adds	r3, #66	; 0x42
 8002022:	2203      	movs	r2, #3
 8002024:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	212c      	movs	r1, #44	; 0x2c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	333d      	adds	r3, #61	; 0x3d
 8002034:	7f3a      	ldrb	r2, [r7, #28]
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e008      	b.n	800204c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	212c      	movs	r1, #44	; 0x2c
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	3342      	adds	r3, #66	; 0x42
 8002048:	2202      	movs	r2, #2
 800204a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b03      	cmp	r3, #3
 8002050:	f200 80c6 	bhi.w	80021e0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002054:	a201      	add	r2, pc, #4	; (adr r2, 800205c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	0800206d 	.word	0x0800206d
 8002060:	080021cd 	.word	0x080021cd
 8002064:	080020d1 	.word	0x080020d1
 8002068:	0800214f 	.word	0x0800214f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800206c:	7c3b      	ldrb	r3, [r7, #16]
 800206e:	2b01      	cmp	r3, #1
 8002070:	f040 80b8 	bne.w	80021e4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002074:	78bb      	ldrb	r3, [r7, #2]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f040 80b4 	bne.w	80021e4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800207c:	8b3b      	ldrh	r3, [r7, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3355      	adds	r3, #85	; 0x55
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3355      	adds	r3, #85	; 0x55
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3342      	adds	r3, #66	; 0x42
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020ba:	e093      	b.n	80021e4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3342      	adds	r3, #66	; 0x42
 80020ca:	2202      	movs	r2, #2
 80020cc:	701a      	strb	r2, [r3, #0]
      break;
 80020ce:	e089      	b.n	80021e4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80020d0:	78bb      	ldrb	r3, [r7, #2]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11d      	bne.n	8002112 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3355      	adds	r3, #85	; 0x55
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3342      	adds	r3, #66	; 0x42
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80020fc:	e073      	b.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3342      	adds	r3, #66	; 0x42
 800210c:	2202      	movs	r2, #2
 800210e:	701a      	strb	r2, [r3, #0]
      break;
 8002110:	e069      	b.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3354      	adds	r3, #84	; 0x54
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3342      	adds	r3, #66	; 0x42
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
      break;
 8002138:	e055      	b.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3342      	adds	r3, #66	; 0x42
 8002148:	2202      	movs	r2, #2
 800214a:	701a      	strb	r2, [r3, #0]
      break;
 800214c:	e04b      	b.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800214e:	78bb      	ldrb	r3, [r7, #2]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11d      	bne.n	8002190 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3355      	adds	r3, #85	; 0x55
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3342      	adds	r3, #66	; 0x42
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800217a:	e034      	b.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3342      	adds	r3, #66	; 0x42
 800218a:	2202      	movs	r2, #2
 800218c:	701a      	strb	r2, [r3, #0]
      break;
 800218e:	e02a      	b.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3354      	adds	r3, #84	; 0x54
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3342      	adds	r3, #66	; 0x42
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
      break;
 80021b6:	e016      	b.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3342      	adds	r3, #66	; 0x42
 80021c6:	2202      	movs	r2, #2
 80021c8:	701a      	strb	r2, [r3, #0]
      break;
 80021ca:	e00c      	b.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3342      	adds	r3, #66	; 0x42
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
      break;
 80021de:	e002      	b.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80021e0:	bf00      	nop
 80021e2:	e000      	b.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80021e4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3344      	adds	r3, #68	; 0x44
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	8b3a      	ldrh	r2, [r7, #24]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	202c      	movs	r0, #44	; 0x2c
 8002200:	fb00 f303 	mul.w	r3, r0, r3
 8002204:	440b      	add	r3, r1
 8002206:	334c      	adds	r3, #76	; 0x4c
 8002208:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3360      	adds	r3, #96	; 0x60
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3350      	adds	r3, #80	; 0x50
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	3339      	adds	r3, #57	; 0x39
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3361      	adds	r3, #97	; 0x61
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	222c      	movs	r2, #44	; 0x2c
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	3338      	adds	r3, #56	; 0x38
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	18d1      	adds	r1, r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	f004 f976 	bl	800655c <USB_HC_StartXfer>
 8002270:	4603      	mov	r3, r0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop

0800227c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f003 fe77 	bl	8005f86 <USB_GetMode>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	f040 80f6 	bne.w	800248c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 fe5b 	bl	8005f60 <USB_ReadInterrupts>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80ec 	beq.w	800248a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 fe52 	bl	8005f60 <USB_ReadInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022c6:	d104      	bne.n	80022d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80022d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fe42 	bl	8005f60 <USB_ReadInterrupts>
 80022dc:	4603      	mov	r3, r0
 80022de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022e6:	d104      	bne.n	80022f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fe32 	bl	8005f60 <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002306:	d104      	bne.n	8002312 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002310:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fe22 	bl	8005f60 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b02      	cmp	r3, #2
 8002324:	d103      	bne.n	800232e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2202      	movs	r2, #2
 800232c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 fe14 	bl	8005f60 <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800233e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002342:	d11c      	bne.n	800237e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800234c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800235e:	2110      	movs	r1, #16
 8002360:	6938      	ldr	r0, [r7, #16]
 8002362:	f003 fd03 	bl	8005d6c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002366:	6938      	ldr	r0, [r7, #16]
 8002368:	f003 fd34 	bl	8005dd4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2101      	movs	r1, #1
 8002372:	4618      	mov	r0, r3
 8002374:	f003 ff0a 	bl	800618c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f006 fcd7 	bl	8008d2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fdec 	bl	8005f60 <USB_ReadInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800238e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002392:	d102      	bne.n	800239a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f001 f89e 	bl	80034d6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 fdde 	bl	8005f60 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d106      	bne.n	80023bc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f006 fca0 	bl	8008cf4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2208      	movs	r2, #8
 80023ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 fdcd 	bl	8005f60 <USB_ReadInterrupts>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d101      	bne.n	80023d4 <HAL_HCD_IRQHandler+0x158>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_HCD_IRQHandler+0x15a>
 80023d4:	2300      	movs	r3, #0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d012      	beq.n	8002400 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0210 	bic.w	r2, r2, #16
 80023e8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 ffa1 	bl	8003332 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0210 	orr.w	r2, r2, #16
 80023fe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f003 fdab 	bl	8005f60 <USB_ReadInterrupts>
 800240a:	4603      	mov	r3, r0
 800240c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002414:	d13a      	bne.n	800248c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f004 f9e0 	bl	80067e0 <USB_HC_ReadInterrupt>
 8002420:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e025      	b.n	8002474 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d018      	beq.n	800246e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800244e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002452:	d106      	bne.n	8002462 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8ab 	bl	80025b6 <HCD_HC_IN_IRQHandler>
 8002460:	e005      	b.n	800246e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fbf9 	bl	8002c60 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	3301      	adds	r3, #1
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	429a      	cmp	r2, r3
 800247c:	d3d4      	bcc.n	8002428 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002486:	615a      	str	r2, [r3, #20]
 8002488:	e000      	b.n	800248c <HAL_HCD_IRQHandler+0x210>
      return;
 800248a:	bf00      	nop
    }
  }
}
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_HCD_Start+0x16>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e013      	b.n	80024d0 <HAL_HCD_Start+0x3e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2101      	movs	r1, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fecc 	bl	8006254 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 fbe5 	bl	8005c90 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_HCD_Stop+0x16>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e00d      	b.n	800250a <HAL_HCD_Stop+0x32>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f004 faba 	bl	8006a74 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fe6e 	bl	8006200 <USB_ResetPort>
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3360      	adds	r3, #96	; 0x60
 8002548:	781b      	ldrb	r3, [r3, #0]
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3350      	adds	r3, #80	; 0x50
 8002570:	681b      	ldr	r3, [r3, #0]
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 feb2 	bl	80062f4 <USB_GetCurrentFrame>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fe8d 	bl	80062c6 <USB_GetHostSpeed>
 80025ac:	4603      	mov	r3, r0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d11a      	bne.n	800261c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	461a      	mov	r2, r3
 80025f4:	2304      	movs	r3, #4
 80025f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3361      	adds	r3, #97	; 0x61
 8002606:	2206      	movs	r2, #6
 8002608:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f004 f8f4 	bl	8006802 <USB_HC_Halt>
 800261a:	e0af      	b.n	800277c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002632:	d11b      	bne.n	800266c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	461a      	mov	r2, r3
 8002642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002646:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	3361      	adds	r3, #97	; 0x61
 8002656:	2207      	movs	r2, #7
 8002658:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f004 f8cc 	bl	8006802 <USB_HC_Halt>
 800266a:	e087      	b.n	800277c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b20      	cmp	r3, #32
 8002680:	d109      	bne.n	8002696 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	2320      	movs	r3, #32
 8002692:	6093      	str	r3, [r2, #8]
 8002694:	e072      	b.n	800277c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4413      	add	r3, r2
 800269e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d11a      	bne.n	80026e2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	2308      	movs	r3, #8
 80026bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3361      	adds	r3, #97	; 0x61
 80026cc:	2205      	movs	r2, #5
 80026ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 f891 	bl	8006802 <USB_HC_Halt>
 80026e0:	e04c      	b.n	800277c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f8:	d11b      	bne.n	8002732 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3361      	adds	r3, #97	; 0x61
 800271c:	2208      	movs	r2, #8
 800271e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f004 f869 	bl	8006802 <USB_HC_Halt>
 8002730:	e024      	b.n	800277c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b80      	cmp	r3, #128	; 0x80
 8002746:	d119      	bne.n	800277c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	461a      	mov	r2, r3
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	3361      	adds	r3, #97	; 0x61
 8002768:	2206      	movs	r2, #6
 800276a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f004 f843 	bl	8006802 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002792:	d112      	bne.n	80027ba <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 f82f 	bl	8006802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	461a      	mov	r2, r3
 80027b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80027b8:	e24e      	b.n	8002c58 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	f040 80df 	bne.w	8002990 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d019      	beq.n	800280e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	3348      	adds	r3, #72	; 0x48
 80027e8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0159      	lsls	r1, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80027fc:	1ad2      	subs	r2, r2, r3
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	202c      	movs	r0, #44	; 0x2c
 8002804:	fb00 f303 	mul.w	r3, r0, r3
 8002808:	440b      	add	r3, r1
 800280a:	3350      	adds	r3, #80	; 0x50
 800280c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3361      	adds	r3, #97	; 0x61
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	335c      	adds	r3, #92	; 0x5c
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	461a      	mov	r2, r3
 8002840:	2301      	movs	r3, #1
 8002842:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	333f      	adds	r3, #63	; 0x3f
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d009      	beq.n	800286c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	333f      	adds	r3, #63	; 0x3f
 8002866:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002868:	2b02      	cmp	r3, #2
 800286a:	d111      	bne.n	8002890 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f003 ffc3 	bl	8006802 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	461a      	mov	r2, r3
 800288a:	2310      	movs	r3, #16
 800288c:	6093      	str	r3, [r2, #8]
 800288e:	e03a      	b.n	8002906 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	333f      	adds	r3, #63	; 0x3f
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d009      	beq.n	80028b8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	333f      	adds	r3, #63	; 0x3f
 80028b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d126      	bne.n	8002906 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	0151      	lsls	r1, r2, #5
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	440a      	add	r2, r1
 80028ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028d6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3360      	adds	r3, #96	; 0x60
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	b2d9      	uxtb	r1, r3
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	202c      	movs	r0, #44	; 0x2c
 80028f4:	fb00 f303 	mul.w	r3, r0, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3360      	adds	r3, #96	; 0x60
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f006 fa21 	bl	8008d48 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d12b      	bne.n	8002966 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	3348      	adds	r3, #72	; 0x48
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	202c      	movs	r0, #44	; 0x2c
 8002924:	fb00 f202 	mul.w	r2, r0, r2
 8002928:	440a      	add	r2, r1
 800292a:	3240      	adds	r2, #64	; 0x40
 800292c:	8812      	ldrh	r2, [r2, #0]
 800292e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 818e 	beq.w	8002c58 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3354      	adds	r3, #84	; 0x54
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f083 0301 	eor.w	r3, r3, #1
 8002950:	b2d8      	uxtb	r0, r3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3354      	adds	r3, #84	; 0x54
 8002960:	4602      	mov	r2, r0
 8002962:	701a      	strb	r2, [r3, #0]
}
 8002964:	e178      	b.n	8002c58 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3354      	adds	r3, #84	; 0x54
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	f083 0301 	eor.w	r3, r3, #1
 800297a:	b2d8      	uxtb	r0, r3
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3354      	adds	r3, #84	; 0x54
 800298a:	4602      	mov	r2, r0
 800298c:	701a      	strb	r2, [r3, #0]
}
 800298e:	e163      	b.n	8002c58 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	f040 80f6 	bne.w	8002b94 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3361      	adds	r3, #97	; 0x61
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d109      	bne.n	80029d0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	3360      	adds	r3, #96	; 0x60
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e0c9      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3361      	adds	r3, #97	; 0x61
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d109      	bne.n	80029f8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3360      	adds	r3, #96	; 0x60
 80029f2:	2205      	movs	r2, #5
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e0b5      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3361      	adds	r3, #97	; 0x61
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b06      	cmp	r3, #6
 8002a0a:	d009      	beq.n	8002a20 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3361      	adds	r3, #97	; 0x61
 8002a1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d150      	bne.n	8002ac2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	335c      	adds	r3, #92	; 0x5c
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	202c      	movs	r0, #44	; 0x2c
 8002a38:	fb00 f303 	mul.w	r3, r0, r3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	335c      	adds	r3, #92	; 0x5c
 8002a40:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	335c      	adds	r3, #92	; 0x5c
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d912      	bls.n	8002a7c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	335c      	adds	r3, #92	; 0x5c
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3360      	adds	r3, #96	; 0x60
 8002a76:	2204      	movs	r2, #4
 8002a78:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a7a:	e073      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3360      	adds	r3, #96	; 0x60
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aa4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aac:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ac0:	e050      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3361      	adds	r3, #97	; 0x61
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d122      	bne.n	8002b1c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3360      	adds	r3, #96	; 0x60
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002afe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b06:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	461a      	mov	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e023      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3361      	adds	r3, #97	; 0x61
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b07      	cmp	r3, #7
 8002b2e:	d119      	bne.n	8002b64 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	335c      	adds	r3, #92	; 0x5c
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	202c      	movs	r0, #44	; 0x2c
 8002b48:	fb00 f303 	mul.w	r3, r0, r3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	335c      	adds	r3, #92	; 0x5c
 8002b50:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3360      	adds	r3, #96	; 0x60
 8002b60:	2204      	movs	r2, #4
 8002b62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	461a      	mov	r2, r3
 8002b72:	2302      	movs	r3, #2
 8002b74:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	b2d9      	uxtb	r1, r3
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	202c      	movs	r0, #44	; 0x2c
 8002b80:	fb00 f303 	mul.w	r3, r0, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3360      	adds	r3, #96	; 0x60
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f006 f8db 	bl	8008d48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b92:	e061      	b.n	8002c58 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d156      	bne.n	8002c58 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	333f      	adds	r3, #63	; 0x3f
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d111      	bne.n	8002be2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	335c      	adds	r3, #92	; 0x5c
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 fe11 	bl	8006802 <USB_HC_Halt>
 8002be0:	e031      	b.n	8002c46 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	333f      	adds	r3, #63	; 0x3f
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	333f      	adds	r3, #63	; 0x3f
 8002c04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d11d      	bne.n	8002c46 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	335c      	adds	r3, #92	; 0x5c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d110      	bne.n	8002c46 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3361      	adds	r3, #97	; 0x61
 8002c32:	2203      	movs	r2, #3
 8002c34:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f003 fdde 	bl	8006802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	461a      	mov	r2, r3
 8002c54:	2310      	movs	r3, #16
 8002c56:	6093      	str	r3, [r2, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d11a      	bne.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	3361      	adds	r3, #97	; 0x61
 8002cb0:	2206      	movs	r2, #6
 8002cb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 fd9f 	bl	8006802 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002cc4:	e331      	b.n	800332a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d12e      	bne.n	8002d3a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2320      	movs	r3, #32
 8002cec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	333d      	adds	r3, #61	; 0x3d
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	f040 8313 	bne.w	800332a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	333d      	adds	r3, #61	; 0x3d
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3360      	adds	r3, #96	; 0x60
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 fd65 	bl	8006802 <USB_HC_Halt>
}
 8002d38:	e2f7      	b.n	800332a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d50:	d112      	bne.n	8002d78 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d64:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 fd46 	bl	8006802 <USB_HC_Halt>
}
 8002d76:	e2d8      	b.n	800332a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d140      	bne.n	8002e10 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	335c      	adds	r3, #92	; 0x5c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	2b40      	cmp	r3, #64	; 0x40
 8002db4:	d111      	bne.n	8002dda <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	333d      	adds	r3, #61	; 0x3d
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2340      	movs	r3, #64	; 0x40
 8002dd8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	461a      	mov	r2, r3
 8002de8:	2301      	movs	r3, #1
 8002dea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3361      	adds	r3, #97	; 0x61
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 fcfa 	bl	8006802 <USB_HC_Halt>
}
 8002e0e:	e28c      	b.n	800332a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d12c      	bne.n	8002e80 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	3361      	adds	r3, #97	; 0x61
 8002e34:	2204      	movs	r2, #4
 8002e36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	333d      	adds	r3, #61	; 0x3d
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	335c      	adds	r3, #92	; 0x5c
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 fccb 	bl	8006802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2340      	movs	r3, #64	; 0x40
 8002e7c:	6093      	str	r3, [r2, #8]
}
 8002e7e:	e254      	b.n	800332a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d11a      	bne.n	8002ecc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3361      	adds	r3, #97	; 0x61
 8002eb6:	2205      	movs	r2, #5
 8002eb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f003 fc9c 	bl	8006802 <USB_HC_Halt>
}
 8002eca:	e22e      	b.n	800332a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d140      	bne.n	8002f64 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	335c      	adds	r3, #92	; 0x5c
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	3361      	adds	r3, #97	; 0x61
 8002f02:	2203      	movs	r2, #3
 8002f04:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	333d      	adds	r3, #61	; 0x3d
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d112      	bne.n	8002f40 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	333c      	adds	r3, #60	; 0x3c
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	333d      	adds	r3, #61	; 0x3d
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fc59 	bl	8006802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2310      	movs	r3, #16
 8002f60:	6093      	str	r3, [r2, #8]
}
 8002f62:	e1e2      	b.n	800332a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f76:	2b80      	cmp	r3, #128	; 0x80
 8002f78:	d164      	bne.n	8003044 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d111      	bne.n	8002fa6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3361      	adds	r3, #97	; 0x61
 8002f90:	2206      	movs	r2, #6
 8002f92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f003 fc2f 	bl	8006802 <USB_HC_Halt>
 8002fa4:	e044      	b.n	8003030 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	335c      	adds	r3, #92	; 0x5c
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	202c      	movs	r0, #44	; 0x2c
 8002fbe:	fb00 f303 	mul.w	r3, r0, r3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	335c      	adds	r3, #92	; 0x5c
 8002fc6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	335c      	adds	r3, #92	; 0x5c
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d920      	bls.n	800301e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	335c      	adds	r3, #92	; 0x5c
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3360      	adds	r3, #96	; 0x60
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	b2d9      	uxtb	r1, r3
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	202c      	movs	r0, #44	; 0x2c
 800300a:	fb00 f303 	mul.w	r3, r0, r3
 800300e:	4413      	add	r3, r2
 8003010:	3360      	adds	r3, #96	; 0x60
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f005 fe96 	bl	8008d48 <HAL_HCD_HC_NotifyURBChange_Callback>
 800301c:	e008      	b.n	8003030 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	3360      	adds	r3, #96	; 0x60
 800302c:	2202      	movs	r2, #2
 800302e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303c:	461a      	mov	r2, r3
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	6093      	str	r3, [r2, #8]
}
 8003042:	e172      	b.n	800332a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305a:	d11b      	bne.n	8003094 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	212c      	movs	r1, #44	; 0x2c
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	3361      	adds	r3, #97	; 0x61
 800306a:	2208      	movs	r2, #8
 800306c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f003 fbc2 	bl	8006802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4413      	add	r3, r2
 8003086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308a:	461a      	mov	r2, r3
 800308c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003090:	6093      	str	r3, [r2, #8]
}
 8003092:	e14a      	b.n	800332a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	f040 813f 	bne.w	800332a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	3361      	adds	r3, #97	; 0x61
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d17d      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	212c      	movs	r1, #44	; 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	3360      	adds	r3, #96	; 0x60
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	212c      	movs	r1, #44	; 0x2c
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	333f      	adds	r3, #63	; 0x3f
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d00a      	beq.n	80030fc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	333f      	adds	r3, #63	; 0x3f
 80030f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	f040 8100 	bne.w	80032fc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d113      	bne.n	800312c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3355      	adds	r3, #85	; 0x55
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	f083 0301 	eor.w	r3, r3, #1
 8003118:	b2d8      	uxtb	r0, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	3355      	adds	r3, #85	; 0x55
 8003128:	4602      	mov	r2, r0
 800312a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b01      	cmp	r3, #1
 8003132:	f040 80e3 	bne.w	80032fc <HCD_HC_OUT_IRQHandler+0x69c>
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	334c      	adds	r3, #76	; 0x4c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80d8 	beq.w	80032fc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	334c      	adds	r3, #76	; 0x4c
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	202c      	movs	r0, #44	; 0x2c
 8003162:	fb00 f202 	mul.w	r2, r0, r2
 8003166:	440a      	add	r2, r1
 8003168:	3240      	adds	r2, #64	; 0x40
 800316a:	8812      	ldrh	r2, [r2, #0]
 800316c:	4413      	add	r3, r2
 800316e:	3b01      	subs	r3, #1
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	202c      	movs	r0, #44	; 0x2c
 8003176:	fb00 f202 	mul.w	r2, r0, r2
 800317a:	440a      	add	r2, r1
 800317c:	3240      	adds	r2, #64	; 0x40
 800317e:	8812      	ldrh	r2, [r2, #0]
 8003180:	fbb3 f3f2 	udiv	r3, r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80b5 	beq.w	80032fc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3355      	adds	r3, #85	; 0x55
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	f083 0301 	eor.w	r3, r3, #1
 80031a6:	b2d8      	uxtb	r0, r3
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3355      	adds	r3, #85	; 0x55
 80031b6:	4602      	mov	r2, r0
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e09f      	b.n	80032fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	212c      	movs	r1, #44	; 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	3361      	adds	r3, #97	; 0x61
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d109      	bne.n	80031e4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3360      	adds	r3, #96	; 0x60
 80031de:	2202      	movs	r2, #2
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e08b      	b.n	80032fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	3361      	adds	r3, #97	; 0x61
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d109      	bne.n	800320c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	3360      	adds	r3, #96	; 0x60
 8003206:	2202      	movs	r2, #2
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e077      	b.n	80032fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3361      	adds	r3, #97	; 0x61
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b05      	cmp	r3, #5
 800321e:	d109      	bne.n	8003234 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3360      	adds	r3, #96	; 0x60
 800322e:	2205      	movs	r2, #5
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e063      	b.n	80032fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	3361      	adds	r3, #97	; 0x61
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b06      	cmp	r3, #6
 8003246:	d009      	beq.n	800325c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	3361      	adds	r3, #97	; 0x61
 8003256:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003258:	2b08      	cmp	r3, #8
 800325a:	d14f      	bne.n	80032fc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	335c      	adds	r3, #92	; 0x5c
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	202c      	movs	r0, #44	; 0x2c
 8003274:	fb00 f303 	mul.w	r3, r0, r3
 8003278:	440b      	add	r3, r1
 800327a:	335c      	adds	r3, #92	; 0x5c
 800327c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	335c      	adds	r3, #92	; 0x5c
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d912      	bls.n	80032b8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	335c      	adds	r3, #92	; 0x5c
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3360      	adds	r3, #96	; 0x60
 80032b2:	2204      	movs	r2, #4
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e021      	b.n	80032fc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	3360      	adds	r3, #96	; 0x60
 80032c6:	2202      	movs	r2, #2
 80032c8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032e0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032e8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	461a      	mov	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	461a      	mov	r2, r3
 800330a:	2302      	movs	r3, #2
 800330c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	b2d9      	uxtb	r1, r3
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	202c      	movs	r0, #44	; 0x2c
 8003318:	fb00 f303 	mul.w	r3, r0, r3
 800331c:	4413      	add	r3, r2
 800331e:	3360      	adds	r3, #96	; 0x60
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f005 fd0f 	bl	8008d48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800332a:	bf00      	nop
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b08a      	sub	sp, #40	; 0x28
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	0c5b      	lsrs	r3, r3, #17
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003366:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d004      	beq.n	8003378 <HCD_RXQLVL_IRQHandler+0x46>
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b05      	cmp	r3, #5
 8003372:	f000 80a9 	beq.w	80034c8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003376:	e0aa      	b.n	80034ce <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80a6 	beq.w	80034cc <HCD_RXQLVL_IRQHandler+0x19a>
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	3344      	adds	r3, #68	; 0x44
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 809b 	beq.w	80034cc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	3350      	adds	r3, #80	; 0x50
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	441a      	add	r2, r3
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	202c      	movs	r0, #44	; 0x2c
 80033b0:	fb00 f303 	mul.w	r3, r0, r3
 80033b4:	440b      	add	r3, r1
 80033b6:	334c      	adds	r3, #76	; 0x4c
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d87a      	bhi.n	80034b4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3344      	adds	r3, #68	; 0x44
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	b292      	uxth	r2, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f002 fd6a 	bl	8005eb0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3344      	adds	r3, #68	; 0x44
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	441a      	add	r2, r3
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	202c      	movs	r0, #44	; 0x2c
 80033f6:	fb00 f303 	mul.w	r3, r0, r3
 80033fa:	440b      	add	r3, r1
 80033fc:	3344      	adds	r3, #68	; 0x44
 80033fe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3350      	adds	r3, #80	; 0x50
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	441a      	add	r2, r3
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	202c      	movs	r0, #44	; 0x2c
 800341a:	fb00 f303 	mul.w	r3, r0, r3
 800341e:	440b      	add	r3, r1
 8003420:	3350      	adds	r3, #80	; 0x50
 8003422:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	0cdb      	lsrs	r3, r3, #19
 8003434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003438:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	3340      	adds	r3, #64	; 0x40
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4293      	cmp	r3, r2
 8003450:	d13c      	bne.n	80034cc <HCD_RXQLVL_IRQHandler+0x19a>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d039      	beq.n	80034cc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800346e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003476:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003484:	461a      	mov	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	3354      	adds	r3, #84	; 0x54
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	f083 0301 	eor.w	r3, r3, #1
 800349e:	b2d8      	uxtb	r0, r3
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	3354      	adds	r3, #84	; 0x54
 80034ae:	4602      	mov	r2, r0
 80034b0:	701a      	strb	r2, [r3, #0]
      break;
 80034b2:	e00b      	b.n	80034cc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	3360      	adds	r3, #96	; 0x60
 80034c2:	2204      	movs	r2, #4
 80034c4:	701a      	strb	r2, [r3, #0]
      break;
 80034c6:	e001      	b.n	80034cc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80034c8:	bf00      	nop
 80034ca:	e000      	b.n	80034ce <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80034cc:	bf00      	nop
  }
}
 80034ce:	bf00      	nop
 80034d0:	3728      	adds	r7, #40	; 0x28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003502:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d10b      	bne.n	8003526 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d102      	bne.n	800351e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f005 fbf9 	bl	8008d10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d132      	bne.n	8003596 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f043 0308 	orr.w	r3, r3, #8
 8003536:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d126      	bne.n	8003590 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d113      	bne.n	8003572 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003554:	d106      	bne.n	8003564 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2102      	movs	r1, #2
 800355c:	4618      	mov	r0, r3
 800355e:	f002 fe15 	bl	800618c <USB_InitFSLSPClkSel>
 8003562:	e011      	b.n	8003588 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	4618      	mov	r0, r3
 800356c:	f002 fe0e 	bl	800618c <USB_InitFSLSPClkSel>
 8003570:	e00a      	b.n	8003588 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d106      	bne.n	8003588 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003580:	461a      	mov	r2, r3
 8003582:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003586:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f005 fbeb 	bl	8008d64 <HAL_HCD_PortEnabled_Callback>
 800358e:	e002      	b.n	8003596 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f005 fbf5 	bl	8008d80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b20      	cmp	r3, #32
 800359e:	d103      	bne.n	80035a8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f043 0320 	orr.w	r3, r3, #32
 80035a6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035ae:	461a      	mov	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	6013      	str	r3, [r2, #0]
}
 80035b4:	bf00      	nop
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e12b      	b.n	8003826 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fa94 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	; 0x24
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800360e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800361e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003620:	f002 f8f8 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8003624:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4a81      	ldr	r2, [pc, #516]	; (8003830 <HAL_I2C_Init+0x274>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d807      	bhi.n	8003640 <HAL_I2C_Init+0x84>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a80      	ldr	r2, [pc, #512]	; (8003834 <HAL_I2C_Init+0x278>)
 8003634:	4293      	cmp	r3, r2
 8003636:	bf94      	ite	ls
 8003638:	2301      	movls	r3, #1
 800363a:	2300      	movhi	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e006      	b.n	800364e <HAL_I2C_Init+0x92>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a7d      	ldr	r2, [pc, #500]	; (8003838 <HAL_I2C_Init+0x27c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	bf94      	ite	ls
 8003648:	2301      	movls	r3, #1
 800364a:	2300      	movhi	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0e7      	b.n	8003826 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a78      	ldr	r2, [pc, #480]	; (800383c <HAL_I2C_Init+0x280>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	0c9b      	lsrs	r3, r3, #18
 8003660:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a6a      	ldr	r2, [pc, #424]	; (8003830 <HAL_I2C_Init+0x274>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d802      	bhi.n	8003690 <HAL_I2C_Init+0xd4>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3301      	adds	r3, #1
 800368e:	e009      	b.n	80036a4 <HAL_I2C_Init+0xe8>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	4a69      	ldr	r2, [pc, #420]	; (8003840 <HAL_I2C_Init+0x284>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	3301      	adds	r3, #1
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	495c      	ldr	r1, [pc, #368]	; (8003830 <HAL_I2C_Init+0x274>)
 80036c0:	428b      	cmp	r3, r1
 80036c2:	d819      	bhi.n	80036f8 <HAL_I2C_Init+0x13c>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1e59      	subs	r1, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d2:	1c59      	adds	r1, r3, #1
 80036d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036d8:	400b      	ands	r3, r1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_I2C_Init+0x138>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1e59      	subs	r1, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f2:	e051      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 80036f4:	2304      	movs	r3, #4
 80036f6:	e04f      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d111      	bne.n	8003724 <HAL_I2C_Init+0x168>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1e58      	subs	r0, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	440b      	add	r3, r1
 800370e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e012      	b.n	800374a <HAL_I2C_Init+0x18e>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e58      	subs	r0, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	0099      	lsls	r1, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	fbb0 f3f3 	udiv	r3, r0, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Init+0x196>
 800374e:	2301      	movs	r3, #1
 8003750:	e022      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10e      	bne.n	8003778 <HAL_I2C_Init+0x1bc>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1e58      	subs	r0, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6859      	ldr	r1, [r3, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	440b      	add	r3, r1
 8003768:	fbb0 f3f3 	udiv	r3, r0, r3
 800376c:	3301      	adds	r3, #1
 800376e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003776:	e00f      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e58      	subs	r0, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	0099      	lsls	r1, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	fbb0 f3f3 	udiv	r3, r0, r3
 800378e:	3301      	adds	r3, #1
 8003790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	6809      	ldr	r1, [r1, #0]
 800379c:	4313      	orrs	r3, r2
 800379e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6911      	ldr	r1, [r2, #16]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68d2      	ldr	r2, [r2, #12]
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	430b      	orrs	r3, r1
 80037da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	000186a0 	.word	0x000186a0
 8003834:	001e847f 	.word	0x001e847f
 8003838:	003d08ff 	.word	0x003d08ff
 800383c:	431bde83 	.word	0x431bde83
 8003840:	10624dd3 	.word	0x10624dd3

08003844 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	4608      	mov	r0, r1
 800384e:	4611      	mov	r1, r2
 8003850:	461a      	mov	r2, r3
 8003852:	4603      	mov	r3, r0
 8003854:	817b      	strh	r3, [r7, #10]
 8003856:	460b      	mov	r3, r1
 8003858:	813b      	strh	r3, [r7, #8]
 800385a:	4613      	mov	r3, r2
 800385c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800385e:	f7fd fc0d 	bl	800107c <HAL_GetTick>
 8003862:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b20      	cmp	r3, #32
 800386e:	f040 80d9 	bne.w	8003a24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2319      	movs	r3, #25
 8003878:	2201      	movs	r2, #1
 800387a:	496d      	ldr	r1, [pc, #436]	; (8003a30 <HAL_I2C_Mem_Write+0x1ec>)
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fd31 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
 800388a:	e0cc      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_I2C_Mem_Write+0x56>
 8003896:	2302      	movs	r3, #2
 8003898:	e0c5      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d007      	beq.n	80038c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2221      	movs	r2, #33	; 0x21
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2240      	movs	r2, #64	; 0x40
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a3a      	ldr	r2, [r7, #32]
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4a4d      	ldr	r2, [pc, #308]	; (8003a34 <HAL_I2C_Mem_Write+0x1f0>)
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003902:	88f8      	ldrh	r0, [r7, #6]
 8003904:	893a      	ldrh	r2, [r7, #8]
 8003906:	8979      	ldrh	r1, [r7, #10]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	4603      	mov	r3, r0
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fa56 	bl	8003dc4 <I2C_RequestMemoryWrite>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d052      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e081      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fdb2 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b04      	cmp	r3, #4
 8003938:	d107      	bne.n	800394a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003948:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e06b      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d11b      	bne.n	80039c4 <HAL_I2C_Mem_Write+0x180>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	d017      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1aa      	bne.n	8003922 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fd9e 	bl	8004512 <I2C_WaitOnBTFFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00d      	beq.n	80039f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d107      	bne.n	80039f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e016      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	00100002 	.word	0x00100002
 8003a34:	ffff0000 	.word	0xffff0000

08003a38 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08c      	sub	sp, #48	; 0x30
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	4608      	mov	r0, r1
 8003a42:	4611      	mov	r1, r2
 8003a44:	461a      	mov	r2, r3
 8003a46:	4603      	mov	r3, r0
 8003a48:	817b      	strh	r3, [r7, #10]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	813b      	strh	r3, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a52:	f7fd fb13 	bl	800107c <HAL_GetTick>
 8003a56:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	f040 8176 	bne.w	8003d56 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a6a:	4b95      	ldr	r3, [pc, #596]	; (8003cc0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	08db      	lsrs	r3, r3, #3
 8003a70:	4a94      	ldr	r2, [pc, #592]	; (8003cc4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	0a1a      	lsrs	r2, r3, #8
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009a      	lsls	r2, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d116      	bne.n	8003abe <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f043 0220 	orr.w	r2, r3, #32
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e14c      	b.n	8003d58 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d0db      	beq.n	8003a84 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_I2C_Mem_Read_DMA+0xa2>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e13e      	b.n	8003d58 <HAL_I2C_Mem_Read_DMA+0x320>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d007      	beq.n	8003b00 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2222      	movs	r2, #34	; 0x22
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2240      	movs	r2, #64	; 0x40
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a62      	ldr	r2, [pc, #392]	; (8003cc8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003b42:	897a      	ldrh	r2, [r7, #10]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003b48:	893a      	ldrh	r2, [r7, #8]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80cc 	beq.w	8003cfc <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02d      	beq.n	8003bc8 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	4a56      	ldr	r2, [pc, #344]	; (8003ccc <HAL_I2C_Mem_Read_DMA+0x294>)
 8003b72:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	4a55      	ldr	r2, [pc, #340]	; (8003cd0 <HAL_I2C_Mem_Read_DMA+0x298>)
 8003b7a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	2200      	movs	r2, #0
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	2200      	movs	r2, #0
 8003b8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	2200      	movs	r2, #0
 8003b92:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	2200      	movs	r2, #0
 8003b9a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3310      	adds	r3, #16
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	461a      	mov	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	f7fd fc53 	bl	800145c <HAL_DMA_Start_IT>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 8087 	bne.w	8003cd4 <HAL_I2C_Mem_Read_DMA+0x29c>
 8003bc6:	e013      	b.n	8003bf0 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0b3      	b.n	8003d58 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003bf0:	88f8      	ldrh	r0, [r7, #6]
 8003bf2:	893a      	ldrh	r2, [r7, #8]
 8003bf4:	8979      	ldrh	r1, [r7, #10]
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	2323      	movs	r3, #35	; 0x23
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	4603      	mov	r3, r0
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f975 	bl	8003ef0 <I2C_RequestMemoryRead>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d023      	beq.n	8003c54 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fd fc7b 	bl	800150c <HAL_DMA_Abort_IT>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	2200      	movs	r2, #0
 8003c22:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c32:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0201 	bic.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e081      	b.n	8003d58 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d108      	bne.n	8003c6e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e007      	b.n	8003c7e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003caa:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cba:	605a      	str	r2, [r3, #4]
 8003cbc:	e049      	b.n	8003d52 <HAL_I2C_Mem_Read_DMA+0x31a>
 8003cbe:	bf00      	nop
 8003cc0:	20000004 	.word	0x20000004
 8003cc4:	14f8b589 	.word	0x14f8b589
 8003cc8:	ffff0000 	.word	0xffff0000
 8003ccc:	080040c1 	.word	0x080040c1
 8003cd0:	0800426b 	.word	0x0800426b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f043 0210 	orr.w	r2, r3, #16
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e02d      	b.n	8003d58 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003cfc:	88f8      	ldrh	r0, [r7, #6]
 8003cfe:	893a      	ldrh	r2, [r7, #8]
 8003d00:	8979      	ldrh	r1, [r7, #10]
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	2323      	movs	r3, #35	; 0x23
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 f8ef 	bl	8003ef0 <I2C_RequestMemoryRead>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e01d      	b.n	8003d58 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d40:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e000      	b.n	8003d58 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
  }
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	817b      	strh	r3, [r7, #10]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	813b      	strh	r3, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fa72 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e14:	d103      	bne.n	8003e1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e05f      	b.n	8003ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e22:	897b      	ldrh	r3, [r7, #10]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	492d      	ldr	r1, [pc, #180]	; (8003eec <I2C_RequestMemoryWrite+0x128>)
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 faaa 	bl	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e04c      	b.n	8003ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	6a39      	ldr	r1, [r7, #32]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fb14 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00d      	beq.n	8003e8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d107      	bne.n	8003e86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e02b      	b.n	8003ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d105      	bne.n	8003e9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e90:	893b      	ldrh	r3, [r7, #8]
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	611a      	str	r2, [r3, #16]
 8003e9a:	e021      	b.n	8003ee0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e9c:	893b      	ldrh	r3, [r7, #8]
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eac:	6a39      	ldr	r1, [r7, #32]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 faee 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00d      	beq.n	8003ed6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d107      	bne.n	8003ed2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e005      	b.n	8003ee2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed6:	893b      	ldrh	r3, [r7, #8]
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	00010002 	.word	0x00010002

08003ef0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	461a      	mov	r2, r3
 8003efe:	4603      	mov	r3, r0
 8003f00:	817b      	strh	r3, [r7, #10]
 8003f02:	460b      	mov	r3, r1
 8003f04:	813b      	strh	r3, [r7, #8]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f9d4 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f50:	d103      	bne.n	8003f5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e0aa      	b.n	80040b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f5e:	897b      	ldrh	r3, [r7, #10]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	6a3a      	ldr	r2, [r7, #32]
 8003f72:	4952      	ldr	r1, [pc, #328]	; (80040bc <I2C_RequestMemoryRead+0x1cc>)
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fa0c 	bl	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e097      	b.n	80040b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9c:	6a39      	ldr	r1, [r7, #32]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fa76 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d107      	bne.n	8003fc2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e076      	b.n	80040b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fcc:	893b      	ldrh	r3, [r7, #8]
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	611a      	str	r2, [r3, #16]
 8003fd6:	e021      	b.n	800401c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fd8:	893b      	ldrh	r3, [r7, #8]
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe8:	6a39      	ldr	r1, [r7, #32]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fa50 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00d      	beq.n	8004012 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d107      	bne.n	800400e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e050      	b.n	80040b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004012:	893b      	ldrh	r3, [r7, #8]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401e:	6a39      	ldr	r1, [r7, #32]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fa35 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00d      	beq.n	8004048 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	2b04      	cmp	r3, #4
 8004032:	d107      	bne.n	8004044 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004042:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e035      	b.n	80040b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004056:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	2200      	movs	r2, #0
 8004060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f93d 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00d      	beq.n	800408c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407e:	d103      	bne.n	8004088 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e013      	b.n	80040b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800408c:	897b      	ldrh	r3, [r7, #10]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	6a3a      	ldr	r2, [r7, #32]
 80040a0:	4906      	ldr	r1, [pc, #24]	; (80040bc <I2C_RequestMemoryRead+0x1cc>)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f975 	bl	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	00010002 	.word	0x00010002

080040c0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040dc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80040f2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	2200      	movs	r2, #0
 8004102:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	2200      	movs	r2, #0
 8004112:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800411a:	2b21      	cmp	r3, #33	; 0x21
 800411c:	d007      	beq.n	800412e <I2C_DMAXferCplt+0x6e>
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004124:	2b22      	cmp	r3, #34	; 0x22
 8004126:	d131      	bne.n	800418c <I2C_DMAXferCplt+0xcc>
 8004128:	7cbb      	ldrb	r3, [r7, #18]
 800412a:	2b20      	cmp	r3, #32
 800412c:	d12e      	bne.n	800418c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800413c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	2b29      	cmp	r3, #41	; 0x29
 8004148:	d10a      	bne.n	8004160 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2221      	movs	r2, #33	; 0x21
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2228      	movs	r2, #40	; 0x28
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004158:	6978      	ldr	r0, [r7, #20]
 800415a:	f7ff fe0b 	bl	8003d74 <HAL_I2C_SlaveTxCpltCallback>
 800415e:	e00c      	b.n	800417a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	2b2a      	cmp	r3, #42	; 0x2a
 8004164:	d109      	bne.n	800417a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2222      	movs	r2, #34	; 0x22
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2228      	movs	r2, #40	; 0x28
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004174:	6978      	ldr	r0, [r7, #20]
 8004176:	f7ff fe07 	bl	8003d88 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004188:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800418a:	e06a      	b.n	8004262 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d064      	beq.n	8004262 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d107      	bne.n	80041b2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c8:	d009      	beq.n	80041de <I2C_DMAXferCplt+0x11e>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d006      	beq.n	80041de <I2C_DMAXferCplt+0x11e>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041d6:	d002      	beq.n	80041de <I2C_DMAXferCplt+0x11e>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d107      	bne.n	80041ee <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041fc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800420c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800421c:	6978      	ldr	r0, [r7, #20]
 800421e:	f7ff fdc7 	bl	8003db0 <HAL_I2C_ErrorCallback>
}
 8004222:	e01e      	b.n	8004262 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b40      	cmp	r3, #64	; 0x40
 8004236:	d10a      	bne.n	800424e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004246:	6978      	ldr	r0, [r7, #20]
 8004248:	f7ff fda8 	bl	8003d9c <HAL_I2C_MemRxCpltCallback>
}
 800424c:	e009      	b.n	8004262 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2212      	movs	r2, #18
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800425c:	6978      	ldr	r0, [r7, #20]
 800425e:	f7ff fd7f 	bl	8003d60 <HAL_I2C_MasterRxCpltCallback>
}
 8004262:	bf00      	nop
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004284:	2200      	movs	r2, #0
 8004286:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	2200      	movs	r2, #0
 8004296:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fd fae3 	bl	8001864 <HAL_DMA_GetError>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d01b      	beq.n	80042dc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f043 0210 	orr.w	r2, r3, #16
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7ff fd6a 	bl	8003db0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f4:	e025      	b.n	8004342 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d021      	beq.n	8004342 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fc febd 	bl	800107c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d116      	bne.n	8004342 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f043 0220 	orr.w	r2, r3, #32
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e023      	b.n	800438a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d10d      	bne.n	8004368 <I2C_WaitOnFlagUntilTimeout+0x84>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	e00c      	b.n	8004382 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	43da      	mvns	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4013      	ands	r3, r2
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	429a      	cmp	r2, r3
 8004386:	d0b6      	beq.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043a0:	e051      	b.n	8004446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b0:	d123      	bne.n	80043fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f043 0204 	orr.w	r2, r3, #4
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e046      	b.n	8004488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004400:	d021      	beq.n	8004446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004402:	f7fc fe3b 	bl	800107c <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	429a      	cmp	r2, r3
 8004410:	d302      	bcc.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d116      	bne.n	8004446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f043 0220 	orr.w	r2, r3, #32
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e020      	b.n	8004488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	0c1b      	lsrs	r3, r3, #16
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	d10c      	bne.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	43da      	mvns	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4013      	ands	r3, r2
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	bf14      	ite	ne
 8004462:	2301      	movne	r3, #1
 8004464:	2300      	moveq	r3, #0
 8004466:	b2db      	uxtb	r3, r3
 8004468:	e00b      	b.n	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	43da      	mvns	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4013      	ands	r3, r2
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	bf14      	ite	ne
 800447c:	2301      	movne	r3, #1
 800447e:	2300      	moveq	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d18d      	bne.n	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800449c:	e02d      	b.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f878 	bl	8004594 <I2C_IsAcknowledgeFailed>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e02d      	b.n	800450a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d021      	beq.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b6:	f7fc fde1 	bl	800107c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d302      	bcc.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d116      	bne.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f043 0220 	orr.w	r2, r3, #32
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e007      	b.n	800450a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004504:	2b80      	cmp	r3, #128	; 0x80
 8004506:	d1ca      	bne.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800451e:	e02d      	b.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f837 	bl	8004594 <I2C_IsAcknowledgeFailed>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e02d      	b.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d021      	beq.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004538:	f7fc fda0 	bl	800107c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	d302      	bcc.n	800454e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d116      	bne.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e007      	b.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b04      	cmp	r3, #4
 8004588:	d1ca      	bne.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045aa:	d11b      	bne.n	80045e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	f043 0204 	orr.w	r2, r3, #4
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e128      	b.n	8004858 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a90      	ldr	r2, [pc, #576]	; (8004860 <HAL_I2S_Init+0x26c>)
 800461e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7fc fb43 	bl	8000cac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800463c:	f023 030f 	bic.w	r3, r3, #15
 8004640:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2202      	movs	r2, #2
 8004648:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d060      	beq.n	8004714 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800465a:	2310      	movs	r3, #16
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	e001      	b.n	8004664 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004660:	2320      	movs	r3, #32
 8004662:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b20      	cmp	r3, #32
 800466a:	d802      	bhi.n	8004672 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004672:	2001      	movs	r0, #1
 8004674:	f001 f9c4 	bl	8005a00 <HAL_RCCEx_GetPeriphCLKFreq>
 8004678:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004682:	d125      	bne.n	80046d0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	fbb2 f2f3 	udiv	r2, r2, r3
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	461a      	mov	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	3305      	adds	r3, #5
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	e01f      	b.n	80046ee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	461a      	mov	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ca:	3305      	adds	r3, #5
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	e00e      	b.n	80046ee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	3305      	adds	r3, #5
 80046ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4a5c      	ldr	r2, [pc, #368]	; (8004864 <HAL_I2S_Init+0x270>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	08db      	lsrs	r3, r3, #3
 80046f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e003      	b.n	800471c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004714:	2302      	movs	r3, #2
 8004716:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d902      	bls.n	8004728 <HAL_I2S_Init+0x134>
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	2bff      	cmp	r3, #255	; 0xff
 8004726:	d907      	bls.n	8004738 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	f043 0210 	orr.w	r2, r3, #16
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e08f      	b.n	8004858 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	ea42 0103 	orr.w	r1, r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	430a      	orrs	r2, r1
 800474a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004756:	f023 030f 	bic.w	r3, r3, #15
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6851      	ldr	r1, [r2, #4]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6892      	ldr	r2, [r2, #8]
 8004762:	4311      	orrs	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	68d2      	ldr	r2, [r2, #12]
 8004768:	4311      	orrs	r1, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6992      	ldr	r2, [r2, #24]
 800476e:	430a      	orrs	r2, r1
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800477a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d161      	bne.n	8004848 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a38      	ldr	r2, [pc, #224]	; (8004868 <HAL_I2S_Init+0x274>)
 8004788:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a37      	ldr	r2, [pc, #220]	; (800486c <HAL_I2S_Init+0x278>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d101      	bne.n	8004798 <HAL_I2S_Init+0x1a4>
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <HAL_I2S_Init+0x27c>)
 8004796:	e001      	b.n	800479c <HAL_I2S_Init+0x1a8>
 8004798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	4932      	ldr	r1, [pc, #200]	; (800486c <HAL_I2S_Init+0x278>)
 80047a4:	428a      	cmp	r2, r1
 80047a6:	d101      	bne.n	80047ac <HAL_I2S_Init+0x1b8>
 80047a8:	4a31      	ldr	r2, [pc, #196]	; (8004870 <HAL_I2S_Init+0x27c>)
 80047aa:	e001      	b.n	80047b0 <HAL_I2S_Init+0x1bc>
 80047ac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80047b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80047b4:	f023 030f 	bic.w	r3, r3, #15
 80047b8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2b      	ldr	r2, [pc, #172]	; (800486c <HAL_I2S_Init+0x278>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <HAL_I2S_Init+0x1d4>
 80047c4:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <HAL_I2S_Init+0x27c>)
 80047c6:	e001      	b.n	80047cc <HAL_I2S_Init+0x1d8>
 80047c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047cc:	2202      	movs	r2, #2
 80047ce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a25      	ldr	r2, [pc, #148]	; (800486c <HAL_I2S_Init+0x278>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d101      	bne.n	80047de <HAL_I2S_Init+0x1ea>
 80047da:	4b25      	ldr	r3, [pc, #148]	; (8004870 <HAL_I2S_Init+0x27c>)
 80047dc:	e001      	b.n	80047e2 <HAL_I2S_Init+0x1ee>
 80047de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ee:	d003      	beq.n	80047f8 <HAL_I2S_Init+0x204>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d103      	bne.n	8004800 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80047f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	e001      	b.n	8004804 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800480e:	4313      	orrs	r3, r2
 8004810:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004818:	4313      	orrs	r3, r2
 800481a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004822:	4313      	orrs	r3, r2
 8004824:	b29a      	uxth	r2, r3
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	4313      	orrs	r3, r2
 800482a:	b29b      	uxth	r3, r3
 800482c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004830:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a0d      	ldr	r2, [pc, #52]	; (800486c <HAL_I2S_Init+0x278>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <HAL_I2S_Init+0x24c>
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <HAL_I2S_Init+0x27c>)
 800483e:	e001      	b.n	8004844 <HAL_I2S_Init+0x250>
 8004840:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004844:	897a      	ldrh	r2, [r7, #10]
 8004846:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3720      	adds	r7, #32
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	0800496b 	.word	0x0800496b
 8004864:	cccccccd 	.word	0xcccccccd
 8004868:	08004a81 	.word	0x08004a81
 800486c:	40003800 	.word	0x40003800
 8004870:	40003400 	.word	0x40003400

08004874 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	881a      	ldrh	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c9a      	adds	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10e      	bne.n	8004904 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048f4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff ffb8 	bl	8004874 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004904:	bf00      	nop
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	b292      	uxth	r2, r2
 8004920:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	1c9a      	adds	r2, r3, #2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10e      	bne.n	8004962 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004952:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff ff93 	bl	8004888 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b04      	cmp	r3, #4
 8004984:	d13a      	bne.n	80049fc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d109      	bne.n	80049a4 <I2S_IRQHandler+0x3a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d102      	bne.n	80049a4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff ffb4 	bl	800490c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d126      	bne.n	80049fc <I2S_IRQHandler+0x92>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d11f      	bne.n	80049fc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	f043 0202 	orr.w	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff ff50 	bl	800489c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d136      	bne.n	8004a76 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d109      	bne.n	8004a26 <I2S_IRQHandler+0xbc>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d102      	bne.n	8004a26 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff ff45 	bl	80048b0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d122      	bne.n	8004a76 <I2S_IRQHandler+0x10c>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d11b      	bne.n	8004a76 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a4c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a68:	f043 0204 	orr.w	r2, r3, #4
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ff13 	bl	800489c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a76:	bf00      	nop
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a92      	ldr	r2, [pc, #584]	; (8004ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d101      	bne.n	8004a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004a9a:	4b92      	ldr	r3, [pc, #584]	; (8004ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a9c:	e001      	b.n	8004aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a8b      	ldr	r2, [pc, #556]	; (8004ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d101      	bne.n	8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ab8:	4b8a      	ldr	r3, [pc, #552]	; (8004ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aba:	e001      	b.n	8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004abc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004acc:	d004      	beq.n	8004ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f040 8099 	bne.w	8004c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d107      	bne.n	8004af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f925 	bl	8004d3c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d107      	bne.n	8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9c8 	bl	8004e9c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d13a      	bne.n	8004b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d035      	beq.n	8004b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a6e      	ldr	r2, [pc, #440]	; (8004ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d101      	bne.n	8004b2e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b2a:	4b6e      	ldr	r3, [pc, #440]	; (8004ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b2c:	e001      	b.n	8004b32 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4969      	ldr	r1, [pc, #420]	; (8004ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b3a:	428b      	cmp	r3, r1
 8004b3c:	d101      	bne.n	8004b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b3e:	4b69      	ldr	r3, [pc, #420]	; (8004ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b40:	e001      	b.n	8004b46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004b42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b4a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	f043 0202 	orr.w	r2, r3, #2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fe88 	bl	800489c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	f040 80c3 	bne.w	8004d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80bd 	beq.w	8004d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bb2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a49      	ldr	r2, [pc, #292]	; (8004ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004bbe:	4b49      	ldr	r3, [pc, #292]	; (8004ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bc0:	e001      	b.n	8004bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4944      	ldr	r1, [pc, #272]	; (8004ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bce:	428b      	cmp	r3, r1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004bd2:	4b44      	ldr	r3, [pc, #272]	; (8004ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bd4:	e001      	b.n	8004bda <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004bd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bde:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004be0:	2300      	movs	r3, #0
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	f043 0204 	orr.w	r2, r3, #4
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fe4a 	bl	800489c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c08:	e089      	b.n	8004d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d107      	bne.n	8004c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8be 	bl	8004da0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d107      	bne.n	8004c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f8fd 	bl	8004e38 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	d12f      	bne.n	8004ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d02a      	beq.n	8004ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c60:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d101      	bne.n	8004c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c6e:	e001      	b.n	8004c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4919      	ldr	r1, [pc, #100]	; (8004ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	d101      	bne.n	8004c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004c80:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c82:	e001      	b.n	8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f043 0202 	orr.w	r2, r3, #2
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fdfa 	bl	800489c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d136      	bne.n	8004d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d031      	beq.n	8004d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a07      	ldr	r2, [pc, #28]	; (8004ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d101      	bne.n	8004cca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004cc6:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cc8:	e001      	b.n	8004cce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004cca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4902      	ldr	r1, [pc, #8]	; (8004ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cd6:	428b      	cmp	r3, r1
 8004cd8:	d106      	bne.n	8004ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004cda:	4b02      	ldr	r3, [pc, #8]	; (8004ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cdc:	e006      	b.n	8004cec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004cde:	bf00      	nop
 8004ce0:	40003800 	.word	0x40003800
 8004ce4:	40003400 	.word	0x40003400
 8004ce8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cf0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d00:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f043 0204 	orr.w	r2, r3, #4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff fdc0 	bl	800489c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d1c:	e000      	b.n	8004d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d1e:	bf00      	nop
}
 8004d20:	bf00      	nop
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	1c99      	adds	r1, r3, #2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6251      	str	r1, [r2, #36]	; 0x24
 8004d4e:	881a      	ldrh	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d113      	bne.n	8004d96 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff ffc9 	bl	8004d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	1c99      	adds	r1, r3, #2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6251      	str	r1, [r2, #36]	; 0x24
 8004db2:	8819      	ldrh	r1, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <I2SEx_TxISR_I2SExt+0x90>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d101      	bne.n	8004dc2 <I2SEx_TxISR_I2SExt+0x22>
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <I2SEx_TxISR_I2SExt+0x94>)
 8004dc0:	e001      	b.n	8004dc6 <I2SEx_TxISR_I2SExt+0x26>
 8004dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dc6:	460a      	mov	r2, r1
 8004dc8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d121      	bne.n	8004e26 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <I2SEx_TxISR_I2SExt+0x90>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d101      	bne.n	8004df0 <I2SEx_TxISR_I2SExt+0x50>
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <I2SEx_TxISR_I2SExt+0x94>)
 8004dee:	e001      	b.n	8004df4 <I2SEx_TxISR_I2SExt+0x54>
 8004df0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	490d      	ldr	r1, [pc, #52]	; (8004e30 <I2SEx_TxISR_I2SExt+0x90>)
 8004dfc:	428b      	cmp	r3, r1
 8004dfe:	d101      	bne.n	8004e04 <I2SEx_TxISR_I2SExt+0x64>
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <I2SEx_TxISR_I2SExt+0x94>)
 8004e02:	e001      	b.n	8004e08 <I2SEx_TxISR_I2SExt+0x68>
 8004e04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ff81 	bl	8004d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40003800 	.word	0x40003800
 8004e34:	40003400 	.word	0x40003400

08004e38 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68d8      	ldr	r0, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	1c99      	adds	r1, r3, #2
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e50:	b282      	uxth	r2, r0
 8004e52:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d113      	bne.n	8004e94 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e7a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ff4a 	bl	8004d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a20      	ldr	r2, [pc, #128]	; (8004f2c <I2SEx_RxISR_I2SExt+0x90>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d101      	bne.n	8004eb2 <I2SEx_RxISR_I2SExt+0x16>
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <I2SEx_RxISR_I2SExt+0x94>)
 8004eb0:	e001      	b.n	8004eb6 <I2SEx_RxISR_I2SExt+0x1a>
 8004eb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eb6:	68d8      	ldr	r0, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	1c99      	adds	r1, r3, #2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ec2:	b282      	uxth	r2, r0
 8004ec4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d121      	bne.n	8004f22 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a12      	ldr	r2, [pc, #72]	; (8004f2c <I2SEx_RxISR_I2SExt+0x90>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d101      	bne.n	8004eec <I2SEx_RxISR_I2SExt+0x50>
 8004ee8:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <I2SEx_RxISR_I2SExt+0x94>)
 8004eea:	e001      	b.n	8004ef0 <I2SEx_RxISR_I2SExt+0x54>
 8004eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	490d      	ldr	r1, [pc, #52]	; (8004f2c <I2SEx_RxISR_I2SExt+0x90>)
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	d101      	bne.n	8004f00 <I2SEx_RxISR_I2SExt+0x64>
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <I2SEx_RxISR_I2SExt+0x94>)
 8004efe:	e001      	b.n	8004f04 <I2SEx_RxISR_I2SExt+0x68>
 8004f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f08:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d106      	bne.n	8004f22 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff ff03 	bl	8004d28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40003800 	.word	0x40003800
 8004f30:	40003400 	.word	0x40003400

08004f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e267      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d075      	beq.n	800503e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f52:	4b88      	ldr	r3, [pc, #544]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d00c      	beq.n	8004f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5e:	4b85      	ldr	r3, [pc, #532]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d112      	bne.n	8004f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6a:	4b82      	ldr	r3, [pc, #520]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f76:	d10b      	bne.n	8004f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f78:	4b7e      	ldr	r3, [pc, #504]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d05b      	beq.n	800503c <HAL_RCC_OscConfig+0x108>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d157      	bne.n	800503c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e242      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x74>
 8004f9a:	4b76      	ldr	r3, [pc, #472]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a75      	ldr	r2, [pc, #468]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e01d      	b.n	8004fe4 <HAL_RCC_OscConfig+0xb0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x98>
 8004fb2:	4b70      	ldr	r3, [pc, #448]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a6f      	ldr	r2, [pc, #444]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4b6d      	ldr	r3, [pc, #436]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6c      	ldr	r2, [pc, #432]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCC_OscConfig+0xb0>
 8004fcc:	4b69      	ldr	r3, [pc, #420]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a68      	ldr	r2, [pc, #416]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b66      	ldr	r3, [pc, #408]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a65      	ldr	r2, [pc, #404]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fec:	f7fc f846 	bl	800107c <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7fc f842 	bl	800107c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	; 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e207      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	4b5b      	ldr	r3, [pc, #364]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0xc0>
 8005012:	e014      	b.n	800503e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005014:	f7fc f832 	bl	800107c <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800501c:	f7fc f82e 	bl	800107c <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b64      	cmp	r3, #100	; 0x64
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e1f3      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502e:	4b51      	ldr	r3, [pc, #324]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0xe8>
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d063      	beq.n	8005112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800504a:	4b4a      	ldr	r3, [pc, #296]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005056:	4b47      	ldr	r3, [pc, #284]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800505e:	2b08      	cmp	r3, #8
 8005060:	d11c      	bne.n	800509c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005062:	4b44      	ldr	r3, [pc, #272]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d116      	bne.n	800509c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800506e:	4b41      	ldr	r3, [pc, #260]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_RCC_OscConfig+0x152>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e1c7      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005086:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4937      	ldr	r1, [pc, #220]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509a:	e03a      	b.n	8005112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d020      	beq.n	80050e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a4:	4b34      	ldr	r3, [pc, #208]	; (8005178 <HAL_RCC_OscConfig+0x244>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050aa:	f7fb ffe7 	bl	800107c <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b2:	f7fb ffe3 	bl	800107c <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e1a8      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c4:	4b2b      	ldr	r3, [pc, #172]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d0:	4b28      	ldr	r3, [pc, #160]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4925      	ldr	r1, [pc, #148]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	600b      	str	r3, [r1, #0]
 80050e4:	e015      	b.n	8005112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e6:	4b24      	ldr	r3, [pc, #144]	; (8005178 <HAL_RCC_OscConfig+0x244>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fb ffc6 	bl	800107c <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f4:	f7fb ffc2 	bl	800107c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e187      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005106:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d036      	beq.n	800518c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <HAL_RCC_OscConfig+0x248>)
 8005128:	2201      	movs	r2, #1
 800512a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512c:	f7fb ffa6 	bl	800107c <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005134:	f7fb ffa2 	bl	800107c <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e167      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005146:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0x200>
 8005152:	e01b      	b.n	800518c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005154:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_RCC_OscConfig+0x248>)
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515a:	f7fb ff8f 	bl	800107c <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005160:	e00e      	b.n	8005180 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005162:	f7fb ff8b 	bl	800107c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d907      	bls.n	8005180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e150      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
 8005174:	40023800 	.word	0x40023800
 8005178:	42470000 	.word	0x42470000
 800517c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005180:	4b88      	ldr	r3, [pc, #544]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1ea      	bne.n	8005162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8097 	beq.w	80052c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800519e:	4b81      	ldr	r3, [pc, #516]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10f      	bne.n	80051ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	4b7d      	ldr	r3, [pc, #500]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	4a7c      	ldr	r2, [pc, #496]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ba:	4b7a      	ldr	r3, [pc, #488]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ca:	4b77      	ldr	r3, [pc, #476]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d118      	bne.n	8005208 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d6:	4b74      	ldr	r3, [pc, #464]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a73      	ldr	r2, [pc, #460]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e2:	f7fb ff4b 	bl	800107c <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ea:	f7fb ff47 	bl	800107c <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e10c      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fc:	4b6a      	ldr	r3, [pc, #424]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0f0      	beq.n	80051ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d106      	bne.n	800521e <HAL_RCC_OscConfig+0x2ea>
 8005210:	4b64      	ldr	r3, [pc, #400]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	4a63      	ldr	r2, [pc, #396]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	6713      	str	r3, [r2, #112]	; 0x70
 800521c:	e01c      	b.n	8005258 <HAL_RCC_OscConfig+0x324>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b05      	cmp	r3, #5
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0x30c>
 8005226:	4b5f      	ldr	r3, [pc, #380]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a5e      	ldr	r2, [pc, #376]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	6713      	str	r3, [r2, #112]	; 0x70
 8005232:	4b5c      	ldr	r3, [pc, #368]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4a5b      	ldr	r2, [pc, #364]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	6713      	str	r3, [r2, #112]	; 0x70
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0x324>
 8005240:	4b58      	ldr	r3, [pc, #352]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005244:	4a57      	ldr	r2, [pc, #348]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005246:	f023 0301 	bic.w	r3, r3, #1
 800524a:	6713      	str	r3, [r2, #112]	; 0x70
 800524c:	4b55      	ldr	r3, [pc, #340]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a54      	ldr	r2, [pc, #336]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005252:	f023 0304 	bic.w	r3, r3, #4
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d015      	beq.n	800528c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fb ff0c 	bl	800107c <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005266:	e00a      	b.n	800527e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005268:	f7fb ff08 	bl	800107c <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e0cb      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527e:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0ee      	beq.n	8005268 <HAL_RCC_OscConfig+0x334>
 800528a:	e014      	b.n	80052b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800528c:	f7fb fef6 	bl	800107c <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005292:	e00a      	b.n	80052aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005294:	f7fb fef2 	bl	800107c <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0b5      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052aa:	4b3e      	ldr	r3, [pc, #248]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1ee      	bne.n	8005294 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d105      	bne.n	80052c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052bc:	4b39      	ldr	r3, [pc, #228]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	4a38      	ldr	r2, [pc, #224]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80a1 	beq.w	8005414 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d2:	4b34      	ldr	r3, [pc, #208]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d05c      	beq.n	8005398 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d141      	bne.n	800536a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	4b31      	ldr	r3, [pc, #196]	; (80053ac <HAL_RCC_OscConfig+0x478>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ec:	f7fb fec6 	bl	800107c <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fb fec2 	bl	800107c <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e087      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69da      	ldr	r2, [r3, #28]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	019b      	lsls	r3, r3, #6
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	3b01      	subs	r3, #1
 800532c:	041b      	lsls	r3, r3, #16
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	061b      	lsls	r3, r3, #24
 8005336:	491b      	ldr	r1, [pc, #108]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005338:	4313      	orrs	r3, r2
 800533a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800533c:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <HAL_RCC_OscConfig+0x478>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005342:	f7fb fe9b 	bl	800107c <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800534a:	f7fb fe97 	bl	800107c <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e05c      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x416>
 8005368:	e054      	b.n	8005414 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <HAL_RCC_OscConfig+0x478>)
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005370:	f7fb fe84 	bl	800107c <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005378:	f7fb fe80 	bl	800107c <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e045      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0x444>
 8005396:	e03d      	b.n	8005414 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d107      	bne.n	80053b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e038      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40007000 	.word	0x40007000
 80053ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053b0:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <HAL_RCC_OscConfig+0x4ec>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d028      	beq.n	8005410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d121      	bne.n	8005410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d11a      	bne.n	8005410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053e0:	4013      	ands	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d111      	bne.n	8005410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	3b01      	subs	r3, #1
 80053fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40023800 	.word	0x40023800

08005424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0cc      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005438:	4b68      	ldr	r3, [pc, #416]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d90c      	bls.n	8005460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	4b65      	ldr	r3, [pc, #404]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	4b63      	ldr	r3, [pc, #396]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0b8      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d020      	beq.n	80054ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005478:	4b59      	ldr	r3, [pc, #356]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4a58      	ldr	r2, [pc, #352]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d005      	beq.n	800549c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005490:	4b53      	ldr	r3, [pc, #332]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4a52      	ldr	r2, [pc, #328]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800549a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800549c:	4b50      	ldr	r3, [pc, #320]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	494d      	ldr	r1, [pc, #308]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d044      	beq.n	8005544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d107      	bne.n	80054d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c2:	4b47      	ldr	r3, [pc, #284]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d119      	bne.n	8005502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e07f      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d003      	beq.n	80054e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d107      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e2:	4b3f      	ldr	r3, [pc, #252]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d109      	bne.n	8005502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e06f      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f2:	4b3b      	ldr	r3, [pc, #236]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e067      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005502:	4b37      	ldr	r3, [pc, #220]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f023 0203 	bic.w	r2, r3, #3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4934      	ldr	r1, [pc, #208]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	4313      	orrs	r3, r2
 8005512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005514:	f7fb fdb2 	bl	800107c <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551a:	e00a      	b.n	8005532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800551c:	f7fb fdae 	bl	800107c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e04f      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005532:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 020c 	and.w	r2, r3, #12
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	429a      	cmp	r2, r3
 8005542:	d1eb      	bne.n	800551c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005544:	4b25      	ldr	r3, [pc, #148]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d20c      	bcs.n	800556c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005552:	4b22      	ldr	r3, [pc, #136]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800555a:	4b20      	ldr	r3, [pc, #128]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d001      	beq.n	800556c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e032      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005578:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4916      	ldr	r1, [pc, #88]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005596:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	490e      	ldr	r1, [pc, #56]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055aa:	f000 f821 	bl	80055f0 <HAL_RCC_GetSysClockFreq>
 80055ae:	4602      	mov	r2, r0
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	490a      	ldr	r1, [pc, #40]	; (80055e4 <HAL_RCC_ClockConfig+0x1c0>)
 80055bc:	5ccb      	ldrb	r3, [r1, r3]
 80055be:	fa22 f303 	lsr.w	r3, r2, r3
 80055c2:	4a09      	ldr	r2, [pc, #36]	; (80055e8 <HAL_RCC_ClockConfig+0x1c4>)
 80055c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055c6:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fb fd12 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40023c00 	.word	0x40023c00
 80055e0:	40023800 	.word	0x40023800
 80055e4:	08009420 	.word	0x08009420
 80055e8:	20000004 	.word	0x20000004
 80055ec:	20000008 	.word	0x20000008

080055f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f4:	b094      	sub	sp, #80	; 0x50
 80055f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	647b      	str	r3, [r7, #68]	; 0x44
 80055fc:	2300      	movs	r3, #0
 80055fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005600:	2300      	movs	r3, #0
 8005602:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005608:	4b79      	ldr	r3, [pc, #484]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 030c 	and.w	r3, r3, #12
 8005610:	2b08      	cmp	r3, #8
 8005612:	d00d      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x40>
 8005614:	2b08      	cmp	r3, #8
 8005616:	f200 80e1 	bhi.w	80057dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_RCC_GetSysClockFreq+0x34>
 800561e:	2b04      	cmp	r3, #4
 8005620:	d003      	beq.n	800562a <HAL_RCC_GetSysClockFreq+0x3a>
 8005622:	e0db      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005624:	4b73      	ldr	r3, [pc, #460]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005626:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005628:	e0db      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800562a:	4b73      	ldr	r3, [pc, #460]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800562c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800562e:	e0d8      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005630:	4b6f      	ldr	r3, [pc, #444]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005638:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800563a:	4b6d      	ldr	r3, [pc, #436]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d063      	beq.n	800570e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005646:	4b6a      	ldr	r3, [pc, #424]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	099b      	lsrs	r3, r3, #6
 800564c:	2200      	movs	r2, #0
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005650:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005658:	633b      	str	r3, [r7, #48]	; 0x30
 800565a:	2300      	movs	r3, #0
 800565c:	637b      	str	r3, [r7, #52]	; 0x34
 800565e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005662:	4622      	mov	r2, r4
 8005664:	462b      	mov	r3, r5
 8005666:	f04f 0000 	mov.w	r0, #0
 800566a:	f04f 0100 	mov.w	r1, #0
 800566e:	0159      	lsls	r1, r3, #5
 8005670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005674:	0150      	lsls	r0, r2, #5
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4621      	mov	r1, r4
 800567c:	1a51      	subs	r1, r2, r1
 800567e:	6139      	str	r1, [r7, #16]
 8005680:	4629      	mov	r1, r5
 8005682:	eb63 0301 	sbc.w	r3, r3, r1
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005694:	4659      	mov	r1, fp
 8005696:	018b      	lsls	r3, r1, #6
 8005698:	4651      	mov	r1, sl
 800569a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800569e:	4651      	mov	r1, sl
 80056a0:	018a      	lsls	r2, r1, #6
 80056a2:	4651      	mov	r1, sl
 80056a4:	ebb2 0801 	subs.w	r8, r2, r1
 80056a8:	4659      	mov	r1, fp
 80056aa:	eb63 0901 	sbc.w	r9, r3, r1
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056c2:	4690      	mov	r8, r2
 80056c4:	4699      	mov	r9, r3
 80056c6:	4623      	mov	r3, r4
 80056c8:	eb18 0303 	adds.w	r3, r8, r3
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	462b      	mov	r3, r5
 80056d0:	eb49 0303 	adc.w	r3, r9, r3
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056e2:	4629      	mov	r1, r5
 80056e4:	024b      	lsls	r3, r1, #9
 80056e6:	4621      	mov	r1, r4
 80056e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056ec:	4621      	mov	r1, r4
 80056ee:	024a      	lsls	r2, r1, #9
 80056f0:	4610      	mov	r0, r2
 80056f2:	4619      	mov	r1, r3
 80056f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f6:	2200      	movs	r2, #0
 80056f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005700:	f7fa fd62 	bl	80001c8 <__aeabi_uldivmod>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4613      	mov	r3, r2
 800570a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800570c:	e058      	b.n	80057c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800570e:	4b38      	ldr	r3, [pc, #224]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	099b      	lsrs	r3, r3, #6
 8005714:	2200      	movs	r2, #0
 8005716:	4618      	mov	r0, r3
 8005718:	4611      	mov	r1, r2
 800571a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800571e:	623b      	str	r3, [r7, #32]
 8005720:	2300      	movs	r3, #0
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
 8005724:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	f04f 0000 	mov.w	r0, #0
 8005730:	f04f 0100 	mov.w	r1, #0
 8005734:	0159      	lsls	r1, r3, #5
 8005736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800573a:	0150      	lsls	r0, r2, #5
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4641      	mov	r1, r8
 8005742:	ebb2 0a01 	subs.w	sl, r2, r1
 8005746:	4649      	mov	r1, r9
 8005748:	eb63 0b01 	sbc.w	fp, r3, r1
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005758:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800575c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005760:	ebb2 040a 	subs.w	r4, r2, sl
 8005764:	eb63 050b 	sbc.w	r5, r3, fp
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	00eb      	lsls	r3, r5, #3
 8005772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005776:	00e2      	lsls	r2, r4, #3
 8005778:	4614      	mov	r4, r2
 800577a:	461d      	mov	r5, r3
 800577c:	4643      	mov	r3, r8
 800577e:	18e3      	adds	r3, r4, r3
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	464b      	mov	r3, r9
 8005784:	eb45 0303 	adc.w	r3, r5, r3
 8005788:	607b      	str	r3, [r7, #4]
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005796:	4629      	mov	r1, r5
 8005798:	028b      	lsls	r3, r1, #10
 800579a:	4621      	mov	r1, r4
 800579c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057a0:	4621      	mov	r1, r4
 80057a2:	028a      	lsls	r2, r1, #10
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057aa:	2200      	movs	r2, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	61fa      	str	r2, [r7, #28]
 80057b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057b4:	f7fa fd08 	bl	80001c8 <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4613      	mov	r3, r2
 80057be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057c0:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	0c1b      	lsrs	r3, r3, #16
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	3301      	adds	r3, #1
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057da:	e002      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80057de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3750      	adds	r7, #80	; 0x50
 80057e8:	46bd      	mov	sp, r7
 80057ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ee:	bf00      	nop
 80057f0:	40023800 	.word	0x40023800
 80057f4:	00f42400 	.word	0x00f42400
 80057f8:	007a1200 	.word	0x007a1200

080057fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005800:	4b03      	ldr	r3, [pc, #12]	; (8005810 <HAL_RCC_GetHCLKFreq+0x14>)
 8005802:	681b      	ldr	r3, [r3, #0]
}
 8005804:	4618      	mov	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20000004 	.word	0x20000004

08005814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005818:	f7ff fff0 	bl	80057fc <HAL_RCC_GetHCLKFreq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b05      	ldr	r3, [pc, #20]	; (8005834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	0a9b      	lsrs	r3, r3, #10
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	4903      	ldr	r1, [pc, #12]	; (8005838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800582a:	5ccb      	ldrb	r3, [r1, r3]
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005830:	4618      	mov	r0, r3
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40023800 	.word	0x40023800
 8005838:	08009430 	.word	0x08009430

0800583c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d105      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005860:	2b00      	cmp	r3, #0
 8005862:	d035      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005864:	4b62      	ldr	r3, [pc, #392]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800586a:	f7fb fc07 	bl	800107c <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005870:	e008      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005872:	f7fb fc03 	bl	800107c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e0b0      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005884:	4b5b      	ldr	r3, [pc, #364]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f0      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	019a      	lsls	r2, r3, #6
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	071b      	lsls	r3, r3, #28
 800589c:	4955      	ldr	r1, [pc, #340]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058a4:	4b52      	ldr	r3, [pc, #328]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058aa:	f7fb fbe7 	bl	800107c <HAL_GetTick>
 80058ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058b2:	f7fb fbe3 	bl	800107c <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e090      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058c4:	4b4b      	ldr	r3, [pc, #300]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8083 	beq.w	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	4b44      	ldr	r3, [pc, #272]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	4a43      	ldr	r2, [pc, #268]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ec:	6413      	str	r3, [r2, #64]	; 0x40
 80058ee:	4b41      	ldr	r3, [pc, #260]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058fa:	4b3f      	ldr	r3, [pc, #252]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a3e      	ldr	r2, [pc, #248]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005904:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005906:	f7fb fbb9 	bl	800107c <HAL_GetTick>
 800590a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800590c:	e008      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800590e:	f7fb fbb5 	bl	800107c <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e062      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005920:	4b35      	ldr	r3, [pc, #212]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f0      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800592c:	4b31      	ldr	r3, [pc, #196]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005934:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d02f      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	429a      	cmp	r2, r3
 8005948:	d028      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800594a:	4b2a      	ldr	r3, [pc, #168]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005952:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005954:	4b29      	ldr	r3, [pc, #164]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005956:	2201      	movs	r2, #1
 8005958:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800595a:	4b28      	ldr	r3, [pc, #160]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005960:	4a24      	ldr	r2, [pc, #144]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005966:	4b23      	ldr	r3, [pc, #140]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b01      	cmp	r3, #1
 8005970:	d114      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005972:	f7fb fb83 	bl	800107c <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005978:	e00a      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800597a:	f7fb fb7f 	bl	800107c <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	f241 3288 	movw	r2, #5000	; 0x1388
 8005988:	4293      	cmp	r3, r2
 800598a:	d901      	bls.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e02a      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005990:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0ee      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a8:	d10d      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80059aa:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059be:	490d      	ldr	r1, [pc, #52]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	608b      	str	r3, [r1, #8]
 80059c4:	e005      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	4a0a      	ldr	r2, [pc, #40]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059d0:	6093      	str	r3, [r2, #8]
 80059d2:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059de:	4905      	ldr	r1, [pc, #20]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	42470068 	.word	0x42470068
 80059f4:	40023800 	.word	0x40023800
 80059f8:	40007000 	.word	0x40007000
 80059fc:	42470e40 	.word	0x42470e40

08005a00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d13e      	bne.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005a1e:	4b23      	ldr	r3, [pc, #140]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d12f      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a34:	4b1e      	ldr	r3, [pc, #120]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a36:	617b      	str	r3, [r7, #20]
          break;
 8005a38:	e02f      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a3a:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a46:	d108      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a48:	4b18      	ldr	r3, [pc, #96]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a50:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	e007      	b.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a5a:	4b14      	ldr	r3, [pc, #80]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a62:	4a15      	ldr	r2, [pc, #84]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a6a:	4b10      	ldr	r3, [pc, #64]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a70:	099b      	lsrs	r3, r3, #6
 8005a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
 8005a7c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a84:	0f1b      	lsrs	r3, r3, #28
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]
          break;
 8005a92:	e002      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
          break;
 8005a98:	bf00      	nop
        }
      }
      break;
 8005a9a:	bf00      	nop
    }
  }
  return frequency;
 8005a9c:	697b      	ldr	r3, [r7, #20]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	00bb8000 	.word	0x00bb8000
 8005ab4:	007a1200 	.word	0x007a1200
 8005ab8:	00f42400 	.word	0x00f42400

08005abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e07b      	b.n	8005bc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d108      	bne.n	8005ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ade:	d009      	beq.n	8005af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	61da      	str	r2, [r3, #28]
 8005ae6:	e005      	b.n	8005af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fb f94c 	bl	8000dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b78:	ea42 0103 	orr.w	r1, r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	0c1b      	lsrs	r3, r3, #16
 8005b92:	f003 0104 	and.w	r1, r3, #4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f003 0210 	and.w	r2, r3, #16
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bce:	b084      	sub	sp, #16
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	f107 001c 	add.w	r0, r7, #28
 8005bdc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d122      	bne.n	8005c2c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d105      	bne.n	8005c20 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f9bf 	bl	8005fa4 <USB_CoreReset>
 8005c26:	4603      	mov	r3, r0
 8005c28:	73fb      	strb	r3, [r7, #15]
 8005c2a:	e01a      	b.n	8005c62 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f9b3 	bl	8005fa4 <USB_CoreReset>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
 8005c54:	e005      	b.n	8005c62 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d10b      	bne.n	8005c80 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f043 0206 	orr.w	r2, r3, #6
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f043 0220 	orr.w	r2, r3, #32
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c8c:	b004      	add	sp, #16
 8005c8e:	4770      	bx	lr

08005c90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f043 0201 	orr.w	r2, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d115      	bne.n	8005d22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d02:	2001      	movs	r0, #1
 8005d04:	f7fb f9c6 	bl	8001094 <HAL_Delay>
      ms++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f939 	bl	8005f86 <USB_GetMode>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d01e      	beq.n	8005d58 <USB_SetCurrentMode+0x84>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b31      	cmp	r3, #49	; 0x31
 8005d1e:	d9f0      	bls.n	8005d02 <USB_SetCurrentMode+0x2e>
 8005d20:	e01a      	b.n	8005d58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d115      	bne.n	8005d54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d34:	2001      	movs	r0, #1
 8005d36:	f7fb f9ad 	bl	8001094 <HAL_Delay>
      ms++;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f920 	bl	8005f86 <USB_GetMode>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <USB_SetCurrentMode+0x84>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b31      	cmp	r3, #49	; 0x31
 8005d50:	d9f0      	bls.n	8005d34 <USB_SetCurrentMode+0x60>
 8005d52:	e001      	b.n	8005d58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e005      	b.n	8005d64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b32      	cmp	r3, #50	; 0x32
 8005d5c:	d101      	bne.n	8005d62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4a13      	ldr	r2, [pc, #76]	; (8005dd0 <USB_FlushTxFifo+0x64>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d901      	bls.n	8005d8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e01b      	b.n	8005dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	daf2      	bge.n	8005d7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	019b      	lsls	r3, r3, #6
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <USB_FlushTxFifo+0x64>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d901      	bls.n	8005db6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e006      	b.n	8005dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d0f0      	beq.n	8005da4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	00030d40 	.word	0x00030d40

08005dd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3301      	adds	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4a11      	ldr	r2, [pc, #68]	; (8005e30 <USB_FlushRxFifo+0x5c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e018      	b.n	8005e24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	daf2      	bge.n	8005de0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2210      	movs	r2, #16
 8005e02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4a08      	ldr	r2, [pc, #32]	; (8005e30 <USB_FlushRxFifo+0x5c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e006      	b.n	8005e24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	2b10      	cmp	r3, #16
 8005e20:	d0f0      	beq.n	8005e04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	00030d40 	.word	0x00030d40

08005e34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b089      	sub	sp, #36	; 0x24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4611      	mov	r1, r2
 8005e40:	461a      	mov	r2, r3
 8005e42:	460b      	mov	r3, r1
 8005e44:	71fb      	strb	r3, [r7, #7]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d123      	bne.n	8005ea2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e5a:	88bb      	ldrh	r3, [r7, #4]
 8005e5c:	3303      	adds	r3, #3
 8005e5e:	089b      	lsrs	r3, r3, #2
 8005e60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	e018      	b.n	8005e9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	031a      	lsls	r2, r3, #12
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e74:	461a      	mov	r2, r3
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	3301      	adds	r3, #1
 8005e86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	3301      	adds	r3, #1
 8005e92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	3301      	adds	r3, #1
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d3e2      	bcc.n	8005e68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3724      	adds	r7, #36	; 0x24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b08b      	sub	sp, #44	; 0x2c
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	089b      	lsrs	r3, r3, #2
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	623b      	str	r3, [r7, #32]
 8005eda:	e014      	b.n	8005f06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	3301      	adds	r3, #1
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	3301      	adds	r3, #1
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	3301      	adds	r3, #1
 8005f04:	623b      	str	r3, [r7, #32]
 8005f06:	6a3a      	ldr	r2, [r7, #32]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d3e6      	bcc.n	8005edc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f0e:	8bfb      	ldrh	r3, [r7, #30]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01e      	beq.n	8005f52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f107 0310 	add.w	r3, r7, #16
 8005f24:	6812      	ldr	r2, [r2, #0]
 8005f26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	701a      	strb	r2, [r3, #0]
      i++;
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	3301      	adds	r3, #1
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f46:	8bfb      	ldrh	r3, [r7, #30]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f4c:	8bfb      	ldrh	r3, [r7, #30]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1ea      	bne.n	8005f28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	372c      	adds	r7, #44	; 0x2c
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4013      	ands	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f78:	68fb      	ldr	r3, [r7, #12]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0301 	and.w	r3, r3, #1
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4a13      	ldr	r2, [pc, #76]	; (8006008 <USB_CoreReset+0x64>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e01b      	b.n	8005ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	daf2      	bge.n	8005fb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f043 0201 	orr.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4a09      	ldr	r2, [pc, #36]	; (8006008 <USB_CoreReset+0x64>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d901      	bls.n	8005fec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e006      	b.n	8005ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d0f0      	beq.n	8005fda <USB_CoreReset+0x36>

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	00030d40 	.word	0x00030d40

0800600c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800600c:	b084      	sub	sp, #16
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800601a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800602c:	461a      	mov	r2, r3
 800602e:	2300      	movs	r3, #0
 8006030:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605e:	2b00      	cmp	r3, #0
 8006060:	d018      	beq.n	8006094 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d10a      	bne.n	800607e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006076:	f043 0304 	orr.w	r3, r3, #4
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	e014      	b.n	80060a8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800608c:	f023 0304 	bic.w	r3, r3, #4
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e009      	b.n	80060a8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060a2:	f023 0304 	bic.w	r3, r3, #4
 80060a6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060a8:	2110      	movs	r1, #16
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fe5e 	bl	8005d6c <USB_FlushTxFifo>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff fe8a 	bl	8005dd4 <USB_FlushRxFifo>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	e015      	b.n	80060fc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060dc:	461a      	mov	r2, r3
 80060de:	f04f 33ff 	mov.w	r3, #4294967295
 80060e2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f0:	461a      	mov	r2, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	3301      	adds	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	429a      	cmp	r2, r3
 8006102:	d3e5      	bcc.n	80060d0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f04f 32ff 	mov.w	r2, #4294967295
 8006110:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006124:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a13      	ldr	r2, [pc, #76]	; (8006178 <USB_HostInit+0x16c>)
 800612a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a13      	ldr	r2, [pc, #76]	; (800617c <USB_HostInit+0x170>)
 8006130:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006134:	e009      	b.n	800614a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2280      	movs	r2, #128	; 0x80
 800613a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a10      	ldr	r2, [pc, #64]	; (8006180 <USB_HostInit+0x174>)
 8006140:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a0f      	ldr	r2, [pc, #60]	; (8006184 <USB_HostInit+0x178>)
 8006146:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f043 0210 	orr.w	r2, r3, #16
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <USB_HostInit+0x17c>)
 8006162:	4313      	orrs	r3, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006168:	7dfb      	ldrb	r3, [r7, #23]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006174:	b004      	add	sp, #16
 8006176:	4770      	bx	lr
 8006178:	01000200 	.word	0x01000200
 800617c:	00e00300 	.word	0x00e00300
 8006180:	00600080 	.word	0x00600080
 8006184:	004000e0 	.word	0x004000e0
 8006188:	a3200008 	.word	0xa3200008

0800618c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	68f9      	ldr	r1, [r7, #12]
 80061c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80061c4:	4313      	orrs	r3, r2
 80061c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d107      	bne.n	80061de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d4:	461a      	mov	r2, r3
 80061d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80061da:	6053      	str	r3, [r2, #4]
 80061dc:	e009      	b.n	80061f2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d106      	bne.n	80061f2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ea:	461a      	mov	r2, r3
 80061ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80061f0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006220:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800622a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006230:	2064      	movs	r0, #100	; 0x64
 8006232:	f7fa ff2f 	bl	8001094 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800623e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006242:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006244:	200a      	movs	r0, #10
 8006246:	f7fa ff25 	bl	8001094 <HAL_Delay>

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006278:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d109      	bne.n	8006298 <USB_DriveVbus+0x44>
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d106      	bne.n	8006298 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006292:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006296:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800629e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a2:	d109      	bne.n	80062b8 <USB_DriveVbus+0x64>
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062b6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b085      	sub	sp, #20
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	0c5b      	lsrs	r3, r3, #17
 80062e4:	f003 0303 	and.w	r3, r3, #3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	b29b      	uxth	r3, r3
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	4608      	mov	r0, r1
 8006322:	4611      	mov	r1, r2
 8006324:	461a      	mov	r2, r3
 8006326:	4603      	mov	r3, r0
 8006328:	70fb      	strb	r3, [r7, #3]
 800632a:	460b      	mov	r3, r1
 800632c:	70bb      	strb	r3, [r7, #2]
 800632e:	4613      	mov	r3, r2
 8006330:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4413      	add	r3, r2
 8006342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006346:	461a      	mov	r2, r3
 8006348:	f04f 33ff 	mov.w	r3, #4294967295
 800634c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800634e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006352:	2b03      	cmp	r3, #3
 8006354:	d87e      	bhi.n	8006454 <USB_HC_Init+0x13c>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <USB_HC_Init+0x44>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	0800636d 	.word	0x0800636d
 8006360:	08006417 	.word	0x08006417
 8006364:	0800636d 	.word	0x0800636d
 8006368:	080063d9 	.word	0x080063d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4413      	add	r3, r2
 8006374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006378:	461a      	mov	r2, r3
 800637a:	f240 439d 	movw	r3, #1181	; 0x49d
 800637e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006380:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006384:	2b00      	cmp	r3, #0
 8006386:	da10      	bge.n	80063aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	78fa      	ldrb	r2, [r7, #3]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	440a      	add	r2, r1
 800639e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80063a8:	e057      	b.n	800645a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d051      	beq.n	800645a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	78fa      	ldrb	r2, [r7, #3]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80063d4:	60d3      	str	r3, [r2, #12]
      break;
 80063d6:	e040      	b.n	800645a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e4:	461a      	mov	r2, r3
 80063e6:	f240 639d 	movw	r3, #1693	; 0x69d
 80063ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da34      	bge.n	800645e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	78fa      	ldrb	r2, [r7, #3]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	440a      	add	r2, r1
 800640a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006412:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006414:	e023      	b.n	800645e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006422:	461a      	mov	r2, r3
 8006424:	f240 2325 	movw	r3, #549	; 0x225
 8006428:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800642a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800642e:	2b00      	cmp	r3, #0
 8006430:	da17      	bge.n	8006462 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	4413      	add	r3, r2
 800643a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	78fa      	ldrb	r2, [r7, #3]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	440a      	add	r2, r1
 8006448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800644c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006450:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006452:	e006      	b.n	8006462 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	77fb      	strb	r3, [r7, #31]
      break;
 8006458:	e004      	b.n	8006464 <USB_HC_Init+0x14c>
      break;
 800645a:	bf00      	nop
 800645c:	e002      	b.n	8006464 <USB_HC_Init+0x14c>
      break;
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <USB_HC_Init+0x14c>
      break;
 8006462:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	78fa      	ldrb	r2, [r7, #3]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	440a      	add	r2, r1
 800647a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800647e:	f043 0302 	orr.w	r3, r3, #2
 8006482:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800648a:	699a      	ldr	r2, [r3, #24]
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	2101      	movs	r1, #1
 8006494:	fa01 f303 	lsl.w	r3, r1, r3
 8006498:	6939      	ldr	r1, [r7, #16]
 800649a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800649e:	4313      	orrs	r3, r2
 80064a0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80064ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	da03      	bge.n	80064be <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80064b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	e001      	b.n	80064c2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff feff 	bl	80062c6 <USB_GetHostSpeed>
 80064c8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80064ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d106      	bne.n	80064e0 <USB_HC_Init+0x1c8>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d003      	beq.n	80064e0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80064d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e001      	b.n	80064e4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064e4:	787b      	ldrb	r3, [r7, #1]
 80064e6:	059b      	lsls	r3, r3, #22
 80064e8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064ec:	78bb      	ldrb	r3, [r7, #2]
 80064ee:	02db      	lsls	r3, r3, #11
 80064f0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064f4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064fa:	049b      	lsls	r3, r3, #18
 80064fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006500:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006502:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006504:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006508:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	0159      	lsls	r1, r3, #5
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	440b      	add	r3, r1
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006520:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006522:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006526:	2b03      	cmp	r3, #3
 8006528:	d003      	beq.n	8006532 <USB_HC_Init+0x21a>
 800652a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d10f      	bne.n	8006552 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4413      	add	r3, r2
 800653a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	78fa      	ldrb	r2, [r7, #3]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	440a      	add	r2, r1
 8006548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006550:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006552:	7ffb      	ldrb	r3, [r7, #31]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08c      	sub	sp, #48	; 0x30
 8006560:	af02      	add	r7, sp, #8
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006578:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006582:	2b00      	cmp	r3, #0
 8006584:	d02d      	beq.n	80065e2 <USB_HC_StartXfer+0x86>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	791b      	ldrb	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d129      	bne.n	80065e2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d117      	bne.n	80065c4 <USB_HC_StartXfer+0x68>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	79db      	ldrb	r3, [r3, #7]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <USB_HC_StartXfer+0x48>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	79db      	ldrb	r3, [r3, #7]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d10f      	bne.n	80065c4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	0151      	lsls	r1, r2, #5
 80065b6:	6a3a      	ldr	r2, [r7, #32]
 80065b8:	440a      	add	r2, r1
 80065ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <USB_HC_StartXfer+0x86>
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	795b      	ldrb	r3, [r3, #5]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d107      	bne.n	80065e2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	4619      	mov	r1, r3
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fa0f 	bl	80069fc <USB_DoPing>
      return HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	e0f8      	b.n	80067d4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d018      	beq.n	800661c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	8912      	ldrh	r2, [r2, #8]
 80065f2:	4413      	add	r3, r2
 80065f4:	3b01      	subs	r3, #1
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	8912      	ldrh	r2, [r2, #8]
 80065fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80065fe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006600:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006602:	8b7b      	ldrh	r3, [r7, #26]
 8006604:	429a      	cmp	r2, r3
 8006606:	d90b      	bls.n	8006620 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006608:	8b7b      	ldrh	r3, [r7, #26]
 800660a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800660c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	8912      	ldrh	r2, [r2, #8]
 8006612:	fb03 f202 	mul.w	r2, r3, r2
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	611a      	str	r2, [r3, #16]
 800661a:	e001      	b.n	8006620 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800661c:	2301      	movs	r3, #1
 800661e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	78db      	ldrb	r3, [r3, #3]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d007      	beq.n	8006638 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006628:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	8912      	ldrh	r2, [r2, #8]
 800662e:	fb03 f202 	mul.w	r2, r3, r2
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	611a      	str	r2, [r3, #16]
 8006636:	e003      	b.n	8006640 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	695a      	ldr	r2, [r3, #20]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800664a:	04d9      	lsls	r1, r3, #19
 800664c:	4b63      	ldr	r3, [pc, #396]	; (80067dc <USB_HC_StartXfer+0x280>)
 800664e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006650:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	7a9b      	ldrb	r3, [r3, #10]
 8006656:	075b      	lsls	r3, r3, #29
 8006658:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800665c:	69f9      	ldr	r1, [r7, #28]
 800665e:	0148      	lsls	r0, r1, #5
 8006660:	6a39      	ldr	r1, [r7, #32]
 8006662:	4401      	add	r1, r0
 8006664:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006668:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800666a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	68d9      	ldr	r1, [r3, #12]
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	4413      	add	r3, r2
 800667e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006682:	460a      	mov	r2, r1
 8006684:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	bf0c      	ite	eq
 8006696:	2301      	moveq	r3, #1
 8006698:	2300      	movne	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	6a3a      	ldr	r2, [r7, #32]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	7e7b      	ldrb	r3, [r7, #25]
 80066ce:	075b      	lsls	r3, r3, #29
 80066d0:	69f9      	ldr	r1, [r7, #28]
 80066d2:	0148      	lsls	r0, r1, #5
 80066d4:	6a39      	ldr	r1, [r7, #32]
 80066d6:	4401      	add	r1, r0
 80066d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80066dc:	4313      	orrs	r3, r2
 80066de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066f6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	78db      	ldrb	r3, [r3, #3]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	e003      	b.n	8006712 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006710:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006718:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	4413      	add	r3, r2
 8006722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006726:	461a      	mov	r2, r3
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	e04e      	b.n	80067d4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	78db      	ldrb	r3, [r3, #3]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d149      	bne.n	80067d2 <USB_HC_StartXfer+0x276>
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d045      	beq.n	80067d2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	79db      	ldrb	r3, [r3, #7]
 800674a:	2b03      	cmp	r3, #3
 800674c:	d830      	bhi.n	80067b0 <USB_HC_StartXfer+0x254>
 800674e:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <USB_HC_StartXfer+0x1f8>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	08006765 	.word	0x08006765
 8006758:	08006789 	.word	0x08006789
 800675c:	08006765 	.word	0x08006765
 8006760:	08006789 	.word	0x08006789
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	3303      	adds	r3, #3
 800676a:	089b      	lsrs	r3, r3, #2
 800676c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800676e:	8afa      	ldrh	r2, [r7, #22]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	b29b      	uxth	r3, r3
 8006776:	429a      	cmp	r2, r3
 8006778:	d91c      	bls.n	80067b4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f043 0220 	orr.w	r2, r3, #32
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	619a      	str	r2, [r3, #24]
        }
        break;
 8006786:	e015      	b.n	80067b4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	3303      	adds	r3, #3
 800678e:	089b      	lsrs	r3, r3, #2
 8006790:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006792:	8afa      	ldrh	r2, [r7, #22]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	b29b      	uxth	r3, r3
 800679e:	429a      	cmp	r2, r3
 80067a0:	d90a      	bls.n	80067b8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80067ae:	e003      	b.n	80067b8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80067b0:	bf00      	nop
 80067b2:	e002      	b.n	80067ba <USB_HC_StartXfer+0x25e>
        break;
 80067b4:	bf00      	nop
 80067b6:	e000      	b.n	80067ba <USB_HC_StartXfer+0x25e>
        break;
 80067b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	68d9      	ldr	r1, [r3, #12]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	785a      	ldrb	r2, [r3, #1]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2000      	movs	r0, #0
 80067ca:	9000      	str	r0, [sp, #0]
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff fb31 	bl	8005e34 <USB_WritePacket>
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3728      	adds	r7, #40	; 0x28
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	1ff80000 	.word	0x1ff80000

080067e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	b29b      	uxth	r3, r3
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006802:	b480      	push	{r7}
 8006804:	b089      	sub	sp, #36	; 0x24
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	4413      	add	r3, r2
 8006822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	0c9b      	lsrs	r3, r3, #18
 800682a:	f003 0303 	and.w	r3, r3, #3
 800682e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	0fdb      	lsrs	r3, r3, #31
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b20      	cmp	r3, #32
 8006850:	d104      	bne.n	800685c <USB_HC_Halt+0x5a>
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	e0c8      	b.n	80069ee <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <USB_HC_Halt+0x66>
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d163      	bne.n	8006930 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	4413      	add	r3, r2
 8006870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	0151      	lsls	r1, r2, #5
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	440a      	add	r2, r1
 800687e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006886:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	f040 80ab 	bne.w	80069ec <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d133      	bne.n	800690a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	0151      	lsls	r1, r2, #5
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	440a      	add	r2, r1
 80068b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	0151      	lsls	r1, r2, #5
 80068d4:	69fa      	ldr	r2, [r7, #28]
 80068d6:	440a      	add	r2, r1
 80068d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068e0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3301      	adds	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ee:	d81d      	bhi.n	800692c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006906:	d0ec      	beq.n	80068e2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006908:	e070      	b.n	80069ec <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	4413      	add	r3, r2
 8006912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	440a      	add	r2, r1
 8006920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006928:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800692a:	e05f      	b.n	80069ec <USB_HC_Halt+0x1ea>
            break;
 800692c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800692e:	e05d      	b.n	80069ec <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800694e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d133      	bne.n	80069c8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	4413      	add	r3, r2
 8006968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	440a      	add	r2, r1
 8006976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800697a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800697e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	4413      	add	r3, r2
 8006988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	440a      	add	r2, r1
 8006996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800699a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800699e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ac:	d81d      	bhi.n	80069ea <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c4:	d0ec      	beq.n	80069a0 <USB_HC_Halt+0x19e>
 80069c6:	e011      	b.n	80069ec <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	e000      	b.n	80069ec <USB_HC_Halt+0x1ea>
          break;
 80069ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3724      	adds	r7, #36	; 0x24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
	...

080069fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a10:	2301      	movs	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	04da      	lsls	r2, r3, #19
 8006a18:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <USB_DoPing+0x74>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a2c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a44:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a4c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	1ff80000 	.word	0x1ff80000

08006a74 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff f912 	bl	8005cb2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a8e:	2110      	movs	r1, #16
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff f96b 	bl	8005d6c <USB_FlushTxFifo>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff f997 	bl	8005dd4 <USB_FlushRxFifo>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	e01f      	b.n	8006af6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006acc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ad4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006adc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	461a      	mov	r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	3301      	adds	r3, #1
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2b0f      	cmp	r3, #15
 8006afa:	d9dc      	bls.n	8006ab6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006afc:	2300      	movs	r3, #0
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	e034      	b.n	8006b6c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b18:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b28:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b36:	461a      	mov	r2, r3
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b48:	d80c      	bhi.n	8006b64 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b60:	d0ec      	beq.n	8006b3c <USB_StopHost+0xc8>
 8006b62:	e000      	b.n	8006b66 <USB_StopHost+0xf2>
        break;
 8006b64:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2b0f      	cmp	r3, #15
 8006b70:	d9c7      	bls.n	8006b02 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f04f 32ff 	mov.w	r2, #4294967295
 8006b86:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff f881 	bl	8005c90 <USB_EnableGlobalInt>

  return ret;
 8006b8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006b98:	b590      	push	{r4, r7, lr}
 8006b9a:	b089      	sub	sp, #36	; 0x24
 8006b9c:	af04      	add	r7, sp, #16
 8006b9e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	2102      	movs	r1, #2
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fc66 	bl	8007478 <USBH_FindInterface>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	2bff      	cmp	r3, #255	; 0xff
 8006bb4:	d002      	beq.n	8006bbc <USBH_CDC_InterfaceInit+0x24>
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d901      	bls.n	8006bc0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e13d      	b.n	8006e3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc3b 	bl	8007440 <USBH_SelectInterface>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e131      	b.n	8006e3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006bde:	2050      	movs	r0, #80	; 0x50
 8006be0:	f002 fafa 	bl	80091d8 <malloc>
 8006be4:	4603      	mov	r3, r0
 8006be6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e11f      	b.n	8006e3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006bfc:	2250      	movs	r2, #80	; 0x50
 8006bfe:	2100      	movs	r1, #0
 8006c00:	68b8      	ldr	r0, [r7, #8]
 8006c02:	f002 faf9 	bl	80091f8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	211a      	movs	r1, #26
 8006c0c:	fb01 f303 	mul.w	r3, r1, r3
 8006c10:	4413      	add	r3, r2
 8006c12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	b25b      	sxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	da15      	bge.n	8006c4a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	211a      	movs	r1, #26
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c2e:	781a      	ldrb	r2, [r3, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	211a      	movs	r1, #26
 8006c3a:	fb01 f303 	mul.w	r3, r1, r3
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c44:	881a      	ldrh	r2, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 ff2c 	bl	8008aae <USBH_AllocPipe>
 8006c56:	4603      	mov	r3, r0
 8006c58:	461a      	mov	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	7819      	ldrb	r1, [r3, #0]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	7858      	ldrb	r0, [r3, #1]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	8952      	ldrh	r2, [r2, #10]
 8006c76:	9202      	str	r2, [sp, #8]
 8006c78:	2203      	movs	r2, #3
 8006c7a:	9201      	str	r2, [sp, #4]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	4623      	mov	r3, r4
 8006c80:	4602      	mov	r2, r0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fee4 	bl	8008a50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f002 f9f3 	bl	800907c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006c96:	2300      	movs	r3, #0
 8006c98:	2200      	movs	r2, #0
 8006c9a:	210a      	movs	r1, #10
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fbeb 	bl	8007478 <USBH_FindInterface>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	2bff      	cmp	r3, #255	; 0xff
 8006caa:	d002      	beq.n	8006cb2 <USBH_CDC_InterfaceInit+0x11a>
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d901      	bls.n	8006cb6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e0c2      	b.n	8006e3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	211a      	movs	r1, #26
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	b25b      	sxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	da16      	bge.n	8006cfc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	211a      	movs	r1, #26
 8006cd4:	fb01 f303 	mul.w	r3, r1, r3
 8006cd8:	4413      	add	r3, r2
 8006cda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cde:	781a      	ldrb	r2, [r3, #0]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	211a      	movs	r1, #26
 8006cea:	fb01 f303 	mul.w	r3, r1, r3
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006cf4:	881a      	ldrh	r2, [r3, #0]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	835a      	strh	r2, [r3, #26]
 8006cfa:	e015      	b.n	8006d28 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	211a      	movs	r1, #26
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	4413      	add	r3, r2
 8006d08:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d0c:	781a      	ldrb	r2, [r3, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	211a      	movs	r1, #26
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d22:	881a      	ldrh	r2, [r3, #0]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	211a      	movs	r1, #26
 8006d2e:	fb01 f303 	mul.w	r3, r1, r3
 8006d32:	4413      	add	r3, r2
 8006d34:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b25b      	sxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	da16      	bge.n	8006d6e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	211a      	movs	r1, #26
 8006d46:	fb01 f303 	mul.w	r3, r1, r3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	211a      	movs	r1, #26
 8006d5c:	fb01 f303 	mul.w	r3, r1, r3
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006d66:	881a      	ldrh	r2, [r3, #0]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	835a      	strh	r2, [r3, #26]
 8006d6c:	e015      	b.n	8006d9a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	211a      	movs	r1, #26
 8006d74:	fb01 f303 	mul.w	r3, r1, r3
 8006d78:	4413      	add	r3, r2
 8006d7a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	211a      	movs	r1, #26
 8006d8a:	fb01 f303 	mul.w	r3, r1, r3
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006d94:	881a      	ldrh	r2, [r3, #0]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	7b9b      	ldrb	r3, [r3, #14]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 fe84 	bl	8008aae <USBH_AllocPipe>
 8006da6:	4603      	mov	r3, r0
 8006da8:	461a      	mov	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	7bdb      	ldrb	r3, [r3, #15]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 fe7a 	bl	8008aae <USBH_AllocPipe>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	7b59      	ldrb	r1, [r3, #13]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	7b98      	ldrb	r0, [r3, #14]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	8b12      	ldrh	r2, [r2, #24]
 8006dda:	9202      	str	r2, [sp, #8]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	9201      	str	r2, [sp, #4]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	4623      	mov	r3, r4
 8006de4:	4602      	mov	r2, r0
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fe32 	bl	8008a50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	7b19      	ldrb	r1, [r3, #12]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	7bd8      	ldrb	r0, [r3, #15]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	8b52      	ldrh	r2, [r2, #26]
 8006e04:	9202      	str	r2, [sp, #8]
 8006e06:	2202      	movs	r2, #2
 8006e08:	9201      	str	r2, [sp, #4]
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	4623      	mov	r3, r4
 8006e0e:	4602      	mov	r2, r0
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 fe1d 	bl	8008a50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	7b5b      	ldrb	r3, [r3, #13]
 8006e22:	2200      	movs	r2, #0
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f002 f928 	bl	800907c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	7b1b      	ldrb	r3, [r3, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f002 f921 	bl	800907c <USBH_LL_SetToggle>

  return USBH_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd90      	pop	{r4, r7, pc}

08006e44 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00e      	beq.n	8006e7c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fe12 	bl	8008a8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fe3d 	bl	8008af0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	7b1b      	ldrb	r3, [r3, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00e      	beq.n	8006ea2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	7b1b      	ldrb	r3, [r3, #12]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fdff 	bl	8008a8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	7b1b      	ldrb	r3, [r3, #12]
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 fe2a 	bl	8008af0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	7b5b      	ldrb	r3, [r3, #13]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00e      	beq.n	8006ec8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	7b5b      	ldrb	r3, [r3, #13]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 fdec 	bl	8008a8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	7b5b      	ldrb	r3, [r3, #13]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 fe17 	bl	8008af0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00b      	beq.n	8006eec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f002 f983 	bl	80091e8 <free>
    phost->pActiveClass->pData = 0U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ee8:	2200      	movs	r2, #0
 8006eea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3340      	adds	r3, #64	; 0x40
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f8b1 	bl	8007076 <GetLineCoding>
 8006f14:	4603      	mov	r3, r0
 8006f16:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d105      	bne.n	8006f2a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f24:	2102      	movs	r1, #2
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	d877      	bhi.n	8007048 <USBH_CDC_Process+0x114>
 8006f58:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <USBH_CDC_Process+0x2c>)
 8006f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5e:	bf00      	nop
 8006f60:	08006f75 	.word	0x08006f75
 8006f64:	08006f7b 	.word	0x08006f7b
 8006f68:	08006fab 	.word	0x08006fab
 8006f6c:	0800701f 	.word	0x0800701f
 8006f70:	0800702d 	.word	0x0800702d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]
      break;
 8006f78:	e06d      	b.n	8007056 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f897 	bl	80070b4 <SetLineCoding>
 8006f86:	4603      	mov	r3, r0
 8006f88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f98:	e058      	b.n	800704c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d055      	beq.n	800704c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2204      	movs	r2, #4
 8006fa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006fa8:	e050      	b.n	800704c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	3340      	adds	r3, #64	; 0x40
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f860 	bl	8007076 <GetLineCoding>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fba:	7bbb      	ldrb	r3, [r7, #14]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d126      	bne.n	800700e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd2:	791b      	ldrb	r3, [r3, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d13b      	bne.n	8007050 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d133      	bne.n	8007050 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d12b      	bne.n	8007050 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007000:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007002:	429a      	cmp	r2, r3
 8007004:	d124      	bne.n	8007050 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f958 	bl	80072bc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800700c:	e020      	b.n	8007050 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d01d      	beq.n	8007050 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2204      	movs	r2, #4
 8007018:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800701c:	e018      	b.n	8007050 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f867 	bl	80070f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f8da 	bl	80071de <CDC_ProcessReception>
      break;
 800702a:	e014      	b.n	8007056 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800702c:	2100      	movs	r1, #0
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 ffef 	bl	8008012 <USBH_ClrFeature>
 8007034:	4603      	mov	r3, r0
 8007036:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007046:	e005      	b.n	8007054 <USBH_CDC_Process+0x120>

    default:
      break;
 8007048:	bf00      	nop
 800704a:	e004      	b.n	8007056 <USBH_CDC_Process+0x122>
      break;
 800704c:	bf00      	nop
 800704e:	e002      	b.n	8007056 <USBH_CDC_Process+0x122>
      break;
 8007050:	bf00      	nop
 8007052:	e000      	b.n	8007056 <USBH_CDC_Process+0x122>
      break;
 8007054:	bf00      	nop

  }

  return status;
 8007056:	7bfb      	ldrb	r3, [r7, #15]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	22a1      	movs	r2, #161	; 0xa1
 8007084:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2221      	movs	r2, #33	; 0x21
 800708a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2207      	movs	r2, #7
 800709c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2207      	movs	r2, #7
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 fa81 	bl	80085ac <USBH_CtlReq>
 80070aa:	4603      	mov	r3, r0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2221      	movs	r2, #33	; 0x21
 80070c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2207      	movs	r2, #7
 80070da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2207      	movs	r2, #7
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 fa62 	bl	80085ac <USBH_CtlReq>
 80070e8:	4603      	mov	r3, r0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af02      	add	r7, sp, #8
 80070f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007104:	2300      	movs	r3, #0
 8007106:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800710e:	2b01      	cmp	r3, #1
 8007110:	d002      	beq.n	8007118 <CDC_ProcessTransmission+0x26>
 8007112:	2b02      	cmp	r3, #2
 8007114:	d023      	beq.n	800715e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007116:	e05e      	b.n	80071d6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	8b12      	ldrh	r2, [r2, #24]
 8007120:	4293      	cmp	r3, r2
 8007122:	d90b      	bls.n	800713c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	69d9      	ldr	r1, [r3, #28]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8b1a      	ldrh	r2, [r3, #24]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	7b5b      	ldrb	r3, [r3, #13]
 8007130:	2001      	movs	r0, #1
 8007132:	9000      	str	r0, [sp, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 fc48 	bl	80089ca <USBH_BulkSendData>
 800713a:	e00b      	b.n	8007154 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	7b5b      	ldrb	r3, [r3, #13]
 800714a:	2001      	movs	r0, #1
 800714c:	9000      	str	r0, [sp, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fc3b 	bl	80089ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800715c:	e03b      	b.n	80071d6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	7b5b      	ldrb	r3, [r3, #13]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f001 ff5f 	bl	8009028 <USBH_LL_GetURBState>
 800716a:	4603      	mov	r3, r0
 800716c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d128      	bne.n	80071c6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	8b12      	ldrh	r2, [r2, #24]
 800717c:	4293      	cmp	r3, r2
 800717e:	d90e      	bls.n	800719e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	8b12      	ldrh	r2, [r2, #24]
 8007188:	1a9a      	subs	r2, r3, r2
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	8b12      	ldrh	r2, [r2, #24]
 8007196:	441a      	add	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	61da      	str	r2, [r3, #28]
 800719c:	e002      	b.n	80071a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80071b4:	e00e      	b.n	80071d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f868 	bl	8007294 <USBH_CDC_TransmitCallback>
      break;
 80071c4:	e006      	b.n	80071d4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80071c6:	7afb      	ldrb	r3, [r7, #11]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d103      	bne.n	80071d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80071d4:	bf00      	nop
  }
}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b086      	sub	sp, #24
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071f0:	2300      	movs	r3, #0
 80071f2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d002      	beq.n	8007204 <CDC_ProcessReception+0x26>
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d00e      	beq.n	8007220 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007202:	e043      	b.n	800728c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	6a19      	ldr	r1, [r3, #32]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	8b5a      	ldrh	r2, [r3, #26]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	7b1b      	ldrb	r3, [r3, #12]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 fbff 	bl	8008a14 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2204      	movs	r2, #4
 800721a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800721e:	e035      	b.n	800728c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	7b1b      	ldrb	r3, [r3, #12]
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fefe 	bl	8009028 <USBH_LL_GetURBState>
 800722c:	4603      	mov	r3, r0
 800722e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007230:	7cfb      	ldrb	r3, [r7, #19]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d129      	bne.n	800728a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	7b1b      	ldrb	r3, [r3, #12]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 fe61 	bl	8008f04 <USBH_LL_GetLastXferSize>
 8007242:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	429a      	cmp	r2, r3
 800724c:	d016      	beq.n	800727c <CDC_ProcessReception+0x9e>
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	8b5b      	ldrh	r3, [r3, #26]
 8007252:	461a      	mov	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4293      	cmp	r3, r2
 8007258:	d910      	bls.n	800727c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	1ad2      	subs	r2, r2, r3
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6a1a      	ldr	r2, [r3, #32]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	441a      	add	r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2203      	movs	r2, #3
 8007276:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800727a:	e006      	b.n	800728a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f80f 	bl	80072a8 <USBH_CDC_ReceiveCallback>
      break;
 800728a:	bf00      	nop
  }
}
 800728c:	bf00      	nop
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	4613      	mov	r3, r2
 80072dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80072e4:	2302      	movs	r3, #2
 80072e6:	e029      	b.n	800733c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	79fa      	ldrb	r2, [r7, #7]
 80072ec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f81f 	bl	8007344 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f001 fd31 	bl	8008d9c <USBH_LL_Init>

  return USBH_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	e009      	b.n	800736a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	33e0      	adds	r3, #224	; 0xe0
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	2200      	movs	r2, #0
 8007362:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3301      	adds	r3, #1
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b0f      	cmp	r3, #15
 800736e:	d9f2      	bls.n	8007356 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e009      	b.n	800738a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007380:	2200      	movs	r2, #0
 8007382:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3301      	adds	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007390:	d3f1      	bcc.n	8007376 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2240      	movs	r2, #64	; 0x40
 80073b6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d016      	beq.n	800742e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10e      	bne.n	8007428 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007410:	1c59      	adds	r1, r3, #1
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	33de      	adds	r3, #222	; 0xde
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	73fb      	strb	r3, [r7, #15]
 8007426:	e004      	b.n	8007432 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007428:	2302      	movs	r3, #2
 800742a:	73fb      	strb	r3, [r7, #15]
 800742c:	e001      	b.n	8007432 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800742e:	2302      	movs	r3, #2
 8007430:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007432:	7bfb      	ldrb	r3, [r7, #15]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	460b      	mov	r3, r1
 800744a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	429a      	cmp	r2, r3
 800745a:	d204      	bcs.n	8007466 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	78fa      	ldrb	r2, [r7, #3]
 8007460:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007464:	e001      	b.n	800746a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007466:	2302      	movs	r3, #2
 8007468:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800746a:	7bfb      	ldrb	r3, [r7, #15]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	4608      	mov	r0, r1
 8007482:	4611      	mov	r1, r2
 8007484:	461a      	mov	r2, r3
 8007486:	4603      	mov	r3, r0
 8007488:	70fb      	strb	r3, [r7, #3]
 800748a:	460b      	mov	r3, r1
 800748c:	70bb      	strb	r3, [r7, #2]
 800748e:	4613      	mov	r3, r2
 8007490:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80074a0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074a2:	e025      	b.n	80074f0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	221a      	movs	r2, #26
 80074a8:	fb02 f303 	mul.w	r3, r2, r3
 80074ac:	3308      	adds	r3, #8
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	4413      	add	r3, r2
 80074b2:	3302      	adds	r3, #2
 80074b4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	795b      	ldrb	r3, [r3, #5]
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d002      	beq.n	80074c6 <USBH_FindInterface+0x4e>
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	2bff      	cmp	r3, #255	; 0xff
 80074c4:	d111      	bne.n	80074ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80074ca:	78ba      	ldrb	r2, [r7, #2]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d002      	beq.n	80074d6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80074d0:	78bb      	ldrb	r3, [r7, #2]
 80074d2:	2bff      	cmp	r3, #255	; 0xff
 80074d4:	d109      	bne.n	80074ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80074da:	787a      	ldrb	r2, [r7, #1]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d002      	beq.n	80074e6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074e0:	787b      	ldrb	r3, [r7, #1]
 80074e2:	2bff      	cmp	r3, #255	; 0xff
 80074e4:	d101      	bne.n	80074ea <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	e006      	b.n	80074f8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	3301      	adds	r3, #1
 80074ee:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d9d6      	bls.n	80074a4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80074f6:	23ff      	movs	r3, #255	; 0xff
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 fc81 	bl	8008e14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007512:	2101      	movs	r1, #1
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 fd9a 	bl	800904e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af04      	add	r7, sp, #16
 800752a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800752c:	2302      	movs	r3, #2
 800752e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b01      	cmp	r3, #1
 800753e:	d102      	bne.n	8007546 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2203      	movs	r2, #3
 8007544:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b0b      	cmp	r3, #11
 800754e:	f200 81be 	bhi.w	80078ce <USBH_Process+0x3aa>
 8007552:	a201      	add	r2, pc, #4	; (adr r2, 8007558 <USBH_Process+0x34>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	08007589 	.word	0x08007589
 800755c:	080075bb 	.word	0x080075bb
 8007560:	08007623 	.word	0x08007623
 8007564:	08007869 	.word	0x08007869
 8007568:	080078cf 	.word	0x080078cf
 800756c:	080076c7 	.word	0x080076c7
 8007570:	0800780f 	.word	0x0800780f
 8007574:	080076fd 	.word	0x080076fd
 8007578:	0800771d 	.word	0x0800771d
 800757c:	0800773d 	.word	0x0800773d
 8007580:	08007781 	.word	0x08007781
 8007584:	08007851 	.word	0x08007851
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 819e 	beq.w	80078d2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800759c:	20c8      	movs	r0, #200	; 0xc8
 800759e:	f001 fd9d 	bl	80090dc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 fc93 	bl	8008ece <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80075b8:	e18b      	b.n	80078d2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d107      	bne.n	80075d4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075d2:	e18d      	b.n	80078f0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80075da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075de:	d914      	bls.n	800760a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80075e6:	3301      	adds	r3, #1
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d903      	bls.n	8007602 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	220d      	movs	r2, #13
 80075fe:	701a      	strb	r2, [r3, #0]
      break;
 8007600:	e176      	b.n	80078f0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	701a      	strb	r2, [r3, #0]
      break;
 8007608:	e172      	b.n	80078f0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007610:	f103 020a 	add.w	r2, r3, #10
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800761a:	200a      	movs	r0, #10
 800761c:	f001 fd5e 	bl	80090dc <USBH_Delay>
      break;
 8007620:	e166      	b.n	80078f0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007632:	2104      	movs	r1, #4
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007638:	2064      	movs	r0, #100	; 0x64
 800763a:	f001 fd4f 	bl	80090dc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 fc1e 	bl	8008e80 <USBH_LL_GetSpeed>
 8007644:	4603      	mov	r3, r0
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2205      	movs	r2, #5
 8007652:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007654:	2100      	movs	r1, #0
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 fa29 	bl	8008aae <USBH_AllocPipe>
 800765c:	4603      	mov	r3, r0
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007664:	2180      	movs	r1, #128	; 0x80
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 fa21 	bl	8008aae <USBH_AllocPipe>
 800766c:	4603      	mov	r3, r0
 800766e:	461a      	mov	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	7919      	ldrb	r1, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007688:	b292      	uxth	r2, r2
 800768a:	9202      	str	r2, [sp, #8]
 800768c:	2200      	movs	r2, #0
 800768e:	9201      	str	r2, [sp, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	4603      	mov	r3, r0
 8007694:	2280      	movs	r2, #128	; 0x80
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 f9da 	bl	8008a50 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	7959      	ldrb	r1, [r3, #5]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80076b0:	b292      	uxth	r2, r2
 80076b2:	9202      	str	r2, [sp, #8]
 80076b4:	2200      	movs	r2, #0
 80076b6:	9201      	str	r2, [sp, #4]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	4603      	mov	r3, r0
 80076bc:	2200      	movs	r2, #0
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 f9c6 	bl	8008a50 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076c4:	e114      	b.n	80078f0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f918 	bl	80078fc <USBH_HandleEnum>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f040 80fe 	bne.w	80078d6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d103      	bne.n	80076f4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2208      	movs	r2, #8
 80076f0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076f2:	e0f0      	b.n	80078d6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2207      	movs	r2, #7
 80076f8:	701a      	strb	r2, [r3, #0]
      break;
 80076fa:	e0ec      	b.n	80078d6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 80e9 	beq.w	80078da <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800770e:	2101      	movs	r1, #1
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2208      	movs	r2, #8
 8007718:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800771a:	e0de      	b.n	80078da <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007722:	b29b      	uxth	r3, r3
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fc2c 	bl	8007f84 <USBH_SetCfg>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	f040 80d5 	bne.w	80078de <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2209      	movs	r2, #9
 8007738:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800773a:	e0d0      	b.n	80078de <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b00      	cmp	r3, #0
 8007748:	d016      	beq.n	8007778 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800774a:	2101      	movs	r1, #1
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fc3c 	bl	8007fca <USBH_SetFeature>
 8007752:	4603      	mov	r3, r0
 8007754:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	220a      	movs	r2, #10
 8007762:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007764:	e0bd      	b.n	80078e2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b03      	cmp	r3, #3
 800776c:	f040 80b9 	bne.w	80078e2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	220a      	movs	r2, #10
 8007774:	701a      	strb	r2, [r3, #0]
      break;
 8007776:	e0b4      	b.n	80078e2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	220a      	movs	r2, #10
 800777c:	701a      	strb	r2, [r3, #0]
      break;
 800777e:	e0b0      	b.n	80078e2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 80ad 	beq.w	80078e6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]
 8007798:	e016      	b.n	80077c8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800779a:	7bfa      	ldrb	r2, [r7, #15]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	32de      	adds	r2, #222	; 0xde
 80077a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a4:	791a      	ldrb	r2, [r3, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d108      	bne.n	80077c2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80077b0:	7bfa      	ldrb	r2, [r7, #15]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	32de      	adds	r2, #222	; 0xde
 80077b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80077c0:	e005      	b.n	80077ce <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	3301      	adds	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0e5      	beq.n	800779a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d016      	beq.n	8007806 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2206      	movs	r2, #6
 80077ee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077f6:	2103      	movs	r1, #3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077fc:	e073      	b.n	80078e6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	220d      	movs	r2, #13
 8007802:	701a      	strb	r2, [r3, #0]
      break;
 8007804:	e06f      	b.n	80078e6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	220d      	movs	r2, #13
 800780a:	701a      	strb	r2, [r3, #0]
      break;
 800780c:	e06b      	b.n	80078e6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d017      	beq.n	8007848 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
 8007824:	4603      	mov	r3, r0
 8007826:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	220b      	movs	r2, #11
 8007834:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007836:	e058      	b.n	80078ea <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b02      	cmp	r3, #2
 800783e:	d154      	bne.n	80078ea <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	220d      	movs	r2, #13
 8007844:	701a      	strb	r2, [r3, #0]
      break;
 8007846:	e050      	b.n	80078ea <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	220d      	movs	r2, #13
 800784c:	701a      	strb	r2, [r3, #0]
      break;
 800784e:	e04c      	b.n	80078ea <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d049      	beq.n	80078ee <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
      }
      break;
 8007866:	e042      	b.n	80078ee <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff fd67 	bl	8007344 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800787c:	2b00      	cmp	r3, #0
 800787e:	d009      	beq.n	8007894 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d005      	beq.n	80078aa <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078a4:	2105      	movs	r1, #5
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d107      	bne.n	80078c6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fe20 	bl	8007504 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078c4:	e014      	b.n	80078f0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 faa4 	bl	8008e14 <USBH_LL_Start>
      break;
 80078cc:	e010      	b.n	80078f0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80078ce:	bf00      	nop
 80078d0:	e00e      	b.n	80078f0 <USBH_Process+0x3cc>
      break;
 80078d2:	bf00      	nop
 80078d4:	e00c      	b.n	80078f0 <USBH_Process+0x3cc>
      break;
 80078d6:	bf00      	nop
 80078d8:	e00a      	b.n	80078f0 <USBH_Process+0x3cc>
    break;
 80078da:	bf00      	nop
 80078dc:	e008      	b.n	80078f0 <USBH_Process+0x3cc>
      break;
 80078de:	bf00      	nop
 80078e0:	e006      	b.n	80078f0 <USBH_Process+0x3cc>
      break;
 80078e2:	bf00      	nop
 80078e4:	e004      	b.n	80078f0 <USBH_Process+0x3cc>
      break;
 80078e6:	bf00      	nop
 80078e8:	e002      	b.n	80078f0 <USBH_Process+0x3cc>
      break;
 80078ea:	bf00      	nop
 80078ec:	e000      	b.n	80078f0 <USBH_Process+0x3cc>
      break;
 80078ee:	bf00      	nop
  }
  return USBH_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop

080078fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af04      	add	r7, sp, #16
 8007902:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007904:	2301      	movs	r3, #1
 8007906:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007908:	2301      	movs	r3, #1
 800790a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	785b      	ldrb	r3, [r3, #1]
 8007910:	2b07      	cmp	r3, #7
 8007912:	f200 81c1 	bhi.w	8007c98 <USBH_HandleEnum+0x39c>
 8007916:	a201      	add	r2, pc, #4	; (adr r2, 800791c <USBH_HandleEnum+0x20>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	0800793d 	.word	0x0800793d
 8007920:	080079fb 	.word	0x080079fb
 8007924:	08007a65 	.word	0x08007a65
 8007928:	08007af3 	.word	0x08007af3
 800792c:	08007b5d 	.word	0x08007b5d
 8007930:	08007bcd 	.word	0x08007bcd
 8007934:	08007c13 	.word	0x08007c13
 8007938:	08007c59 	.word	0x08007c59
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800793c:	2108      	movs	r1, #8
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fa50 	bl	8007de4 <USBH_Get_DevDesc>
 8007944:	4603      	mov	r3, r0
 8007946:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d130      	bne.n	80079b0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	7919      	ldrb	r1, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007972:	b292      	uxth	r2, r2
 8007974:	9202      	str	r2, [sp, #8]
 8007976:	2200      	movs	r2, #0
 8007978:	9201      	str	r2, [sp, #4]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	4603      	mov	r3, r0
 800797e:	2280      	movs	r2, #128	; 0x80
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 f865 	bl	8008a50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7959      	ldrb	r1, [r3, #5]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800799a:	b292      	uxth	r2, r2
 800799c:	9202      	str	r2, [sp, #8]
 800799e:	2200      	movs	r2, #0
 80079a0:	9201      	str	r2, [sp, #4]
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	4603      	mov	r3, r0
 80079a6:	2200      	movs	r2, #0
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 f851 	bl	8008a50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079ae:	e175      	b.n	8007c9c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	f040 8172 	bne.w	8007c9c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079be:	3301      	adds	r3, #1
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d903      	bls.n	80079da <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	220d      	movs	r2, #13
 80079d6:	701a      	strb	r2, [r3, #0]
      break;
 80079d8:	e160      	b.n	8007c9c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	795b      	ldrb	r3, [r3, #5]
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 f885 	bl	8008af0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	791b      	ldrb	r3, [r3, #4]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f87f 	bl	8008af0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	701a      	strb	r2, [r3, #0]
      break;
 80079f8:	e150      	b.n	8007c9c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80079fa:	2112      	movs	r1, #18
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f9f1 	bl	8007de4 <USBH_Get_DevDesc>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d103      	bne.n	8007a14 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a12:	e145      	b.n	8007ca0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	f040 8142 	bne.w	8007ca0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a22:	3301      	adds	r3, #1
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d903      	bls.n	8007a3e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	220d      	movs	r2, #13
 8007a3a:	701a      	strb	r2, [r3, #0]
      break;
 8007a3c:	e130      	b.n	8007ca0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	795b      	ldrb	r3, [r3, #5]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 f853 	bl	8008af0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	791b      	ldrb	r3, [r3, #4]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 f84d 	bl	8008af0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	701a      	strb	r2, [r3, #0]
      break;
 8007a62:	e11d      	b.n	8007ca0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a64:	2101      	movs	r1, #1
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa68 	bl	8007f3c <USBH_SetAddress>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d132      	bne.n	8007adc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007a76:	2002      	movs	r0, #2
 8007a78:	f001 fb30 	bl	80090dc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2203      	movs	r2, #3
 8007a88:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7919      	ldrb	r1, [r3, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a9e:	b292      	uxth	r2, r2
 8007aa0:	9202      	str	r2, [sp, #8]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	9201      	str	r2, [sp, #4]
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2280      	movs	r2, #128	; 0x80
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 ffcf 	bl	8008a50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	7959      	ldrb	r1, [r3, #5]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ac6:	b292      	uxth	r2, r2
 8007ac8:	9202      	str	r2, [sp, #8]
 8007aca:	2200      	movs	r2, #0
 8007acc:	9201      	str	r2, [sp, #4]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 ffbb 	bl	8008a50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ada:	e0e3      	b.n	8007ca4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	f040 80e0 	bne.w	8007ca4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	220d      	movs	r2, #13
 8007ae8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	705a      	strb	r2, [r3, #1]
      break;
 8007af0:	e0d8      	b.n	8007ca4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007af2:	2109      	movs	r1, #9
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f99d 	bl	8007e34 <USBH_Get_CfgDesc>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d103      	bne.n	8007b0c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2204      	movs	r2, #4
 8007b08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b0a:	e0cd      	b.n	8007ca8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	f040 80ca 	bne.w	8007ca8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d903      	bls.n	8007b36 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	220d      	movs	r2, #13
 8007b32:	701a      	strb	r2, [r3, #0]
      break;
 8007b34:	e0b8      	b.n	8007ca8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	795b      	ldrb	r3, [r3, #5]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 ffd7 	bl	8008af0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	791b      	ldrb	r3, [r3, #4]
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 ffd1 	bl	8008af0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	701a      	strb	r2, [r3, #0]
      break;
 8007b5a:	e0a5      	b.n	8007ca8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f965 	bl	8007e34 <USBH_Get_CfgDesc>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d103      	bne.n	8007b7c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2205      	movs	r2, #5
 8007b78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b7a:	e097      	b.n	8007cac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	f040 8094 	bne.w	8007cac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d903      	bls.n	8007ba6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	220d      	movs	r2, #13
 8007ba2:	701a      	strb	r2, [r3, #0]
      break;
 8007ba4:	e082      	b.n	8007cac <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	795b      	ldrb	r3, [r3, #5]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 ff9f 	bl	8008af0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	791b      	ldrb	r3, [r3, #4]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 ff99 	bl	8008af0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
      break;
 8007bca:	e06f      	b.n	8007cac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d019      	beq.n	8007c0a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007be2:	23ff      	movs	r3, #255	; 0xff
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f949 	bl	8007e7c <USBH_Get_StringDesc>
 8007bea:	4603      	mov	r3, r0
 8007bec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d103      	bne.n	8007bfc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2206      	movs	r2, #6
 8007bf8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bfa:	e059      	b.n	8007cb0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d156      	bne.n	8007cb0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2206      	movs	r2, #6
 8007c06:	705a      	strb	r2, [r3, #1]
      break;
 8007c08:	e052      	b.n	8007cb0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2206      	movs	r2, #6
 8007c0e:	705a      	strb	r2, [r3, #1]
      break;
 8007c10:	e04e      	b.n	8007cb0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d019      	beq.n	8007c50 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c28:	23ff      	movs	r3, #255	; 0xff
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f926 	bl	8007e7c <USBH_Get_StringDesc>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d103      	bne.n	8007c42 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2207      	movs	r2, #7
 8007c3e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c40:	e038      	b.n	8007cb4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d135      	bne.n	8007cb4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2207      	movs	r2, #7
 8007c4c:	705a      	strb	r2, [r3, #1]
      break;
 8007c4e:	e031      	b.n	8007cb4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2207      	movs	r2, #7
 8007c54:	705a      	strb	r2, [r3, #1]
      break;
 8007c56:	e02d      	b.n	8007cb4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d017      	beq.n	8007c92 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c6e:	23ff      	movs	r3, #255	; 0xff
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f903 	bl	8007e7c <USBH_Get_StringDesc>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007c84:	e018      	b.n	8007cb8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d115      	bne.n	8007cb8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c90:	e012      	b.n	8007cb8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
      break;
 8007c96:	e00f      	b.n	8007cb8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007c98:	bf00      	nop
 8007c9a:	e00e      	b.n	8007cba <USBH_HandleEnum+0x3be>
      break;
 8007c9c:	bf00      	nop
 8007c9e:	e00c      	b.n	8007cba <USBH_HandleEnum+0x3be>
      break;
 8007ca0:	bf00      	nop
 8007ca2:	e00a      	b.n	8007cba <USBH_HandleEnum+0x3be>
      break;
 8007ca4:	bf00      	nop
 8007ca6:	e008      	b.n	8007cba <USBH_HandleEnum+0x3be>
      break;
 8007ca8:	bf00      	nop
 8007caa:	e006      	b.n	8007cba <USBH_HandleEnum+0x3be>
      break;
 8007cac:	bf00      	nop
 8007cae:	e004      	b.n	8007cba <USBH_HandleEnum+0x3be>
      break;
 8007cb0:	bf00      	nop
 8007cb2:	e002      	b.n	8007cba <USBH_HandleEnum+0x3be>
      break;
 8007cb4:	bf00      	nop
 8007cb6:	e000      	b.n	8007cba <USBH_HandleEnum+0x3be>
      break;
 8007cb8:	bf00      	nop
  }
  return Status;
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f804 	bl	8007d06 <USBH_HandleSof>
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b0b      	cmp	r3, #11
 8007d16:	d10a      	bne.n	8007d2e <USBH_HandleSof+0x28>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d005      	beq.n	8007d2e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
  }
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007d46:	bf00      	nop
}
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007d62:	bf00      	nop
}
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f001 f844 	bl	8008e4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	791b      	ldrb	r3, [r3, #4]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fe91 	bl	8008af0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	795b      	ldrb	r3, [r3, #5]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fe8b 	bl	8008af0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e02:	2100      	movs	r1, #0
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f864 	bl	8007ed2 <USBH_GetDescriptor>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e20:	78fa      	ldrb	r2, [r7, #3]
 8007e22:	b292      	uxth	r2, r2
 8007e24:	4619      	mov	r1, r3
 8007e26:	f000 f918 	bl	800805a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	331c      	adds	r3, #28
 8007e44:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007e46:	887b      	ldrh	r3, [r7, #2]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e50:	2100      	movs	r1, #0
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f83d 	bl	8007ed2 <USBH_GetDescriptor>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d107      	bne.n	8007e72 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007e62:	887b      	ldrh	r3, [r7, #2]
 8007e64:	461a      	mov	r2, r3
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f987 	bl	800817c <USBH_ParseCfgDesc>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af02      	add	r7, sp, #8
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	607a      	str	r2, [r7, #4]
 8007e86:	461a      	mov	r2, r3
 8007e88:	460b      	mov	r3, r1
 8007e8a:	72fb      	strb	r3, [r7, #11]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007e90:	7afb      	ldrb	r3, [r7, #11]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e98:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ea0:	893b      	ldrh	r3, [r7, #8]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 f812 	bl	8007ed2 <USBH_GetDescriptor>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d107      	bne.n	8007ec8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ebe:	893a      	ldrh	r2, [r7, #8]
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fb24 	bl	8008510 <USBH_ParseStringDesc>
  }

  return status;
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	607b      	str	r3, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	72fb      	strb	r3, [r7, #11]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	789b      	ldrb	r3, [r3, #2]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d11c      	bne.n	8007f26 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2206      	movs	r2, #6
 8007efc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	893a      	ldrh	r2, [r7, #8]
 8007f02:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f04:	893b      	ldrh	r3, [r7, #8]
 8007f06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f0e:	d104      	bne.n	8007f1a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f240 4209 	movw	r2, #1033	; 0x409
 8007f16:	829a      	strh	r2, [r3, #20]
 8007f18:	e002      	b.n	8007f20 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8b3a      	ldrh	r2, [r7, #24]
 8007f24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007f26:	8b3b      	ldrh	r3, [r7, #24]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 fb3d 	bl	80085ac <USBH_CtlReq>
 8007f32:	4603      	mov	r3, r0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	789b      	ldrb	r3, [r3, #2]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d10f      	bne.n	8007f70 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2205      	movs	r2, #5
 8007f5a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f70:	2200      	movs	r2, #0
 8007f72:	2100      	movs	r1, #0
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fb19 	bl	80085ac <USBH_CtlReq>
 8007f7a:	4603      	mov	r3, r0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	789b      	ldrb	r3, [r3, #2]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d10e      	bne.n	8007fb6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2209      	movs	r2, #9
 8007fa2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	887a      	ldrh	r2, [r7, #2]
 8007fa8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2100      	movs	r1, #0
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 faf6 	bl	80085ac <USBH_CtlReq>
 8007fc0:	4603      	mov	r3, r0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	789b      	ldrb	r3, [r3, #2]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d10f      	bne.n	8007ffe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2203      	movs	r2, #3
 8007fe8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ffe:	2200      	movs	r2, #0
 8008000:	2100      	movs	r1, #0
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fad2 	bl	80085ac <USBH_CtlReq>
 8008008:	4603      	mov	r3, r0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	460b      	mov	r3, r1
 800801c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	789b      	ldrb	r3, [r3, #2]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d10f      	bne.n	8008046 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	b29a      	uxth	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008046:	2200      	movs	r2, #0
 8008048:	2100      	movs	r1, #0
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 faae 	bl	80085ac <USBH_CtlReq>
 8008050:	4603      	mov	r3, r0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	4613      	mov	r3, r2
 8008066:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	785a      	ldrb	r2, [r3, #1]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	3302      	adds	r3, #2
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b29a      	uxth	r2, r3
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	3303      	adds	r3, #3
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	021b      	lsls	r3, r3, #8
 800808a:	b29b      	uxth	r3, r3
 800808c:	4313      	orrs	r3, r2
 800808e:	b29a      	uxth	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	791a      	ldrb	r2, [r3, #4]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	795a      	ldrb	r2, [r3, #5]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	799a      	ldrb	r2, [r3, #6]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	79da      	ldrb	r2, [r3, #7]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	79db      	ldrb	r3, [r3, #7]
 80080b8:	2b20      	cmp	r3, #32
 80080ba:	dc11      	bgt.n	80080e0 <USBH_ParseDevDesc+0x86>
 80080bc:	2b08      	cmp	r3, #8
 80080be:	db16      	blt.n	80080ee <USBH_ParseDevDesc+0x94>
 80080c0:	3b08      	subs	r3, #8
 80080c2:	2201      	movs	r2, #1
 80080c4:	fa02 f303 	lsl.w	r3, r2, r3
 80080c8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80080cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	bf14      	ite	ne
 80080d4:	2301      	movne	r3, #1
 80080d6:	2300      	moveq	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d102      	bne.n	80080e4 <USBH_ParseDevDesc+0x8a>
 80080de:	e006      	b.n	80080ee <USBH_ParseDevDesc+0x94>
 80080e0:	2b40      	cmp	r3, #64	; 0x40
 80080e2:	d104      	bne.n	80080ee <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	79da      	ldrb	r2, [r3, #7]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	71da      	strb	r2, [r3, #7]
      break;
 80080ec:	e003      	b.n	80080f6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2240      	movs	r2, #64	; 0x40
 80080f2:	71da      	strb	r2, [r3, #7]
      break;
 80080f4:	bf00      	nop
  }

  if (length > 8U)
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d939      	bls.n	8008170 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	3308      	adds	r3, #8
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	b29a      	uxth	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	3309      	adds	r3, #9
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	b29b      	uxth	r3, r3
 8008110:	4313      	orrs	r3, r2
 8008112:	b29a      	uxth	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	330a      	adds	r3, #10
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b29a      	uxth	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	330b      	adds	r3, #11
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	021b      	lsls	r3, r3, #8
 800812a:	b29b      	uxth	r3, r3
 800812c:	4313      	orrs	r3, r2
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	330c      	adds	r3, #12
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	b29a      	uxth	r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	330d      	adds	r3, #13
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	021b      	lsls	r3, r3, #8
 8008146:	b29b      	uxth	r3, r3
 8008148:	4313      	orrs	r3, r2
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	7b9a      	ldrb	r2, [r3, #14]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	7bda      	ldrb	r2, [r3, #15]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	7c1a      	ldrb	r2, [r3, #16]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	7c5a      	ldrb	r2, [r3, #17]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	745a      	strb	r2, [r3, #17]
  }
}
 8008170:	bf00      	nop
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08c      	sub	sp, #48	; 0x30
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008190:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	781a      	ldrb	r2, [r3, #0]
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	785a      	ldrb	r2, [r3, #1]
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	3302      	adds	r3, #2
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	3303      	adds	r3, #3
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4313      	orrs	r3, r2
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d8:	bf28      	it	cs
 80081da:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80081de:	b29a      	uxth	r2, r3
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	791a      	ldrb	r2, [r3, #4]
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	795a      	ldrb	r2, [r3, #5]
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	799a      	ldrb	r2, [r3, #6]
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	79da      	ldrb	r2, [r3, #7]
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	7a1a      	ldrb	r2, [r3, #8]
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b09      	cmp	r3, #9
 8008212:	d002      	beq.n	800821a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	2209      	movs	r2, #9
 8008218:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800821a:	88fb      	ldrh	r3, [r7, #6]
 800821c:	2b09      	cmp	r3, #9
 800821e:	f240 809d 	bls.w	800835c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008222:	2309      	movs	r3, #9
 8008224:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800822a:	e081      	b.n	8008330 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800822c:	f107 0316 	add.w	r3, r7, #22
 8008230:	4619      	mov	r1, r3
 8008232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008234:	f000 f99f 	bl	8008576 <USBH_GetNextDesc>
 8008238:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	2b04      	cmp	r3, #4
 8008240:	d176      	bne.n	8008330 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b09      	cmp	r3, #9
 8008248:	d002      	beq.n	8008250 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	2209      	movs	r2, #9
 800824e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008254:	221a      	movs	r2, #26
 8008256:	fb02 f303 	mul.w	r3, r2, r3
 800825a:	3308      	adds	r3, #8
 800825c:	6a3a      	ldr	r2, [r7, #32]
 800825e:	4413      	add	r3, r2
 8008260:	3302      	adds	r3, #2
 8008262:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008266:	69f8      	ldr	r0, [r7, #28]
 8008268:	f000 f87e 	bl	8008368 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008276:	e043      	b.n	8008300 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008278:	f107 0316 	add.w	r3, r7, #22
 800827c:	4619      	mov	r1, r3
 800827e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008280:	f000 f979 	bl	8008576 <USBH_GetNextDesc>
 8008284:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	785b      	ldrb	r3, [r3, #1]
 800828a:	2b05      	cmp	r3, #5
 800828c:	d138      	bne.n	8008300 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	795b      	ldrb	r3, [r3, #5]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d10f      	bne.n	80082b6 <USBH_ParseCfgDesc+0x13a>
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	799b      	ldrb	r3, [r3, #6]
 800829a:	2b02      	cmp	r3, #2
 800829c:	d10b      	bne.n	80082b6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	79db      	ldrb	r3, [r3, #7]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10f      	bne.n	80082c6 <USBH_ParseCfgDesc+0x14a>
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b09      	cmp	r3, #9
 80082ac:	d00b      	beq.n	80082c6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	2209      	movs	r2, #9
 80082b2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082b4:	e007      	b.n	80082c6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80082b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2b07      	cmp	r3, #7
 80082bc:	d004      	beq.n	80082c8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	2207      	movs	r2, #7
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	e000      	b.n	80082c8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082c6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082d0:	3201      	adds	r2, #1
 80082d2:	00d2      	lsls	r2, r2, #3
 80082d4:	211a      	movs	r1, #26
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	4413      	add	r3, r2
 80082dc:	3308      	adds	r3, #8
 80082de:	6a3a      	ldr	r2, [r7, #32]
 80082e0:	4413      	add	r3, r2
 80082e2:	3304      	adds	r3, #4
 80082e4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80082e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082e8:	69b9      	ldr	r1, [r7, #24]
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f86b 	bl	80083c6 <USBH_ParseEPDesc>
 80082f0:	4603      	mov	r3, r0
 80082f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80082f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082fa:	3301      	adds	r3, #1
 80082fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	791b      	ldrb	r3, [r3, #4]
 8008304:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008308:	429a      	cmp	r2, r3
 800830a:	d204      	bcs.n	8008316 <USBH_ParseCfgDesc+0x19a>
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	885a      	ldrh	r2, [r3, #2]
 8008310:	8afb      	ldrh	r3, [r7, #22]
 8008312:	429a      	cmp	r2, r3
 8008314:	d8b0      	bhi.n	8008278 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	791b      	ldrb	r3, [r3, #4]
 800831a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800831e:	429a      	cmp	r2, r3
 8008320:	d201      	bcs.n	8008326 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008322:	2303      	movs	r3, #3
 8008324:	e01c      	b.n	8008360 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800832a:	3301      	adds	r3, #1
 800832c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008334:	2b01      	cmp	r3, #1
 8008336:	d805      	bhi.n	8008344 <USBH_ParseCfgDesc+0x1c8>
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	885a      	ldrh	r2, [r3, #2]
 800833c:	8afb      	ldrh	r3, [r7, #22]
 800833e:	429a      	cmp	r2, r3
 8008340:	f63f af74 	bhi.w	800822c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	791b      	ldrb	r3, [r3, #4]
 8008348:	2b02      	cmp	r3, #2
 800834a:	bf28      	it	cs
 800834c:	2302      	movcs	r3, #2
 800834e:	b2db      	uxtb	r3, r3
 8008350:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008354:	429a      	cmp	r2, r3
 8008356:	d201      	bcs.n	800835c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008358:	2303      	movs	r3, #3
 800835a:	e001      	b.n	8008360 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800835c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008360:	4618      	mov	r0, r3
 8008362:	3730      	adds	r7, #48	; 0x30
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781a      	ldrb	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	785a      	ldrb	r2, [r3, #1]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	789a      	ldrb	r2, [r3, #2]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	78da      	ldrb	r2, [r3, #3]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	791a      	ldrb	r2, [r3, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	795a      	ldrb	r2, [r3, #5]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	799a      	ldrb	r2, [r3, #6]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	79da      	ldrb	r2, [r3, #7]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	7a1a      	ldrb	r2, [r3, #8]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	721a      	strb	r2, [r3, #8]
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b087      	sub	sp, #28
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	781a      	ldrb	r2, [r3, #0]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	785a      	ldrb	r2, [r3, #1]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	789a      	ldrb	r2, [r3, #2]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	78da      	ldrb	r2, [r3, #3]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	3304      	adds	r3, #4
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	3305      	adds	r3, #5
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	b29b      	uxth	r3, r3
 8008406:	021b      	lsls	r3, r3, #8
 8008408:	b29b      	uxth	r3, r3
 800840a:	4313      	orrs	r3, r2
 800840c:	b29a      	uxth	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	799a      	ldrb	r2, [r3, #6]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	889b      	ldrh	r3, [r3, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d102      	bne.n	8008428 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008422:	2303      	movs	r3, #3
 8008424:	75fb      	strb	r3, [r7, #23]
 8008426:	e033      	b.n	8008490 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	889b      	ldrh	r3, [r3, #4]
 800842c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008430:	f023 0307 	bic.w	r3, r3, #7
 8008434:	b29a      	uxth	r2, r3
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	889b      	ldrh	r3, [r3, #4]
 800843e:	b21a      	sxth	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3304      	adds	r3, #4
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	b299      	uxth	r1, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	3305      	adds	r3, #5
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b29b      	uxth	r3, r3
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	b29b      	uxth	r3, r3
 8008454:	430b      	orrs	r3, r1
 8008456:	b29b      	uxth	r3, r3
 8008458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800845c:	2b00      	cmp	r3, #0
 800845e:	d110      	bne.n	8008482 <USBH_ParseEPDesc+0xbc>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3304      	adds	r3, #4
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	b299      	uxth	r1, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3305      	adds	r3, #5
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	b29b      	uxth	r3, r3
 8008470:	021b      	lsls	r3, r3, #8
 8008472:	b29b      	uxth	r3, r3
 8008474:	430b      	orrs	r3, r1
 8008476:	b29b      	uxth	r3, r3
 8008478:	b21b      	sxth	r3, r3
 800847a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800847e:	b21b      	sxth	r3, r3
 8008480:	e001      	b.n	8008486 <USBH_ParseEPDesc+0xc0>
 8008482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008486:	4313      	orrs	r3, r2
 8008488:	b21b      	sxth	r3, r3
 800848a:	b29a      	uxth	r2, r3
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008496:	2b00      	cmp	r3, #0
 8008498:	d116      	bne.n	80084c8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	78db      	ldrb	r3, [r3, #3]
 800849e:	f003 0303 	and.w	r3, r3, #3
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d005      	beq.n	80084b2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	78db      	ldrb	r3, [r3, #3]
 80084aa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d127      	bne.n	8008502 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	799b      	ldrb	r3, [r3, #6]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <USBH_ParseEPDesc+0xfc>
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	799b      	ldrb	r3, [r3, #6]
 80084be:	2b10      	cmp	r3, #16
 80084c0:	d91f      	bls.n	8008502 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80084c2:	2303      	movs	r3, #3
 80084c4:	75fb      	strb	r3, [r7, #23]
 80084c6:	e01c      	b.n	8008502 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	78db      	ldrb	r3, [r3, #3]
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d10a      	bne.n	80084ea <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	799b      	ldrb	r3, [r3, #6]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <USBH_ParseEPDesc+0x11e>
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	799b      	ldrb	r3, [r3, #6]
 80084e0:	2b10      	cmp	r3, #16
 80084e2:	d90e      	bls.n	8008502 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80084e4:	2303      	movs	r3, #3
 80084e6:	75fb      	strb	r3, [r7, #23]
 80084e8:	e00b      	b.n	8008502 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	78db      	ldrb	r3, [r3, #3]
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d105      	bne.n	8008502 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	799b      	ldrb	r3, [r3, #6]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80084fe:	2303      	movs	r3, #3
 8008500:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008502:	7dfb      	ldrb	r3, [r7, #23]
}
 8008504:	4618      	mov	r0, r3
 8008506:	371c      	adds	r7, #28
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3301      	adds	r3, #1
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b03      	cmp	r3, #3
 8008526:	d120      	bne.n	800856a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	1e9a      	subs	r2, r3, #2
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	4293      	cmp	r3, r2
 8008532:	bf28      	it	cs
 8008534:	4613      	movcs	r3, r2
 8008536:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3302      	adds	r3, #2
 800853c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800853e:	2300      	movs	r3, #0
 8008540:	82fb      	strh	r3, [r7, #22]
 8008542:	e00b      	b.n	800855c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008544:	8afb      	ldrh	r3, [r7, #22]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	3301      	adds	r3, #1
 8008554:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008556:	8afb      	ldrh	r3, [r7, #22]
 8008558:	3302      	adds	r3, #2
 800855a:	82fb      	strh	r3, [r7, #22]
 800855c:	8afa      	ldrh	r2, [r7, #22]
 800855e:	8abb      	ldrh	r3, [r7, #20]
 8008560:	429a      	cmp	r2, r3
 8008562:	d3ef      	bcc.n	8008544 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2200      	movs	r2, #0
 8008568:	701a      	strb	r2, [r3, #0]
  }
}
 800856a:	bf00      	nop
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	881a      	ldrh	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	b29b      	uxth	r3, r3
 800858a:	4413      	add	r3, r2
 800858c:	b29a      	uxth	r2, r3
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4413      	add	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800859e:	68fb      	ldr	r3, [r7, #12]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	4613      	mov	r3, r2
 80085b8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80085ba:	2301      	movs	r3, #1
 80085bc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	789b      	ldrb	r3, [r3, #2]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d002      	beq.n	80085cc <USBH_CtlReq+0x20>
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d00f      	beq.n	80085ea <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80085ca:	e027      	b.n	800861c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	88fa      	ldrh	r2, [r7, #6]
 80085d6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2201      	movs	r2, #1
 80085dc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2202      	movs	r2, #2
 80085e2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80085e4:	2301      	movs	r3, #1
 80085e6:	75fb      	strb	r3, [r7, #23]
      break;
 80085e8:	e018      	b.n	800861c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f81c 	bl	8008628 <USBH_HandleControl>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <USBH_CtlReq+0x54>
 80085fa:	7dfb      	ldrb	r3, [r7, #23]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d106      	bne.n	800860e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2201      	movs	r2, #1
 8008604:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	761a      	strb	r2, [r3, #24]
      break;
 800860c:	e005      	b.n	800861a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	2b02      	cmp	r3, #2
 8008612:	d102      	bne.n	800861a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2201      	movs	r2, #1
 8008618:	709a      	strb	r2, [r3, #2]
      break;
 800861a:	bf00      	nop
  }
  return status;
 800861c:	7dfb      	ldrb	r3, [r7, #23]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af02      	add	r7, sp, #8
 800862e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008630:	2301      	movs	r3, #1
 8008632:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008634:	2300      	movs	r3, #0
 8008636:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	7e1b      	ldrb	r3, [r3, #24]
 800863c:	3b01      	subs	r3, #1
 800863e:	2b0a      	cmp	r3, #10
 8008640:	f200 8156 	bhi.w	80088f0 <USBH_HandleControl+0x2c8>
 8008644:	a201      	add	r2, pc, #4	; (adr r2, 800864c <USBH_HandleControl+0x24>)
 8008646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864a:	bf00      	nop
 800864c:	08008679 	.word	0x08008679
 8008650:	08008693 	.word	0x08008693
 8008654:	080086fd 	.word	0x080086fd
 8008658:	08008723 	.word	0x08008723
 800865c:	0800875b 	.word	0x0800875b
 8008660:	08008785 	.word	0x08008785
 8008664:	080087d7 	.word	0x080087d7
 8008668:	080087f9 	.word	0x080087f9
 800866c:	08008835 	.word	0x08008835
 8008670:	0800885b 	.word	0x0800885b
 8008674:	08008899 	.word	0x08008899
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f103 0110 	add.w	r1, r3, #16
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	795b      	ldrb	r3, [r3, #5]
 8008682:	461a      	mov	r2, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f943 	bl	8008910 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2202      	movs	r2, #2
 800868e:	761a      	strb	r2, [r3, #24]
      break;
 8008690:	e139      	b.n	8008906 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	795b      	ldrb	r3, [r3, #5]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fcc5 	bl	8009028 <USBH_LL_GetURBState>
 800869e:	4603      	mov	r3, r0
 80086a0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d11e      	bne.n	80086e6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	7c1b      	ldrb	r3, [r3, #16]
 80086ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086b0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8adb      	ldrh	r3, [r3, #22]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80086ba:	7b7b      	ldrb	r3, [r7, #13]
 80086bc:	2b80      	cmp	r3, #128	; 0x80
 80086be:	d103      	bne.n	80086c8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2203      	movs	r2, #3
 80086c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086c6:	e115      	b.n	80088f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2205      	movs	r2, #5
 80086cc:	761a      	strb	r2, [r3, #24]
      break;
 80086ce:	e111      	b.n	80088f4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80086d0:	7b7b      	ldrb	r3, [r7, #13]
 80086d2:	2b80      	cmp	r3, #128	; 0x80
 80086d4:	d103      	bne.n	80086de <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2209      	movs	r2, #9
 80086da:	761a      	strb	r2, [r3, #24]
      break;
 80086dc:	e10a      	b.n	80088f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2207      	movs	r2, #7
 80086e2:	761a      	strb	r2, [r3, #24]
      break;
 80086e4:	e106      	b.n	80088f4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	d003      	beq.n	80086f4 <USBH_HandleControl+0xcc>
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	f040 8100 	bne.w	80088f4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	220b      	movs	r2, #11
 80086f8:	761a      	strb	r2, [r3, #24]
      break;
 80086fa:	e0fb      	b.n	80088f4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6899      	ldr	r1, [r3, #8]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	899a      	ldrh	r2, [r3, #12]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	791b      	ldrb	r3, [r3, #4]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f93a 	bl	800898e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2204      	movs	r2, #4
 800871e:	761a      	strb	r2, [r3, #24]
      break;
 8008720:	e0f1      	b.n	8008906 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	791b      	ldrb	r3, [r3, #4]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fc7d 	bl	8009028 <USBH_LL_GetURBState>
 800872e:	4603      	mov	r3, r0
 8008730:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d102      	bne.n	800873e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2209      	movs	r2, #9
 800873c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	2b05      	cmp	r3, #5
 8008742:	d102      	bne.n	800874a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008744:	2303      	movs	r3, #3
 8008746:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008748:	e0d6      	b.n	80088f8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	2b04      	cmp	r3, #4
 800874e:	f040 80d3 	bne.w	80088f8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	220b      	movs	r2, #11
 8008756:	761a      	strb	r2, [r3, #24]
      break;
 8008758:	e0ce      	b.n	80088f8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6899      	ldr	r1, [r3, #8]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	899a      	ldrh	r2, [r3, #12]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	795b      	ldrb	r3, [r3, #5]
 8008766:	2001      	movs	r0, #1
 8008768:	9000      	str	r0, [sp, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f8ea 	bl	8008944 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008776:	b29a      	uxth	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2206      	movs	r2, #6
 8008780:	761a      	strb	r2, [r3, #24]
      break;
 8008782:	e0c0      	b.n	8008906 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	795b      	ldrb	r3, [r3, #5]
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fc4c 	bl	8009028 <USBH_LL_GetURBState>
 8008790:	4603      	mov	r3, r0
 8008792:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d103      	bne.n	80087a2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2207      	movs	r2, #7
 800879e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087a0:	e0ac      	b.n	80088fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80087a2:	7bbb      	ldrb	r3, [r7, #14]
 80087a4:	2b05      	cmp	r3, #5
 80087a6:	d105      	bne.n	80087b4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	220c      	movs	r2, #12
 80087ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80087ae:	2303      	movs	r3, #3
 80087b0:	73fb      	strb	r3, [r7, #15]
      break;
 80087b2:	e0a3      	b.n	80088fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d103      	bne.n	80087c2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2205      	movs	r2, #5
 80087be:	761a      	strb	r2, [r3, #24]
      break;
 80087c0:	e09c      	b.n	80088fc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	f040 8099 	bne.w	80088fc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	220b      	movs	r2, #11
 80087ce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80087d0:	2302      	movs	r3, #2
 80087d2:	73fb      	strb	r3, [r7, #15]
      break;
 80087d4:	e092      	b.n	80088fc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	791b      	ldrb	r3, [r3, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	2100      	movs	r1, #0
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f8d5 	bl	800898e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2208      	movs	r2, #8
 80087f4:	761a      	strb	r2, [r3, #24]

      break;
 80087f6:	e086      	b.n	8008906 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	791b      	ldrb	r3, [r3, #4]
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fc12 	bl	8009028 <USBH_LL_GetURBState>
 8008804:	4603      	mov	r3, r0
 8008806:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d105      	bne.n	800881a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	220d      	movs	r2, #13
 8008812:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008818:	e072      	b.n	8008900 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2b04      	cmp	r3, #4
 800881e:	d103      	bne.n	8008828 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	220b      	movs	r2, #11
 8008824:	761a      	strb	r2, [r3, #24]
      break;
 8008826:	e06b      	b.n	8008900 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	2b05      	cmp	r3, #5
 800882c:	d168      	bne.n	8008900 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800882e:	2303      	movs	r3, #3
 8008830:	73fb      	strb	r3, [r7, #15]
      break;
 8008832:	e065      	b.n	8008900 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	795b      	ldrb	r3, [r3, #5]
 8008838:	2201      	movs	r2, #1
 800883a:	9200      	str	r2, [sp, #0]
 800883c:	2200      	movs	r2, #0
 800883e:	2100      	movs	r1, #0
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f87f 	bl	8008944 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800884c:	b29a      	uxth	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	220a      	movs	r2, #10
 8008856:	761a      	strb	r2, [r3, #24]
      break;
 8008858:	e055      	b.n	8008906 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	795b      	ldrb	r3, [r3, #5]
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fbe1 	bl	8009028 <USBH_LL_GetURBState>
 8008866:	4603      	mov	r3, r0
 8008868:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800886a:	7bbb      	ldrb	r3, [r7, #14]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d105      	bne.n	800887c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	220d      	movs	r2, #13
 8008878:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800887a:	e043      	b.n	8008904 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d103      	bne.n	800888a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2209      	movs	r2, #9
 8008886:	761a      	strb	r2, [r3, #24]
      break;
 8008888:	e03c      	b.n	8008904 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	2b04      	cmp	r3, #4
 800888e:	d139      	bne.n	8008904 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	220b      	movs	r2, #11
 8008894:	761a      	strb	r2, [r3, #24]
      break;
 8008896:	e035      	b.n	8008904 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	7e5b      	ldrb	r3, [r3, #25]
 800889c:	3301      	adds	r3, #1
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	765a      	strb	r2, [r3, #25]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	7e5b      	ldrb	r3, [r3, #25]
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d806      	bhi.n	80088ba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80088b8:	e025      	b.n	8008906 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088c0:	2106      	movs	r1, #6
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	795b      	ldrb	r3, [r3, #5]
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f90c 	bl	8008af0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	791b      	ldrb	r3, [r3, #4]
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f906 	bl	8008af0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80088ea:	2302      	movs	r3, #2
 80088ec:	73fb      	strb	r3, [r7, #15]
      break;
 80088ee:	e00a      	b.n	8008906 <USBH_HandleControl+0x2de>

    default:
      break;
 80088f0:	bf00      	nop
 80088f2:	e008      	b.n	8008906 <USBH_HandleControl+0x2de>
      break;
 80088f4:	bf00      	nop
 80088f6:	e006      	b.n	8008906 <USBH_HandleControl+0x2de>
      break;
 80088f8:	bf00      	nop
 80088fa:	e004      	b.n	8008906 <USBH_HandleControl+0x2de>
      break;
 80088fc:	bf00      	nop
 80088fe:	e002      	b.n	8008906 <USBH_HandleControl+0x2de>
      break;
 8008900:	bf00      	nop
 8008902:	e000      	b.n	8008906 <USBH_HandleControl+0x2de>
      break;
 8008904:	bf00      	nop
  }

  return status;
 8008906:	7bfb      	ldrb	r3, [r7, #15]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af04      	add	r7, sp, #16
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800891e:	79f9      	ldrb	r1, [r7, #7]
 8008920:	2300      	movs	r3, #0
 8008922:	9303      	str	r3, [sp, #12]
 8008924:	2308      	movs	r3, #8
 8008926:	9302      	str	r3, [sp, #8]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	9301      	str	r3, [sp, #4]
 800892c:	2300      	movs	r3, #0
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	2300      	movs	r3, #0
 8008932:	2200      	movs	r2, #0
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 fb46 	bl	8008fc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af04      	add	r7, sp, #16
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	4611      	mov	r1, r2
 8008950:	461a      	mov	r2, r3
 8008952:	460b      	mov	r3, r1
 8008954:	80fb      	strh	r3, [r7, #6]
 8008956:	4613      	mov	r3, r2
 8008958:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008968:	7979      	ldrb	r1, [r7, #5]
 800896a:	7e3b      	ldrb	r3, [r7, #24]
 800896c:	9303      	str	r3, [sp, #12]
 800896e:	88fb      	ldrh	r3, [r7, #6]
 8008970:	9302      	str	r3, [sp, #8]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	2301      	movs	r3, #1
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	2300      	movs	r3, #0
 800897c:	2200      	movs	r2, #0
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 fb21 	bl	8008fc6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b088      	sub	sp, #32
 8008992:	af04      	add	r7, sp, #16
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	4611      	mov	r1, r2
 800899a:	461a      	mov	r2, r3
 800899c:	460b      	mov	r3, r1
 800899e:	80fb      	strh	r3, [r7, #6]
 80089a0:	4613      	mov	r3, r2
 80089a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089a4:	7979      	ldrb	r1, [r7, #5]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9303      	str	r3, [sp, #12]
 80089aa:	88fb      	ldrh	r3, [r7, #6]
 80089ac:	9302      	str	r3, [sp, #8]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	2301      	movs	r3, #1
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	2300      	movs	r3, #0
 80089b8:	2201      	movs	r2, #1
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fb03 	bl	8008fc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089c0:	2300      	movs	r3, #0

}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b088      	sub	sp, #32
 80089ce:	af04      	add	r7, sp, #16
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	4611      	mov	r1, r2
 80089d6:	461a      	mov	r2, r3
 80089d8:	460b      	mov	r3, r1
 80089da:	80fb      	strh	r3, [r7, #6]
 80089dc:	4613      	mov	r3, r2
 80089de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089ee:	7979      	ldrb	r1, [r7, #5]
 80089f0:	7e3b      	ldrb	r3, [r7, #24]
 80089f2:	9303      	str	r3, [sp, #12]
 80089f4:	88fb      	ldrh	r3, [r7, #6]
 80089f6:	9302      	str	r3, [sp, #8]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	2301      	movs	r3, #1
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	2302      	movs	r3, #2
 8008a02:	2200      	movs	r2, #0
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fade 	bl	8008fc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af04      	add	r7, sp, #16
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4611      	mov	r1, r2
 8008a20:	461a      	mov	r2, r3
 8008a22:	460b      	mov	r3, r1
 8008a24:	80fb      	strh	r3, [r7, #6]
 8008a26:	4613      	mov	r3, r2
 8008a28:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a2a:	7979      	ldrb	r1, [r7, #5]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	88fb      	ldrh	r3, [r7, #6]
 8008a32:	9302      	str	r3, [sp, #8]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	2201      	movs	r2, #1
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fac0 	bl	8008fc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af04      	add	r7, sp, #16
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	4608      	mov	r0, r1
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4603      	mov	r3, r0
 8008a60:	70fb      	strb	r3, [r7, #3]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70bb      	strb	r3, [r7, #2]
 8008a66:	4613      	mov	r3, r2
 8008a68:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a6a:	7878      	ldrb	r0, [r7, #1]
 8008a6c:	78ba      	ldrb	r2, [r7, #2]
 8008a6e:	78f9      	ldrb	r1, [r7, #3]
 8008a70:	8b3b      	ldrh	r3, [r7, #24]
 8008a72:	9302      	str	r3, [sp, #8]
 8008a74:	7d3b      	ldrb	r3, [r7, #20]
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	7c3b      	ldrb	r3, [r7, #16]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fa53 	bl	8008f2a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a9a:	78fb      	ldrb	r3, [r7, #3]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fa72 	bl	8008f88 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f836 	bl	8008b2c <USBH_GetFreePipe>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ac4:	89fb      	ldrh	r3, [r7, #14]
 8008ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d00a      	beq.n	8008ae4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ace:	78fa      	ldrb	r2, [r7, #3]
 8008ad0:	89fb      	ldrh	r3, [r7, #14]
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	33e0      	adds	r3, #224	; 0xe0
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	440b      	add	r3, r1
 8008ae2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008ae4:	89fb      	ldrh	r3, [r7, #14]
 8008ae6:	b2db      	uxtb	r3, r3
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	2b0f      	cmp	r3, #15
 8008b00:	d80d      	bhi.n	8008b1e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	33e0      	adds	r3, #224	; 0xe0
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	78fb      	ldrb	r3, [r7, #3]
 8008b10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008b14:	6879      	ldr	r1, [r7, #4]
 8008b16:	33e0      	adds	r3, #224	; 0xe0
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
 8008b3c:	e00f      	b.n	8008b5e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	33e0      	adds	r3, #224	; 0xe0
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d102      	bne.n	8008b58 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	e007      	b.n	8008b68 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	73fb      	strb	r3, [r7, #15]
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
 8008b60:	2b0f      	cmp	r3, #15
 8008b62:	d9ec      	bls.n	8008b3e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	490e      	ldr	r1, [pc, #56]	; (8008bb4 <MX_USB_HOST_Init+0x40>)
 8008b7c:	480e      	ldr	r0, [pc, #56]	; (8008bb8 <MX_USB_HOST_Init+0x44>)
 8008b7e:	f7fe fba7 	bl	80072d0 <USBH_Init>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008b88:	f7f7 ff00 	bl	800098c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008b8c:	490b      	ldr	r1, [pc, #44]	; (8008bbc <MX_USB_HOST_Init+0x48>)
 8008b8e:	480a      	ldr	r0, [pc, #40]	; (8008bb8 <MX_USB_HOST_Init+0x44>)
 8008b90:	f7fe fc2c 	bl	80073ec <USBH_RegisterClass>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b9a:	f7f7 fef7 	bl	800098c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b9e:	4806      	ldr	r0, [pc, #24]	; (8008bb8 <MX_USB_HOST_Init+0x44>)
 8008ba0:	f7fe fcb0 	bl	8007504 <USBH_Start>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008baa:	f7f7 feef 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008bae:	bf00      	nop
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	08008bd5 	.word	0x08008bd5
 8008bb8:	20000298 	.word	0x20000298
 8008bbc:	20000010 	.word	0x20000010

08008bc0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008bc4:	4802      	ldr	r0, [pc, #8]	; (8008bd0 <MX_USB_HOST_Process+0x10>)
 8008bc6:	f7fe fcad 	bl	8007524 <USBH_Process>
}
 8008bca:	bf00      	nop
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000298 	.word	0x20000298

08008bd4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d819      	bhi.n	8008c1c <USBH_UserProcess+0x48>
 8008be8:	a201      	add	r2, pc, #4	; (adr r2, 8008bf0 <USBH_UserProcess+0x1c>)
 8008bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bee:	bf00      	nop
 8008bf0:	08008c1d 	.word	0x08008c1d
 8008bf4:	08008c0d 	.word	0x08008c0d
 8008bf8:	08008c1d 	.word	0x08008c1d
 8008bfc:	08008c15 	.word	0x08008c15
 8008c00:	08008c05 	.word	0x08008c05
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008c04:	4b09      	ldr	r3, [pc, #36]	; (8008c2c <USBH_UserProcess+0x58>)
 8008c06:	2203      	movs	r2, #3
 8008c08:	701a      	strb	r2, [r3, #0]
  break;
 8008c0a:	e008      	b.n	8008c1e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008c0c:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <USBH_UserProcess+0x58>)
 8008c0e:	2202      	movs	r2, #2
 8008c10:	701a      	strb	r2, [r3, #0]
  break;
 8008c12:	e004      	b.n	8008c1e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008c14:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <USBH_UserProcess+0x58>)
 8008c16:	2201      	movs	r2, #1
 8008c18:	701a      	strb	r2, [r3, #0]
  break;
 8008c1a:	e000      	b.n	8008c1e <USBH_UserProcess+0x4a>

  default:
  break;
 8008c1c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008c1e:	bf00      	nop
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	20000670 	.word	0x20000670

08008c30 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c38:	f107 0314 	add.w	r3, r7, #20
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	601a      	str	r2, [r3, #0]
 8008c40:	605a      	str	r2, [r3, #4]
 8008c42:	609a      	str	r2, [r3, #8]
 8008c44:	60da      	str	r2, [r3, #12]
 8008c46:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c50:	d147      	bne.n	8008ce2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c52:	2300      	movs	r3, #0
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	4b25      	ldr	r3, [pc, #148]	; (8008cec <HAL_HCD_MspInit+0xbc>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	4a24      	ldr	r2, [pc, #144]	; (8008cec <HAL_HCD_MspInit+0xbc>)
 8008c5c:	f043 0301 	orr.w	r3, r3, #1
 8008c60:	6313      	str	r3, [r2, #48]	; 0x30
 8008c62:	4b22      	ldr	r3, [pc, #136]	; (8008cec <HAL_HCD_MspInit+0xbc>)
 8008c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c74:	2300      	movs	r3, #0
 8008c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c7c:	f107 0314 	add.w	r3, r7, #20
 8008c80:	4619      	mov	r1, r3
 8008c82:	481b      	ldr	r0, [pc, #108]	; (8008cf0 <HAL_HCD_MspInit+0xc0>)
 8008c84:	f7f8 feda 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c88:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c8e:	2302      	movs	r3, #2
 8008c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c92:	2300      	movs	r3, #0
 8008c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c96:	2300      	movs	r3, #0
 8008c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c9a:	230a      	movs	r3, #10
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c9e:	f107 0314 	add.w	r3, r7, #20
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4812      	ldr	r0, [pc, #72]	; (8008cf0 <HAL_HCD_MspInit+0xc0>)
 8008ca6:	f7f8 fec9 	bl	8001a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008caa:	4b10      	ldr	r3, [pc, #64]	; (8008cec <HAL_HCD_MspInit+0xbc>)
 8008cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cae:	4a0f      	ldr	r2, [pc, #60]	; (8008cec <HAL_HCD_MspInit+0xbc>)
 8008cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb4:	6353      	str	r3, [r2, #52]	; 0x34
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	4b0c      	ldr	r3, [pc, #48]	; (8008cec <HAL_HCD_MspInit+0xbc>)
 8008cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cbe:	4a0b      	ldr	r2, [pc, #44]	; (8008cec <HAL_HCD_MspInit+0xbc>)
 8008cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8008cc6:	4b09      	ldr	r3, [pc, #36]	; (8008cec <HAL_HCD_MspInit+0xbc>)
 8008cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	2043      	movs	r0, #67	; 0x43
 8008cd8:	f7f8 fadb 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008cdc:	2043      	movs	r0, #67	; 0x43
 8008cde:	f7f8 faf4 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ce2:	bf00      	nop
 8008ce4:	3728      	adds	r7, #40	; 0x28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	40023800 	.word	0x40023800
 8008cf0:	40020000 	.word	0x40020000

08008cf4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe ffed 	bl	8007ce2 <USBH_LL_IncTimer>
}
 8008d08:	bf00      	nop
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7ff f825 	bl	8007d6e <USBH_LL_Connect>
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff f82e 	bl	8007d9c <USBH_LL_Disconnect>
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
 8008d54:	4613      	mov	r3, r2
 8008d56:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe ffdf 	bl	8007d36 <USBH_LL_PortEnabled>
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe ffdf 	bl	8007d52 <USBH_LL_PortDisabled>
}
 8008d94:	bf00      	nop
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d12a      	bne.n	8008e04 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008dae:	4a18      	ldr	r2, [pc, #96]	; (8008e10 <USBH_LL_Init+0x74>)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a15      	ldr	r2, [pc, #84]	; (8008e10 <USBH_LL_Init+0x74>)
 8008dba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008dbe:	4b14      	ldr	r3, [pc, #80]	; (8008e10 <USBH_LL_Init+0x74>)
 8008dc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008dc4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008dc6:	4b12      	ldr	r3, [pc, #72]	; (8008e10 <USBH_LL_Init+0x74>)
 8008dc8:	2208      	movs	r2, #8
 8008dca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008dcc:	4b10      	ldr	r3, [pc, #64]	; (8008e10 <USBH_LL_Init+0x74>)
 8008dce:	2201      	movs	r2, #1
 8008dd0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008dd2:	4b0f      	ldr	r3, [pc, #60]	; (8008e10 <USBH_LL_Init+0x74>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008dd8:	4b0d      	ldr	r3, [pc, #52]	; (8008e10 <USBH_LL_Init+0x74>)
 8008dda:	2202      	movs	r2, #2
 8008ddc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008dde:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <USBH_LL_Init+0x74>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008de4:	480a      	ldr	r0, [pc, #40]	; (8008e10 <USBH_LL_Init+0x74>)
 8008de6:	f7f8 ffde 	bl	8001da6 <HAL_HCD_Init>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008df0:	f7f7 fdcc 	bl	800098c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008df4:	4806      	ldr	r0, [pc, #24]	; (8008e10 <USBH_LL_Init+0x74>)
 8008df6:	f7f9 fbc2 	bl	800257e <HAL_HCD_GetCurrentFrame>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7fe ff60 	bl	8007cc4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000674 	.word	0x20000674

08008e14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7f9 fb31 	bl	8002492 <HAL_HCD_Start>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 f95c 	bl	80090f4 <USBH_Get_USB_Status>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7f9 fb39 	bl	80024d8 <HAL_HCD_Stop>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 f941 	bl	80090f4 <USBH_Get_USB_Status>
 8008e72:	4603      	mov	r3, r0
 8008e74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f9 fb81 	bl	800259a <HAL_HCD_GetCurrentSpeed>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d00c      	beq.n	8008eb8 <USBH_LL_GetSpeed+0x38>
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d80d      	bhi.n	8008ebe <USBH_LL_GetSpeed+0x3e>
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d002      	beq.n	8008eac <USBH_LL_GetSpeed+0x2c>
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d003      	beq.n	8008eb2 <USBH_LL_GetSpeed+0x32>
 8008eaa:	e008      	b.n	8008ebe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb0:	e008      	b.n	8008ec4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb6:	e005      	b.n	8008ec4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008eb8:	2302      	movs	r3, #2
 8008eba:	73fb      	strb	r3, [r7, #15]
    break;
 8008ebc:	e002      	b.n	8008ec4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec2:	bf00      	nop
  }
  return  speed;
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7f9 fb14 	bl	8002512 <HAL_HCD_ResetPort>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f8ff 	bl	80090f4 <USBH_Get_USB_Status>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7f9 fb1b 	bl	8002556 <HAL_HCD_HC_GetXferCount>
 8008f20:	4603      	mov	r3, r0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f2a:	b590      	push	{r4, r7, lr}
 8008f2c:	b089      	sub	sp, #36	; 0x24
 8008f2e:	af04      	add	r7, sp, #16
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	4608      	mov	r0, r1
 8008f34:	4611      	mov	r1, r2
 8008f36:	461a      	mov	r2, r3
 8008f38:	4603      	mov	r3, r0
 8008f3a:	70fb      	strb	r3, [r7, #3]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70bb      	strb	r3, [r7, #2]
 8008f40:	4613      	mov	r3, r2
 8008f42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f52:	787c      	ldrb	r4, [r7, #1]
 8008f54:	78ba      	ldrb	r2, [r7, #2]
 8008f56:	78f9      	ldrb	r1, [r7, #3]
 8008f58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f5a:	9302      	str	r3, [sp, #8]
 8008f5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f60:	9301      	str	r3, [sp, #4]
 8008f62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	4623      	mov	r3, r4
 8008f6a:	f7f8 ff7e 	bl	8001e6a <HAL_HCD_HC_Init>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 f8bd 	bl	80090f4 <USBH_Get_USB_Status>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd90      	pop	{r4, r7, pc}

08008f88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f8 ffee 	bl	8001f88 <HAL_HCD_HC_Halt>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 f89e 	bl	80090f4 <USBH_Get_USB_Status>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008fc6:	b590      	push	{r4, r7, lr}
 8008fc8:	b089      	sub	sp, #36	; 0x24
 8008fca:	af04      	add	r7, sp, #16
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	70fb      	strb	r3, [r7, #3]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70bb      	strb	r3, [r7, #2]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008fee:	787c      	ldrb	r4, [r7, #1]
 8008ff0:	78ba      	ldrb	r2, [r7, #2]
 8008ff2:	78f9      	ldrb	r1, [r7, #3]
 8008ff4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ff8:	9303      	str	r3, [sp, #12]
 8008ffa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ffc:	9302      	str	r3, [sp, #8]
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	4623      	mov	r3, r4
 800900a:	f7f8 ffe1 	bl	8001fd0 <HAL_HCD_HC_SubmitRequest>
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	4618      	mov	r0, r3
 8009016:	f000 f86d 	bl	80090f4 <USBH_Get_USB_Status>
 800901a:	4603      	mov	r3, r0
 800901c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800901e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	bd90      	pop	{r4, r7, pc}

08009028 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800903a:	78fa      	ldrb	r2, [r7, #3]
 800903c:	4611      	mov	r1, r2
 800903e:	4618      	mov	r0, r3
 8009040:	f7f9 fa75 	bl	800252e <HAL_HCD_HC_GetURBState>
 8009044:	4603      	mov	r3, r0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b082      	sub	sp, #8
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009060:	2b01      	cmp	r3, #1
 8009062:	d103      	bne.n	800906c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f870 	bl	800914c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800906c:	20c8      	movs	r0, #200	; 0xc8
 800906e:	f7f8 f811 	bl	8001094 <HAL_Delay>
  return USBH_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
 8009088:	4613      	mov	r3, r2
 800908a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009092:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009094:	78fb      	ldrb	r3, [r7, #3]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	212c      	movs	r1, #44	; 0x2c
 800909a:	fb01 f303 	mul.w	r3, r1, r3
 800909e:	4413      	add	r3, r2
 80090a0:	333b      	adds	r3, #59	; 0x3b
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d009      	beq.n	80090bc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80090a8:	78fb      	ldrb	r3, [r7, #3]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	212c      	movs	r1, #44	; 0x2c
 80090ae:	fb01 f303 	mul.w	r3, r1, r3
 80090b2:	4413      	add	r3, r2
 80090b4:	3354      	adds	r3, #84	; 0x54
 80090b6:	78ba      	ldrb	r2, [r7, #2]
 80090b8:	701a      	strb	r2, [r3, #0]
 80090ba:	e008      	b.n	80090ce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	212c      	movs	r1, #44	; 0x2c
 80090c2:	fb01 f303 	mul.w	r3, r1, r3
 80090c6:	4413      	add	r3, r2
 80090c8:	3355      	adds	r3, #85	; 0x55
 80090ca:	78ba      	ldrb	r2, [r7, #2]
 80090cc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7f7 ffd5 	bl	8001094 <HAL_Delay>
}
 80090ea:	bf00      	nop
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
	...

080090f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009102:	79fb      	ldrb	r3, [r7, #7]
 8009104:	2b03      	cmp	r3, #3
 8009106:	d817      	bhi.n	8009138 <USBH_Get_USB_Status+0x44>
 8009108:	a201      	add	r2, pc, #4	; (adr r2, 8009110 <USBH_Get_USB_Status+0x1c>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	08009121 	.word	0x08009121
 8009114:	08009127 	.word	0x08009127
 8009118:	0800912d 	.word	0x0800912d
 800911c:	08009133 	.word	0x08009133
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]
    break;
 8009124:	e00b      	b.n	800913e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009126:	2302      	movs	r3, #2
 8009128:	73fb      	strb	r3, [r7, #15]
    break;
 800912a:	e008      	b.n	800913e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800912c:	2301      	movs	r3, #1
 800912e:	73fb      	strb	r3, [r7, #15]
    break;
 8009130:	e005      	b.n	800913e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009132:	2302      	movs	r3, #2
 8009134:	73fb      	strb	r3, [r7, #15]
    break;
 8009136:	e002      	b.n	800913e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009138:	2302      	movs	r3, #2
 800913a:	73fb      	strb	r3, [r7, #15]
    break;
 800913c:	bf00      	nop
  }
  return usb_status;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d102      	bne.n	8009166 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
 8009164:	e001      	b.n	800916a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009166:	2301      	movs	r3, #1
 8009168:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	461a      	mov	r2, r3
 800916e:	2101      	movs	r1, #1
 8009170:	4803      	ldr	r0, [pc, #12]	; (8009180 <MX_DriverVbusFS+0x34>)
 8009172:	f7f8 fdff 	bl	8001d74 <HAL_GPIO_WritePin>
}
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	40020800 	.word	0x40020800

08009184 <__errno>:
 8009184:	4b01      	ldr	r3, [pc, #4]	; (800918c <__errno+0x8>)
 8009186:	6818      	ldr	r0, [r3, #0]
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	20000030 	.word	0x20000030

08009190 <__libc_init_array>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	4d0d      	ldr	r5, [pc, #52]	; (80091c8 <__libc_init_array+0x38>)
 8009194:	4c0d      	ldr	r4, [pc, #52]	; (80091cc <__libc_init_array+0x3c>)
 8009196:	1b64      	subs	r4, r4, r5
 8009198:	10a4      	asrs	r4, r4, #2
 800919a:	2600      	movs	r6, #0
 800919c:	42a6      	cmp	r6, r4
 800919e:	d109      	bne.n	80091b4 <__libc_init_array+0x24>
 80091a0:	4d0b      	ldr	r5, [pc, #44]	; (80091d0 <__libc_init_array+0x40>)
 80091a2:	4c0c      	ldr	r4, [pc, #48]	; (80091d4 <__libc_init_array+0x44>)
 80091a4:	f000 f92e 	bl	8009404 <_init>
 80091a8:	1b64      	subs	r4, r4, r5
 80091aa:	10a4      	asrs	r4, r4, #2
 80091ac:	2600      	movs	r6, #0
 80091ae:	42a6      	cmp	r6, r4
 80091b0:	d105      	bne.n	80091be <__libc_init_array+0x2e>
 80091b2:	bd70      	pop	{r4, r5, r6, pc}
 80091b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b8:	4798      	blx	r3
 80091ba:	3601      	adds	r6, #1
 80091bc:	e7ee      	b.n	800919c <__libc_init_array+0xc>
 80091be:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c2:	4798      	blx	r3
 80091c4:	3601      	adds	r6, #1
 80091c6:	e7f2      	b.n	80091ae <__libc_init_array+0x1e>
 80091c8:	08009448 	.word	0x08009448
 80091cc:	08009448 	.word	0x08009448
 80091d0:	08009448 	.word	0x08009448
 80091d4:	0800944c 	.word	0x0800944c

080091d8 <malloc>:
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <malloc+0xc>)
 80091da:	4601      	mov	r1, r0
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f000 b87f 	b.w	80092e0 <_malloc_r>
 80091e2:	bf00      	nop
 80091e4:	20000030 	.word	0x20000030

080091e8 <free>:
 80091e8:	4b02      	ldr	r3, [pc, #8]	; (80091f4 <free+0xc>)
 80091ea:	4601      	mov	r1, r0
 80091ec:	6818      	ldr	r0, [r3, #0]
 80091ee:	f000 b80b 	b.w	8009208 <_free_r>
 80091f2:	bf00      	nop
 80091f4:	20000030 	.word	0x20000030

080091f8 <memset>:
 80091f8:	4402      	add	r2, r0
 80091fa:	4603      	mov	r3, r0
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d100      	bne.n	8009202 <memset+0xa>
 8009200:	4770      	bx	lr
 8009202:	f803 1b01 	strb.w	r1, [r3], #1
 8009206:	e7f9      	b.n	80091fc <memset+0x4>

08009208 <_free_r>:
 8009208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800920a:	2900      	cmp	r1, #0
 800920c:	d044      	beq.n	8009298 <_free_r+0x90>
 800920e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009212:	9001      	str	r0, [sp, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	f1a1 0404 	sub.w	r4, r1, #4
 800921a:	bfb8      	it	lt
 800921c:	18e4      	addlt	r4, r4, r3
 800921e:	f000 f8e3 	bl	80093e8 <__malloc_lock>
 8009222:	4a1e      	ldr	r2, [pc, #120]	; (800929c <_free_r+0x94>)
 8009224:	9801      	ldr	r0, [sp, #4]
 8009226:	6813      	ldr	r3, [r2, #0]
 8009228:	b933      	cbnz	r3, 8009238 <_free_r+0x30>
 800922a:	6063      	str	r3, [r4, #4]
 800922c:	6014      	str	r4, [r2, #0]
 800922e:	b003      	add	sp, #12
 8009230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009234:	f000 b8de 	b.w	80093f4 <__malloc_unlock>
 8009238:	42a3      	cmp	r3, r4
 800923a:	d908      	bls.n	800924e <_free_r+0x46>
 800923c:	6825      	ldr	r5, [r4, #0]
 800923e:	1961      	adds	r1, r4, r5
 8009240:	428b      	cmp	r3, r1
 8009242:	bf01      	itttt	eq
 8009244:	6819      	ldreq	r1, [r3, #0]
 8009246:	685b      	ldreq	r3, [r3, #4]
 8009248:	1949      	addeq	r1, r1, r5
 800924a:	6021      	streq	r1, [r4, #0]
 800924c:	e7ed      	b.n	800922a <_free_r+0x22>
 800924e:	461a      	mov	r2, r3
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	b10b      	cbz	r3, 8009258 <_free_r+0x50>
 8009254:	42a3      	cmp	r3, r4
 8009256:	d9fa      	bls.n	800924e <_free_r+0x46>
 8009258:	6811      	ldr	r1, [r2, #0]
 800925a:	1855      	adds	r5, r2, r1
 800925c:	42a5      	cmp	r5, r4
 800925e:	d10b      	bne.n	8009278 <_free_r+0x70>
 8009260:	6824      	ldr	r4, [r4, #0]
 8009262:	4421      	add	r1, r4
 8009264:	1854      	adds	r4, r2, r1
 8009266:	42a3      	cmp	r3, r4
 8009268:	6011      	str	r1, [r2, #0]
 800926a:	d1e0      	bne.n	800922e <_free_r+0x26>
 800926c:	681c      	ldr	r4, [r3, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	6053      	str	r3, [r2, #4]
 8009272:	4421      	add	r1, r4
 8009274:	6011      	str	r1, [r2, #0]
 8009276:	e7da      	b.n	800922e <_free_r+0x26>
 8009278:	d902      	bls.n	8009280 <_free_r+0x78>
 800927a:	230c      	movs	r3, #12
 800927c:	6003      	str	r3, [r0, #0]
 800927e:	e7d6      	b.n	800922e <_free_r+0x26>
 8009280:	6825      	ldr	r5, [r4, #0]
 8009282:	1961      	adds	r1, r4, r5
 8009284:	428b      	cmp	r3, r1
 8009286:	bf04      	itt	eq
 8009288:	6819      	ldreq	r1, [r3, #0]
 800928a:	685b      	ldreq	r3, [r3, #4]
 800928c:	6063      	str	r3, [r4, #4]
 800928e:	bf04      	itt	eq
 8009290:	1949      	addeq	r1, r1, r5
 8009292:	6021      	streq	r1, [r4, #0]
 8009294:	6054      	str	r4, [r2, #4]
 8009296:	e7ca      	b.n	800922e <_free_r+0x26>
 8009298:	b003      	add	sp, #12
 800929a:	bd30      	pop	{r4, r5, pc}
 800929c:	20000978 	.word	0x20000978

080092a0 <sbrk_aligned>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	4e0e      	ldr	r6, [pc, #56]	; (80092dc <sbrk_aligned+0x3c>)
 80092a4:	460c      	mov	r4, r1
 80092a6:	6831      	ldr	r1, [r6, #0]
 80092a8:	4605      	mov	r5, r0
 80092aa:	b911      	cbnz	r1, 80092b2 <sbrk_aligned+0x12>
 80092ac:	f000 f88c 	bl	80093c8 <_sbrk_r>
 80092b0:	6030      	str	r0, [r6, #0]
 80092b2:	4621      	mov	r1, r4
 80092b4:	4628      	mov	r0, r5
 80092b6:	f000 f887 	bl	80093c8 <_sbrk_r>
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	d00a      	beq.n	80092d4 <sbrk_aligned+0x34>
 80092be:	1cc4      	adds	r4, r0, #3
 80092c0:	f024 0403 	bic.w	r4, r4, #3
 80092c4:	42a0      	cmp	r0, r4
 80092c6:	d007      	beq.n	80092d8 <sbrk_aligned+0x38>
 80092c8:	1a21      	subs	r1, r4, r0
 80092ca:	4628      	mov	r0, r5
 80092cc:	f000 f87c 	bl	80093c8 <_sbrk_r>
 80092d0:	3001      	adds	r0, #1
 80092d2:	d101      	bne.n	80092d8 <sbrk_aligned+0x38>
 80092d4:	f04f 34ff 	mov.w	r4, #4294967295
 80092d8:	4620      	mov	r0, r4
 80092da:	bd70      	pop	{r4, r5, r6, pc}
 80092dc:	2000097c 	.word	0x2000097c

080092e0 <_malloc_r>:
 80092e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e4:	1ccd      	adds	r5, r1, #3
 80092e6:	f025 0503 	bic.w	r5, r5, #3
 80092ea:	3508      	adds	r5, #8
 80092ec:	2d0c      	cmp	r5, #12
 80092ee:	bf38      	it	cc
 80092f0:	250c      	movcc	r5, #12
 80092f2:	2d00      	cmp	r5, #0
 80092f4:	4607      	mov	r7, r0
 80092f6:	db01      	blt.n	80092fc <_malloc_r+0x1c>
 80092f8:	42a9      	cmp	r1, r5
 80092fa:	d905      	bls.n	8009308 <_malloc_r+0x28>
 80092fc:	230c      	movs	r3, #12
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	2600      	movs	r6, #0
 8009302:	4630      	mov	r0, r6
 8009304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009308:	4e2e      	ldr	r6, [pc, #184]	; (80093c4 <_malloc_r+0xe4>)
 800930a:	f000 f86d 	bl	80093e8 <__malloc_lock>
 800930e:	6833      	ldr	r3, [r6, #0]
 8009310:	461c      	mov	r4, r3
 8009312:	bb34      	cbnz	r4, 8009362 <_malloc_r+0x82>
 8009314:	4629      	mov	r1, r5
 8009316:	4638      	mov	r0, r7
 8009318:	f7ff ffc2 	bl	80092a0 <sbrk_aligned>
 800931c:	1c43      	adds	r3, r0, #1
 800931e:	4604      	mov	r4, r0
 8009320:	d14d      	bne.n	80093be <_malloc_r+0xde>
 8009322:	6834      	ldr	r4, [r6, #0]
 8009324:	4626      	mov	r6, r4
 8009326:	2e00      	cmp	r6, #0
 8009328:	d140      	bne.n	80093ac <_malloc_r+0xcc>
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	4631      	mov	r1, r6
 800932e:	4638      	mov	r0, r7
 8009330:	eb04 0803 	add.w	r8, r4, r3
 8009334:	f000 f848 	bl	80093c8 <_sbrk_r>
 8009338:	4580      	cmp	r8, r0
 800933a:	d13a      	bne.n	80093b2 <_malloc_r+0xd2>
 800933c:	6821      	ldr	r1, [r4, #0]
 800933e:	3503      	adds	r5, #3
 8009340:	1a6d      	subs	r5, r5, r1
 8009342:	f025 0503 	bic.w	r5, r5, #3
 8009346:	3508      	adds	r5, #8
 8009348:	2d0c      	cmp	r5, #12
 800934a:	bf38      	it	cc
 800934c:	250c      	movcc	r5, #12
 800934e:	4629      	mov	r1, r5
 8009350:	4638      	mov	r0, r7
 8009352:	f7ff ffa5 	bl	80092a0 <sbrk_aligned>
 8009356:	3001      	adds	r0, #1
 8009358:	d02b      	beq.n	80093b2 <_malloc_r+0xd2>
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	442b      	add	r3, r5
 800935e:	6023      	str	r3, [r4, #0]
 8009360:	e00e      	b.n	8009380 <_malloc_r+0xa0>
 8009362:	6822      	ldr	r2, [r4, #0]
 8009364:	1b52      	subs	r2, r2, r5
 8009366:	d41e      	bmi.n	80093a6 <_malloc_r+0xc6>
 8009368:	2a0b      	cmp	r2, #11
 800936a:	d916      	bls.n	800939a <_malloc_r+0xba>
 800936c:	1961      	adds	r1, r4, r5
 800936e:	42a3      	cmp	r3, r4
 8009370:	6025      	str	r5, [r4, #0]
 8009372:	bf18      	it	ne
 8009374:	6059      	strne	r1, [r3, #4]
 8009376:	6863      	ldr	r3, [r4, #4]
 8009378:	bf08      	it	eq
 800937a:	6031      	streq	r1, [r6, #0]
 800937c:	5162      	str	r2, [r4, r5]
 800937e:	604b      	str	r3, [r1, #4]
 8009380:	4638      	mov	r0, r7
 8009382:	f104 060b 	add.w	r6, r4, #11
 8009386:	f000 f835 	bl	80093f4 <__malloc_unlock>
 800938a:	f026 0607 	bic.w	r6, r6, #7
 800938e:	1d23      	adds	r3, r4, #4
 8009390:	1af2      	subs	r2, r6, r3
 8009392:	d0b6      	beq.n	8009302 <_malloc_r+0x22>
 8009394:	1b9b      	subs	r3, r3, r6
 8009396:	50a3      	str	r3, [r4, r2]
 8009398:	e7b3      	b.n	8009302 <_malloc_r+0x22>
 800939a:	6862      	ldr	r2, [r4, #4]
 800939c:	42a3      	cmp	r3, r4
 800939e:	bf0c      	ite	eq
 80093a0:	6032      	streq	r2, [r6, #0]
 80093a2:	605a      	strne	r2, [r3, #4]
 80093a4:	e7ec      	b.n	8009380 <_malloc_r+0xa0>
 80093a6:	4623      	mov	r3, r4
 80093a8:	6864      	ldr	r4, [r4, #4]
 80093aa:	e7b2      	b.n	8009312 <_malloc_r+0x32>
 80093ac:	4634      	mov	r4, r6
 80093ae:	6876      	ldr	r6, [r6, #4]
 80093b0:	e7b9      	b.n	8009326 <_malloc_r+0x46>
 80093b2:	230c      	movs	r3, #12
 80093b4:	603b      	str	r3, [r7, #0]
 80093b6:	4638      	mov	r0, r7
 80093b8:	f000 f81c 	bl	80093f4 <__malloc_unlock>
 80093bc:	e7a1      	b.n	8009302 <_malloc_r+0x22>
 80093be:	6025      	str	r5, [r4, #0]
 80093c0:	e7de      	b.n	8009380 <_malloc_r+0xa0>
 80093c2:	bf00      	nop
 80093c4:	20000978 	.word	0x20000978

080093c8 <_sbrk_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4d06      	ldr	r5, [pc, #24]	; (80093e4 <_sbrk_r+0x1c>)
 80093cc:	2300      	movs	r3, #0
 80093ce:	4604      	mov	r4, r0
 80093d0:	4608      	mov	r0, r1
 80093d2:	602b      	str	r3, [r5, #0]
 80093d4:	f7f7 fd7a 	bl	8000ecc <_sbrk>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d102      	bne.n	80093e2 <_sbrk_r+0x1a>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	b103      	cbz	r3, 80093e2 <_sbrk_r+0x1a>
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	bd38      	pop	{r3, r4, r5, pc}
 80093e4:	20000980 	.word	0x20000980

080093e8 <__malloc_lock>:
 80093e8:	4801      	ldr	r0, [pc, #4]	; (80093f0 <__malloc_lock+0x8>)
 80093ea:	f000 b809 	b.w	8009400 <__retarget_lock_acquire_recursive>
 80093ee:	bf00      	nop
 80093f0:	20000984 	.word	0x20000984

080093f4 <__malloc_unlock>:
 80093f4:	4801      	ldr	r0, [pc, #4]	; (80093fc <__malloc_unlock+0x8>)
 80093f6:	f000 b804 	b.w	8009402 <__retarget_lock_release_recursive>
 80093fa:	bf00      	nop
 80093fc:	20000984 	.word	0x20000984

08009400 <__retarget_lock_acquire_recursive>:
 8009400:	4770      	bx	lr

08009402 <__retarget_lock_release_recursive>:
 8009402:	4770      	bx	lr

08009404 <_init>:
 8009404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009406:	bf00      	nop
 8009408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800940a:	bc08      	pop	{r3}
 800940c:	469e      	mov	lr, r3
 800940e:	4770      	bx	lr

08009410 <_fini>:
 8009410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009412:	bf00      	nop
 8009414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009416:	bc08      	pop	{r3}
 8009418:	469e      	mov	lr, r3
 800941a:	4770      	bx	lr
