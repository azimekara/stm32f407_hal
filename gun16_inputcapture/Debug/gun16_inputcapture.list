
gun16_inputcapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007768  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080078f0  080078f0  000178f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800790c  0800790c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007914  08007914  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007914  08007914  00017914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800791c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000854  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008e4  200008e4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aa4d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c57  00000000  00000000  0003ab0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001670  00000000  00000000  0003e768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e0  00000000  00000000  0003fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245cd  00000000  00000000  000412b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c767  00000000  00000000  00065885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b6b  00000000  00000000  00081fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155b57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000616c  00000000  00000000  00155ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080078d8 	.word	0x080078d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080078d8 	.word	0x080078d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004dc:	d105      	bne.n	80004ea <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		a++;
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	3301      	adds	r3, #1
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80004e8:	801a      	strh	r2, [r3, #0]
	}
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	200000ac 	.word	0x200000ac

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fca0 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f814 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f962 	bl	80007d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800050c:	f000 f87a 	bl	8000604 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000510:	f000 f8a6 	bl	8000660 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000514:	f000 f8d4 	bl	80006c0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000518:	f006 fdee 	bl	80070f8 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800051c:	f000 f906 	bl	800072c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8000520:	2100      	movs	r1, #0
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <main+0x30>)
 8000524:	f004 f85a 	bl	80045dc <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x2c>
 800052a:	bf00      	nop
 800052c:	200001a4 	.word	0x200001a4

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f007 f8c4 	bl	80076cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 f974 	bl	80038a4 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 fa03 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 fbd5 	bl	8003d94 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f9ec 	bl	80009cc <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <MX_I2C1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_I2C1_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_I2C1_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_I2C1_Init+0x50>)
 8000642:	f002 fb4b 	bl	8002cdc <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 f9be 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000b0 	.word	0x200000b0
 8000658:	40005400 	.word	0x40005400
 800065c:	000186a0 	.word	0x000186a0

08000660 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <MX_I2S3_Init+0x58>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000684:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <MX_I2S3_Init+0x5c>)
 800068a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_I2S3_Init+0x54>)
 80006a0:	f002 fc60 	bl	8002f64 <HAL_I2S_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006aa:	f000 f98f 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000104 	.word	0x20000104
 80006b8:	40003c00 	.word	0x40003c00
 80006bc:	00017700 	.word	0x00017700

080006c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_SPI1_Init+0x64>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <MX_SPI1_Init+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_SPI1_Init+0x64>)
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_SPI1_Init+0x64>)
 800070c:	220a      	movs	r2, #10
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_SPI1_Init+0x64>)
 8000712:	f003 fe8b 	bl	800442c <HAL_SPI_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800071c:	f000 f956 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000014c 	.word	0x2000014c
 8000728:	40013000 	.word	0x40013000

0800072c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_TIM2_Init+0xa0>)
 800074a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_TIM2_Init+0xa0>)
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_TIM2_Init+0xa0>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_TIM2_Init+0xa0>)
 800075e:	f04f 32ff 	mov.w	r2, #4294967295
 8000762:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_TIM2_Init+0xa0>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_TIM2_Init+0xa0>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000770:	4816      	ldr	r0, [pc, #88]	; (80007cc <MX_TIM2_Init+0xa0>)
 8000772:	f003 fee4 	bl	800453e <HAL_TIM_IC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800077c:	f000 f926 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	480f      	ldr	r0, [pc, #60]	; (80007cc <MX_TIM2_Init+0xa0>)
 8000790:	f004 fc08 	bl	8004fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800079a:	f000 f917 	bl	80009cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800079e:	2302      	movs	r3, #2
 80007a0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007a2:	2301      	movs	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 10;
 80007aa:	230a      	movs	r3, #10
 80007ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_TIM2_Init+0xa0>)
 80007b6:	f004 f941 	bl	8004a3c <HAL_TIM_IC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007c0:	f000 f904 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200001a4 	.word	0x200001a4

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	4b72      	ldr	r3, [pc, #456]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a71      	ldr	r2, [pc, #452]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 80007f0:	f043 0310 	orr.w	r3, r3, #16
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b6f      	ldr	r3, [pc, #444]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0310 	and.w	r3, r3, #16
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	4b6b      	ldr	r3, [pc, #428]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a6a      	ldr	r2, [pc, #424]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b68      	ldr	r3, [pc, #416]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b64      	ldr	r3, [pc, #400]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a63      	ldr	r2, [pc, #396]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b61      	ldr	r3, [pc, #388]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a5c      	ldr	r2, [pc, #368]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b56      	ldr	r3, [pc, #344]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a55      	ldr	r2, [pc, #340]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b53      	ldr	r3, [pc, #332]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b4f      	ldr	r3, [pc, #316]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a4e      	ldr	r2, [pc, #312]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b4c      	ldr	r3, [pc, #304]	; (80009b4 <MX_GPIO_Init+0x1e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2108      	movs	r1, #8
 8000892:	4849      	ldr	r0, [pc, #292]	; (80009b8 <MX_GPIO_Init+0x1e8>)
 8000894:	f000 fe1a 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2101      	movs	r1, #1
 800089c:	4847      	ldr	r0, [pc, #284]	; (80009bc <MX_GPIO_Init+0x1ec>)
 800089e:	f000 fe15 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a2:	2200      	movs	r2, #0
 80008a4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a8:	4845      	ldr	r0, [pc, #276]	; (80009c0 <MX_GPIO_Init+0x1f0>)
 80008aa:	f000 fe0f 	bl	80014cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	483c      	ldr	r0, [pc, #240]	; (80009b8 <MX_GPIO_Init+0x1e8>)
 80008c6:	f000 fc65 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4836      	ldr	r0, [pc, #216]	; (80009bc <MX_GPIO_Init+0x1ec>)
 80008e2:	f000 fc57 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f6:	2305      	movs	r3, #5
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	482e      	ldr	r0, [pc, #184]	; (80009bc <MX_GPIO_Init+0x1ec>)
 8000902:	f000 fc47 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	482a      	ldr	r0, [pc, #168]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 800091c:	f000 fc3a 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000920:	2304      	movs	r3, #4
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4825      	ldr	r0, [pc, #148]	; (80009c8 <MX_GPIO_Init+0x1f8>)
 8000934:	f000 fc2e 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	481c      	ldr	r0, [pc, #112]	; (80009c8 <MX_GPIO_Init+0x1f8>)
 8000956:	f000 fc1d 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800095e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4813      	ldr	r0, [pc, #76]	; (80009c0 <MX_GPIO_Init+0x1f0>)
 8000974:	f000 fc0e 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000978:	2320      	movs	r3, #32
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_GPIO_Init+0x1f0>)
 800098c:	f000 fc02 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000994:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_GPIO_Init+0x1e8>)
 80009a6:	f000 fbf5 	bl	8001194 <HAL_GPIO_Init>

}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	; 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020c00 	.word	0x40020c00
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020400 	.word	0x40020400

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a16:	2007      	movs	r0, #7
 8000a18:	f000 fb7a 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a19      	ldr	r2, [pc, #100]	; (8000aac <HAL_I2C_MspInit+0x84>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d12c      	bne.n	8000aa4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a66:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <HAL_I2C_MspInit+0x8c>)
 8000a84:	f000 fb86 	bl	8001194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	; 0x38
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a31      	ldr	r2, [pc, #196]	; (8000ba8 <HAL_I2S_MspInit+0xf0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d15a      	bne.n	8000b9e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aec:	23c0      	movs	r3, #192	; 0xc0
 8000aee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fb57 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b04:	f7ff ff62 	bl	80009cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	4b27      	ldr	r3, [pc, #156]	; (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	4a26      	ldr	r2, [pc, #152]	; (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b16:	6413      	str	r3, [r2, #64]	; 0x40
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a1f      	ldr	r2, [pc, #124]	; (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	4a18      	ldr	r2, [pc, #96]	; (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	480e      	ldr	r0, [pc, #56]	; (8000bb0 <HAL_I2S_MspInit+0xf8>)
 8000b78:	f000 fb0c 	bl	8001194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b7c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b8e:	2306      	movs	r3, #6
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <HAL_I2S_MspInit+0xfc>)
 8000b9a:	f000 fafb 	bl	8001194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3738      	adds	r7, #56	; 0x38
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40003c00 	.word	0x40003c00
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40020800 	.word	0x40020800

08000bb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_SPI_MspInit+0x84>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12b      	bne.n	8000c32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_SPI_MspInit+0x88>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_SPI_MspInit+0x88>)
 8000be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_SPI_MspInit+0x88>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_SPI_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <HAL_SPI_MspInit+0x88>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_SPI_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c12:	23e0      	movs	r3, #224	; 0xe0
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c22:	2305      	movs	r3, #5
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_SPI_MspInit+0x8c>)
 8000c2e:	f000 fab1 	bl	8001194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40013000 	.word	0x40013000
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c68:	d134      	bne.n	8000cd4 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_TIM_IC_MspInit+0x94>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <HAL_TIM_IC_MspInit+0x94>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_TIM_IC_MspInit+0x94>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_TIM_IC_MspInit+0x94>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_TIM_IC_MspInit+0x94>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_TIM_IC_MspInit+0x94>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <HAL_TIM_IC_MspInit+0x98>)
 8000cc0:	f000 fa68 	bl	8001194 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	201c      	movs	r0, #28
 8000cca:	f000 fa2c 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cce:	201c      	movs	r0, #28
 8000cd0:	f000 fa45 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f8da 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <TIM2_IRQHandler+0x10>)
 8000d3e:	f003 fd75 	bl	800482c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200001a4 	.word	0x200001a4

08000d4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <OTG_FS_IRQHandler+0x10>)
 8000d52:	f000 fe3f 	bl	80019d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200005d0 	.word	0x200005d0

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f006 fc62 	bl	8007658 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20020000 	.word	0x20020000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	200001ec 	.word	0x200001ec
 8000dc8:	200008e8 	.word	0x200008e8

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e0c:	4c0b      	ldr	r4, [pc, #44]	; (8000e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1a:	f7ff ffd7 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f006 fc21 	bl	8007664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fb6b 	bl	80004fc <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e34:	0800791c 	.word	0x0800791c
  ldr r2, =_sbss
 8000e38:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e3c:	200008e4 	.word	0x200008e4

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f94f 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fdae 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f967 	bl	800117a <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f92f 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	200001f0 	.word	0x200001f0

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200001f0 	.word	0x200001f0

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff8e 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff29 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff3e 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff8e 	bl	8001064 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5d 	bl	8001010 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff31 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffa2 	bl	80010cc <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e16b      	b.n	8001488 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 815a 	bne.w	8001482 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d005      	beq.n	80011e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b03      	cmp	r3, #3
 8001252:	d017      	beq.n	8001284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d123      	bne.n	80012d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80b4 	beq.w	8001482 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <HAL_GPIO_Init+0x30c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a5f      	ldr	r2, [pc, #380]	; (80014a0 <HAL_GPIO_Init+0x30c>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <HAL_GPIO_Init+0x30c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001336:	4a5b      	ldr	r2, [pc, #364]	; (80014a4 <HAL_GPIO_Init+0x310>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_GPIO_Init+0x314>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d02b      	beq.n	80013ba <HAL_GPIO_Init+0x226>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a51      	ldr	r2, [pc, #324]	; (80014ac <HAL_GPIO_Init+0x318>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d025      	beq.n	80013b6 <HAL_GPIO_Init+0x222>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a50      	ldr	r2, [pc, #320]	; (80014b0 <HAL_GPIO_Init+0x31c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d01f      	beq.n	80013b2 <HAL_GPIO_Init+0x21e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_GPIO_Init+0x320>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d019      	beq.n	80013ae <HAL_GPIO_Init+0x21a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <HAL_GPIO_Init+0x324>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d013      	beq.n	80013aa <HAL_GPIO_Init+0x216>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4d      	ldr	r2, [pc, #308]	; (80014bc <HAL_GPIO_Init+0x328>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00d      	beq.n	80013a6 <HAL_GPIO_Init+0x212>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4c      	ldr	r2, [pc, #304]	; (80014c0 <HAL_GPIO_Init+0x32c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <HAL_GPIO_Init+0x330>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_GPIO_Init+0x20a>
 800139a:	2307      	movs	r3, #7
 800139c:	e00e      	b.n	80013bc <HAL_GPIO_Init+0x228>
 800139e:	2308      	movs	r3, #8
 80013a0:	e00c      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013a2:	2306      	movs	r3, #6
 80013a4:	e00a      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	; (80014a4 <HAL_GPIO_Init+0x310>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <HAL_GPIO_Init+0x334>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fe:	4a32      	ldr	r2, [pc, #200]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001404:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001428:	4a27      	ldr	r2, [pc, #156]	; (80014c8 <HAL_GPIO_Init+0x334>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001452:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_GPIO_Init+0x334>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <HAL_GPIO_Init+0x334>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f ae90 	bls.w	80011b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021400 	.word	0x40021400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40021c00 	.word	0x40021c00
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001500:	b08f      	sub	sp, #60	; 0x3c
 8001502:	af0a      	add	r7, sp, #40	; 0x28
 8001504:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e054      	b.n	80015ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f005 fe38 	bl	80071a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2203      	movs	r2, #3
 8001534:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fe2a 	bl	80051a8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	687e      	ldr	r6, [r7, #4]
 800155c:	466d      	mov	r5, sp
 800155e:	f106 0410 	add.w	r4, r6, #16
 8001562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800156e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001572:	1d33      	adds	r3, r6, #4
 8001574:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001576:	6838      	ldr	r0, [r7, #0]
 8001578:	f003 fda4 	bl	80050c4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2101      	movs	r1, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fe21 	bl	80051ca <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	687e      	ldr	r6, [r7, #4]
 8001590:	466d      	mov	r5, sp
 8001592:	f106 0410 	add.w	r4, r6, #16
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80015a6:	1d33      	adds	r3, r6, #4
 80015a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015aa:	6838      	ldr	r0, [r7, #0]
 80015ac:	f003 ffaa 	bl	8005504 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015c2:	b590      	push	{r4, r7, lr}
 80015c4:	b089      	sub	sp, #36	; 0x24
 80015c6:	af04      	add	r7, sp, #16
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	4608      	mov	r0, r1
 80015cc:	4611      	mov	r1, r2
 80015ce:	461a      	mov	r2, r3
 80015d0:	4603      	mov	r3, r0
 80015d2:	70fb      	strb	r3, [r7, #3]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70bb      	strb	r3, [r7, #2]
 80015d8:	4613      	mov	r3, r2
 80015da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_HCD_HC_Init+0x28>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e076      	b.n	80016d8 <HAL_HCD_HC_Init+0x116>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	212c      	movs	r1, #44	; 0x2c
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	333d      	adds	r3, #61	; 0x3d
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	212c      	movs	r1, #44	; 0x2c
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	3338      	adds	r3, #56	; 0x38
 8001612:	787a      	ldrb	r2, [r7, #1]
 8001614:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	212c      	movs	r1, #44	; 0x2c
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	4413      	add	r3, r2
 8001622:	3340      	adds	r3, #64	; 0x40
 8001624:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001626:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	212c      	movs	r1, #44	; 0x2c
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	3339      	adds	r3, #57	; 0x39
 8001636:	78fa      	ldrb	r2, [r7, #3]
 8001638:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	212c      	movs	r1, #44	; 0x2c
 8001640:	fb01 f303 	mul.w	r3, r1, r3
 8001644:	4413      	add	r3, r2
 8001646:	333f      	adds	r3, #63	; 0x3f
 8001648:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800164c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	78ba      	ldrb	r2, [r7, #2]
 8001652:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001656:	b2d0      	uxtb	r0, r2
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	212c      	movs	r1, #44	; 0x2c
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	333a      	adds	r3, #58	; 0x3a
 8001664:	4602      	mov	r2, r0
 8001666:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800166c:	2b00      	cmp	r3, #0
 800166e:	da09      	bge.n	8001684 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	212c      	movs	r1, #44	; 0x2c
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	4413      	add	r3, r2
 800167c:	333b      	adds	r3, #59	; 0x3b
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	e008      	b.n	8001696 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	212c      	movs	r1, #44	; 0x2c
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	4413      	add	r3, r2
 8001690:	333b      	adds	r3, #59	; 0x3b
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	212c      	movs	r1, #44	; 0x2c
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	333c      	adds	r3, #60	; 0x3c
 80016a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	787c      	ldrb	r4, [r7, #1]
 80016b0:	78ba      	ldrb	r2, [r7, #2]
 80016b2:	78f9      	ldrb	r1, [r7, #3]
 80016b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4623      	mov	r3, r4
 80016c6:	f004 f879 	bl	80057bc <USB_HC_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd90      	pop	{r4, r7, pc}

080016e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_HCD_HC_Halt+0x1e>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e00f      	b.n	800171e <HAL_HCD_HC_Halt+0x3e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f004 fac9 	bl	8005ca6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	4608      	mov	r0, r1
 8001732:	4611      	mov	r1, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4603      	mov	r3, r0
 8001738:	70fb      	strb	r3, [r7, #3]
 800173a:	460b      	mov	r3, r1
 800173c:	70bb      	strb	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	333b      	adds	r3, #59	; 0x3b
 8001750:	78ba      	ldrb	r2, [r7, #2]
 8001752:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	212c      	movs	r1, #44	; 0x2c
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	4413      	add	r3, r2
 8001760:	333f      	adds	r3, #63	; 0x3f
 8001762:	787a      	ldrb	r2, [r7, #1]
 8001764:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001766:	7c3b      	ldrb	r3, [r7, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d112      	bne.n	8001792 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	3342      	adds	r3, #66	; 0x42
 800177a:	2203      	movs	r2, #3
 800177c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	212c      	movs	r1, #44	; 0x2c
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	4413      	add	r3, r2
 800178a:	333d      	adds	r3, #61	; 0x3d
 800178c:	7f3a      	ldrb	r2, [r7, #28]
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e008      	b.n	80017a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3342      	adds	r3, #66	; 0x42
 80017a0:	2202      	movs	r2, #2
 80017a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	f200 80c6 	bhi.w	8001938 <HAL_HCD_HC_SubmitRequest+0x210>
 80017ac:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b2:	bf00      	nop
 80017b4:	080017c5 	.word	0x080017c5
 80017b8:	08001925 	.word	0x08001925
 80017bc:	08001829 	.word	0x08001829
 80017c0:	080018a7 	.word	0x080018a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017c4:	7c3b      	ldrb	r3, [r7, #16]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	f040 80b8 	bne.w	800193c <HAL_HCD_HC_SubmitRequest+0x214>
 80017cc:	78bb      	ldrb	r3, [r7, #2]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 80b4 	bne.w	800193c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80017d4:	8b3b      	ldrh	r3, [r7, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d108      	bne.n	80017ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	3355      	adds	r3, #85	; 0x55
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	3355      	adds	r3, #85	; 0x55
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	212c      	movs	r1, #44	; 0x2c
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	3342      	adds	r3, #66	; 0x42
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001812:	e093      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	3342      	adds	r3, #66	; 0x42
 8001822:	2202      	movs	r2, #2
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e089      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001828:	78bb      	ldrb	r3, [r7, #2]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d11d      	bne.n	800186a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	212c      	movs	r1, #44	; 0x2c
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	3355      	adds	r3, #85	; 0x55
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	3342      	adds	r3, #66	; 0x42
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001854:	e073      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3342      	adds	r3, #66	; 0x42
 8001864:	2202      	movs	r2, #2
 8001866:	701a      	strb	r2, [r3, #0]
      break;
 8001868:	e069      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	212c      	movs	r1, #44	; 0x2c
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	3354      	adds	r3, #84	; 0x54
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3342      	adds	r3, #66	; 0x42
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
      break;
 8001890:	e055      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3342      	adds	r3, #66	; 0x42
 80018a0:	2202      	movs	r2, #2
 80018a2:	701a      	strb	r2, [r3, #0]
      break;
 80018a4:	e04b      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018a6:	78bb      	ldrb	r3, [r7, #2]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d11d      	bne.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3355      	adds	r3, #85	; 0x55
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	212c      	movs	r1, #44	; 0x2c
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	3342      	adds	r3, #66	; 0x42
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018d2:	e034      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	2202      	movs	r2, #2
 80018e4:	701a      	strb	r2, [r3, #0]
      break;
 80018e6:	e02a      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	212c      	movs	r1, #44	; 0x2c
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	3354      	adds	r3, #84	; 0x54
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d109      	bne.n	8001910 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	212c      	movs	r1, #44	; 0x2c
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	3342      	adds	r3, #66	; 0x42
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
      break;
 800190e:	e016      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	212c      	movs	r1, #44	; 0x2c
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	3342      	adds	r3, #66	; 0x42
 800191e:	2202      	movs	r2, #2
 8001920:	701a      	strb	r2, [r3, #0]
      break;
 8001922:	e00c      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	212c      	movs	r1, #44	; 0x2c
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	3342      	adds	r3, #66	; 0x42
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
      break;
 8001936:	e002      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001938:	bf00      	nop
 800193a:	e000      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800193c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3344      	adds	r3, #68	; 0x44
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	8b3a      	ldrh	r2, [r7, #24]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	202c      	movs	r0, #44	; 0x2c
 8001958:	fb00 f303 	mul.w	r3, r0, r3
 800195c:	440b      	add	r3, r1
 800195e:	334c      	adds	r3, #76	; 0x4c
 8001960:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	212c      	movs	r1, #44	; 0x2c
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	3360      	adds	r3, #96	; 0x60
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	3350      	adds	r3, #80	; 0x50
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	212c      	movs	r1, #44	; 0x2c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	3339      	adds	r3, #57	; 0x39
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	212c      	movs	r1, #44	; 0x2c
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	3361      	adds	r3, #97	; 0x61
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	222c      	movs	r2, #44	; 0x2c
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	3338      	adds	r3, #56	; 0x38
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	18d1      	adds	r1, r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	f004 f81c 	bl	8005a00 <USB_HC_StartXfer>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop

080019d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fd47 	bl	800547e <USB_GetMode>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	f040 80f6 	bne.w	8001be4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fd2b 	bl	8005458 <USB_ReadInterrupts>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80ec 	beq.w	8001be2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fd22 	bl	8005458 <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a1e:	d104      	bne.n	8001a2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fd12 	bl	8005458 <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a3e:	d104      	bne.n	8001a4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fd02 	bl	8005458 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a5e:	d104      	bne.n	8001a6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fcf2 	bl	8005458 <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d103      	bne.n	8001a86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2202      	movs	r2, #2
 8001a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fce4 	bl	8005458 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a9a:	d11c      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001aa4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	6938      	ldr	r0, [r7, #16]
 8001aba:	f003 fbd3 	bl	8005264 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001abe:	6938      	ldr	r0, [r7, #16]
 8001ac0:	f003 fc04 	bl	80052cc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fdda 	bl	8005684 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f005 fbe3 	bl	800729c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fcbc 	bl	8005458 <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aea:	d102      	bne.n	8001af2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f001 f882 	bl	8002bf6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fcae 	bl	8005458 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d106      	bne.n	8001b14 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f005 fbac 	bl	8007264 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2208      	movs	r2, #8
 8001b12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fc9d 	bl	8005458 <USB_ReadInterrupts>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d101      	bne.n	8001b2c <HAL_HCD_IRQHandler+0x158>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_HCD_IRQHandler+0x15a>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d012      	beq.n	8001b58 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699a      	ldr	r2, [r3, #24]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0210 	bic.w	r2, r2, #16
 8001b40:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 ff85 	bl	8002a52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0210 	orr.w	r2, r2, #16
 8001b56:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fc7b 	bl	8005458 <USB_ReadInterrupts>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b6c:	d13a      	bne.n	8001be4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 f886 	bl	8005c84 <USB_HC_ReadInterrupt>
 8001b78:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e025      	b.n	8001bcc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	015a      	lsls	r2, r3, #5
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001baa:	d106      	bne.n	8001bba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f88f 	bl	8001cd6 <HCD_HC_IN_IRQHandler>
 8001bb8:	e005      	b.n	8001bc6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fbdd 	bl	8002380 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d3d4      	bcc.n	8001b80 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bde:	615a      	str	r2, [r3, #20]
 8001be0:	e000      	b.n	8001be4 <HAL_HCD_IRQHandler+0x210>
      return;
 8001be2:	bf00      	nop
    }
  }
}
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <HAL_HCD_Start+0x16>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e013      	b.n	8001c28 <HAL_HCD_Start+0x3e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fd72 	bl	80056f8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 fab4 	bl	8005186 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_HCD_Stop+0x16>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e00d      	b.n	8001c62 <HAL_HCD_Stop+0x32>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 f960 	bl	8005f18 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	212c      	movs	r1, #44	; 0x2c
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	3360      	adds	r3, #96	; 0x60
 8001c84:	781b      	ldrb	r3, [r3, #0]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	212c      	movs	r1, #44	; 0x2c
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	3350      	adds	r3, #80	; 0x50
 8001cac:	681b      	ldr	r3, [r3, #0]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fd66 	bl	8005798 <USB_GetCurrentFrame>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d11a      	bne.n	8001d3c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d12:	461a      	mov	r2, r3
 8001d14:	2304      	movs	r3, #4
 8001d16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3361      	adds	r3, #97	; 0x61
 8001d26:	2206      	movs	r2, #6
 8001d28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 ffb6 	bl	8005ca6 <USB_HC_Halt>
 8001d3a:	e0af      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d52:	d11b      	bne.n	8001d8c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	461a      	mov	r2, r3
 8001d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	3361      	adds	r3, #97	; 0x61
 8001d76:	2207      	movs	r2, #7
 8001d78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 ff8e 	bl	8005ca6 <USB_HC_Halt>
 8001d8a:	e087      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d109      	bne.n	8001db6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	461a      	mov	r2, r3
 8001db0:	2320      	movs	r3, #32
 8001db2:	6093      	str	r3, [r2, #8]
 8001db4:	e072      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d11a      	bne.n	8001e02 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2308      	movs	r3, #8
 8001ddc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3361      	adds	r3, #97	; 0x61
 8001dec:	2205      	movs	r2, #5
 8001dee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 ff53 	bl	8005ca6 <USB_HC_Halt>
 8001e00:	e04c      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e18:	d11b      	bne.n	8001e52 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	461a      	mov	r2, r3
 8001e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	212c      	movs	r1, #44	; 0x2c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3361      	adds	r3, #97	; 0x61
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 ff2b 	bl	8005ca6 <USB_HC_Halt>
 8001e50:	e024      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d119      	bne.n	8001e9c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	461a      	mov	r2, r3
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	212c      	movs	r1, #44	; 0x2c
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	3361      	adds	r3, #97	; 0x61
 8001e88:	2206      	movs	r2, #6
 8001e8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 ff05 	bl	8005ca6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb2:	d112      	bne.n	8001eda <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fef1 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ed8:	e24e      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	f040 80df 	bne.w	80020b0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d019      	beq.n	8001f2e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3348      	adds	r3, #72	; 0x48
 8001f08:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	0159      	lsls	r1, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	440b      	add	r3, r1
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f1c:	1ad2      	subs	r2, r2, r3
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	202c      	movs	r0, #44	; 0x2c
 8001f24:	fb00 f303 	mul.w	r3, r0, r3
 8001f28:	440b      	add	r3, r1
 8001f2a:	3350      	adds	r3, #80	; 0x50
 8001f2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	3361      	adds	r3, #97	; 0x61
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	335c      	adds	r3, #92	; 0x5c
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2301      	movs	r3, #1
 8001f62:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	333f      	adds	r3, #63	; 0x3f
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	212c      	movs	r1, #44	; 0x2c
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	333f      	adds	r3, #63	; 0x3f
 8001f86:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d111      	bne.n	8001fb0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fe85 	bl	8005ca6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2310      	movs	r3, #16
 8001fac:	6093      	str	r3, [r2, #8]
 8001fae:	e03a      	b.n	8002026 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	212c      	movs	r1, #44	; 0x2c
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	333f      	adds	r3, #63	; 0x3f
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d009      	beq.n	8001fd8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	212c      	movs	r1, #44	; 0x2c
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	333f      	adds	r3, #63	; 0x3f
 8001fd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d126      	bne.n	8002026 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	0151      	lsls	r1, r2, #5
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	440a      	add	r2, r1
 8001fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ff6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	3360      	adds	r3, #96	; 0x60
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	b2d9      	uxtb	r1, r3
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	202c      	movs	r0, #44	; 0x2c
 8002014:	fb00 f303 	mul.w	r3, r0, r3
 8002018:	4413      	add	r3, r2
 800201a:	3360      	adds	r3, #96	; 0x60
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f005 f949 	bl	80072b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d12b      	bne.n	8002086 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3348      	adds	r3, #72	; 0x48
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	202c      	movs	r0, #44	; 0x2c
 8002044:	fb00 f202 	mul.w	r2, r0, r2
 8002048:	440a      	add	r2, r1
 800204a:	3240      	adds	r2, #64	; 0x40
 800204c:	8812      	ldrh	r2, [r2, #0]
 800204e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 818e 	beq.w	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	3354      	adds	r3, #84	; 0x54
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	f083 0301 	eor.w	r3, r3, #1
 8002070:	b2d8      	uxtb	r0, r3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	3354      	adds	r3, #84	; 0x54
 8002080:	4602      	mov	r2, r0
 8002082:	701a      	strb	r2, [r3, #0]
}
 8002084:	e178      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	4413      	add	r3, r2
 8002092:	3354      	adds	r3, #84	; 0x54
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2d8      	uxtb	r0, r3
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	212c      	movs	r1, #44	; 0x2c
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	3354      	adds	r3, #84	; 0x54
 80020aa:	4602      	mov	r2, r0
 80020ac:	701a      	strb	r2, [r3, #0]
}
 80020ae:	e163      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	f040 80f6 	bne.w	80022b4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3361      	adds	r3, #97	; 0x61
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d109      	bne.n	80020f0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3360      	adds	r3, #96	; 0x60
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e0c9      	b.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3361      	adds	r3, #97	; 0x61
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b05      	cmp	r3, #5
 8002102:	d109      	bne.n	8002118 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3360      	adds	r3, #96	; 0x60
 8002112:	2205      	movs	r2, #5
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e0b5      	b.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3361      	adds	r3, #97	; 0x61
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b06      	cmp	r3, #6
 800212a:	d009      	beq.n	8002140 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3361      	adds	r3, #97	; 0x61
 800213a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800213c:	2b08      	cmp	r3, #8
 800213e:	d150      	bne.n	80021e2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	335c      	adds	r3, #92	; 0x5c
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	202c      	movs	r0, #44	; 0x2c
 8002158:	fb00 f303 	mul.w	r3, r0, r3
 800215c:	440b      	add	r3, r1
 800215e:	335c      	adds	r3, #92	; 0x5c
 8002160:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	335c      	adds	r3, #92	; 0x5c
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d912      	bls.n	800219c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	335c      	adds	r3, #92	; 0x5c
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3360      	adds	r3, #96	; 0x60
 8002196:	2204      	movs	r2, #4
 8002198:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800219a:	e073      	b.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3360      	adds	r3, #96	; 0x60
 80021aa:	2202      	movs	r2, #2
 80021ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021c4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021cc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	461a      	mov	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021e0:	e050      	b.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	212c      	movs	r1, #44	; 0x2c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	3361      	adds	r3, #97	; 0x61
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d122      	bne.n	800223c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3360      	adds	r3, #96	; 0x60
 8002204:	2202      	movs	r2, #2
 8002206:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800221e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002226:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e023      	b.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3361      	adds	r3, #97	; 0x61
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b07      	cmp	r3, #7
 800224e:	d119      	bne.n	8002284 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	335c      	adds	r3, #92	; 0x5c
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	202c      	movs	r0, #44	; 0x2c
 8002268:	fb00 f303 	mul.w	r3, r0, r3
 800226c:	440b      	add	r3, r1
 800226e:	335c      	adds	r3, #92	; 0x5c
 8002270:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	3360      	adds	r3, #96	; 0x60
 8002280:	2204      	movs	r2, #4
 8002282:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	461a      	mov	r2, r3
 8002292:	2302      	movs	r3, #2
 8002294:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	b2d9      	uxtb	r1, r3
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	202c      	movs	r0, #44	; 0x2c
 80022a0:	fb00 f303 	mul.w	r3, r0, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3360      	adds	r3, #96	; 0x60
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f005 f803 	bl	80072b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022b2:	e061      	b.n	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d156      	bne.n	8002378 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	333f      	adds	r3, #63	; 0x3f
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d111      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	335c      	adds	r3, #92	; 0x5c
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	4611      	mov	r1, r2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 fcd3 	bl	8005ca6 <USB_HC_Halt>
 8002300:	e031      	b.n	8002366 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	333f      	adds	r3, #63	; 0x3f
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	333f      	adds	r3, #63	; 0x3f
 8002324:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002326:	2b02      	cmp	r3, #2
 8002328:	d11d      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	335c      	adds	r3, #92	; 0x5c
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d110      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3361      	adds	r3, #97	; 0x61
 8002352:	2203      	movs	r2, #3
 8002354:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fca0 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002372:	461a      	mov	r2, r3
 8002374:	2310      	movs	r3, #16
 8002376:	6093      	str	r3, [r2, #8]
}
 8002378:	bf00      	nop
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d11a      	bne.n	80023e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	461a      	mov	r2, r3
 80023be:	2304      	movs	r3, #4
 80023c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	3361      	adds	r3, #97	; 0x61
 80023d0:	2206      	movs	r2, #6
 80023d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fc61 	bl	8005ca6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80023e4:	e331      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d12e      	bne.n	800245a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	461a      	mov	r2, r3
 800240a:	2320      	movs	r3, #32
 800240c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	333d      	adds	r3, #61	; 0x3d
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	f040 8313 	bne.w	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	333d      	adds	r3, #61	; 0x3d
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3360      	adds	r3, #96	; 0x60
 8002444:	2202      	movs	r2, #2
 8002446:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fc27 	bl	8005ca6 <USB_HC_Halt>
}
 8002458:	e2f7      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002470:	d112      	bne.n	8002498 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	461a      	mov	r2, r3
 8002480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002484:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fc08 	bl	8005ca6 <USB_HC_Halt>
}
 8002496:	e2d8      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d140      	bne.n	8002530 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	335c      	adds	r3, #92	; 0x5c
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d111      	bne.n	80024fa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	333d      	adds	r3, #61	; 0x3d
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	461a      	mov	r2, r3
 80024f6:	2340      	movs	r3, #64	; 0x40
 80024f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	461a      	mov	r2, r3
 8002508:	2301      	movs	r3, #1
 800250a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3361      	adds	r3, #97	; 0x61
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fbbc 	bl	8005ca6 <USB_HC_Halt>
}
 800252e:	e28c      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b40      	cmp	r3, #64	; 0x40
 8002544:	d12c      	bne.n	80025a0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3361      	adds	r3, #97	; 0x61
 8002554:	2204      	movs	r2, #4
 8002556:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	333d      	adds	r3, #61	; 0x3d
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f003 fb8d 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	461a      	mov	r2, r3
 800259a:	2340      	movs	r3, #64	; 0x40
 800259c:	6093      	str	r3, [r2, #8]
}
 800259e:	e254      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d11a      	bne.n	80025ec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	461a      	mov	r2, r3
 80025c4:	2308      	movs	r3, #8
 80025c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3361      	adds	r3, #97	; 0x61
 80025d6:	2205      	movs	r2, #5
 80025d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fb5e 	bl	8005ca6 <USB_HC_Halt>
}
 80025ea:	e22e      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d140      	bne.n	8002684 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	335c      	adds	r3, #92	; 0x5c
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	212c      	movs	r1, #44	; 0x2c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	3361      	adds	r3, #97	; 0x61
 8002622:	2203      	movs	r2, #3
 8002624:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	333d      	adds	r3, #61	; 0x3d
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d112      	bne.n	8002660 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	333c      	adds	r3, #60	; 0x3c
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	333d      	adds	r3, #61	; 0x3d
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fb1b 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	461a      	mov	r2, r3
 800267e:	2310      	movs	r3, #16
 8002680:	6093      	str	r3, [r2, #8]
}
 8002682:	e1e2      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b80      	cmp	r3, #128	; 0x80
 8002698:	d164      	bne.n	8002764 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d111      	bne.n	80026c6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3361      	adds	r3, #97	; 0x61
 80026b0:	2206      	movs	r2, #6
 80026b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 faf1 	bl	8005ca6 <USB_HC_Halt>
 80026c4:	e044      	b.n	8002750 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	335c      	adds	r3, #92	; 0x5c
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	202c      	movs	r0, #44	; 0x2c
 80026de:	fb00 f303 	mul.w	r3, r0, r3
 80026e2:	440b      	add	r3, r1
 80026e4:	335c      	adds	r3, #92	; 0x5c
 80026e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	335c      	adds	r3, #92	; 0x5c
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d920      	bls.n	800273e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	335c      	adds	r3, #92	; 0x5c
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3360      	adds	r3, #96	; 0x60
 800271c:	2204      	movs	r2, #4
 800271e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	b2d9      	uxtb	r1, r3
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	202c      	movs	r0, #44	; 0x2c
 800272a:	fb00 f303 	mul.w	r3, r0, r3
 800272e:	4413      	add	r3, r2
 8002730:	3360      	adds	r3, #96	; 0x60
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f004 fdbe 	bl	80072b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800273c:	e008      	b.n	8002750 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3360      	adds	r3, #96	; 0x60
 800274c:	2202      	movs	r2, #2
 800274e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	461a      	mov	r2, r3
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	6093      	str	r3, [r2, #8]
}
 8002762:	e172      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277a:	d11b      	bne.n	80027b4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	3361      	adds	r3, #97	; 0x61
 800278a:	2208      	movs	r2, #8
 800278c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f003 fa84 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	461a      	mov	r2, r3
 80027ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b0:	6093      	str	r3, [r2, #8]
}
 80027b2:	e14a      	b.n	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	f040 813f 	bne.w	8002a4a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3361      	adds	r3, #97	; 0x61
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d17d      	bne.n	80028dc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	3360      	adds	r3, #96	; 0x60
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	333f      	adds	r3, #63	; 0x3f
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d00a      	beq.n	800281c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	333f      	adds	r3, #63	; 0x3f
 8002814:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002816:	2b03      	cmp	r3, #3
 8002818:	f040 8100 	bne.w	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d113      	bne.n	800284c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3355      	adds	r3, #85	; 0x55
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f083 0301 	eor.w	r3, r3, #1
 8002838:	b2d8      	uxtb	r0, r3
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3355      	adds	r3, #85	; 0x55
 8002848:	4602      	mov	r2, r0
 800284a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b01      	cmp	r3, #1
 8002852:	f040 80e3 	bne.w	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	334c      	adds	r3, #76	; 0x4c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80d8 	beq.w	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	334c      	adds	r3, #76	; 0x4c
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	202c      	movs	r0, #44	; 0x2c
 8002882:	fb00 f202 	mul.w	r2, r0, r2
 8002886:	440a      	add	r2, r1
 8002888:	3240      	adds	r2, #64	; 0x40
 800288a:	8812      	ldrh	r2, [r2, #0]
 800288c:	4413      	add	r3, r2
 800288e:	3b01      	subs	r3, #1
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	202c      	movs	r0, #44	; 0x2c
 8002896:	fb00 f202 	mul.w	r2, r0, r2
 800289a:	440a      	add	r2, r1
 800289c:	3240      	adds	r2, #64	; 0x40
 800289e:	8812      	ldrh	r2, [r2, #0]
 80028a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80b5 	beq.w	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	3355      	adds	r3, #85	; 0x55
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b2d8      	uxtb	r0, r3
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3355      	adds	r3, #85	; 0x55
 80028d6:	4602      	mov	r2, r0
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e09f      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3361      	adds	r3, #97	; 0x61
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d109      	bne.n	8002904 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3360      	adds	r3, #96	; 0x60
 80028fe:	2202      	movs	r2, #2
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e08b      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3361      	adds	r3, #97	; 0x61
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d109      	bne.n	800292c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3360      	adds	r3, #96	; 0x60
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e077      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3361      	adds	r3, #97	; 0x61
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d109      	bne.n	8002954 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3360      	adds	r3, #96	; 0x60
 800294e:	2205      	movs	r2, #5
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	e063      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3361      	adds	r3, #97	; 0x61
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b06      	cmp	r3, #6
 8002966:	d009      	beq.n	800297c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3361      	adds	r3, #97	; 0x61
 8002976:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002978:	2b08      	cmp	r3, #8
 800297a:	d14f      	bne.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	335c      	adds	r3, #92	; 0x5c
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	202c      	movs	r0, #44	; 0x2c
 8002994:	fb00 f303 	mul.w	r3, r0, r3
 8002998:	440b      	add	r3, r1
 800299a:	335c      	adds	r3, #92	; 0x5c
 800299c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d912      	bls.n	80029d8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	335c      	adds	r3, #92	; 0x5c
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3360      	adds	r3, #96	; 0x60
 80029d2:	2204      	movs	r2, #4
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e021      	b.n	8002a1c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3360      	adds	r3, #96	; 0x60
 80029e6:	2202      	movs	r2, #2
 80029e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a00:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a08:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	461a      	mov	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	b2d9      	uxtb	r1, r3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	202c      	movs	r0, #44	; 0x2c
 8002a38:	fb00 f303 	mul.w	r3, r0, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3360      	adds	r3, #96	; 0x60
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f004 fc37 	bl	80072b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a4a:	bf00      	nop
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b08a      	sub	sp, #40	; 0x28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	0c5b      	lsrs	r3, r3, #17
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d004      	beq.n	8002a98 <HCD_RXQLVL_IRQHandler+0x46>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	f000 80a9 	beq.w	8002be8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a96:	e0aa      	b.n	8002bee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80a6 	beq.w	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3344      	adds	r3, #68	; 0x44
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 809b 	beq.w	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3350      	adds	r3, #80	; 0x50
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	441a      	add	r2, r3
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	202c      	movs	r0, #44	; 0x2c
 8002ad0:	fb00 f303 	mul.w	r3, r0, r3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	334c      	adds	r3, #76	; 0x4c
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d87a      	bhi.n	8002bd4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3344      	adds	r3, #68	; 0x44
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	b292      	uxth	r2, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f002 fc56 	bl	80053a8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3344      	adds	r3, #68	; 0x44
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	441a      	add	r2, r3
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	202c      	movs	r0, #44	; 0x2c
 8002b16:	fb00 f303 	mul.w	r3, r0, r3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3344      	adds	r3, #68	; 0x44
 8002b1e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3350      	adds	r3, #80	; 0x50
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	441a      	add	r2, r3
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	202c      	movs	r0, #44	; 0x2c
 8002b3a:	fb00 f303 	mul.w	r3, r0, r3
 8002b3e:	440b      	add	r3, r1
 8002b40:	3350      	adds	r3, #80	; 0x50
 8002b42:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	0cdb      	lsrs	r3, r3, #19
 8002b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b58:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3340      	adds	r3, #64	; 0x40
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d13c      	bne.n	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d039      	beq.n	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b8e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b96:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3354      	adds	r3, #84	; 0x54
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	f083 0301 	eor.w	r3, r3, #1
 8002bbe:	b2d8      	uxtb	r0, r3
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3354      	adds	r3, #84	; 0x54
 8002bce:	4602      	mov	r2, r0
 8002bd0:	701a      	strb	r2, [r3, #0]
      break;
 8002bd2:	e00b      	b.n	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3360      	adds	r3, #96	; 0x60
 8002be2:	2204      	movs	r2, #4
 8002be4:	701a      	strb	r2, [r3, #0]
      break;
 8002be6:	e001      	b.n	8002bec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002bec:	bf00      	nop
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3728      	adds	r7, #40	; 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c22:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d10b      	bne.n	8002c46 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d102      	bne.n	8002c3e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f004 fb21 	bl	8007280 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d132      	bne.n	8002cb6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d126      	bne.n	8002cb0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d113      	bne.n	8002c92 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c74:	d106      	bne.n	8002c84 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f002 fd01 	bl	8005684 <USB_InitFSLSPClkSel>
 8002c82:	e011      	b.n	8002ca8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 fcfa 	bl	8005684 <USB_InitFSLSPClkSel>
 8002c90:	e00a      	b.n	8002ca8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d106      	bne.n	8002ca8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ca6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f004 fb13 	bl	80072d4 <HAL_HCD_PortEnabled_Callback>
 8002cae:	e002      	b.n	8002cb6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f004 fb1d 	bl	80072f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d103      	bne.n	8002cc8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f043 0320 	orr.w	r3, r3, #32
 8002cc6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e12b      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fe90 	bl	8000a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d40:	f001 fa20 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a81      	ldr	r2, [pc, #516]	; (8002f50 <HAL_I2C_Init+0x274>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d807      	bhi.n	8002d60 <HAL_I2C_Init+0x84>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a80      	ldr	r2, [pc, #512]	; (8002f54 <HAL_I2C_Init+0x278>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e006      	b.n	8002d6e <HAL_I2C_Init+0x92>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a7d      	ldr	r2, [pc, #500]	; (8002f58 <HAL_I2C_Init+0x27c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf94      	ite	ls
 8002d68:	2301      	movls	r3, #1
 8002d6a:	2300      	movhi	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0e7      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a78      	ldr	r2, [pc, #480]	; (8002f5c <HAL_I2C_Init+0x280>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0c9b      	lsrs	r3, r3, #18
 8002d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a6a      	ldr	r2, [pc, #424]	; (8002f50 <HAL_I2C_Init+0x274>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d802      	bhi.n	8002db0 <HAL_I2C_Init+0xd4>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	e009      	b.n	8002dc4 <HAL_I2C_Init+0xe8>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a69      	ldr	r2, [pc, #420]	; (8002f60 <HAL_I2C_Init+0x284>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	495c      	ldr	r1, [pc, #368]	; (8002f50 <HAL_I2C_Init+0x274>)
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d819      	bhi.n	8002e18 <HAL_I2C_Init+0x13c>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e59      	subs	r1, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002df8:	400b      	ands	r3, r1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_I2C_Init+0x138>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e59      	subs	r1, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e12:	e051      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e14:	2304      	movs	r3, #4
 8002e16:	e04f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d111      	bne.n	8002e44 <HAL_I2C_Init+0x168>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1e58      	subs	r0, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	440b      	add	r3, r1
 8002e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e012      	b.n	8002e6a <HAL_I2C_Init+0x18e>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	0099      	lsls	r1, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Init+0x196>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e022      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10e      	bne.n	8002e98 <HAL_I2C_Init+0x1bc>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1e58      	subs	r0, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	440b      	add	r3, r1
 8002e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e96:	e00f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0099      	lsls	r1, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	6809      	ldr	r1, [r1, #0]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6911      	ldr	r1, [r2, #16]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68d2      	ldr	r2, [r2, #12]
 8002ef2:	4311      	orrs	r1, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	000186a0 	.word	0x000186a0
 8002f54:	001e847f 	.word	0x001e847f
 8002f58:	003d08ff 	.word	0x003d08ff
 8002f5c:	431bde83 	.word	0x431bde83
 8002f60:	10624dd3 	.word	0x10624dd3

08002f64 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e128      	b.n	80031c8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a90      	ldr	r2, [pc, #576]	; (80031d0 <HAL_I2S_Init+0x26c>)
 8002f8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7fd fd91 	bl	8000ab8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fac:	f023 030f 	bic.w	r3, r3, #15
 8002fb0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d060      	beq.n	8003084 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fca:	2310      	movs	r3, #16
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e001      	b.n	8002fd4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d802      	bhi.n	8002fe2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	f001 f9c4 	bl	8004370 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fe8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff2:	d125      	bne.n	8003040 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d010      	beq.n	800301e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	fbb2 f2f3 	udiv	r2, r2, r3
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	3305      	adds	r3, #5
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e01f      	b.n	800305e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	fbb2 f2f3 	udiv	r2, r2, r3
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	461a      	mov	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	3305      	adds	r3, #5
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	e00e      	b.n	800305e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	fbb2 f2f3 	udiv	r2, r2, r3
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	461a      	mov	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	3305      	adds	r3, #5
 800305c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <HAL_I2S_Init+0x270>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	08db      	lsrs	r3, r3, #3
 8003068:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	e003      	b.n	800308c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003084:	2302      	movs	r3, #2
 8003086:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d902      	bls.n	8003098 <HAL_I2S_Init+0x134>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2bff      	cmp	r3, #255	; 0xff
 8003096:	d907      	bls.n	80030a8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309c:	f043 0210 	orr.w	r2, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e08f      	b.n	80031c8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	ea42 0103 	orr.w	r1, r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030c6:	f023 030f 	bic.w	r3, r3, #15
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6851      	ldr	r1, [r2, #4]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6892      	ldr	r2, [r2, #8]
 80030d2:	4311      	orrs	r1, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	68d2      	ldr	r2, [r2, #12]
 80030d8:	4311      	orrs	r1, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6992      	ldr	r2, [r2, #24]
 80030de:	430a      	orrs	r2, r1
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d161      	bne.n	80031b8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <HAL_I2S_Init+0x274>)
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a37      	ldr	r2, [pc, #220]	; (80031dc <HAL_I2S_Init+0x278>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d101      	bne.n	8003108 <HAL_I2S_Init+0x1a4>
 8003104:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <HAL_I2S_Init+0x27c>)
 8003106:	e001      	b.n	800310c <HAL_I2S_Init+0x1a8>
 8003108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	4932      	ldr	r1, [pc, #200]	; (80031dc <HAL_I2S_Init+0x278>)
 8003114:	428a      	cmp	r2, r1
 8003116:	d101      	bne.n	800311c <HAL_I2S_Init+0x1b8>
 8003118:	4a31      	ldr	r2, [pc, #196]	; (80031e0 <HAL_I2S_Init+0x27c>)
 800311a:	e001      	b.n	8003120 <HAL_I2S_Init+0x1bc>
 800311c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003120:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003124:	f023 030f 	bic.w	r3, r3, #15
 8003128:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <HAL_I2S_Init+0x278>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <HAL_I2S_Init+0x1d4>
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <HAL_I2S_Init+0x27c>)
 8003136:	e001      	b.n	800313c <HAL_I2S_Init+0x1d8>
 8003138:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800313c:	2202      	movs	r2, #2
 800313e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a25      	ldr	r2, [pc, #148]	; (80031dc <HAL_I2S_Init+0x278>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_I2S_Init+0x1ea>
 800314a:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <HAL_I2S_Init+0x27c>)
 800314c:	e001      	b.n	8003152 <HAL_I2S_Init+0x1ee>
 800314e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315e:	d003      	beq.n	8003168 <HAL_I2S_Init+0x204>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	e001      	b.n	8003174 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800317e:	4313      	orrs	r3, r2
 8003180:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003188:	4313      	orrs	r3, r2
 800318a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003192:	4313      	orrs	r3, r2
 8003194:	b29a      	uxth	r2, r3
 8003196:	897b      	ldrh	r3, [r7, #10]
 8003198:	4313      	orrs	r3, r2
 800319a:	b29b      	uxth	r3, r3
 800319c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031a0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <HAL_I2S_Init+0x278>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_I2S_Init+0x24c>
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <HAL_I2S_Init+0x27c>)
 80031ae:	e001      	b.n	80031b4 <HAL_I2S_Init+0x250>
 80031b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b4:	897a      	ldrh	r2, [r7, #10]
 80031b6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3720      	adds	r7, #32
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	080032db 	.word	0x080032db
 80031d4:	cccccccd 	.word	0xcccccccd
 80031d8:	080033f1 	.word	0x080033f1
 80031dc:	40003800 	.word	0x40003800
 80031e0:	40003400 	.word	0x40003400

080031e4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	881a      	ldrh	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	1c9a      	adds	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10e      	bne.n	8003274 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003264:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ffb8 	bl	80031e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	b292      	uxth	r2, r2
 8003290:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	1c9a      	adds	r2, r3, #2
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10e      	bne.n	80032d2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff93 	bl	80031f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d13a      	bne.n	800336c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d109      	bne.n	8003314 <I2S_IRQHandler+0x3a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d102      	bne.n	8003314 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffb4 	bl	800327c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d126      	bne.n	800336c <I2S_IRQHandler+0x92>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b20      	cmp	r3, #32
 800332a:	d11f      	bne.n	800336c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800333a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	f043 0202 	orr.w	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ff50 	bl	800320c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b03      	cmp	r3, #3
 8003376:	d136      	bne.n	80033e6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d109      	bne.n	8003396 <I2S_IRQHandler+0xbc>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d102      	bne.n	8003396 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff45 	bl	8003220 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d122      	bne.n	80033e6 <I2S_IRQHandler+0x10c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d11b      	bne.n	80033e6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033bc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f043 0204 	orr.w	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ff13 	bl	800320c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033e6:	bf00      	nop
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a92      	ldr	r2, [pc, #584]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800340a:	4b92      	ldr	r3, [pc, #584]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800340c:	e001      	b.n	8003412 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800340e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a8b      	ldr	r2, [pc, #556]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003428:	4b8a      	ldr	r3, [pc, #552]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800342a:	e001      	b.n	8003430 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800342c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343c:	d004      	beq.n	8003448 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f040 8099 	bne.w	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b02      	cmp	r3, #2
 8003450:	d107      	bne.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f925 	bl	80036ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d107      	bne.n	800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9c8 	bl	800380c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d13a      	bne.n	80034fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d035      	beq.n	80034fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6e      	ldr	r2, [pc, #440]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800349a:	4b6e      	ldr	r3, [pc, #440]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800349c:	e001      	b.n	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800349e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4969      	ldr	r1, [pc, #420]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034aa:	428b      	cmp	r3, r1
 80034ac:	d101      	bne.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034ae:	4b69      	ldr	r3, [pc, #420]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034b0:	e001      	b.n	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f043 0202 	orr.w	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fe88 	bl	800320c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b08      	cmp	r3, #8
 8003504:	f040 80c3 	bne.w	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80bd 	beq.w	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003522:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a49      	ldr	r2, [pc, #292]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800352e:	4b49      	ldr	r3, [pc, #292]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003530:	e001      	b.n	8003536 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4944      	ldr	r1, [pc, #272]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800353e:	428b      	cmp	r3, r1
 8003540:	d101      	bne.n	8003546 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003542:	4b44      	ldr	r3, [pc, #272]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003544:	e001      	b.n	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800354e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fe4a 	bl	800320c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003578:	e089      	b.n	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b02      	cmp	r3, #2
 8003582:	d107      	bne.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8be 	bl	8003710 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d107      	bne.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f8fd 	bl	80037a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d12f      	bne.n	8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d02a      	beq.n	8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035dc:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035de:	e001      	b.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4919      	ldr	r1, [pc, #100]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ec:	428b      	cmp	r3, r1
 80035ee:	d101      	bne.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f2:	e001      	b.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f043 0202 	orr.w	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fdfa 	bl	800320c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d136      	bne.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d031      	beq.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a07      	ldr	r2, [pc, #28]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003638:	e001      	b.n	800363e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800363a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4902      	ldr	r1, [pc, #8]	; (8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003646:	428b      	cmp	r3, r1
 8003648:	d106      	bne.n	8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800364a:	4b02      	ldr	r3, [pc, #8]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800364c:	e006      	b.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800364e:	bf00      	nop
 8003650:	40003800 	.word	0x40003800
 8003654:	40003400 	.word	0x40003400
 8003658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003660:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003670:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f043 0204 	orr.w	r2, r3, #4
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fdc0 	bl	800320c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800368c:	e000      	b.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800368e:	bf00      	nop
}
 8003690:	bf00      	nop
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c99      	adds	r1, r3, #2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6251      	str	r1, [r2, #36]	; 0x24
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d113      	bne.n	8003706 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ffc9 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c99      	adds	r1, r3, #2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6251      	str	r1, [r2, #36]	; 0x24
 8003722:	8819      	ldrh	r1, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <I2SEx_TxISR_I2SExt+0x90>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <I2SEx_TxISR_I2SExt+0x22>
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <I2SEx_TxISR_I2SExt+0x94>)
 8003730:	e001      	b.n	8003736 <I2SEx_TxISR_I2SExt+0x26>
 8003732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003736:	460a      	mov	r2, r1
 8003738:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d121      	bne.n	8003796 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <I2SEx_TxISR_I2SExt+0x90>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <I2SEx_TxISR_I2SExt+0x50>
 800375c:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <I2SEx_TxISR_I2SExt+0x94>)
 800375e:	e001      	b.n	8003764 <I2SEx_TxISR_I2SExt+0x54>
 8003760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	490d      	ldr	r1, [pc, #52]	; (80037a0 <I2SEx_TxISR_I2SExt+0x90>)
 800376c:	428b      	cmp	r3, r1
 800376e:	d101      	bne.n	8003774 <I2SEx_TxISR_I2SExt+0x64>
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <I2SEx_TxISR_I2SExt+0x94>)
 8003772:	e001      	b.n	8003778 <I2SEx_TxISR_I2SExt+0x68>
 8003774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003778:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800377c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff81 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40003800 	.word	0x40003800
 80037a4:	40003400 	.word	0x40003400

080037a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68d8      	ldr	r0, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	1c99      	adds	r1, r3, #2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037c0:	b282      	uxth	r2, r0
 80037c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d113      	bne.n	8003804 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ff4a 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a20      	ldr	r2, [pc, #128]	; (800389c <I2SEx_RxISR_I2SExt+0x90>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <I2SEx_RxISR_I2SExt+0x16>
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <I2SEx_RxISR_I2SExt+0x94>)
 8003820:	e001      	b.n	8003826 <I2SEx_RxISR_I2SExt+0x1a>
 8003822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003826:	68d8      	ldr	r0, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	1c99      	adds	r1, r3, #2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003832:	b282      	uxth	r2, r0
 8003834:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d121      	bne.n	8003892 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <I2SEx_RxISR_I2SExt+0x90>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <I2SEx_RxISR_I2SExt+0x50>
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <I2SEx_RxISR_I2SExt+0x94>)
 800385a:	e001      	b.n	8003860 <I2SEx_RxISR_I2SExt+0x54>
 800385c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	490d      	ldr	r1, [pc, #52]	; (800389c <I2SEx_RxISR_I2SExt+0x90>)
 8003868:	428b      	cmp	r3, r1
 800386a:	d101      	bne.n	8003870 <I2SEx_RxISR_I2SExt+0x64>
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <I2SEx_RxISR_I2SExt+0x94>)
 800386e:	e001      	b.n	8003874 <I2SEx_RxISR_I2SExt+0x68>
 8003870:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003874:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003878:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d106      	bne.n	8003892 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff03 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40003800 	.word	0x40003800
 80038a0:	40003400 	.word	0x40003400

080038a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e267      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d075      	beq.n	80039ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038c2:	4b88      	ldr	r3, [pc, #544]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d00c      	beq.n	80038e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ce:	4b85      	ldr	r3, [pc, #532]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d112      	bne.n	8003900 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038da:	4b82      	ldr	r3, [pc, #520]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e6:	d10b      	bne.n	8003900 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e8:	4b7e      	ldr	r3, [pc, #504]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d05b      	beq.n	80039ac <HAL_RCC_OscConfig+0x108>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d157      	bne.n	80039ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e242      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003908:	d106      	bne.n	8003918 <HAL_RCC_OscConfig+0x74>
 800390a:	4b76      	ldr	r3, [pc, #472]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a75      	ldr	r2, [pc, #468]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e01d      	b.n	8003954 <HAL_RCC_OscConfig+0xb0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0x98>
 8003922:	4b70      	ldr	r3, [pc, #448]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a6f      	ldr	r2, [pc, #444]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	4b6d      	ldr	r3, [pc, #436]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a6c      	ldr	r2, [pc, #432]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0xb0>
 800393c:	4b69      	ldr	r3, [pc, #420]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a68      	ldr	r2, [pc, #416]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b66      	ldr	r3, [pc, #408]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a65      	ldr	r2, [pc, #404]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800394e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fd fad8 	bl	8000f10 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003964:	f7fd fad4 	bl	8000f10 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	; 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e207      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b5b      	ldr	r3, [pc, #364]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0xc0>
 8003982:	e014      	b.n	80039ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fd fac4 	bl	8000f10 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800398c:	f7fd fac0 	bl	8000f10 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e1f3      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399e:	4b51      	ldr	r3, [pc, #324]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0xe8>
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d063      	beq.n	8003a82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ba:	4b4a      	ldr	r3, [pc, #296]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d11c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d2:	4b44      	ldr	r3, [pc, #272]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d116      	bne.n	8003a0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_RCC_OscConfig+0x152>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e1c7      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f6:	4b3b      	ldr	r3, [pc, #236]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4937      	ldr	r1, [pc, #220]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	e03a      	b.n	8003a82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a14:	4b34      	ldr	r3, [pc, #208]	; (8003ae8 <HAL_RCC_OscConfig+0x244>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1a:	f7fd fa79 	bl	8000f10 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a22:	f7fd fa75 	bl	8000f10 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e1a8      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a34:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b28      	ldr	r3, [pc, #160]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4925      	ldr	r1, [pc, #148]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]
 8003a54:	e015      	b.n	8003a82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a56:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_RCC_OscConfig+0x244>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fa58 	bl	8000f10 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a64:	f7fd fa54 	bl	8000f10 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e187      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a76:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d036      	beq.n	8003afc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <HAL_RCC_OscConfig+0x248>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fa38 	bl	8000f10 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fd fa34 	bl	8000f10 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e167      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x200>
 8003ac2:	e01b      	b.n	8003afc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac4:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_RCC_OscConfig+0x248>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fd fa21 	bl	8000f10 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad0:	e00e      	b.n	8003af0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fd fa1d 	bl	8000f10 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d907      	bls.n	8003af0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e150      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	42470000 	.word	0x42470000
 8003aec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af0:	4b88      	ldr	r3, [pc, #544]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ea      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8097 	beq.w	8003c38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0e:	4b81      	ldr	r3, [pc, #516]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	4b7d      	ldr	r3, [pc, #500]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	4a7c      	ldr	r2, [pc, #496]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b28:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2a:	4b7a      	ldr	r3, [pc, #488]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	4b77      	ldr	r3, [pc, #476]	; (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d118      	bne.n	8003b78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b46:	4b74      	ldr	r3, [pc, #464]	; (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a73      	ldr	r2, [pc, #460]	; (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b52:	f7fd f9dd 	bl	8000f10 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5a:	f7fd f9d9 	bl	8000f10 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e10c      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_OscConfig+0x2ea>
 8003b80:	4b64      	ldr	r3, [pc, #400]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a63      	ldr	r2, [pc, #396]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8c:	e01c      	b.n	8003bc8 <HAL_RCC_OscConfig+0x324>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x30c>
 8003b96:	4b5f      	ldr	r3, [pc, #380]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	4a5e      	ldr	r2, [pc, #376]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba2:	4b5c      	ldr	r3, [pc, #368]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	4a5b      	ldr	r2, [pc, #364]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6713      	str	r3, [r2, #112]	; 0x70
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0x324>
 8003bb0:	4b58      	ldr	r3, [pc, #352]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	4a57      	ldr	r2, [pc, #348]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbc:	4b55      	ldr	r3, [pc, #340]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4a54      	ldr	r2, [pc, #336]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	f023 0304 	bic.w	r3, r3, #4
 8003bc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d015      	beq.n	8003bfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fd f99e 	bl	8000f10 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fd f99a 	bl	8000f10 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e0cb      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bee:	4b49      	ldr	r3, [pc, #292]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ee      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x334>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfc:	f7fd f988 	bl	8000f10 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c04:	f7fd f984 	bl	8000f10 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e0b5      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ee      	bne.n	8003c04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2c:	4b39      	ldr	r3, [pc, #228]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	4a38      	ldr	r2, [pc, #224]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80a1 	beq.w	8003d84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c42:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d05c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d141      	bne.n	8003cda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c56:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <HAL_RCC_OscConfig+0x478>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd f958 	bl	8000f10 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fd f954 	bl	8000f10 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e087      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	019b      	lsls	r3, r3, #6
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	041b      	lsls	r3, r3, #16
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	061b      	lsls	r3, r3, #24
 8003ca6:	491b      	ldr	r1, [pc, #108]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cac:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <HAL_RCC_OscConfig+0x478>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fd f92d 	bl	8000f10 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fd f929 	bl	8000f10 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e05c      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ccc:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x416>
 8003cd8:	e054      	b.n	8003d84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_RCC_OscConfig+0x478>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fd f916 	bl	8000f10 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd f912 	bl	8000f10 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e045      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x444>
 8003d06:	e03d      	b.n	8003d84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e038      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_RCC_OscConfig+0x4ec>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d028      	beq.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d121      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d11a      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d50:	4013      	ands	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d111      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	085b      	lsrs	r3, r3, #1
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800

08003d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0cc      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003da8:	4b68      	ldr	r3, [pc, #416]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d90c      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b65      	ldr	r3, [pc, #404]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b63      	ldr	r3, [pc, #396]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0b8      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d020      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de8:	4b59      	ldr	r3, [pc, #356]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a58      	ldr	r2, [pc, #352]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003df2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e00:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a52      	ldr	r2, [pc, #328]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0c:	4b50      	ldr	r3, [pc, #320]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	494d      	ldr	r1, [pc, #308]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d044      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d119      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e07f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d003      	beq.n	8003e52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e52:	4b3f      	ldr	r3, [pc, #252]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e06f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e067      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e72:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4934      	ldr	r1, [pc, #208]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e84:	f7fd f844 	bl	8000f10 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f7fd f840 	bl	8000f10 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e04f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 020c 	and.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d1eb      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d20c      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e032      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4916      	ldr	r1, [pc, #88]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f06:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	490e      	ldr	r1, [pc, #56]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f1a:	f000 f821 	bl	8003f60 <HAL_RCC_GetSysClockFreq>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	490a      	ldr	r1, [pc, #40]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003f2c:	5ccb      	ldrb	r3, [r1, r3]
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_RCC_ClockConfig+0x1c8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc ffa4 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023c00 	.word	0x40023c00
 8003f50:	40023800 	.word	0x40023800
 8003f54:	080078f4 	.word	0x080078f4
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	20000004 	.word	0x20000004

08003f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f64:	b094      	sub	sp, #80	; 0x50
 8003f66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f70:	2300      	movs	r3, #0
 8003f72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f78:	4b79      	ldr	r3, [pc, #484]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d00d      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	f200 80e1 	bhi.w	800414c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_RCC_GetSysClockFreq+0x34>
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f92:	e0db      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f94:	4b73      	ldr	r3, [pc, #460]	; (8004164 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f98:	e0db      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f9a:	4b73      	ldr	r3, [pc, #460]	; (8004168 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f9e:	e0d8      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003faa:	4b6d      	ldr	r3, [pc, #436]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d063      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003fca:	2300      	movs	r3, #0
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	f04f 0000 	mov.w	r0, #0
 8003fda:	f04f 0100 	mov.w	r1, #0
 8003fde:	0159      	lsls	r1, r3, #5
 8003fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe4:	0150      	lsls	r0, r2, #5
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4621      	mov	r1, r4
 8003fec:	1a51      	subs	r1, r2, r1
 8003fee:	6139      	str	r1, [r7, #16]
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004004:	4659      	mov	r1, fp
 8004006:	018b      	lsls	r3, r1, #6
 8004008:	4651      	mov	r1, sl
 800400a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800400e:	4651      	mov	r1, sl
 8004010:	018a      	lsls	r2, r1, #6
 8004012:	4651      	mov	r1, sl
 8004014:	ebb2 0801 	subs.w	r8, r2, r1
 8004018:	4659      	mov	r1, fp
 800401a:	eb63 0901 	sbc.w	r9, r3, r1
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800402e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004032:	4690      	mov	r8, r2
 8004034:	4699      	mov	r9, r3
 8004036:	4623      	mov	r3, r4
 8004038:	eb18 0303 	adds.w	r3, r8, r3
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	462b      	mov	r3, r5
 8004040:	eb49 0303 	adc.w	r3, r9, r3
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004052:	4629      	mov	r1, r5
 8004054:	024b      	lsls	r3, r1, #9
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800405c:	4621      	mov	r1, r4
 800405e:	024a      	lsls	r2, r1, #9
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004066:	2200      	movs	r2, #0
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
 800406a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800406c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004070:	f7fc f8aa 	bl	80001c8 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800407c:	e058      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b38      	ldr	r3, [pc, #224]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	2200      	movs	r2, #0
 8004086:	4618      	mov	r0, r3
 8004088:	4611      	mov	r1, r2
 800408a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	2300      	movs	r3, #0
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
 8004094:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004098:	4642      	mov	r2, r8
 800409a:	464b      	mov	r3, r9
 800409c:	f04f 0000 	mov.w	r0, #0
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	0159      	lsls	r1, r3, #5
 80040a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040aa:	0150      	lsls	r0, r2, #5
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4641      	mov	r1, r8
 80040b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80040b6:	4649      	mov	r1, r9
 80040b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040d0:	ebb2 040a 	subs.w	r4, r2, sl
 80040d4:	eb63 050b 	sbc.w	r5, r3, fp
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	00eb      	lsls	r3, r5, #3
 80040e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e6:	00e2      	lsls	r2, r4, #3
 80040e8:	4614      	mov	r4, r2
 80040ea:	461d      	mov	r5, r3
 80040ec:	4643      	mov	r3, r8
 80040ee:	18e3      	adds	r3, r4, r3
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	464b      	mov	r3, r9
 80040f4:	eb45 0303 	adc.w	r3, r5, r3
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004106:	4629      	mov	r1, r5
 8004108:	028b      	lsls	r3, r1, #10
 800410a:	4621      	mov	r1, r4
 800410c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004110:	4621      	mov	r1, r4
 8004112:	028a      	lsls	r2, r1, #10
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411a:	2200      	movs	r2, #0
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	61fa      	str	r2, [r7, #28]
 8004120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004124:	f7fc f850 	bl	80001c8 <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4613      	mov	r3, r2
 800412e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	3301      	adds	r3, #1
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004140:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800414a:	e002      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetSysClockFreq+0x204>)
 800414e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004154:	4618      	mov	r0, r3
 8004156:	3750      	adds	r7, #80	; 0x50
 8004158:	46bd      	mov	sp, r7
 800415a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800
 8004164:	00f42400 	.word	0x00f42400
 8004168:	007a1200 	.word	0x007a1200

0800416c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <HAL_RCC_GetHCLKFreq+0x14>)
 8004172:	681b      	ldr	r3, [r3, #0]
}
 8004174:	4618      	mov	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000000 	.word	0x20000000

08004184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004188:	f7ff fff0 	bl	800416c <HAL_RCC_GetHCLKFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0a9b      	lsrs	r3, r3, #10
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4903      	ldr	r1, [pc, #12]	; (80041a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40023800 	.word	0x40023800
 80041a8:	08007904 	.word	0x08007904

080041ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d035      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041d4:	4b62      	ldr	r3, [pc, #392]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041da:	f7fc fe99 	bl	8000f10 <HAL_GetTick>
 80041de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041e2:	f7fc fe95 	bl	8000f10 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0b0      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f4:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	019a      	lsls	r2, r3, #6
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	071b      	lsls	r3, r3, #28
 800420c:	4955      	ldr	r1, [pc, #340]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004214:	4b52      	ldr	r3, [pc, #328]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800421a:	f7fc fe79 	bl	8000f10 <HAL_GetTick>
 800421e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004222:	f7fc fe75 	bl	8000f10 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e090      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004234:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8083 	beq.w	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	4b44      	ldr	r3, [pc, #272]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4a43      	ldr	r2, [pc, #268]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	6413      	str	r3, [r2, #64]	; 0x40
 800425e:	4b41      	ldr	r3, [pc, #260]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800426a:	4b3f      	ldr	r3, [pc, #252]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a3e      	ldr	r2, [pc, #248]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004274:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004276:	f7fc fe4b 	bl	8000f10 <HAL_GetTick>
 800427a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800427e:	f7fc fe47 	bl	8000f10 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e062      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004290:	4b35      	ldr	r3, [pc, #212]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800429c:	4b31      	ldr	r3, [pc, #196]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d02f      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d028      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ba:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042c4:	4b29      	ldr	r3, [pc, #164]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ca:	4b28      	ldr	r3, [pc, #160]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042d0:	4a24      	ldr	r2, [pc, #144]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042d6:	4b23      	ldr	r3, [pc, #140]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d114      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042e2:	f7fc fe15 	bl	8000f10 <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e8:	e00a      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fc fe11 	bl	8000f10 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e02a      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004300:	4b18      	ldr	r3, [pc, #96]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ee      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004318:	d10d      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432e:	490d      	ldr	r1, [pc, #52]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004330:	4313      	orrs	r3, r2
 8004332:	608b      	str	r3, [r1, #8]
 8004334:	e005      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004340:	6093      	str	r3, [r2, #8]
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434e:	4905      	ldr	r1, [pc, #20]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004350:	4313      	orrs	r3, r2
 8004352:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	42470068 	.word	0x42470068
 8004364:	40023800 	.word	0x40023800
 8004368:	40007000 	.word	0x40007000
 800436c:	42470e40 	.word	0x42470e40

08004370 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d13e      	bne.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d12f      	bne.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043a4:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043a6:	617b      	str	r3, [r7, #20]
          break;
 80043a8:	e02f      	b.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043aa:	4b1c      	ldr	r3, [pc, #112]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b6:	d108      	bne.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043b8:	4b18      	ldr	r3, [pc, #96]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c0:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	e007      	b.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043ca:	4b14      	ldr	r3, [pc, #80]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d2:	4a15      	ldr	r2, [pc, #84]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043da:	4b10      	ldr	r3, [pc, #64]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	fb02 f303 	mul.w	r3, r2, r3
 80043ec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043ee:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f4:	0f1b      	lsrs	r3, r3, #28
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	617b      	str	r3, [r7, #20]
          break;
 8004402:	e002      	b.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
          break;
 8004408:	bf00      	nop
        }
      }
      break;
 800440a:	bf00      	nop
    }
  }
  return frequency;
 800440c:	697b      	ldr	r3, [r7, #20]
}
 800440e:	4618      	mov	r0, r3
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800
 8004420:	00bb8000 	.word	0x00bb8000
 8004424:	007a1200 	.word	0x007a1200
 8004428:	00f42400 	.word	0x00f42400

0800442c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07b      	b.n	8004536 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d108      	bne.n	8004458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444e:	d009      	beq.n	8004464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	61da      	str	r2, [r3, #28]
 8004456:	e005      	b.n	8004464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc fb9a 	bl	8000bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	ea42 0103 	orr.w	r1, r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	f003 0104 	and.w	r1, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0210 	and.w	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004524:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e041      	b.n	80045d4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7fc fb6f 	bl	8000c48 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f000 fb21 	bl	8004bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_IC_Start_IT+0x1e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	e013      	b.n	8004622 <HAL_TIM_IC_Start_IT+0x46>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d104      	bne.n	800460a <HAL_TIM_IC_Start_IT+0x2e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004606:	b2db      	uxtb	r3, r3
 8004608:	e00b      	b.n	8004622 <HAL_TIM_IC_Start_IT+0x46>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d104      	bne.n	800461a <HAL_TIM_IC_Start_IT+0x3e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004616:	b2db      	uxtb	r3, r3
 8004618:	e003      	b.n	8004622 <HAL_TIM_IC_Start_IT+0x46>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004620:	b2db      	uxtb	r3, r3
 8004622:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d104      	bne.n	8004634 <HAL_TIM_IC_Start_IT+0x58>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e013      	b.n	800465c <HAL_TIM_IC_Start_IT+0x80>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b04      	cmp	r3, #4
 8004638:	d104      	bne.n	8004644 <HAL_TIM_IC_Start_IT+0x68>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e00b      	b.n	800465c <HAL_TIM_IC_Start_IT+0x80>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b08      	cmp	r3, #8
 8004648:	d104      	bne.n	8004654 <HAL_TIM_IC_Start_IT+0x78>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004650:	b2db      	uxtb	r3, r3
 8004652:	e003      	b.n	800465c <HAL_TIM_IC_Start_IT+0x80>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800465a:	b2db      	uxtb	r3, r3
 800465c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800465e:	7bbb      	ldrb	r3, [r7, #14]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d102      	bne.n	800466a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004664:	7b7b      	ldrb	r3, [r7, #13]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d001      	beq.n	800466e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e0cc      	b.n	8004808 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_TIM_IC_Start_IT+0xa2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800467c:	e013      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0xca>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d104      	bne.n	800468e <HAL_TIM_IC_Start_IT+0xb2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800468c:	e00b      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0xca>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d104      	bne.n	800469e <HAL_TIM_IC_Start_IT+0xc2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800469c:	e003      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0xca>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_IC_Start_IT+0xda>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046b4:	e013      	b.n	80046de <HAL_TIM_IC_Start_IT+0x102>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_IC_Start_IT+0xea>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046c4:	e00b      	b.n	80046de <HAL_TIM_IC_Start_IT+0x102>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_IC_Start_IT+0xfa>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d4:	e003      	b.n	80046de <HAL_TIM_IC_Start_IT+0x102>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b0c      	cmp	r3, #12
 80046e2:	d841      	bhi.n	8004768 <HAL_TIM_IC_Start_IT+0x18c>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <HAL_TIM_IC_Start_IT+0x110>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004721 	.word	0x08004721
 80046f0:	08004769 	.word	0x08004769
 80046f4:	08004769 	.word	0x08004769
 80046f8:	08004769 	.word	0x08004769
 80046fc:	08004733 	.word	0x08004733
 8004700:	08004769 	.word	0x08004769
 8004704:	08004769 	.word	0x08004769
 8004708:	08004769 	.word	0x08004769
 800470c:	08004745 	.word	0x08004745
 8004710:	08004769 	.word	0x08004769
 8004714:	08004769 	.word	0x08004769
 8004718:	08004769 	.word	0x08004769
 800471c:	08004757 	.word	0x08004757
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0202 	orr.w	r2, r2, #2
 800472e:	60da      	str	r2, [r3, #12]
      break;
 8004730:	e01d      	b.n	800476e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0204 	orr.w	r2, r2, #4
 8004740:	60da      	str	r2, [r3, #12]
      break;
 8004742:	e014      	b.n	800476e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0208 	orr.w	r2, r2, #8
 8004752:	60da      	str	r2, [r3, #12]
      break;
 8004754:	e00b      	b.n	800476e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0210 	orr.w	r2, r2, #16
 8004764:	60da      	str	r2, [r3, #12]
      break;
 8004766:	e002      	b.n	800476e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      break;
 800476c:	bf00      	nop
  }

  if (status == HAL_OK)
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d148      	bne.n	8004806 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2201      	movs	r2, #1
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fbeb 	bl	8004f58 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a22      	ldr	r2, [pc, #136]	; (8004810 <HAL_TIM_IC_Start_IT+0x234>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d022      	beq.n	80047d2 <HAL_TIM_IC_Start_IT+0x1f6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004794:	d01d      	beq.n	80047d2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1e      	ldr	r2, [pc, #120]	; (8004814 <HAL_TIM_IC_Start_IT+0x238>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d018      	beq.n	80047d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <HAL_TIM_IC_Start_IT+0x23c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d013      	beq.n	80047d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	; (800481c <HAL_TIM_IC_Start_IT+0x240>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00e      	beq.n	80047d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a19      	ldr	r2, [pc, #100]	; (8004820 <HAL_TIM_IC_Start_IT+0x244>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d009      	beq.n	80047d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_TIM_IC_Start_IT+0x248>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a16      	ldr	r2, [pc, #88]	; (8004828 <HAL_TIM_IC_Start_IT+0x24c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d111      	bne.n	80047f6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d010      	beq.n	8004806 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f4:	e007      	b.n	8004806 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40010000 	.word	0x40010000
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800
 800481c:	40000c00 	.word	0x40000c00
 8004820:	40010400 	.word	0x40010400
 8004824:	40014000 	.word	0x40014000
 8004828:	40001800 	.word	0x40001800

0800482c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b02      	cmp	r3, #2
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b02      	cmp	r3, #2
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0202 	mvn.w	r2, #2
 8004858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fb fe2c 	bl	80004cc <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f986 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f98d 	bl	8004b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b04      	cmp	r3, #4
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0204 	mvn.w	r2, #4
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fb fe02 	bl	80004cc <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f95c 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f963 	bl	8004b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d122      	bne.n	8004930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d11b      	bne.n	8004930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0208 	mvn.w	r2, #8
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2204      	movs	r2, #4
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fb fdd8 	bl	80004cc <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f932 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f939 	bl	8004b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b10      	cmp	r3, #16
 800493c:	d122      	bne.n	8004984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b10      	cmp	r3, #16
 800494a:	d11b      	bne.n	8004984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0210 	mvn.w	r2, #16
 8004954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2208      	movs	r2, #8
 800495a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fb fdae 	bl	80004cc <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f908 	bl	8004b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f90f 	bl	8004b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d10e      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b01      	cmp	r3, #1
 800499e:	d107      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0201 	mvn.w	r2, #1
 80049a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f8e2 	bl	8004b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b80      	cmp	r3, #128	; 0x80
 80049bc:	d10e      	bne.n	80049dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	2b80      	cmp	r3, #128	; 0x80
 80049ca:	d107      	bne.n	80049dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fb6a 	bl	80050b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b40      	cmp	r3, #64	; 0x40
 80049e8:	d10e      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d107      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f8d4 	bl	8004bb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d10e      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d107      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0220 	mvn.w	r2, #32
 8004a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fb34 	bl	800509c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e088      	b.n	8004b6c <HAL_TIM_IC_ConfigChannel+0x130>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f000 f944 	bl	8004d04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 020c 	bic.w	r2, r2, #12
 8004a8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6999      	ldr	r1, [r3, #24]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	619a      	str	r2, [r3, #24]
 8004a9e:	e060      	b.n	8004b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d11c      	bne.n	8004ae0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f000 f999 	bl	8004dec <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ac8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6999      	ldr	r1, [r3, #24]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	021a      	lsls	r2, r3, #8
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	619a      	str	r2, [r3, #24]
 8004ade:	e040      	b.n	8004b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d11b      	bne.n	8004b1e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f000 f9b6 	bl	8004e66 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 020c 	bic.w	r2, r2, #12
 8004b08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69d9      	ldr	r1, [r3, #28]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	61da      	str	r2, [r3, #28]
 8004b1c:	e021      	b.n	8004b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b0c      	cmp	r3, #12
 8004b22:	d11c      	bne.n	8004b5e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6819      	ldr	r1, [r3, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f000 f9d3 	bl	8004ede <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69da      	ldr	r2, [r3, #28]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b46:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69d9      	ldr	r1, [r3, #28]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	021a      	lsls	r2, r3, #8
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	61da      	str	r2, [r3, #28]
 8004b5c:	e001      	b.n	8004b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a40      	ldr	r2, [pc, #256]	; (8004cd8 <TIM_Base_SetConfig+0x114>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be2:	d00f      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a3d      	ldr	r2, [pc, #244]	; (8004cdc <TIM_Base_SetConfig+0x118>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a3c      	ldr	r2, [pc, #240]	; (8004ce0 <TIM_Base_SetConfig+0x11c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a3b      	ldr	r2, [pc, #236]	; (8004ce4 <TIM_Base_SetConfig+0x120>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a3a      	ldr	r2, [pc, #232]	; (8004ce8 <TIM_Base_SetConfig+0x124>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d108      	bne.n	8004c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a2f      	ldr	r2, [pc, #188]	; (8004cd8 <TIM_Base_SetConfig+0x114>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d02b      	beq.n	8004c76 <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c24:	d027      	beq.n	8004c76 <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a2c      	ldr	r2, [pc, #176]	; (8004cdc <TIM_Base_SetConfig+0x118>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d023      	beq.n	8004c76 <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a2b      	ldr	r2, [pc, #172]	; (8004ce0 <TIM_Base_SetConfig+0x11c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d01f      	beq.n	8004c76 <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a2a      	ldr	r2, [pc, #168]	; (8004ce4 <TIM_Base_SetConfig+0x120>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01b      	beq.n	8004c76 <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a29      	ldr	r2, [pc, #164]	; (8004ce8 <TIM_Base_SetConfig+0x124>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d017      	beq.n	8004c76 <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a28      	ldr	r2, [pc, #160]	; (8004cec <TIM_Base_SetConfig+0x128>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <TIM_Base_SetConfig+0x12c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00f      	beq.n	8004c76 <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a26      	ldr	r2, [pc, #152]	; (8004cf4 <TIM_Base_SetConfig+0x130>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00b      	beq.n	8004c76 <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a25      	ldr	r2, [pc, #148]	; (8004cf8 <TIM_Base_SetConfig+0x134>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d007      	beq.n	8004c76 <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a24      	ldr	r2, [pc, #144]	; (8004cfc <TIM_Base_SetConfig+0x138>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d003      	beq.n	8004c76 <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a23      	ldr	r2, [pc, #140]	; (8004d00 <TIM_Base_SetConfig+0x13c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d108      	bne.n	8004c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <TIM_Base_SetConfig+0x114>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_Base_SetConfig+0xf8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a0c      	ldr	r2, [pc, #48]	; (8004ce8 <TIM_Base_SetConfig+0x124>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d103      	bne.n	8004cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	615a      	str	r2, [r3, #20]
}
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40010400 	.word	0x40010400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800
 8004cf8:	40001800 	.word	0x40001800
 8004cfc:	40001c00 	.word	0x40001c00
 8004d00:	40002000 	.word	0x40002000

08004d04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f023 0201 	bic.w	r2, r3, #1
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <TIM_TI1_SetConfig+0xcc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d01b      	beq.n	8004d6a <TIM_TI1_SetConfig+0x66>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d38:	d017      	beq.n	8004d6a <TIM_TI1_SetConfig+0x66>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <TIM_TI1_SetConfig+0xd0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d013      	beq.n	8004d6a <TIM_TI1_SetConfig+0x66>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4a24      	ldr	r2, [pc, #144]	; (8004dd8 <TIM_TI1_SetConfig+0xd4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00f      	beq.n	8004d6a <TIM_TI1_SetConfig+0x66>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4a23      	ldr	r2, [pc, #140]	; (8004ddc <TIM_TI1_SetConfig+0xd8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00b      	beq.n	8004d6a <TIM_TI1_SetConfig+0x66>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <TIM_TI1_SetConfig+0xdc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d007      	beq.n	8004d6a <TIM_TI1_SetConfig+0x66>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4a21      	ldr	r2, [pc, #132]	; (8004de4 <TIM_TI1_SetConfig+0xe0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_TI1_SetConfig+0x66>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4a20      	ldr	r2, [pc, #128]	; (8004de8 <TIM_TI1_SetConfig+0xe4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d101      	bne.n	8004d6e <TIM_TI1_SetConfig+0x6a>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <TIM_TI1_SetConfig+0x6c>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	e003      	b.n	8004d8e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f023 030a 	bic.w	r3, r3, #10
 8004da8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f003 030a 	and.w	r3, r3, #10
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40010400 	.word	0x40010400
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40001800 	.word	0x40001800

08004dec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0210 	bic.w	r2, r3, #16
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	031b      	lsls	r3, r3, #12
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b087      	sub	sp, #28
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004eb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b087      	sub	sp, #28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	031b      	lsls	r3, r3, #12
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	031b      	lsls	r3, r3, #12
 8004f36:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	621a      	str	r2, [r3, #32]
}
 8004f4c:	bf00      	nop
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a1a      	ldr	r2, [r3, #32]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a1a      	ldr	r2, [r3, #32]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	431a      	orrs	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e05a      	b.n	8005072 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a21      	ldr	r2, [pc, #132]	; (8005080 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d022      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d01d      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d018      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1a      	ldr	r2, [pc, #104]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00e      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a17      	ldr	r2, [pc, #92]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a15      	ldr	r2, [pc, #84]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d10c      	bne.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800504c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	4313      	orrs	r3, r2
 8005056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40010000 	.word	0x40010000
 8005084:	40000400 	.word	0x40000400
 8005088:	40000800 	.word	0x40000800
 800508c:	40000c00 	.word	0x40000c00
 8005090:	40010400 	.word	0x40010400
 8005094:	40014000 	.word	0x40014000
 8005098:	40001800 	.word	0x40001800

0800509c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050c4:	b084      	sub	sp, #16
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	f107 001c 	add.w	r0, r7, #28
 80050d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d122      	bne.n	8005122 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d105      	bne.n	8005116 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f9c0 	bl	800549c <USB_CoreReset>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]
 8005120:	e01a      	b.n	8005158 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9b4 	bl	800549c <USB_CoreReset>
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
 800514a:	e005      	b.n	8005158 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	2b01      	cmp	r3, #1
 800515c:	d10b      	bne.n	8005176 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f043 0206 	orr.w	r2, r3, #6
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f043 0220 	orr.w	r2, r3, #32
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005176:	7bfb      	ldrb	r3, [r7, #15]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005182:	b004      	add	sp, #16
 8005184:	4770      	bx	lr

08005186 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f023 0201 	bic.w	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d115      	bne.n	8005218 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051f8:	2001      	movs	r0, #1
 80051fa:	f7fb fe95 	bl	8000f28 <HAL_Delay>
      ms++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f93a 	bl	800547e <USB_GetMode>
 800520a:	4603      	mov	r3, r0
 800520c:	2b01      	cmp	r3, #1
 800520e:	d01e      	beq.n	800524e <USB_SetCurrentMode+0x84>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b31      	cmp	r3, #49	; 0x31
 8005214:	d9f0      	bls.n	80051f8 <USB_SetCurrentMode+0x2e>
 8005216:	e01a      	b.n	800524e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d115      	bne.n	800524a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800522a:	2001      	movs	r0, #1
 800522c:	f7fb fe7c 	bl	8000f28 <HAL_Delay>
      ms++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3301      	adds	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f921 	bl	800547e <USB_GetMode>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <USB_SetCurrentMode+0x84>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b31      	cmp	r3, #49	; 0x31
 8005246:	d9f0      	bls.n	800522a <USB_SetCurrentMode+0x60>
 8005248:	e001      	b.n	800524e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e005      	b.n	800525a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b32      	cmp	r3, #50	; 0x32
 8005252:	d101      	bne.n	8005258 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3301      	adds	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <USB_FlushTxFifo+0x64>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d901      	bls.n	8005284 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e01b      	b.n	80052bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	daf2      	bge.n	8005272 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	019b      	lsls	r3, r3, #6
 8005294:	f043 0220 	orr.w	r2, r3, #32
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <USB_FlushTxFifo+0x64>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d901      	bls.n	80052ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e006      	b.n	80052bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d0f0      	beq.n	800529c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	00030d40 	.word	0x00030d40

080052cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a11      	ldr	r2, [pc, #68]	; (8005328 <USB_FlushRxFifo+0x5c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d901      	bls.n	80052ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e018      	b.n	800531c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	daf2      	bge.n	80052d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2210      	movs	r2, #16
 80052fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a08      	ldr	r2, [pc, #32]	; (8005328 <USB_FlushRxFifo+0x5c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e006      	b.n	800531c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b10      	cmp	r3, #16
 8005318:	d0f0      	beq.n	80052fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	00030d40 	.word	0x00030d40

0800532c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	; 0x24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	4611      	mov	r1, r2
 8005338:	461a      	mov	r2, r3
 800533a:	460b      	mov	r3, r1
 800533c:	71fb      	strb	r3, [r7, #7]
 800533e:	4613      	mov	r3, r2
 8005340:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800534a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	d123      	bne.n	800539a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005352:	88bb      	ldrh	r3, [r7, #4]
 8005354:	3303      	adds	r3, #3
 8005356:	089b      	lsrs	r3, r3, #2
 8005358:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800535a:	2300      	movs	r3, #0
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	e018      	b.n	8005392 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	031a      	lsls	r2, r3, #12
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4413      	add	r3, r2
 8005368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800536c:	461a      	mov	r2, r3
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	3301      	adds	r3, #1
 8005378:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	3301      	adds	r3, #1
 800537e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	3301      	adds	r3, #1
 8005384:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	3301      	adds	r3, #1
 800538a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	3301      	adds	r3, #1
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	429a      	cmp	r2, r3
 8005398:	d3e2      	bcc.n	8005360 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3724      	adds	r7, #36	; 0x24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b08b      	sub	sp, #44	; 0x2c
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	089b      	lsrs	r3, r3, #2
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	623b      	str	r3, [r7, #32]
 80053d2:	e014      	b.n	80053fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	601a      	str	r2, [r3, #0]
    pDest++;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	3301      	adds	r3, #1
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	3301      	adds	r3, #1
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	3301      	adds	r3, #1
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	3301      	adds	r3, #1
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	3301      	adds	r3, #1
 80053fc:	623b      	str	r3, [r7, #32]
 80053fe:	6a3a      	ldr	r2, [r7, #32]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	429a      	cmp	r2, r3
 8005404:	d3e6      	bcc.n	80053d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005406:	8bfb      	ldrh	r3, [r7, #30]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01e      	beq.n	800544a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005416:	461a      	mov	r2, r3
 8005418:	f107 0310 	add.w	r3, r7, #16
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	fa22 f303 	lsr.w	r3, r2, r3
 800542c:	b2da      	uxtb	r2, r3
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	701a      	strb	r2, [r3, #0]
      i++;
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	3301      	adds	r3, #1
 8005436:	623b      	str	r3, [r7, #32]
      pDest++;
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	3301      	adds	r3, #1
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800543e:	8bfb      	ldrh	r3, [r7, #30]
 8005440:	3b01      	subs	r3, #1
 8005442:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005444:	8bfb      	ldrh	r3, [r7, #30]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1ea      	bne.n	8005420 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800544c:	4618      	mov	r0, r3
 800544e:	372c      	adds	r7, #44	; 0x2c
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4013      	ands	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005470:	68fb      	ldr	r3, [r7, #12]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f003 0301 	and.w	r3, r3, #1
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4a13      	ldr	r2, [pc, #76]	; (8005500 <USB_CoreReset+0x64>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d901      	bls.n	80054ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e01b      	b.n	80054f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	daf2      	bge.n	80054a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f043 0201 	orr.w	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3301      	adds	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4a09      	ldr	r2, [pc, #36]	; (8005500 <USB_CoreReset+0x64>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d901      	bls.n	80054e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e006      	b.n	80054f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d0f0      	beq.n	80054d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	00030d40 	.word	0x00030d40

08005504 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005504:	b084      	sub	sp, #16
 8005506:	b580      	push	{r7, lr}
 8005508:	b086      	sub	sp, #24
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005524:	461a      	mov	r2, r3
 8005526:	2300      	movs	r3, #0
 8005528:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005556:	2b00      	cmp	r3, #0
 8005558:	d018      	beq.n	800558c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10a      	bne.n	8005576 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800556e:	f043 0304 	orr.w	r3, r3, #4
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	e014      	b.n	80055a0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005584:	f023 0304 	bic.w	r3, r3, #4
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e009      	b.n	80055a0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800559a:	f023 0304 	bic.w	r3, r3, #4
 800559e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055a0:	2110      	movs	r1, #16
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff fe5e 	bl	8005264 <USB_FlushTxFifo>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fe8a 	bl	80052cc <USB_FlushRxFifo>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	e015      	b.n	80055f4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d4:	461a      	mov	r2, r3
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295
 80055da:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e8:	461a      	mov	r2, r3
 80055ea:	2300      	movs	r3, #0
 80055ec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	3301      	adds	r3, #1
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d3e5      	bcc.n	80055c8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f04f 32ff 	mov.w	r2, #4294967295
 8005608:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a13      	ldr	r2, [pc, #76]	; (8005670 <USB_HostInit+0x16c>)
 8005622:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a13      	ldr	r2, [pc, #76]	; (8005674 <USB_HostInit+0x170>)
 8005628:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800562c:	e009      	b.n	8005642 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2280      	movs	r2, #128	; 0x80
 8005632:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a10      	ldr	r2, [pc, #64]	; (8005678 <USB_HostInit+0x174>)
 8005638:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a0f      	ldr	r2, [pc, #60]	; (800567c <USB_HostInit+0x178>)
 800563e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	f043 0210 	orr.w	r2, r3, #16
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <USB_HostInit+0x17c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005660:	7dfb      	ldrb	r3, [r7, #23]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800566c:	b004      	add	sp, #16
 800566e:	4770      	bx	lr
 8005670:	01000200 	.word	0x01000200
 8005674:	00e00300 	.word	0x00e00300
 8005678:	00600080 	.word	0x00600080
 800567c:	004000e0 	.word	0x004000e0
 8005680:	a3200008 	.word	0xa3200008

08005684 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056a2:	f023 0303 	bic.w	r3, r3, #3
 80056a6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80056bc:	4313      	orrs	r3, r2
 80056be:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d107      	bne.n	80056d6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056cc:	461a      	mov	r2, r3
 80056ce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80056d2:	6053      	str	r3, [r2, #4]
 80056d4:	e009      	b.n	80056ea <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d106      	bne.n	80056ea <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056e2:	461a      	mov	r2, r3
 80056e4:	f241 7370 	movw	r3, #6000	; 0x1770
 80056e8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800571c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <USB_DriveVbus+0x44>
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d106      	bne.n	800573c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005736:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800573a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005746:	d109      	bne.n	800575c <USB_DriveVbus+0x64>
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800575a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	0c5b      	lsrs	r3, r3, #17
 8005788:	f003 0303 	and.w	r3, r3, #3
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	b29b      	uxth	r3, r3
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	4608      	mov	r0, r1
 80057c6:	4611      	mov	r1, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4603      	mov	r3, r0
 80057cc:	70fb      	strb	r3, [r7, #3]
 80057ce:	460b      	mov	r3, r1
 80057d0:	70bb      	strb	r3, [r7, #2]
 80057d2:	4613      	mov	r3, r2
 80057d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ea:	461a      	mov	r2, r3
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295
 80057f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80057f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d87e      	bhi.n	80058f8 <USB_HC_Init+0x13c>
 80057fa:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <USB_HC_Init+0x44>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005811 	.word	0x08005811
 8005804:	080058bb 	.word	0x080058bb
 8005808:	08005811 	.word	0x08005811
 800580c:	0800587d 	.word	0x0800587d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4413      	add	r3, r2
 8005818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581c:	461a      	mov	r2, r3
 800581e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005822:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005824:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005828:	2b00      	cmp	r3, #0
 800582a:	da10      	bge.n	800584e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	440a      	add	r2, r1
 8005842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800584c:	e057      	b.n	80058fe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d051      	beq.n	80058fe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4413      	add	r3, r2
 8005862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	78fa      	ldrb	r2, [r7, #3]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	440a      	add	r2, r1
 8005870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005874:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005878:	60d3      	str	r3, [r2, #12]
      break;
 800587a:	e040      	b.n	80058fe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4413      	add	r3, r2
 8005884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005888:	461a      	mov	r2, r3
 800588a:	f240 639d 	movw	r3, #1693	; 0x69d
 800588e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005890:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005894:	2b00      	cmp	r3, #0
 8005896:	da34      	bge.n	8005902 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	78fa      	ldrb	r2, [r7, #3]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80058b8:	e023      	b.n	8005902 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c6:	461a      	mov	r2, r3
 80058c8:	f240 2325 	movw	r3, #549	; 0x225
 80058cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	da17      	bge.n	8005906 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80058f4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80058f6:	e006      	b.n	8005906 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	77fb      	strb	r3, [r7, #31]
      break;
 80058fc:	e004      	b.n	8005908 <USB_HC_Init+0x14c>
      break;
 80058fe:	bf00      	nop
 8005900:	e002      	b.n	8005908 <USB_HC_Init+0x14c>
      break;
 8005902:	bf00      	nop
 8005904:	e000      	b.n	8005908 <USB_HC_Init+0x14c>
      break;
 8005906:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	4413      	add	r3, r2
 8005910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	78fa      	ldrb	r2, [r7, #3]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	440a      	add	r2, r1
 800591e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005922:	f043 0302 	orr.w	r3, r3, #2
 8005926:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592e:	699a      	ldr	r2, [r3, #24]
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	2101      	movs	r1, #1
 8005938:	fa01 f303 	lsl.w	r3, r1, r3
 800593c:	6939      	ldr	r1, [r7, #16]
 800593e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005942:	4313      	orrs	r3, r2
 8005944:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005952:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005956:	2b00      	cmp	r3, #0
 8005958:	da03      	bge.n	8005962 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800595a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	e001      	b.n	8005966 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7ff feff 	bl	800576a <USB_GetHostSpeed>
 800596c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800596e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005972:	2b02      	cmp	r3, #2
 8005974:	d106      	bne.n	8005984 <USB_HC_Init+0x1c8>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d003      	beq.n	8005984 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800597c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	e001      	b.n	8005988 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005988:	787b      	ldrb	r3, [r7, #1]
 800598a:	059b      	lsls	r3, r3, #22
 800598c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005990:	78bb      	ldrb	r3, [r7, #2]
 8005992:	02db      	lsls	r3, r3, #11
 8005994:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005998:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800599a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800599e:	049b      	lsls	r3, r3, #18
 80059a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80059a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80059a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80059ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	0159      	lsls	r1, r3, #5
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	440b      	add	r3, r1
 80059ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059be:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059c4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80059c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d003      	beq.n	80059d6 <USB_HC_Init+0x21a>
 80059ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10f      	bne.n	80059f6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	78fa      	ldrb	r2, [r7, #3]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059f4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80059f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08c      	sub	sp, #48	; 0x30
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a1c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d02d      	beq.n	8005a86 <USB_HC_StartXfer+0x86>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	791b      	ldrb	r3, [r3, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d129      	bne.n	8005a86 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d117      	bne.n	8005a68 <USB_HC_StartXfer+0x68>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	79db      	ldrb	r3, [r3, #7]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <USB_HC_StartXfer+0x48>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	79db      	ldrb	r3, [r3, #7]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d10f      	bne.n	8005a68 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	6a3a      	ldr	r2, [r7, #32]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <USB_HC_StartXfer+0x86>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	795b      	ldrb	r3, [r3, #5]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d107      	bne.n	8005a86 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 fa0f 	bl	8005ea0 <USB_DoPing>
      return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e0f8      	b.n	8005c78 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d018      	beq.n	8005ac0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	8912      	ldrh	r2, [r2, #8]
 8005a96:	4413      	add	r3, r2
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	8912      	ldrh	r2, [r2, #8]
 8005a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aa2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005aa4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005aa6:	8b7b      	ldrh	r3, [r7, #26]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d90b      	bls.n	8005ac4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005aac:	8b7b      	ldrh	r3, [r7, #26]
 8005aae:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ab0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	8912      	ldrh	r2, [r2, #8]
 8005ab6:	fb03 f202 	mul.w	r2, r3, r2
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	611a      	str	r2, [r3, #16]
 8005abe:	e001      	b.n	8005ac4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	78db      	ldrb	r3, [r3, #3]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d007      	beq.n	8005adc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005acc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	8912      	ldrh	r2, [r2, #8]
 8005ad2:	fb03 f202 	mul.w	r2, r3, r2
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	611a      	str	r2, [r3, #16]
 8005ada:	e003      	b.n	8005ae4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	695a      	ldr	r2, [r3, #20]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005aec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005aee:	04d9      	lsls	r1, r3, #19
 8005af0:	4b63      	ldr	r3, [pc, #396]	; (8005c80 <USB_HC_StartXfer+0x280>)
 8005af2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005af4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	7a9b      	ldrb	r3, [r3, #10]
 8005afa:	075b      	lsls	r3, r3, #29
 8005afc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b00:	69f9      	ldr	r1, [r7, #28]
 8005b02:	0148      	lsls	r0, r1, #5
 8005b04:	6a39      	ldr	r1, [r7, #32]
 8005b06:	4401      	add	r1, r0
 8005b08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	68d9      	ldr	r1, [r3, #12]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b26:	460a      	mov	r2, r1
 8005b28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf0c      	ite	eq
 8005b3a:	2301      	moveq	r3, #1
 8005b3c:	2300      	movne	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	6a3a      	ldr	r2, [r7, #32]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	7e7b      	ldrb	r3, [r7, #25]
 8005b72:	075b      	lsls	r3, r3, #29
 8005b74:	69f9      	ldr	r1, [r7, #28]
 8005b76:	0148      	lsls	r0, r1, #5
 8005b78:	6a39      	ldr	r1, [r7, #32]
 8005b7a:	4401      	add	r1, r0
 8005b7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005b80:	4313      	orrs	r3, r2
 8005b82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b9a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	78db      	ldrb	r3, [r3, #3]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005baa:	613b      	str	r3, [r7, #16]
 8005bac:	e003      	b.n	8005bb6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bb4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bbc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bca:	461a      	mov	r2, r3
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e04e      	b.n	8005c78 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	78db      	ldrb	r3, [r3, #3]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d149      	bne.n	8005c76 <USB_HC_StartXfer+0x276>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d045      	beq.n	8005c76 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	79db      	ldrb	r3, [r3, #7]
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d830      	bhi.n	8005c54 <USB_HC_StartXfer+0x254>
 8005bf2:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <USB_HC_StartXfer+0x1f8>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c09 	.word	0x08005c09
 8005bfc:	08005c2d 	.word	0x08005c2d
 8005c00:	08005c09 	.word	0x08005c09
 8005c04:	08005c2d 	.word	0x08005c2d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	3303      	adds	r3, #3
 8005c0e:	089b      	lsrs	r3, r3, #2
 8005c10:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c12:	8afa      	ldrh	r2, [r7, #22]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d91c      	bls.n	8005c58 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c2a:	e015      	b.n	8005c58 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	3303      	adds	r3, #3
 8005c32:	089b      	lsrs	r3, r3, #2
 8005c34:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c36:	8afa      	ldrh	r2, [r7, #22]
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d90a      	bls.n	8005c5c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c52:	e003      	b.n	8005c5c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005c54:	bf00      	nop
 8005c56:	e002      	b.n	8005c5e <USB_HC_StartXfer+0x25e>
        break;
 8005c58:	bf00      	nop
 8005c5a:	e000      	b.n	8005c5e <USB_HC_StartXfer+0x25e>
        break;
 8005c5c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	68d9      	ldr	r1, [r3, #12]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	785a      	ldrb	r2, [r3, #1]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	9000      	str	r0, [sp, #0]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7ff fb5b 	bl	800532c <USB_WritePacket>
  }

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3728      	adds	r7, #40	; 0x28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	1ff80000 	.word	0x1ff80000

08005c84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	b29b      	uxth	r3, r3
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b089      	sub	sp, #36	; 0x24
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	0c9b      	lsrs	r3, r3, #18
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	0fdb      	lsrs	r3, r3, #31
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d104      	bne.n	8005d00 <USB_HC_Halt+0x5a>
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e0c8      	b.n	8005e92 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <USB_HC_Halt+0x66>
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d163      	bne.n	8005dd4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d2a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f040 80ab 	bne.w	8005e90 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d133      	bne.n	8005dae <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	0151      	lsls	r1, r2, #5
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	440a      	add	r2, r1
 8005d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d64:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d84:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d92:	d81d      	bhi.n	8005dd0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005daa:	d0ec      	beq.n	8005d86 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dac:	e070      	b.n	8005e90 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dcc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dce:	e05f      	b.n	8005e90 <USB_HC_Halt+0x1ea>
            break;
 8005dd0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dd2:	e05d      	b.n	8005e90 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005df2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d133      	bne.n	8005e6c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e42:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3301      	adds	r3, #1
 8005e48:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e50:	d81d      	bhi.n	8005e8e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e68:	d0ec      	beq.n	8005e44 <USB_HC_Halt+0x19e>
 8005e6a:	e011      	b.n	8005e90 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	e000      	b.n	8005e90 <USB_HC_Halt+0x1ea>
          break;
 8005e8e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3724      	adds	r7, #36	; 0x24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
	...

08005ea0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	04da      	lsls	r2, r3, #19
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <USB_DoPing+0x74>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ecc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ed0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ee8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ef0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	461a      	mov	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	1ff80000 	.word	0x1ff80000

08005f18 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff f93b 	bl	80051a8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f32:	2110      	movs	r1, #16
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff f995 	bl	8005264 <USB_FlushTxFifo>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff f9c1 	bl	80052cc <USB_FlushRxFifo>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005f54:	2300      	movs	r3, #0
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	e01f      	b.n	8005f9a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f70:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f80:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8e:	461a      	mov	r2, r3
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	3301      	adds	r3, #1
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b0f      	cmp	r3, #15
 8005f9e:	d9dc      	bls.n	8005f5a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
 8005fa4:	e034      	b.n	8006010 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fbc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fcc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fda:	461a      	mov	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fec:	d80c      	bhi.n	8006008 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006004:	d0ec      	beq.n	8005fe0 <USB_StopHost+0xc8>
 8006006:	e000      	b.n	800600a <USB_StopHost+0xf2>
        break;
 8006008:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	3301      	adds	r3, #1
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b0f      	cmp	r3, #15
 8006014:	d9c7      	bls.n	8005fa6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601c:	461a      	mov	r2, r3
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f04f 32ff 	mov.w	r2, #4294967295
 800602a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff f8aa 	bl	8005186 <USB_EnableGlobalInt>

  return ret;
 8006032:	7ffb      	ldrb	r3, [r7, #31]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3720      	adds	r7, #32
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800603c:	b590      	push	{r4, r7, lr}
 800603e:	b089      	sub	sp, #36	; 0x24
 8006040:	af04      	add	r7, sp, #16
 8006042:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006044:	2301      	movs	r3, #1
 8006046:	2202      	movs	r2, #2
 8006048:	2102      	movs	r1, #2
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fc66 	bl	800691c <USBH_FindInterface>
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2bff      	cmp	r3, #255	; 0xff
 8006058:	d002      	beq.n	8006060 <USBH_CDC_InterfaceInit+0x24>
 800605a:	7bfb      	ldrb	r3, [r7, #15]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d901      	bls.n	8006064 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006060:	2302      	movs	r3, #2
 8006062:	e13d      	b.n	80062e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fc3b 	bl	80068e4 <USBH_SelectInterface>
 800606e:	4603      	mov	r3, r0
 8006070:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006078:	2302      	movs	r3, #2
 800607a:	e131      	b.n	80062e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006082:	2050      	movs	r0, #80	; 0x50
 8006084:	f001 fb12 	bl	80076ac <malloc>
 8006088:	4603      	mov	r3, r0
 800608a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800609c:	2302      	movs	r3, #2
 800609e:	e11f      	b.n	80062e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80060a0:	2250      	movs	r2, #80	; 0x50
 80060a2:	2100      	movs	r1, #0
 80060a4:	68b8      	ldr	r0, [r7, #8]
 80060a6:	f001 fb11 	bl	80076cc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	211a      	movs	r1, #26
 80060b0:	fb01 f303 	mul.w	r3, r1, r3
 80060b4:	4413      	add	r3, r2
 80060b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	da15      	bge.n	80060ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	211a      	movs	r1, #26
 80060c8:	fb01 f303 	mul.w	r3, r1, r3
 80060cc:	4413      	add	r3, r2
 80060ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060d2:	781a      	ldrb	r2, [r3, #0]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	211a      	movs	r1, #26
 80060de:	fb01 f303 	mul.w	r3, r1, r3
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060e8:	881a      	ldrh	r2, [r3, #0]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	785b      	ldrb	r3, [r3, #1]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 ff9c 	bl	8007032 <USBH_AllocPipe>
 80060fa:	4603      	mov	r3, r0
 80060fc:	461a      	mov	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	7819      	ldrb	r1, [r3, #0]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	7858      	ldrb	r0, [r3, #1]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	8952      	ldrh	r2, [r2, #10]
 800611a:	9202      	str	r2, [sp, #8]
 800611c:	2203      	movs	r2, #3
 800611e:	9201      	str	r2, [sp, #4]
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	4623      	mov	r3, r4
 8006124:	4602      	mov	r2, r0
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 ff54 	bl	8006fd4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2200      	movs	r2, #0
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fa17 	bl	8007568 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800613a:	2300      	movs	r3, #0
 800613c:	2200      	movs	r2, #0
 800613e:	210a      	movs	r1, #10
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fbeb 	bl	800691c <USBH_FindInterface>
 8006146:	4603      	mov	r3, r0
 8006148:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	2bff      	cmp	r3, #255	; 0xff
 800614e:	d002      	beq.n	8006156 <USBH_CDC_InterfaceInit+0x11a>
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d901      	bls.n	800615a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006156:	2302      	movs	r3, #2
 8006158:	e0c2      	b.n	80062e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	211a      	movs	r1, #26
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	4413      	add	r3, r2
 8006166:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b25b      	sxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	da16      	bge.n	80061a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	211a      	movs	r1, #26
 8006178:	fb01 f303 	mul.w	r3, r1, r3
 800617c:	4413      	add	r3, r2
 800617e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006182:	781a      	ldrb	r2, [r3, #0]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	211a      	movs	r1, #26
 800618e:	fb01 f303 	mul.w	r3, r1, r3
 8006192:	4413      	add	r3, r2
 8006194:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006198:	881a      	ldrh	r2, [r3, #0]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	835a      	strh	r2, [r3, #26]
 800619e:	e015      	b.n	80061cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	211a      	movs	r1, #26
 80061a6:	fb01 f303 	mul.w	r3, r1, r3
 80061aa:	4413      	add	r3, r2
 80061ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	211a      	movs	r1, #26
 80061bc:	fb01 f303 	mul.w	r3, r1, r3
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061c6:	881a      	ldrh	r2, [r3, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	211a      	movs	r1, #26
 80061d2:	fb01 f303 	mul.w	r3, r1, r3
 80061d6:	4413      	add	r3, r2
 80061d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	b25b      	sxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	da16      	bge.n	8006212 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	211a      	movs	r1, #26
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	4413      	add	r3, r2
 80061f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061f4:	781a      	ldrb	r2, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	211a      	movs	r1, #26
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	4413      	add	r3, r2
 8006206:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800620a:	881a      	ldrh	r2, [r3, #0]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	835a      	strh	r2, [r3, #26]
 8006210:	e015      	b.n	800623e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	211a      	movs	r1, #26
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	4413      	add	r3, r2
 800621e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	211a      	movs	r1, #26
 800622e:	fb01 f303 	mul.w	r3, r1, r3
 8006232:	4413      	add	r3, r2
 8006234:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	7b9b      	ldrb	r3, [r3, #14]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fef4 	bl	8007032 <USBH_AllocPipe>
 800624a:	4603      	mov	r3, r0
 800624c:	461a      	mov	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	7bdb      	ldrb	r3, [r3, #15]
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 feea 	bl	8007032 <USBH_AllocPipe>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	7b59      	ldrb	r1, [r3, #13]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	7b98      	ldrb	r0, [r3, #14]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	8b12      	ldrh	r2, [r2, #24]
 800627e:	9202      	str	r2, [sp, #8]
 8006280:	2202      	movs	r2, #2
 8006282:	9201      	str	r2, [sp, #4]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	4623      	mov	r3, r4
 8006288:	4602      	mov	r2, r0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fea2 	bl	8006fd4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	7b19      	ldrb	r1, [r3, #12]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	7bd8      	ldrb	r0, [r3, #15]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	8b52      	ldrh	r2, [r2, #26]
 80062a8:	9202      	str	r2, [sp, #8]
 80062aa:	2202      	movs	r2, #2
 80062ac:	9201      	str	r2, [sp, #4]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4623      	mov	r3, r4
 80062b2:	4602      	mov	r2, r0
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fe8d 	bl	8006fd4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	7b5b      	ldrb	r3, [r3, #13]
 80062c6:	2200      	movs	r2, #0
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 f94c 	bl	8007568 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	7b1b      	ldrb	r3, [r3, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 f945 	bl	8007568 <USBH_LL_SetToggle>

  return USBH_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd90      	pop	{r4, r7, pc}

080062e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00e      	beq.n	8006320 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fe82 	bl	8007012 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fead 	bl	8007074 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	7b1b      	ldrb	r3, [r3, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00e      	beq.n	8006346 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	7b1b      	ldrb	r3, [r3, #12]
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fe6f 	bl	8007012 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	7b1b      	ldrb	r3, [r3, #12]
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fe9a 	bl	8007074 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	7b5b      	ldrb	r3, [r3, #13]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00e      	beq.n	800636c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	7b5b      	ldrb	r3, [r3, #13]
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fe5c 	bl	8007012 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	7b5b      	ldrb	r3, [r3, #13]
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fe87 	bl	8007074 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	4618      	mov	r0, r3
 8006382:	f001 f99b 	bl	80076bc <free>
    phost->pActiveClass->pData = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800638c:	2200      	movs	r2, #0
 800638e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3340      	adds	r3, #64	; 0x40
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f8b1 	bl	800651a <GetLineCoding>
 80063b8:	4603      	mov	r3, r0
 80063ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80063bc:	7afb      	ldrb	r3, [r7, #11]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d105      	bne.n	80063ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063c8:	2102      	movs	r1, #2
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80063ce:	7afb      	ldrb	r3, [r7, #11]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d877      	bhi.n	80064ec <USBH_CDC_Process+0x114>
 80063fc:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <USBH_CDC_Process+0x2c>)
 80063fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006402:	bf00      	nop
 8006404:	08006419 	.word	0x08006419
 8006408:	0800641f 	.word	0x0800641f
 800640c:	0800644f 	.word	0x0800644f
 8006410:	080064c3 	.word	0x080064c3
 8006414:	080064d1 	.word	0x080064d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]
      break;
 800641c:	e06d      	b.n	80064fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f897 	bl	8006558 <SetLineCoding>
 800642a:	4603      	mov	r3, r0
 800642c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d104      	bne.n	800643e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800643c:	e058      	b.n	80064f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800643e:	7bbb      	ldrb	r3, [r7, #14]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d055      	beq.n	80064f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2204      	movs	r2, #4
 8006448:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800644c:	e050      	b.n	80064f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	3340      	adds	r3, #64	; 0x40
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f860 	bl	800651a <GetLineCoding>
 800645a:	4603      	mov	r3, r0
 800645c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d126      	bne.n	80064b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006476:	791b      	ldrb	r3, [r3, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d13b      	bne.n	80064f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006486:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006488:	429a      	cmp	r2, r3
 800648a:	d133      	bne.n	80064f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006496:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006498:	429a      	cmp	r2, r3
 800649a:	d12b      	bne.n	80064f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d124      	bne.n	80064f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f958 	bl	8006760 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064b0:	e020      	b.n	80064f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d01d      	beq.n	80064f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2204      	movs	r2, #4
 80064bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80064c0:	e018      	b.n	80064f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f867 	bl	8006596 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f8da 	bl	8006682 <CDC_ProcessReception>
      break;
 80064ce:	e014      	b.n	80064fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80064d0:	2100      	movs	r1, #0
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fb08 	bl	8006ae8 <USBH_ClrFeature>
 80064d8:	4603      	mov	r3, r0
 80064da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80064ea:	e005      	b.n	80064f8 <USBH_CDC_Process+0x120>

    default:
      break;
 80064ec:	bf00      	nop
 80064ee:	e004      	b.n	80064fa <USBH_CDC_Process+0x122>
      break;
 80064f0:	bf00      	nop
 80064f2:	e002      	b.n	80064fa <USBH_CDC_Process+0x122>
      break;
 80064f4:	bf00      	nop
 80064f6:	e000      	b.n	80064fa <USBH_CDC_Process+0x122>
      break;
 80064f8:	bf00      	nop

  }

  return status;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	22a1      	movs	r2, #161	; 0xa1
 8006528:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2221      	movs	r2, #33	; 0x21
 800652e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2207      	movs	r2, #7
 8006540:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2207      	movs	r2, #7
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 faf1 	bl	8006b30 <USBH_CtlReq>
 800654e:	4603      	mov	r3, r0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2221      	movs	r2, #33	; 0x21
 8006566:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2207      	movs	r2, #7
 800657e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2207      	movs	r2, #7
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fad2 	bl	8006b30 <USBH_CtlReq>
 800658c:	4603      	mov	r3, r0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b086      	sub	sp, #24
 800659a:	af02      	add	r7, sp, #8
 800659c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065a8:	2300      	movs	r3, #0
 80065aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d002      	beq.n	80065bc <CDC_ProcessTransmission+0x26>
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d023      	beq.n	8006602 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80065ba:	e05e      	b.n	800667a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	8b12      	ldrh	r2, [r2, #24]
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d90b      	bls.n	80065e0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	69d9      	ldr	r1, [r3, #28]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8b1a      	ldrh	r2, [r3, #24]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	7b5b      	ldrb	r3, [r3, #13]
 80065d4:	2001      	movs	r0, #1
 80065d6:	9000      	str	r0, [sp, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fcb8 	bl	8006f4e <USBH_BulkSendData>
 80065de:	e00b      	b.n	80065f8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	7b5b      	ldrb	r3, [r3, #13]
 80065ee:	2001      	movs	r0, #1
 80065f0:	9000      	str	r0, [sp, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fcab 	bl	8006f4e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006600:	e03b      	b.n	800667a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	7b5b      	ldrb	r3, [r3, #13]
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 ff83 	bl	8007514 <USBH_LL_GetURBState>
 800660e:	4603      	mov	r3, r0
 8006610:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006612:	7afb      	ldrb	r3, [r7, #11]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d128      	bne.n	800666a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	8b12      	ldrh	r2, [r2, #24]
 8006620:	4293      	cmp	r3, r2
 8006622:	d90e      	bls.n	8006642 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	8b12      	ldrh	r2, [r2, #24]
 800662c:	1a9a      	subs	r2, r3, r2
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	8b12      	ldrh	r2, [r2, #24]
 800663a:	441a      	add	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	61da      	str	r2, [r3, #28]
 8006640:	e002      	b.n	8006648 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006658:	e00e      	b.n	8006678 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f868 	bl	8006738 <USBH_CDC_TransmitCallback>
      break;
 8006668:	e006      	b.n	8006678 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800666a:	7afb      	ldrb	r3, [r7, #11]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d103      	bne.n	8006678 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006678:	bf00      	nop
  }
}
 800667a:	bf00      	nop
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b086      	sub	sp, #24
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006694:	2300      	movs	r3, #0
 8006696:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d002      	beq.n	80066a8 <CDC_ProcessReception+0x26>
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d00e      	beq.n	80066c4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80066a6:	e043      	b.n	8006730 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	6a19      	ldr	r1, [r3, #32]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	8b5a      	ldrh	r2, [r3, #26]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	7b1b      	ldrb	r3, [r3, #12]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fc6f 	bl	8006f98 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2204      	movs	r2, #4
 80066be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80066c2:	e035      	b.n	8006730 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	7b1b      	ldrb	r3, [r3, #12]
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 ff22 	bl	8007514 <USBH_LL_GetURBState>
 80066d0:	4603      	mov	r3, r0
 80066d2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80066d4:	7cfb      	ldrb	r3, [r7, #19]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d129      	bne.n	800672e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	7b1b      	ldrb	r3, [r3, #12]
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fe85 	bl	80073f0 <USBH_LL_GetLastXferSize>
 80066e6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d016      	beq.n	8006720 <CDC_ProcessReception+0x9e>
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	8b5b      	ldrh	r3, [r3, #26]
 80066f6:	461a      	mov	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d910      	bls.n	8006720 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	1ad2      	subs	r2, r2, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	6a1a      	ldr	r2, [r3, #32]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	441a      	add	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2203      	movs	r2, #3
 800671a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800671e:	e006      	b.n	800672e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f80f 	bl	800674c <USBH_CDC_ReceiveCallback>
      break;
 800672e:	bf00      	nop
  }
}
 8006730:	bf00      	nop
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4613      	mov	r3, r2
 8006780:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006788:	2302      	movs	r3, #2
 800678a:	e029      	b.n	80067e0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	79fa      	ldrb	r2, [r7, #7]
 8006790:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 f81f 	bl	80067e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fd97 	bl	800730c <USBH_LL_Init>

  return USBH_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	e009      	b.n	800680e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	33e0      	adds	r3, #224	; 0xe0
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	2200      	movs	r2, #0
 8006806:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b0f      	cmp	r3, #15
 8006812:	d9f2      	bls.n	80067fa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e009      	b.n	800682e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4413      	add	r3, r2
 8006820:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006834:	d3f1      	bcc.n	800681a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2240      	movs	r2, #64	; 0x40
 800685a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d016      	beq.n	80068d2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10e      	bne.n	80068cc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068b4:	1c59      	adds	r1, r3, #1
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	33de      	adds	r3, #222	; 0xde
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]
 80068ca:	e004      	b.n	80068d6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80068cc:	2302      	movs	r3, #2
 80068ce:	73fb      	strb	r3, [r7, #15]
 80068d0:	e001      	b.n	80068d6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80068d2:	2302      	movs	r3, #2
 80068d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d204      	bcs.n	800690a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	78fa      	ldrb	r2, [r7, #3]
 8006904:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006908:	e001      	b.n	800690e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800690a:	2302      	movs	r3, #2
 800690c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800690e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	4608      	mov	r0, r1
 8006926:	4611      	mov	r1, r2
 8006928:	461a      	mov	r2, r3
 800692a:	4603      	mov	r3, r0
 800692c:	70fb      	strb	r3, [r7, #3]
 800692e:	460b      	mov	r3, r1
 8006930:	70bb      	strb	r3, [r7, #2]
 8006932:	4613      	mov	r3, r2
 8006934:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006944:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006946:	e025      	b.n	8006994 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	221a      	movs	r2, #26
 800694c:	fb02 f303 	mul.w	r3, r2, r3
 8006950:	3308      	adds	r3, #8
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4413      	add	r3, r2
 8006956:	3302      	adds	r3, #2
 8006958:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	795b      	ldrb	r3, [r3, #5]
 800695e:	78fa      	ldrb	r2, [r7, #3]
 8006960:	429a      	cmp	r2, r3
 8006962:	d002      	beq.n	800696a <USBH_FindInterface+0x4e>
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	2bff      	cmp	r3, #255	; 0xff
 8006968:	d111      	bne.n	800698e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800696e:	78ba      	ldrb	r2, [r7, #2]
 8006970:	429a      	cmp	r2, r3
 8006972:	d002      	beq.n	800697a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006974:	78bb      	ldrb	r3, [r7, #2]
 8006976:	2bff      	cmp	r3, #255	; 0xff
 8006978:	d109      	bne.n	800698e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800697e:	787a      	ldrb	r2, [r7, #1]
 8006980:	429a      	cmp	r2, r3
 8006982:	d002      	beq.n	800698a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006984:	787b      	ldrb	r3, [r7, #1]
 8006986:	2bff      	cmp	r3, #255	; 0xff
 8006988:	d101      	bne.n	800698e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	e006      	b.n	800699c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	3301      	adds	r3, #1
 8006992:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006994:	7dfb      	ldrb	r3, [r7, #23]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d9d6      	bls.n	8006948 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800699a:	23ff      	movs	r3, #255	; 0xff
}
 800699c:	4618      	mov	r0, r3
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fce7 	bl	8007384 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80069b6:	2101      	movs	r1, #1
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fdbe 	bl	800753a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f804 	bl	8006a0a <USBH_HandleSof>
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b0b      	cmp	r3, #11
 8006a1a:	d10a      	bne.n	8006a32 <USBH_HandleSof+0x28>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	4798      	blx	r3
  }
}
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006a4a:	bf00      	nop
}
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006a66:	bf00      	nop
}
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fc7a 	bl	80073ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	791b      	ldrb	r3, [r3, #4]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fad1 	bl	8007074 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	795b      	ldrb	r3, [r3, #5]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 facb 	bl	8007074 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	789b      	ldrb	r3, [r3, #2]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d10f      	bne.n	8006b1c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2100      	movs	r1, #0
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f805 	bl	8006b30 <USBH_CtlReq>
 8006b26:	4603      	mov	r3, r0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	789b      	ldrb	r3, [r3, #2]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d002      	beq.n	8006b50 <USBH_CtlReq+0x20>
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d00f      	beq.n	8006b6e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006b4e:	e027      	b.n	8006ba0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	88fa      	ldrh	r2, [r7, #6]
 8006b5a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2202      	movs	r2, #2
 8006b66:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6c:	e018      	b.n	8006ba0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f81c 	bl	8006bac <USBH_HandleControl>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d002      	beq.n	8006b84 <USBH_CtlReq+0x54>
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b03      	cmp	r3, #3
 8006b82:	d106      	bne.n	8006b92 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	761a      	strb	r2, [r3, #24]
      break;
 8006b90:	e005      	b.n	8006b9e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d102      	bne.n	8006b9e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	709a      	strb	r2, [r3, #2]
      break;
 8006b9e:	bf00      	nop
  }
  return status;
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7e1b      	ldrb	r3, [r3, #24]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	2b0a      	cmp	r3, #10
 8006bc4:	f200 8156 	bhi.w	8006e74 <USBH_HandleControl+0x2c8>
 8006bc8:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <USBH_HandleControl+0x24>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006bfd 	.word	0x08006bfd
 8006bd4:	08006c17 	.word	0x08006c17
 8006bd8:	08006c81 	.word	0x08006c81
 8006bdc:	08006ca7 	.word	0x08006ca7
 8006be0:	08006cdf 	.word	0x08006cdf
 8006be4:	08006d09 	.word	0x08006d09
 8006be8:	08006d5b 	.word	0x08006d5b
 8006bec:	08006d7d 	.word	0x08006d7d
 8006bf0:	08006db9 	.word	0x08006db9
 8006bf4:	08006ddf 	.word	0x08006ddf
 8006bf8:	08006e1d 	.word	0x08006e1d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f103 0110 	add.w	r1, r3, #16
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	795b      	ldrb	r3, [r3, #5]
 8006c06:	461a      	mov	r2, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f943 	bl	8006e94 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	761a      	strb	r2, [r3, #24]
      break;
 8006c14:	e139      	b.n	8006e8a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	795b      	ldrb	r3, [r3, #5]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fc79 	bl	8007514 <USBH_LL_GetURBState>
 8006c22:	4603      	mov	r3, r0
 8006c24:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d11e      	bne.n	8006c6a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	7c1b      	ldrb	r3, [r3, #16]
 8006c30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c34:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	8adb      	ldrh	r3, [r3, #22]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006c3e:	7b7b      	ldrb	r3, [r7, #13]
 8006c40:	2b80      	cmp	r3, #128	; 0x80
 8006c42:	d103      	bne.n	8006c4c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2203      	movs	r2, #3
 8006c48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006c4a:	e115      	b.n	8006e78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2205      	movs	r2, #5
 8006c50:	761a      	strb	r2, [r3, #24]
      break;
 8006c52:	e111      	b.n	8006e78 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006c54:	7b7b      	ldrb	r3, [r7, #13]
 8006c56:	2b80      	cmp	r3, #128	; 0x80
 8006c58:	d103      	bne.n	8006c62 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2209      	movs	r2, #9
 8006c5e:	761a      	strb	r2, [r3, #24]
      break;
 8006c60:	e10a      	b.n	8006e78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2207      	movs	r2, #7
 8006c66:	761a      	strb	r2, [r3, #24]
      break;
 8006c68:	e106      	b.n	8006e78 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d003      	beq.n	8006c78 <USBH_HandleControl+0xcc>
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	f040 8100 	bne.w	8006e78 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	220b      	movs	r2, #11
 8006c7c:	761a      	strb	r2, [r3, #24]
      break;
 8006c7e:	e0fb      	b.n	8006e78 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6899      	ldr	r1, [r3, #8]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	899a      	ldrh	r2, [r3, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	791b      	ldrb	r3, [r3, #4]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f93a 	bl	8006f12 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	761a      	strb	r2, [r3, #24]
      break;
 8006ca4:	e0f1      	b.n	8006e8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	791b      	ldrb	r3, [r3, #4]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fc31 	bl	8007514 <USBH_LL_GetURBState>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d102      	bne.n	8006cc2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2209      	movs	r2, #9
 8006cc0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	2b05      	cmp	r3, #5
 8006cc6:	d102      	bne.n	8006cce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006ccc:	e0d6      	b.n	8006e7c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	f040 80d3 	bne.w	8006e7c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	220b      	movs	r2, #11
 8006cda:	761a      	strb	r2, [r3, #24]
      break;
 8006cdc:	e0ce      	b.n	8006e7c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6899      	ldr	r1, [r3, #8]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	899a      	ldrh	r2, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	795b      	ldrb	r3, [r3, #5]
 8006cea:	2001      	movs	r0, #1
 8006cec:	9000      	str	r0, [sp, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f8ea 	bl	8006ec8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2206      	movs	r2, #6
 8006d04:	761a      	strb	r2, [r3, #24]
      break;
 8006d06:	e0c0      	b.n	8006e8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	795b      	ldrb	r3, [r3, #5]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fc00 	bl	8007514 <USBH_LL_GetURBState>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d103      	bne.n	8006d26 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2207      	movs	r2, #7
 8006d22:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006d24:	e0ac      	b.n	8006e80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	2b05      	cmp	r3, #5
 8006d2a:	d105      	bne.n	8006d38 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	220c      	movs	r2, #12
 8006d30:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006d32:	2303      	movs	r3, #3
 8006d34:	73fb      	strb	r3, [r7, #15]
      break;
 8006d36:	e0a3      	b.n	8006e80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d103      	bne.n	8006d46 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2205      	movs	r2, #5
 8006d42:	761a      	strb	r2, [r3, #24]
      break;
 8006d44:	e09c      	b.n	8006e80 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	f040 8099 	bne.w	8006e80 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	220b      	movs	r2, #11
 8006d52:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006d54:	2302      	movs	r3, #2
 8006d56:	73fb      	strb	r3, [r7, #15]
      break;
 8006d58:	e092      	b.n	8006e80 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	791b      	ldrb	r3, [r3, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2100      	movs	r1, #0
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8d5 	bl	8006f12 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2208      	movs	r2, #8
 8006d78:	761a      	strb	r2, [r3, #24]

      break;
 8006d7a:	e086      	b.n	8006e8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	791b      	ldrb	r3, [r3, #4]
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fbc6 	bl	8007514 <USBH_LL_GetURBState>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d105      	bne.n	8006d9e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	220d      	movs	r2, #13
 8006d96:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006d9c:	e072      	b.n	8006e84 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d103      	bne.n	8006dac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	220b      	movs	r2, #11
 8006da8:	761a      	strb	r2, [r3, #24]
      break;
 8006daa:	e06b      	b.n	8006e84 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b05      	cmp	r3, #5
 8006db0:	d168      	bne.n	8006e84 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006db2:	2303      	movs	r3, #3
 8006db4:	73fb      	strb	r3, [r7, #15]
      break;
 8006db6:	e065      	b.n	8006e84 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	795b      	ldrb	r3, [r3, #5]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	9200      	str	r2, [sp, #0]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f87f 	bl	8006ec8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	220a      	movs	r2, #10
 8006dda:	761a      	strb	r2, [r3, #24]
      break;
 8006ddc:	e055      	b.n	8006e8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	795b      	ldrb	r3, [r3, #5]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fb95 	bl	8007514 <USBH_LL_GetURBState>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d105      	bne.n	8006e00 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	220d      	movs	r2, #13
 8006dfc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006dfe:	e043      	b.n	8006e88 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d103      	bne.n	8006e0e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2209      	movs	r2, #9
 8006e0a:	761a      	strb	r2, [r3, #24]
      break;
 8006e0c:	e03c      	b.n	8006e88 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d139      	bne.n	8006e88 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	220b      	movs	r2, #11
 8006e18:	761a      	strb	r2, [r3, #24]
      break;
 8006e1a:	e035      	b.n	8006e88 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	7e5b      	ldrb	r3, [r3, #25]
 8006e20:	3301      	adds	r3, #1
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	765a      	strb	r2, [r3, #25]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	7e5b      	ldrb	r3, [r3, #25]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d806      	bhi.n	8006e3e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006e3c:	e025      	b.n	8006e8a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e44:	2106      	movs	r1, #6
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	795b      	ldrb	r3, [r3, #5]
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f90c 	bl	8007074 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	791b      	ldrb	r3, [r3, #4]
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f906 	bl	8007074 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006e6e:	2302      	movs	r3, #2
 8006e70:	73fb      	strb	r3, [r7, #15]
      break;
 8006e72:	e00a      	b.n	8006e8a <USBH_HandleControl+0x2de>

    default:
      break;
 8006e74:	bf00      	nop
 8006e76:	e008      	b.n	8006e8a <USBH_HandleControl+0x2de>
      break;
 8006e78:	bf00      	nop
 8006e7a:	e006      	b.n	8006e8a <USBH_HandleControl+0x2de>
      break;
 8006e7c:	bf00      	nop
 8006e7e:	e004      	b.n	8006e8a <USBH_HandleControl+0x2de>
      break;
 8006e80:	bf00      	nop
 8006e82:	e002      	b.n	8006e8a <USBH_HandleControl+0x2de>
      break;
 8006e84:	bf00      	nop
 8006e86:	e000      	b.n	8006e8a <USBH_HandleControl+0x2de>
      break;
 8006e88:	bf00      	nop
  }

  return status;
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af04      	add	r7, sp, #16
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ea2:	79f9      	ldrb	r1, [r7, #7]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 fafa 	bl	80074b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af04      	add	r7, sp, #16
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	80fb      	strh	r3, [r7, #6]
 8006eda:	4613      	mov	r3, r2
 8006edc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006eec:	7979      	ldrb	r1, [r7, #5]
 8006eee:	7e3b      	ldrb	r3, [r7, #24]
 8006ef0:	9303      	str	r3, [sp, #12]
 8006ef2:	88fb      	ldrh	r3, [r7, #6]
 8006ef4:	9302      	str	r3, [sp, #8]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	2301      	movs	r3, #1
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	2300      	movs	r3, #0
 8006f00:	2200      	movs	r2, #0
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 fad5 	bl	80074b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b088      	sub	sp, #32
 8006f16:	af04      	add	r7, sp, #16
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	461a      	mov	r2, r3
 8006f20:	460b      	mov	r3, r1
 8006f22:	80fb      	strh	r3, [r7, #6]
 8006f24:	4613      	mov	r3, r2
 8006f26:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006f28:	7979      	ldrb	r1, [r7, #5]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9303      	str	r3, [sp, #12]
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	9302      	str	r3, [sp, #8]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	2301      	movs	r3, #1
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 fab7 	bl	80074b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006f44:	2300      	movs	r3, #0

}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b088      	sub	sp, #32
 8006f52:	af04      	add	r7, sp, #16
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	4611      	mov	r1, r2
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	80fb      	strh	r3, [r7, #6]
 8006f60:	4613      	mov	r3, r2
 8006f62:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006f72:	7979      	ldrb	r1, [r7, #5]
 8006f74:	7e3b      	ldrb	r3, [r7, #24]
 8006f76:	9303      	str	r3, [sp, #12]
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	9302      	str	r3, [sp, #8]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	2301      	movs	r3, #1
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	2302      	movs	r3, #2
 8006f86:	2200      	movs	r2, #0
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fa92 	bl	80074b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af04      	add	r7, sp, #16
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	80fb      	strh	r3, [r7, #6]
 8006faa:	4613      	mov	r3, r2
 8006fac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006fae:	7979      	ldrb	r1, [r7, #5]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	9303      	str	r3, [sp, #12]
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	9302      	str	r3, [sp, #8]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 fa74 	bl	80074b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af04      	add	r7, sp, #16
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	4608      	mov	r0, r1
 8006fde:	4611      	mov	r1, r2
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	70fb      	strb	r3, [r7, #3]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	70bb      	strb	r3, [r7, #2]
 8006fea:	4613      	mov	r3, r2
 8006fec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006fee:	7878      	ldrb	r0, [r7, #1]
 8006ff0:	78ba      	ldrb	r2, [r7, #2]
 8006ff2:	78f9      	ldrb	r1, [r7, #3]
 8006ff4:	8b3b      	ldrh	r3, [r7, #24]
 8006ff6:	9302      	str	r3, [sp, #8]
 8006ff8:	7d3b      	ldrb	r3, [r7, #20]
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	7c3b      	ldrb	r3, [r7, #16]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	4603      	mov	r3, r0
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa07 	bl	8007416 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	460b      	mov	r3, r1
 800701c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800701e:	78fb      	ldrb	r3, [r7, #3]
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa26 	bl	8007474 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f836 	bl	80070b0 <USBH_GetFreePipe>
 8007044:	4603      	mov	r3, r0
 8007046:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007048:	89fb      	ldrh	r3, [r7, #14]
 800704a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800704e:	4293      	cmp	r3, r2
 8007050:	d00a      	beq.n	8007068 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	89fb      	ldrh	r3, [r7, #14]
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	33e0      	adds	r3, #224	; 0xe0
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	440b      	add	r3, r1
 8007066:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007068:	89fb      	ldrh	r3, [r7, #14]
 800706a:	b2db      	uxtb	r3, r3
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	2b0f      	cmp	r3, #15
 8007084:	d80d      	bhi.n	80070a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	33e0      	adds	r3, #224	; 0xe0
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	33e0      	adds	r3, #224	; 0xe0
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]
 80070c0:	e00f      	b.n	80070e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	33e0      	adds	r3, #224	; 0xe0
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d102      	bne.n	80070dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	e007      	b.n	80070ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	3301      	adds	r3, #1
 80070e0:	73fb      	strb	r3, [r7, #15]
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	2b0f      	cmp	r3, #15
 80070e6:	d9ec      	bls.n	80070c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80070e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80070fc:	2201      	movs	r2, #1
 80070fe:	490e      	ldr	r1, [pc, #56]	; (8007138 <MX_USB_HOST_Init+0x40>)
 8007100:	480e      	ldr	r0, [pc, #56]	; (800713c <MX_USB_HOST_Init+0x44>)
 8007102:	f7ff fb37 	bl	8006774 <USBH_Init>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800710c:	f7f9 fc5e 	bl	80009cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007110:	490b      	ldr	r1, [pc, #44]	; (8007140 <MX_USB_HOST_Init+0x48>)
 8007112:	480a      	ldr	r0, [pc, #40]	; (800713c <MX_USB_HOST_Init+0x44>)
 8007114:	f7ff fbbc 	bl	8006890 <USBH_RegisterClass>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800711e:	f7f9 fc55 	bl	80009cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007122:	4806      	ldr	r0, [pc, #24]	; (800713c <MX_USB_HOST_Init+0x44>)
 8007124:	f7ff fc40 	bl	80069a8 <USBH_Start>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800712e:	f7f9 fc4d 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007132:	bf00      	nop
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	08007145 	.word	0x08007145
 800713c:	200001f4 	.word	0x200001f4
 8007140:	2000000c 	.word	0x2000000c

08007144 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	3b01      	subs	r3, #1
 8007154:	2b04      	cmp	r3, #4
 8007156:	d819      	bhi.n	800718c <USBH_UserProcess+0x48>
 8007158:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <USBH_UserProcess+0x1c>)
 800715a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715e:	bf00      	nop
 8007160:	0800718d 	.word	0x0800718d
 8007164:	0800717d 	.word	0x0800717d
 8007168:	0800718d 	.word	0x0800718d
 800716c:	08007185 	.word	0x08007185
 8007170:	08007175 	.word	0x08007175
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007174:	4b09      	ldr	r3, [pc, #36]	; (800719c <USBH_UserProcess+0x58>)
 8007176:	2203      	movs	r2, #3
 8007178:	701a      	strb	r2, [r3, #0]
  break;
 800717a:	e008      	b.n	800718e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800717c:	4b07      	ldr	r3, [pc, #28]	; (800719c <USBH_UserProcess+0x58>)
 800717e:	2202      	movs	r2, #2
 8007180:	701a      	strb	r2, [r3, #0]
  break;
 8007182:	e004      	b.n	800718e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007184:	4b05      	ldr	r3, [pc, #20]	; (800719c <USBH_UserProcess+0x58>)
 8007186:	2201      	movs	r2, #1
 8007188:	701a      	strb	r2, [r3, #0]
  break;
 800718a:	e000      	b.n	800718e <USBH_UserProcess+0x4a>

  default:
  break;
 800718c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800718e:	bf00      	nop
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	200005cc 	.word	0x200005cc

080071a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071a8:	f107 0314 	add.w	r3, r7, #20
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	605a      	str	r2, [r3, #4]
 80071b2:	609a      	str	r2, [r3, #8]
 80071b4:	60da      	str	r2, [r3, #12]
 80071b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071c0:	d147      	bne.n	8007252 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071c2:	2300      	movs	r3, #0
 80071c4:	613b      	str	r3, [r7, #16]
 80071c6:	4b25      	ldr	r3, [pc, #148]	; (800725c <HAL_HCD_MspInit+0xbc>)
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	4a24      	ldr	r2, [pc, #144]	; (800725c <HAL_HCD_MspInit+0xbc>)
 80071cc:	f043 0301 	orr.w	r3, r3, #1
 80071d0:	6313      	str	r3, [r2, #48]	; 0x30
 80071d2:	4b22      	ldr	r3, [pc, #136]	; (800725c <HAL_HCD_MspInit+0xbc>)
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	613b      	str	r3, [r7, #16]
 80071dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80071de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071e4:	2300      	movs	r3, #0
 80071e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80071ec:	f107 0314 	add.w	r3, r7, #20
 80071f0:	4619      	mov	r1, r3
 80071f2:	481b      	ldr	r0, [pc, #108]	; (8007260 <HAL_HCD_MspInit+0xc0>)
 80071f4:	f7f9 ffce 	bl	8001194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80071f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80071fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071fe:	2302      	movs	r3, #2
 8007200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007202:	2300      	movs	r3, #0
 8007204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007206:	2300      	movs	r3, #0
 8007208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800720a:	230a      	movs	r3, #10
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800720e:	f107 0314 	add.w	r3, r7, #20
 8007212:	4619      	mov	r1, r3
 8007214:	4812      	ldr	r0, [pc, #72]	; (8007260 <HAL_HCD_MspInit+0xc0>)
 8007216:	f7f9 ffbd 	bl	8001194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800721a:	4b10      	ldr	r3, [pc, #64]	; (800725c <HAL_HCD_MspInit+0xbc>)
 800721c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721e:	4a0f      	ldr	r2, [pc, #60]	; (800725c <HAL_HCD_MspInit+0xbc>)
 8007220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007224:	6353      	str	r3, [r2, #52]	; 0x34
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	4b0c      	ldr	r3, [pc, #48]	; (800725c <HAL_HCD_MspInit+0xbc>)
 800722c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722e:	4a0b      	ldr	r2, [pc, #44]	; (800725c <HAL_HCD_MspInit+0xbc>)
 8007230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007234:	6453      	str	r3, [r2, #68]	; 0x44
 8007236:	4b09      	ldr	r3, [pc, #36]	; (800725c <HAL_HCD_MspInit+0xbc>)
 8007238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007242:	2200      	movs	r2, #0
 8007244:	2100      	movs	r1, #0
 8007246:	2043      	movs	r0, #67	; 0x43
 8007248:	f7f9 ff6d 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800724c:	2043      	movs	r0, #67	; 0x43
 800724e:	f7f9 ff86 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007252:	bf00      	nop
 8007254:	3728      	adds	r7, #40	; 0x28
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	40023800 	.word	0x40023800
 8007260:	40020000 	.word	0x40020000

08007264 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff fbb7 	bl	80069e6 <USBH_LL_IncTimer>
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff fbef 	bl	8006a72 <USBH_LL_Connect>
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fbf8 	bl	8006aa0 <USBH_LL_Disconnect>
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70fb      	strb	r3, [r7, #3]
 80072c4:	4613      	mov	r3, r2
 80072c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff fba9 	bl	8006a3a <USBH_LL_PortEnabled>
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff fba9 	bl	8006a56 <USBH_LL_PortDisabled>
}
 8007304:	bf00      	nop
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800731a:	2b01      	cmp	r3, #1
 800731c:	d12a      	bne.n	8007374 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800731e:	4a18      	ldr	r2, [pc, #96]	; (8007380 <USBH_LL_Init+0x74>)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a15      	ldr	r2, [pc, #84]	; (8007380 <USBH_LL_Init+0x74>)
 800732a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800732e:	4b14      	ldr	r3, [pc, #80]	; (8007380 <USBH_LL_Init+0x74>)
 8007330:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007334:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007336:	4b12      	ldr	r3, [pc, #72]	; (8007380 <USBH_LL_Init+0x74>)
 8007338:	2208      	movs	r2, #8
 800733a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800733c:	4b10      	ldr	r3, [pc, #64]	; (8007380 <USBH_LL_Init+0x74>)
 800733e:	2201      	movs	r2, #1
 8007340:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007342:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <USBH_LL_Init+0x74>)
 8007344:	2200      	movs	r2, #0
 8007346:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007348:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <USBH_LL_Init+0x74>)
 800734a:	2202      	movs	r2, #2
 800734c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <USBH_LL_Init+0x74>)
 8007350:	2200      	movs	r2, #0
 8007352:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007354:	480a      	ldr	r0, [pc, #40]	; (8007380 <USBH_LL_Init+0x74>)
 8007356:	f7fa f8d2 	bl	80014fe <HAL_HCD_Init>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007360:	f7f9 fb34 	bl	80009cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007364:	4806      	ldr	r0, [pc, #24]	; (8007380 <USBH_LL_Init+0x74>)
 8007366:	f7fa fca8 	bl	8001cba <HAL_HCD_GetCurrentFrame>
 800736a:	4603      	mov	r3, r0
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff fb2a 	bl	80069c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	200005d0 	.word	0x200005d0

08007384 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800739a:	4618      	mov	r0, r3
 800739c:	f7fa fc25 	bl	8001bea <HAL_HCD_Start>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 f90e 	bl	80075c8 <USBH_Get_USB_Status>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fa fc2d 	bl	8001c30 <HAL_HCD_Stop>
 80073d6:	4603      	mov	r3, r0
 80073d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 f8f3 	bl	80075c8 <USBH_Get_USB_Status>
 80073e2:	4603      	mov	r3, r0
 80073e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f7fa fc43 	bl	8001c92 <HAL_HCD_HC_GetXferCount>
 800740c:	4603      	mov	r3, r0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007416:	b590      	push	{r4, r7, lr}
 8007418:	b089      	sub	sp, #36	; 0x24
 800741a:	af04      	add	r7, sp, #16
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	4608      	mov	r0, r1
 8007420:	4611      	mov	r1, r2
 8007422:	461a      	mov	r2, r3
 8007424:	4603      	mov	r3, r0
 8007426:	70fb      	strb	r3, [r7, #3]
 8007428:	460b      	mov	r3, r1
 800742a:	70bb      	strb	r3, [r7, #2]
 800742c:	4613      	mov	r3, r2
 800742e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800743e:	787c      	ldrb	r4, [r7, #1]
 8007440:	78ba      	ldrb	r2, [r7, #2]
 8007442:	78f9      	ldrb	r1, [r7, #3]
 8007444:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007446:	9302      	str	r3, [sp, #8]
 8007448:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4623      	mov	r3, r4
 8007456:	f7fa f8b4 	bl	80015c2 <HAL_HCD_HC_Init>
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	4618      	mov	r0, r3
 8007462:	f000 f8b1 	bl	80075c8 <USBH_Get_USB_Status>
 8007466:	4603      	mov	r3, r0
 8007468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800746a:	7bbb      	ldrb	r3, [r7, #14]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	bd90      	pop	{r4, r7, pc}

08007474 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800748e:	78fa      	ldrb	r2, [r7, #3]
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f7fa f924 	bl	80016e0 <HAL_HCD_HC_Halt>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 f892 	bl	80075c8 <USBH_Get_USB_Status>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80074b2:	b590      	push	{r4, r7, lr}
 80074b4:	b089      	sub	sp, #36	; 0x24
 80074b6:	af04      	add	r7, sp, #16
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	4608      	mov	r0, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	461a      	mov	r2, r3
 80074c0:	4603      	mov	r3, r0
 80074c2:	70fb      	strb	r3, [r7, #3]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70bb      	strb	r3, [r7, #2]
 80074c8:	4613      	mov	r3, r2
 80074ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80074da:	787c      	ldrb	r4, [r7, #1]
 80074dc:	78ba      	ldrb	r2, [r7, #2]
 80074de:	78f9      	ldrb	r1, [r7, #3]
 80074e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074e4:	9303      	str	r3, [sp, #12]
 80074e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80074e8:	9302      	str	r3, [sp, #8]
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	4623      	mov	r3, r4
 80074f6:	f7fa f917 	bl	8001728 <HAL_HCD_HC_SubmitRequest>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	4618      	mov	r0, r3
 8007502:	f000 f861 	bl	80075c8 <USBH_Get_USB_Status>
 8007506:	4603      	mov	r3, r0
 8007508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800750a:	7bbb      	ldrb	r3, [r7, #14]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	bd90      	pop	{r4, r7, pc}

08007514 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007526:	78fa      	ldrb	r2, [r7, #3]
 8007528:	4611      	mov	r1, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f7fa fb9d 	bl	8001c6a <HAL_HCD_HC_GetURBState>
 8007530:	4603      	mov	r3, r0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800754c:	2b01      	cmp	r3, #1
 800754e:	d103      	bne.n	8007558 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	4618      	mov	r0, r3
 8007554:	f000 f864 	bl	8007620 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007558:	20c8      	movs	r0, #200	; 0xc8
 800755a:	f7f9 fce5 	bl	8000f28 <HAL_Delay>
  return USBH_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
 8007574:	4613      	mov	r3, r2
 8007576:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800757e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	212c      	movs	r1, #44	; 0x2c
 8007586:	fb01 f303 	mul.w	r3, r1, r3
 800758a:	4413      	add	r3, r2
 800758c:	333b      	adds	r3, #59	; 0x3b
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d009      	beq.n	80075a8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	212c      	movs	r1, #44	; 0x2c
 800759a:	fb01 f303 	mul.w	r3, r1, r3
 800759e:	4413      	add	r3, r2
 80075a0:	3354      	adds	r3, #84	; 0x54
 80075a2:	78ba      	ldrb	r2, [r7, #2]
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	e008      	b.n	80075ba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	212c      	movs	r1, #44	; 0x2c
 80075ae:	fb01 f303 	mul.w	r3, r1, r3
 80075b2:	4413      	add	r3, r2
 80075b4:	3355      	adds	r3, #85	; 0x55
 80075b6:	78ba      	ldrb	r2, [r7, #2]
 80075b8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075d6:	79fb      	ldrb	r3, [r7, #7]
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d817      	bhi.n	800760c <USBH_Get_USB_Status+0x44>
 80075dc:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <USBH_Get_USB_Status+0x1c>)
 80075de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e2:	bf00      	nop
 80075e4:	080075f5 	.word	0x080075f5
 80075e8:	080075fb 	.word	0x080075fb
 80075ec:	08007601 	.word	0x08007601
 80075f0:	08007607 	.word	0x08007607
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	73fb      	strb	r3, [r7, #15]
    break;
 80075f8:	e00b      	b.n	8007612 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80075fa:	2302      	movs	r3, #2
 80075fc:	73fb      	strb	r3, [r7, #15]
    break;
 80075fe:	e008      	b.n	8007612 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007600:	2301      	movs	r3, #1
 8007602:	73fb      	strb	r3, [r7, #15]
    break;
 8007604:	e005      	b.n	8007612 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007606:	2302      	movs	r3, #2
 8007608:	73fb      	strb	r3, [r7, #15]
    break;
 800760a:	e002      	b.n	8007612 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800760c:	2302      	movs	r3, #2
 800760e:	73fb      	strb	r3, [r7, #15]
    break;
 8007610:	bf00      	nop
  }
  return usb_status;
 8007612:	7bfb      	ldrb	r3, [r7, #15]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d102      	bne.n	800763a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007634:	2300      	movs	r3, #0
 8007636:	73fb      	strb	r3, [r7, #15]
 8007638:	e001      	b.n	800763e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800763a:	2301      	movs	r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	461a      	mov	r2, r3
 8007642:	2101      	movs	r1, #1
 8007644:	4803      	ldr	r0, [pc, #12]	; (8007654 <MX_DriverVbusFS+0x34>)
 8007646:	f7f9 ff41 	bl	80014cc <HAL_GPIO_WritePin>
}
 800764a:	bf00      	nop
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	40020800 	.word	0x40020800

08007658 <__errno>:
 8007658:	4b01      	ldr	r3, [pc, #4]	; (8007660 <__errno+0x8>)
 800765a:	6818      	ldr	r0, [r3, #0]
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	2000002c 	.word	0x2000002c

08007664 <__libc_init_array>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	4d0d      	ldr	r5, [pc, #52]	; (800769c <__libc_init_array+0x38>)
 8007668:	4c0d      	ldr	r4, [pc, #52]	; (80076a0 <__libc_init_array+0x3c>)
 800766a:	1b64      	subs	r4, r4, r5
 800766c:	10a4      	asrs	r4, r4, #2
 800766e:	2600      	movs	r6, #0
 8007670:	42a6      	cmp	r6, r4
 8007672:	d109      	bne.n	8007688 <__libc_init_array+0x24>
 8007674:	4d0b      	ldr	r5, [pc, #44]	; (80076a4 <__libc_init_array+0x40>)
 8007676:	4c0c      	ldr	r4, [pc, #48]	; (80076a8 <__libc_init_array+0x44>)
 8007678:	f000 f92e 	bl	80078d8 <_init>
 800767c:	1b64      	subs	r4, r4, r5
 800767e:	10a4      	asrs	r4, r4, #2
 8007680:	2600      	movs	r6, #0
 8007682:	42a6      	cmp	r6, r4
 8007684:	d105      	bne.n	8007692 <__libc_init_array+0x2e>
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	f855 3b04 	ldr.w	r3, [r5], #4
 800768c:	4798      	blx	r3
 800768e:	3601      	adds	r6, #1
 8007690:	e7ee      	b.n	8007670 <__libc_init_array+0xc>
 8007692:	f855 3b04 	ldr.w	r3, [r5], #4
 8007696:	4798      	blx	r3
 8007698:	3601      	adds	r6, #1
 800769a:	e7f2      	b.n	8007682 <__libc_init_array+0x1e>
 800769c:	08007914 	.word	0x08007914
 80076a0:	08007914 	.word	0x08007914
 80076a4:	08007914 	.word	0x08007914
 80076a8:	08007918 	.word	0x08007918

080076ac <malloc>:
 80076ac:	4b02      	ldr	r3, [pc, #8]	; (80076b8 <malloc+0xc>)
 80076ae:	4601      	mov	r1, r0
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	f000 b87f 	b.w	80077b4 <_malloc_r>
 80076b6:	bf00      	nop
 80076b8:	2000002c 	.word	0x2000002c

080076bc <free>:
 80076bc:	4b02      	ldr	r3, [pc, #8]	; (80076c8 <free+0xc>)
 80076be:	4601      	mov	r1, r0
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	f000 b80b 	b.w	80076dc <_free_r>
 80076c6:	bf00      	nop
 80076c8:	2000002c 	.word	0x2000002c

080076cc <memset>:
 80076cc:	4402      	add	r2, r0
 80076ce:	4603      	mov	r3, r0
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d100      	bne.n	80076d6 <memset+0xa>
 80076d4:	4770      	bx	lr
 80076d6:	f803 1b01 	strb.w	r1, [r3], #1
 80076da:	e7f9      	b.n	80076d0 <memset+0x4>

080076dc <_free_r>:
 80076dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076de:	2900      	cmp	r1, #0
 80076e0:	d044      	beq.n	800776c <_free_r+0x90>
 80076e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e6:	9001      	str	r0, [sp, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f1a1 0404 	sub.w	r4, r1, #4
 80076ee:	bfb8      	it	lt
 80076f0:	18e4      	addlt	r4, r4, r3
 80076f2:	f000 f8e3 	bl	80078bc <__malloc_lock>
 80076f6:	4a1e      	ldr	r2, [pc, #120]	; (8007770 <_free_r+0x94>)
 80076f8:	9801      	ldr	r0, [sp, #4]
 80076fa:	6813      	ldr	r3, [r2, #0]
 80076fc:	b933      	cbnz	r3, 800770c <_free_r+0x30>
 80076fe:	6063      	str	r3, [r4, #4]
 8007700:	6014      	str	r4, [r2, #0]
 8007702:	b003      	add	sp, #12
 8007704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007708:	f000 b8de 	b.w	80078c8 <__malloc_unlock>
 800770c:	42a3      	cmp	r3, r4
 800770e:	d908      	bls.n	8007722 <_free_r+0x46>
 8007710:	6825      	ldr	r5, [r4, #0]
 8007712:	1961      	adds	r1, r4, r5
 8007714:	428b      	cmp	r3, r1
 8007716:	bf01      	itttt	eq
 8007718:	6819      	ldreq	r1, [r3, #0]
 800771a:	685b      	ldreq	r3, [r3, #4]
 800771c:	1949      	addeq	r1, r1, r5
 800771e:	6021      	streq	r1, [r4, #0]
 8007720:	e7ed      	b.n	80076fe <_free_r+0x22>
 8007722:	461a      	mov	r2, r3
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b10b      	cbz	r3, 800772c <_free_r+0x50>
 8007728:	42a3      	cmp	r3, r4
 800772a:	d9fa      	bls.n	8007722 <_free_r+0x46>
 800772c:	6811      	ldr	r1, [r2, #0]
 800772e:	1855      	adds	r5, r2, r1
 8007730:	42a5      	cmp	r5, r4
 8007732:	d10b      	bne.n	800774c <_free_r+0x70>
 8007734:	6824      	ldr	r4, [r4, #0]
 8007736:	4421      	add	r1, r4
 8007738:	1854      	adds	r4, r2, r1
 800773a:	42a3      	cmp	r3, r4
 800773c:	6011      	str	r1, [r2, #0]
 800773e:	d1e0      	bne.n	8007702 <_free_r+0x26>
 8007740:	681c      	ldr	r4, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	6053      	str	r3, [r2, #4]
 8007746:	4421      	add	r1, r4
 8007748:	6011      	str	r1, [r2, #0]
 800774a:	e7da      	b.n	8007702 <_free_r+0x26>
 800774c:	d902      	bls.n	8007754 <_free_r+0x78>
 800774e:	230c      	movs	r3, #12
 8007750:	6003      	str	r3, [r0, #0]
 8007752:	e7d6      	b.n	8007702 <_free_r+0x26>
 8007754:	6825      	ldr	r5, [r4, #0]
 8007756:	1961      	adds	r1, r4, r5
 8007758:	428b      	cmp	r3, r1
 800775a:	bf04      	itt	eq
 800775c:	6819      	ldreq	r1, [r3, #0]
 800775e:	685b      	ldreq	r3, [r3, #4]
 8007760:	6063      	str	r3, [r4, #4]
 8007762:	bf04      	itt	eq
 8007764:	1949      	addeq	r1, r1, r5
 8007766:	6021      	streq	r1, [r4, #0]
 8007768:	6054      	str	r4, [r2, #4]
 800776a:	e7ca      	b.n	8007702 <_free_r+0x26>
 800776c:	b003      	add	sp, #12
 800776e:	bd30      	pop	{r4, r5, pc}
 8007770:	200008d4 	.word	0x200008d4

08007774 <sbrk_aligned>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4e0e      	ldr	r6, [pc, #56]	; (80077b0 <sbrk_aligned+0x3c>)
 8007778:	460c      	mov	r4, r1
 800777a:	6831      	ldr	r1, [r6, #0]
 800777c:	4605      	mov	r5, r0
 800777e:	b911      	cbnz	r1, 8007786 <sbrk_aligned+0x12>
 8007780:	f000 f88c 	bl	800789c <_sbrk_r>
 8007784:	6030      	str	r0, [r6, #0]
 8007786:	4621      	mov	r1, r4
 8007788:	4628      	mov	r0, r5
 800778a:	f000 f887 	bl	800789c <_sbrk_r>
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	d00a      	beq.n	80077a8 <sbrk_aligned+0x34>
 8007792:	1cc4      	adds	r4, r0, #3
 8007794:	f024 0403 	bic.w	r4, r4, #3
 8007798:	42a0      	cmp	r0, r4
 800779a:	d007      	beq.n	80077ac <sbrk_aligned+0x38>
 800779c:	1a21      	subs	r1, r4, r0
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 f87c 	bl	800789c <_sbrk_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	d101      	bne.n	80077ac <sbrk_aligned+0x38>
 80077a8:	f04f 34ff 	mov.w	r4, #4294967295
 80077ac:	4620      	mov	r0, r4
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	200008d8 	.word	0x200008d8

080077b4 <_malloc_r>:
 80077b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b8:	1ccd      	adds	r5, r1, #3
 80077ba:	f025 0503 	bic.w	r5, r5, #3
 80077be:	3508      	adds	r5, #8
 80077c0:	2d0c      	cmp	r5, #12
 80077c2:	bf38      	it	cc
 80077c4:	250c      	movcc	r5, #12
 80077c6:	2d00      	cmp	r5, #0
 80077c8:	4607      	mov	r7, r0
 80077ca:	db01      	blt.n	80077d0 <_malloc_r+0x1c>
 80077cc:	42a9      	cmp	r1, r5
 80077ce:	d905      	bls.n	80077dc <_malloc_r+0x28>
 80077d0:	230c      	movs	r3, #12
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	2600      	movs	r6, #0
 80077d6:	4630      	mov	r0, r6
 80077d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077dc:	4e2e      	ldr	r6, [pc, #184]	; (8007898 <_malloc_r+0xe4>)
 80077de:	f000 f86d 	bl	80078bc <__malloc_lock>
 80077e2:	6833      	ldr	r3, [r6, #0]
 80077e4:	461c      	mov	r4, r3
 80077e6:	bb34      	cbnz	r4, 8007836 <_malloc_r+0x82>
 80077e8:	4629      	mov	r1, r5
 80077ea:	4638      	mov	r0, r7
 80077ec:	f7ff ffc2 	bl	8007774 <sbrk_aligned>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	4604      	mov	r4, r0
 80077f4:	d14d      	bne.n	8007892 <_malloc_r+0xde>
 80077f6:	6834      	ldr	r4, [r6, #0]
 80077f8:	4626      	mov	r6, r4
 80077fa:	2e00      	cmp	r6, #0
 80077fc:	d140      	bne.n	8007880 <_malloc_r+0xcc>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	4631      	mov	r1, r6
 8007802:	4638      	mov	r0, r7
 8007804:	eb04 0803 	add.w	r8, r4, r3
 8007808:	f000 f848 	bl	800789c <_sbrk_r>
 800780c:	4580      	cmp	r8, r0
 800780e:	d13a      	bne.n	8007886 <_malloc_r+0xd2>
 8007810:	6821      	ldr	r1, [r4, #0]
 8007812:	3503      	adds	r5, #3
 8007814:	1a6d      	subs	r5, r5, r1
 8007816:	f025 0503 	bic.w	r5, r5, #3
 800781a:	3508      	adds	r5, #8
 800781c:	2d0c      	cmp	r5, #12
 800781e:	bf38      	it	cc
 8007820:	250c      	movcc	r5, #12
 8007822:	4629      	mov	r1, r5
 8007824:	4638      	mov	r0, r7
 8007826:	f7ff ffa5 	bl	8007774 <sbrk_aligned>
 800782a:	3001      	adds	r0, #1
 800782c:	d02b      	beq.n	8007886 <_malloc_r+0xd2>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	442b      	add	r3, r5
 8007832:	6023      	str	r3, [r4, #0]
 8007834:	e00e      	b.n	8007854 <_malloc_r+0xa0>
 8007836:	6822      	ldr	r2, [r4, #0]
 8007838:	1b52      	subs	r2, r2, r5
 800783a:	d41e      	bmi.n	800787a <_malloc_r+0xc6>
 800783c:	2a0b      	cmp	r2, #11
 800783e:	d916      	bls.n	800786e <_malloc_r+0xba>
 8007840:	1961      	adds	r1, r4, r5
 8007842:	42a3      	cmp	r3, r4
 8007844:	6025      	str	r5, [r4, #0]
 8007846:	bf18      	it	ne
 8007848:	6059      	strne	r1, [r3, #4]
 800784a:	6863      	ldr	r3, [r4, #4]
 800784c:	bf08      	it	eq
 800784e:	6031      	streq	r1, [r6, #0]
 8007850:	5162      	str	r2, [r4, r5]
 8007852:	604b      	str	r3, [r1, #4]
 8007854:	4638      	mov	r0, r7
 8007856:	f104 060b 	add.w	r6, r4, #11
 800785a:	f000 f835 	bl	80078c8 <__malloc_unlock>
 800785e:	f026 0607 	bic.w	r6, r6, #7
 8007862:	1d23      	adds	r3, r4, #4
 8007864:	1af2      	subs	r2, r6, r3
 8007866:	d0b6      	beq.n	80077d6 <_malloc_r+0x22>
 8007868:	1b9b      	subs	r3, r3, r6
 800786a:	50a3      	str	r3, [r4, r2]
 800786c:	e7b3      	b.n	80077d6 <_malloc_r+0x22>
 800786e:	6862      	ldr	r2, [r4, #4]
 8007870:	42a3      	cmp	r3, r4
 8007872:	bf0c      	ite	eq
 8007874:	6032      	streq	r2, [r6, #0]
 8007876:	605a      	strne	r2, [r3, #4]
 8007878:	e7ec      	b.n	8007854 <_malloc_r+0xa0>
 800787a:	4623      	mov	r3, r4
 800787c:	6864      	ldr	r4, [r4, #4]
 800787e:	e7b2      	b.n	80077e6 <_malloc_r+0x32>
 8007880:	4634      	mov	r4, r6
 8007882:	6876      	ldr	r6, [r6, #4]
 8007884:	e7b9      	b.n	80077fa <_malloc_r+0x46>
 8007886:	230c      	movs	r3, #12
 8007888:	603b      	str	r3, [r7, #0]
 800788a:	4638      	mov	r0, r7
 800788c:	f000 f81c 	bl	80078c8 <__malloc_unlock>
 8007890:	e7a1      	b.n	80077d6 <_malloc_r+0x22>
 8007892:	6025      	str	r5, [r4, #0]
 8007894:	e7de      	b.n	8007854 <_malloc_r+0xa0>
 8007896:	bf00      	nop
 8007898:	200008d4 	.word	0x200008d4

0800789c <_sbrk_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	4d06      	ldr	r5, [pc, #24]	; (80078b8 <_sbrk_r+0x1c>)
 80078a0:	2300      	movs	r3, #0
 80078a2:	4604      	mov	r4, r0
 80078a4:	4608      	mov	r0, r1
 80078a6:	602b      	str	r3, [r5, #0]
 80078a8:	f7f9 fa5a 	bl	8000d60 <_sbrk>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	d102      	bne.n	80078b6 <_sbrk_r+0x1a>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	b103      	cbz	r3, 80078b6 <_sbrk_r+0x1a>
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	bd38      	pop	{r3, r4, r5, pc}
 80078b8:	200008dc 	.word	0x200008dc

080078bc <__malloc_lock>:
 80078bc:	4801      	ldr	r0, [pc, #4]	; (80078c4 <__malloc_lock+0x8>)
 80078be:	f000 b809 	b.w	80078d4 <__retarget_lock_acquire_recursive>
 80078c2:	bf00      	nop
 80078c4:	200008e0 	.word	0x200008e0

080078c8 <__malloc_unlock>:
 80078c8:	4801      	ldr	r0, [pc, #4]	; (80078d0 <__malloc_unlock+0x8>)
 80078ca:	f000 b804 	b.w	80078d6 <__retarget_lock_release_recursive>
 80078ce:	bf00      	nop
 80078d0:	200008e0 	.word	0x200008e0

080078d4 <__retarget_lock_acquire_recursive>:
 80078d4:	4770      	bx	lr

080078d6 <__retarget_lock_release_recursive>:
 80078d6:	4770      	bx	lr

080078d8 <_init>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	bf00      	nop
 80078dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078de:	bc08      	pop	{r3}
 80078e0:	469e      	mov	lr, r3
 80078e2:	4770      	bx	lr

080078e4 <_fini>:
 80078e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e6:	bf00      	nop
 80078e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ea:	bc08      	pop	{r3}
 80078ec:	469e      	mov	lr, r3
 80078ee:	4770      	bx	lr
