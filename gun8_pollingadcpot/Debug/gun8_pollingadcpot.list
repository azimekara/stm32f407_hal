
gun8_pollingadcpot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005798  08005798  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057a0  080057a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000468  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000474  20000474  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013168  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e58  00000000  00000000  000331a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00036000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee8  00000000  00000000  00037018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f04  00000000  00000000  00037f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f5a  00000000  00000000  0005ae04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d69b5  00000000  00000000  0006fd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146713  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044c0  00000000  00000000  00146764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005768 	.word	0x08005768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005768 	.word	0x08005768

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 fc84 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f80e 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 f95c 	bl	8000fd0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d18:	f000 f8c6 	bl	8000ea8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d1c:	f000 f8f2 	bl	8000f04 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d20:	f000 f920 	bl	8000f64 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000d24:	f000 f86e 	bl	8000e04 <MX_ADC1_Init>
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */

	  Read_ADC();
 8000d28:	f000 fa46 	bl	80011b8 <Read_ADC>
 8000d2c:	e7fc      	b.n	8000d28 <main+0x20>
	...

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b094      	sub	sp, #80	; 0x50
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2230      	movs	r2, #48	; 0x30
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 fd0a 	bl	8005758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <SystemClock_Config+0xcc>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a27      	ldr	r2, [pc, #156]	; (8000dfc <SystemClock_Config+0xcc>)
 8000d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <SystemClock_Config+0xcc>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <SystemClock_Config+0xd0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a21      	ldr	r2, [pc, #132]	; (8000e00 <SystemClock_Config+0xd0>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <SystemClock_Config+0xd0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d96:	2302      	movs	r3, #2
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000da0:	2308      	movs	r3, #8
 8000da2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000da4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000da8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dae:	2307      	movs	r3, #7
 8000db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fa4a 	bl	8004250 <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dc2:	f000 f9f3 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc6:	230f      	movs	r3, #15
 8000dc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	2105      	movs	r1, #5
 8000de4:	4618      	mov	r0, r3
 8000de6:	f003 fcab 	bl	8004740 <HAL_RCC_ClockConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000df0:	f000 f9dc 	bl	80011ac <Error_Handler>
  }
}
 8000df4:	bf00      	nop
 8000df6:	3750      	adds	r7, #80	; 0x50
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40007000 	.word	0x40007000

08000e04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e18:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <MX_ADC1_Init+0x9c>)
 8000e1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e46:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <MX_ADC1_Init+0xa0>)
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e66:	f000 fc49 	bl	80016fc <HAL_ADC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e70:	f000 f99c 	bl	80011ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_ADC1_Init+0x98>)
 8000e86:	f000 fe1b 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e90:	f000 f98c 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000028 	.word	0x20000028
 8000ea0:	40012000 	.word	0x40012000
 8000ea4:	0f000001 	.word	0x0f000001

08000ea8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000eae:	4a13      	ldr	r2, [pc, #76]	; (8000efc <MX_I2C1_Init+0x54>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <MX_I2C1_Init+0x58>)
 8000eb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ec6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_I2C1_Init+0x50>)
 8000ee6:	f002 fbcf 	bl	8003688 <HAL_I2C_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ef0:	f000 f95c 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000070 	.word	0x20000070
 8000efc:	40005400 	.word	0x40005400
 8000f00:	000186a0 	.word	0x000186a0

08000f04 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MX_I2S3_Init+0x54>)
 8000f0a:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <MX_I2S3_Init+0x58>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2S3_Init+0x54>)
 8000f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f14:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <MX_I2S3_Init+0x54>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_I2S3_Init+0x54>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <MX_I2S3_Init+0x54>)
 8000f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f28:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_I2S3_Init+0x54>)
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <MX_I2S3_Init+0x5c>)
 8000f2e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_I2S3_Init+0x54>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_I2S3_Init+0x54>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_I2S3_Init+0x54>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_I2S3_Init+0x54>)
 8000f44:	f002 fce4 	bl	8003910 <HAL_I2S_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f4e:	f000 f92d 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000c4 	.word	0x200000c4
 8000f5c:	40003c00 	.word	0x40003c00
 8000f60:	00017700 	.word	0x00017700

08000f64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <MX_SPI1_Init+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000fb0:	220a      	movs	r2, #10
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_SPI1_Init+0x64>)
 8000fb6:	f003 ff0f 	bl	8004dd8 <HAL_SPI_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fc0:	f000 f8f4 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000010c 	.word	0x2000010c
 8000fcc:	40013000 	.word	0x40013000

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	4b6b      	ldr	r3, [pc, #428]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a6a      	ldr	r2, [pc, #424]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8000ff0:	f043 0310 	orr.w	r3, r3, #16
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b68      	ldr	r3, [pc, #416]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	4b64      	ldr	r3, [pc, #400]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a63      	ldr	r2, [pc, #396]	; (8001198 <MX_GPIO_Init+0x1c8>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b61      	ldr	r3, [pc, #388]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b5d      	ldr	r3, [pc, #372]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a5c      	ldr	r2, [pc, #368]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b56      	ldr	r3, [pc, #344]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a55      	ldr	r2, [pc, #340]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b53      	ldr	r3, [pc, #332]	; (8001198 <MX_GPIO_Init+0x1c8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <MX_GPIO_Init+0x1c8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a4e      	ldr	r2, [pc, #312]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b4c      	ldr	r3, [pc, #304]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b48      	ldr	r3, [pc, #288]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a47      	ldr	r2, [pc, #284]	; (8001198 <MX_GPIO_Init+0x1c8>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b45      	ldr	r3, [pc, #276]	; (8001198 <MX_GPIO_Init+0x1c8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2108      	movs	r1, #8
 8001092:	4842      	ldr	r0, [pc, #264]	; (800119c <MX_GPIO_Init+0x1cc>)
 8001094:	f001 f9b4 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2101      	movs	r1, #1
 800109c:	4840      	ldr	r0, [pc, #256]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 800109e:	f001 f9af 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010a2:	2200      	movs	r2, #0
 80010a4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80010a8:	483e      	ldr	r0, [pc, #248]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 80010aa:	f001 f9a9 	bl	8002400 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010ae:	2308      	movs	r3, #8
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4835      	ldr	r0, [pc, #212]	; (800119c <MX_GPIO_Init+0x1cc>)
 80010c6:	f000 ffff 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	482f      	ldr	r0, [pc, #188]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 80010e2:	f000 fff1 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010e6:	2308      	movs	r3, #8
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010f6:	2305      	movs	r3, #5
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4827      	ldr	r0, [pc, #156]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001102:	f000 ffe1 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001106:	2304      	movs	r3, #4
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	4823      	ldr	r0, [pc, #140]	; (80011a8 <MX_GPIO_Init+0x1d8>)
 800111a:	f000 ffd5 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800111e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001130:	2305      	movs	r3, #5
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	481b      	ldr	r0, [pc, #108]	; (80011a8 <MX_GPIO_Init+0x1d8>)
 800113c:	f000 ffc4 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001140:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001144:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4812      	ldr	r0, [pc, #72]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 800115a:	f000 ffb5 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800115e:	2320      	movs	r3, #32
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001172:	f000 ffa9 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001176:	2302      	movs	r3, #2
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800117a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_GPIO_Init+0x1cc>)
 800118c:	f000 ff9c 	bl	80020c8 <HAL_GPIO_Init>

}
 8001190:	bf00      	nop
 8001192:	3730      	adds	r7, #48	; 0x30
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40021000 	.word	0x40021000
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	40020400 	.word	0x40020400

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <Read_ADC>:

uint16_t adc_value;
float adc_vol;

void Read_ADC(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80011bc:	481c      	ldr	r0, [pc, #112]	; (8001230 <Read_ADC+0x78>)
 80011be:	f000 fae1 	bl	8001784 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK)
 80011c2:	491c      	ldr	r1, [pc, #112]	; (8001234 <Read_ADC+0x7c>)
 80011c4:	481a      	ldr	r0, [pc, #104]	; (8001230 <Read_ADC+0x78>)
 80011c6:	f000 fbe2 	bl	800198e <HAL_ADC_PollForConversion>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d122      	bne.n	8001216 <Read_ADC+0x5e>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 80011d0:	4817      	ldr	r0, [pc, #92]	; (8001230 <Read_ADC+0x78>)
 80011d2:	f000 fc67 	bl	8001aa4 <HAL_ADC_GetValue>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <Read_ADC+0x80>)
 80011dc:	801a      	strh	r2, [r3, #0]
		adc_vol = 3.3*adc_value/4095;
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <Read_ADC+0x80>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f942 	bl	800046c <__aeabi_i2d>
 80011e8:	a30d      	add	r3, pc, #52	; (adr r3, 8001220 <Read_ADC+0x68>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f7ff f9a7 	bl	8000540 <__aeabi_dmul>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	a30b      	add	r3, pc, #44	; (adr r3, 8001228 <Read_ADC+0x70>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	f7ff fac8 	bl	8000794 <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fbaa 	bl	8000964 <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <Read_ADC+0x84>)
 8001214:	6013      	str	r3, [r2, #0]
	}

	HAL_ADC_Stop(&hadc1);
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <Read_ADC+0x78>)
 8001218:	f000 fb86 	bl	8001928 <HAL_ADC_Stop>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	66666666 	.word	0x66666666
 8001224:	400a6666 	.word	0x400a6666
 8001228:	00000000 	.word	0x00000000
 800122c:	40affe00 	.word	0x40affe00
 8001230:	20000028 	.word	0x20000028
 8001234:	000186a0 	.word	0x000186a0
 8001238:	20000164 	.word	0x20000164
 800123c:	20000168 	.word	0x20000168

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_MspInit+0x4c>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <HAL_MspInit+0x4c>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800127e:	2007      	movs	r0, #7
 8001280:	f000 feee 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800

08001290 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_ADC_MspInit+0x7c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d127      	bne.n	8001302 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_ADC_MspInit+0x80>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a15      	ldr	r2, [pc, #84]	; (8001310 <HAL_ADC_MspInit+0x80>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_ADC_MspInit+0x80>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_ADC_MspInit+0x80>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_ADC_MspInit+0x80>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_ADC_MspInit+0x80>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ea:	2301      	movs	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <HAL_ADC_MspInit+0x84>)
 80012fe:	f000 fee3 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40012000 	.word	0x40012000
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_I2C_MspInit+0x84>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12c      	bne.n	8001394 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001356:	f44f 7310 	mov.w	r3, #576	; 0x240
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135c:	2312      	movs	r3, #18
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001360:	2301      	movs	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001368:	2304      	movs	r3, #4
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <HAL_I2C_MspInit+0x8c>)
 8001374:	f000 fea8 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 8001382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40005400 	.word	0x40005400
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020400 	.word	0x40020400

080013a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08e      	sub	sp, #56	; 0x38
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a31      	ldr	r2, [pc, #196]	; (8001498 <HAL_I2S_MspInit+0xf0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d15a      	bne.n	800148e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013d8:	2301      	movs	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013dc:	23c0      	movs	r3, #192	; 0xc0
 80013de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fbb5 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80013f4:	f7ff feda 	bl	80011ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_I2S_MspInit+0xf4>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <HAL_I2S_MspInit+0xf4>)
 8001402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_I2S_MspInit+0xf4>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_I2S_MspInit+0xf4>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_I2S_MspInit+0xf4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_I2S_MspInit+0xf4>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_I2S_MspInit+0xf4>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a18      	ldr	r2, [pc, #96]	; (800149c <HAL_I2S_MspInit+0xf4>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_I2S_MspInit+0xf4>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800144c:	2310      	movs	r3, #16
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800145c:	2306      	movs	r3, #6
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	480e      	ldr	r0, [pc, #56]	; (80014a0 <HAL_I2S_MspInit+0xf8>)
 8001468:	f000 fe2e 	bl	80020c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800146c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800147e:	2306      	movs	r3, #6
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	4806      	ldr	r0, [pc, #24]	; (80014a4 <HAL_I2S_MspInit+0xfc>)
 800148a:	f000 fe1d 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3738      	adds	r7, #56	; 0x38
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40003c00 	.word	0x40003c00
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020800 	.word	0x40020800

080014a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a19      	ldr	r2, [pc, #100]	; (800152c <HAL_SPI_MspInit+0x84>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12b      	bne.n	8001522 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a17      	ldr	r2, [pc, #92]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001502:	23e0      	movs	r3, #224	; 0xe0
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001512:	2305      	movs	r3, #5
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_SPI_MspInit+0x8c>)
 800151e:	f000 fdd3 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40013000 	.word	0x40013000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001584:	f000 f89a 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <OTG_FS_IRQHandler+0x10>)
 8001592:	f000 ff4e 	bl	8002432 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000170 	.word	0x20000170

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ca:	490e      	ldr	r1, [pc, #56]	; (8001604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e0:	4c0b      	ldr	r4, [pc, #44]	; (8001610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ee:	f7ff ffd7 	bl	80015a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f004 f88d 	bl	8005710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff fb87 	bl	8000d08 <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001608:	080057a8 	.word	0x080057a8
  ldr r2, =_sbss
 800160c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001610:	20000474 	.word	0x20000474

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <HAL_Init+0x40>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_Init+0x40>)
 800162e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x40>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 fd0d 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fdf8 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fd17 	bl	80020ae <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 fced 	bl	8002076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	2000016c 	.word	0x2000016c

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	2000016c 	.word	0x2000016c

080016fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e033      	b.n	800177a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fdb8 	bl	8001290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001742:	f023 0302 	bic.w	r3, r3, #2
 8001746:	f043 0202 	orr.w	r2, r3, #2
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 fad8 	bl	8001d04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
 800176a:	e001      	b.n	8001770 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_ADC_Start+0x1a>
 800179a:	2302      	movs	r3, #2
 800179c:	e0b2      	b.n	8001904 <HAL_ADC_Start+0x180>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d018      	beq.n	80017e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017c4:	4b52      	ldr	r3, [pc, #328]	; (8001910 <HAL_ADC_Start+0x18c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a52      	ldr	r2, [pc, #328]	; (8001914 <HAL_ADC_Start+0x190>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0c9a      	lsrs	r2, r3, #18
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017d8:	e002      	b.n	80017e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3b01      	subs	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f9      	bne.n	80017da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d17a      	bne.n	80018ea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800181e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001832:	d106      	bne.n	8001842 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	f023 0206 	bic.w	r2, r3, #6
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	645a      	str	r2, [r3, #68]	; 0x44
 8001840:	e002      	b.n	8001848 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001850:	4b31      	ldr	r3, [pc, #196]	; (8001918 <HAL_ADC_Start+0x194>)
 8001852:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800185c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2b00      	cmp	r3, #0
 8001868:	d12a      	bne.n	80018c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a2b      	ldr	r2, [pc, #172]	; (800191c <HAL_ADC_Start+0x198>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d015      	beq.n	80018a0 <HAL_ADC_Start+0x11c>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a29      	ldr	r2, [pc, #164]	; (8001920 <HAL_ADC_Start+0x19c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d105      	bne.n	800188a <HAL_ADC_Start+0x106>
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_ADC_Start+0x194>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00a      	beq.n	80018a0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a25      	ldr	r2, [pc, #148]	; (8001924 <HAL_ADC_Start+0x1a0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d136      	bne.n	8001902 <HAL_ADC_Start+0x17e>
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_ADC_Start+0x194>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b00      	cmp	r3, #0
 800189e:	d130      	bne.n	8001902 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d129      	bne.n	8001902 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	e020      	b.n	8001902 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a15      	ldr	r2, [pc, #84]	; (800191c <HAL_ADC_Start+0x198>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d11b      	bne.n	8001902 <HAL_ADC_Start+0x17e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d114      	bne.n	8001902 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	e00b      	b.n	8001902 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f043 0210 	orr.w	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f043 0201 	orr.w	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000000 	.word	0x20000000
 8001914:	431bde83 	.word	0x431bde83
 8001918:	40012300 	.word	0x40012300
 800191c:	40012000 	.word	0x40012000
 8001920:	40012100 	.word	0x40012100
 8001924:	40012200 	.word	0x40012200

08001928 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_ADC_Stop+0x16>
 800193a:	2302      	movs	r3, #2
 800193c:	e021      	b.n	8001982 <HAL_ADC_Stop+0x5a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019aa:	d113      	bne.n	80019d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019ba:	d10b      	bne.n	80019d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f043 0220 	orr.w	r2, r3, #32
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e063      	b.n	8001a9c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019d4:	f7ff fe86 	bl	80016e4 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019da:	e021      	b.n	8001a20 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e2:	d01d      	beq.n	8001a20 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_ADC_PollForConversion+0x6c>
 80019ea:	f7ff fe7b 	bl	80016e4 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d212      	bcs.n	8001a20 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d00b      	beq.n	8001a20 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f043 0204 	orr.w	r2, r3, #4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e03d      	b.n	8001a9c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d1d6      	bne.n	80019dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f06f 0212 	mvn.w	r2, #18
 8001a36:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d123      	bne.n	8001a9a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d11f      	bne.n	8001a9a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d111      	bne.n	8001a9a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x1c>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e105      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x228>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b09      	cmp	r3, #9
 8001aea:	d925      	bls.n	8001b38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68d9      	ldr	r1, [r3, #12]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	3b1e      	subs	r3, #30
 8001b02:	2207      	movs	r2, #7
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	400a      	ands	r2, r1
 8001b10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68d9      	ldr	r1, [r3, #12]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4403      	add	r3, r0
 8001b2a:	3b1e      	subs	r3, #30
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	e022      	b.n	8001b7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6919      	ldr	r1, [r3, #16]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	400a      	ands	r2, r1
 8001b5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6919      	ldr	r1, [r3, #16]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4403      	add	r3, r0
 8001b74:	409a      	lsls	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d824      	bhi.n	8001bd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b05      	subs	r3, #5
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b05      	subs	r3, #5
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bce:	e04c      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d824      	bhi.n	8001c22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b23      	subs	r3, #35	; 0x23
 8001bea:	221f      	movs	r2, #31
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b23      	subs	r3, #35	; 0x23
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c20:	e023      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b41      	subs	r3, #65	; 0x41
 8001c34:	221f      	movs	r2, #31
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	400a      	ands	r2, r1
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b41      	subs	r3, #65	; 0x41
 8001c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_ADC_ConfigChannel+0x234>)
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a21      	ldr	r2, [pc, #132]	; (8001cf8 <HAL_ADC_ConfigChannel+0x238>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d109      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1cc>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <HAL_ADC_ConfigChannel+0x238>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d123      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x21e>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d003      	beq.n	8001ca6 <HAL_ADC_ConfigChannel+0x1e6>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b11      	cmp	r3, #17
 8001ca4:	d11b      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d111      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_ADC_ConfigChannel+0x23c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <HAL_ADC_ConfigChannel+0x240>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	0c9a      	lsrs	r2, r3, #18
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cd0:	e002      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f9      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40012300 	.word	0x40012300
 8001cf8:	40012000 	.word	0x40012000
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	431bde83 	.word	0x431bde83

08001d04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0c:	4b79      	ldr	r3, [pc, #484]	; (8001ef4 <ADC_Init+0x1f0>)
 8001d0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	021a      	lsls	r2, r3, #8
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6899      	ldr	r1, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <ADC_Init+0x1f4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001daa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6899      	ldr	r1, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6899      	ldr	r1, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	e00f      	b.n	8001e02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0202 	bic.w	r2, r2, #2
 8001e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	005a      	lsls	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	035a      	lsls	r2, r3, #13
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	e007      	b.n	8001e78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	051a      	lsls	r2, r3, #20
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6899      	ldr	r1, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eba:	025a      	lsls	r2, r3, #9
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6899      	ldr	r1, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	029a      	lsls	r2, r3, #10
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	609a      	str	r2, [r3, #8]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40012300 	.word	0x40012300
 8001ef8:	0f000001 	.word	0x0f000001

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f7ff ff8e 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff47 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff5c 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff8e 	bl	8001fb4 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5d 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ffb0 	bl	800201c <SysTick_Config>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e16b      	b.n	80023bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f040 815a 	bne.w	80023b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d005      	beq.n	800211a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002116:	2b02      	cmp	r3, #2
 8002118:	d130      	bne.n	800217c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 0201 	and.w	r2, r3, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b03      	cmp	r3, #3
 8002186:	d017      	beq.n	80021b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d123      	bne.n	800220c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	08da      	lsrs	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80b4 	beq.w	80023b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b60      	ldr	r3, [pc, #384]	; (80023d4 <HAL_GPIO_Init+0x30c>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a5f      	ldr	r2, [pc, #380]	; (80023d4 <HAL_GPIO_Init+0x30c>)
 8002258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	4b5d      	ldr	r3, [pc, #372]	; (80023d4 <HAL_GPIO_Init+0x30c>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226a:	4a5b      	ldr	r2, [pc, #364]	; (80023d8 <HAL_GPIO_Init+0x310>)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	220f      	movs	r2, #15
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a52      	ldr	r2, [pc, #328]	; (80023dc <HAL_GPIO_Init+0x314>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d02b      	beq.n	80022ee <HAL_GPIO_Init+0x226>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a51      	ldr	r2, [pc, #324]	; (80023e0 <HAL_GPIO_Init+0x318>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d025      	beq.n	80022ea <HAL_GPIO_Init+0x222>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a50      	ldr	r2, [pc, #320]	; (80023e4 <HAL_GPIO_Init+0x31c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01f      	beq.n	80022e6 <HAL_GPIO_Init+0x21e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4f      	ldr	r2, [pc, #316]	; (80023e8 <HAL_GPIO_Init+0x320>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d019      	beq.n	80022e2 <HAL_GPIO_Init+0x21a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4e      	ldr	r2, [pc, #312]	; (80023ec <HAL_GPIO_Init+0x324>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_GPIO_Init+0x216>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4d      	ldr	r2, [pc, #308]	; (80023f0 <HAL_GPIO_Init+0x328>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00d      	beq.n	80022da <HAL_GPIO_Init+0x212>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4c      	ldr	r2, [pc, #304]	; (80023f4 <HAL_GPIO_Init+0x32c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4b      	ldr	r2, [pc, #300]	; (80023f8 <HAL_GPIO_Init+0x330>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_GPIO_Init+0x20a>
 80022ce:	2307      	movs	r3, #7
 80022d0:	e00e      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022d2:	2308      	movs	r3, #8
 80022d4:	e00c      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022d6:	2306      	movs	r3, #6
 80022d8:	e00a      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022da:	2305      	movs	r3, #5
 80022dc:	e008      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022de:	2304      	movs	r3, #4
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022e2:	2303      	movs	r3, #3
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022ee:	2300      	movs	r3, #0
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	f002 0203 	and.w	r2, r2, #3
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4093      	lsls	r3, r2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002300:	4935      	ldr	r1, [pc, #212]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230e:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <HAL_GPIO_Init+0x334>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002332:	4a32      	ldr	r2, [pc, #200]	; (80023fc <HAL_GPIO_Init+0x334>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <HAL_GPIO_Init+0x334>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800235c:	4a27      	ldr	r2, [pc, #156]	; (80023fc <HAL_GPIO_Init+0x334>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <HAL_GPIO_Init+0x334>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_GPIO_Init+0x334>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_GPIO_Init+0x334>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_GPIO_Init+0x334>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3301      	adds	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	f67f ae90 	bls.w	80020e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40021400 	.word	0x40021400
 80023f4:	40021800 	.word	0x40021800
 80023f8:	40021c00 	.word	0x40021c00
 80023fc:	40013c00 	.word	0x40013c00

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800241c:	e003      	b.n	8002426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800241e:	887b      	ldrh	r3, [r7, #2]
 8002420:	041a      	lsls	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f002 fe40 	bl	80050ce <USB_GetMode>
 800244e:	4603      	mov	r3, r0
 8002450:	2b01      	cmp	r3, #1
 8002452:	f040 80f6 	bne.w	8002642 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f002 fe24 	bl	80050a8 <USB_ReadInterrupts>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80ec 	beq.w	8002640 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f002 fe1b 	bl	80050a8 <USB_ReadInterrupts>
 8002472:	4603      	mov	r3, r0
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800247c:	d104      	bne.n	8002488 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002486:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f002 fe0b 	bl	80050a8 <USB_ReadInterrupts>
 8002492:	4603      	mov	r3, r0
 8002494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800249c:	d104      	bne.n	80024a8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024a6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fdfb 	bl	80050a8 <USB_ReadInterrupts>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024bc:	d104      	bne.n	80024c8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024c6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 fdeb 	bl	80050a8 <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d103      	bne.n	80024e4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2202      	movs	r2, #2
 80024e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fddd 	bl	80050a8 <USB_ReadInterrupts>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024f8:	d11c      	bne.n	8002534 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002502:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10f      	bne.n	8002534 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002514:	2110      	movs	r1, #16
 8002516:	6938      	ldr	r0, [r7, #16]
 8002518:	f002 fd0a 	bl	8004f30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800251c:	6938      	ldr	r0, [r7, #16]
 800251e:	f002 fd3b 	bl	8004f98 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2101      	movs	r1, #1
 8002528:	4618      	mov	r0, r3
 800252a:	f002 fdde 	bl	80050ea <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f003 f86f 	bl	8005612 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f002 fdb5 	bl	80050a8 <USB_ReadInterrupts>
 800253e:	4603      	mov	r3, r0
 8002540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002548:	d102      	bne.n	8002550 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f001 f829 	bl	80035a2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f002 fda7 	bl	80050a8 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b08      	cmp	r3, #8
 8002562:	d106      	bne.n	8002572 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f003 f838 	bl	80055da <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2208      	movs	r2, #8
 8002570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fd96 	bl	80050a8 <USB_ReadInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b10      	cmp	r3, #16
 8002584:	d101      	bne.n	800258a <HAL_HCD_IRQHandler+0x158>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_HCD_IRQHandler+0x15a>
 800258a:	2300      	movs	r3, #0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d012      	beq.n	80025b6 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0210 	bic.w	r2, r2, #16
 800259e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 ff2c 	bl	80033fe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699a      	ldr	r2, [r3, #24]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0210 	orr.w	r2, r2, #16
 80025b4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 fd74 	bl	80050a8 <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ca:	d13a      	bne.n	8002642 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 fdc4 	bl	800515e <USB_HC_ReadInterrupt>
 80025d6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e025      	b.n	800262a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d018      	beq.n	8002624 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002608:	d106      	bne.n	8002618 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	4619      	mov	r1, r3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f836 	bl	8002682 <HCD_HC_IN_IRQHandler>
 8002616:	e005      	b.n	8002624 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	4619      	mov	r1, r3
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fb84 	bl	8002d2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3301      	adds	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	429a      	cmp	r2, r3
 8002632:	d3d4      	bcc.n	80025de <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263c:	615a      	str	r2, [r3, #20]
 800263e:	e000      	b.n	8002642 <HAL_HCD_IRQHandler+0x210>
      return;
 8002640:	bf00      	nop
    }
  }
}
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_HCD_Stop+0x16>
 800265a:	2302      	movs	r3, #2
 800265c:	e00d      	b.n	800267a <HAL_HCD_Stop+0x32>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f002 fe84 	bl	8005378 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d11a      	bne.n	80026e8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	461a      	mov	r2, r3
 80026c0:	2304      	movs	r3, #4
 80026c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	3361      	adds	r3, #97	; 0x61
 80026d2:	2206      	movs	r2, #6
 80026d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 fd4d 	bl	8005180 <USB_HC_Halt>
 80026e6:	e0af      	b.n	8002848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026fe:	d11b      	bne.n	8002738 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002712:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3361      	adds	r3, #97	; 0x61
 8002722:	2207      	movs	r2, #7
 8002724:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fd25 	bl	8005180 <USB_HC_Halt>
 8002736:	e087      	b.n	8002848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b20      	cmp	r3, #32
 800274c:	d109      	bne.n	8002762 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	461a      	mov	r2, r3
 800275c:	2320      	movs	r3, #32
 800275e:	6093      	str	r3, [r2, #8]
 8002760:	e072      	b.n	8002848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b08      	cmp	r3, #8
 8002776:	d11a      	bne.n	80027ae <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	461a      	mov	r2, r3
 8002786:	2308      	movs	r3, #8
 8002788:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	3361      	adds	r3, #97	; 0x61
 8002798:	2205      	movs	r2, #5
 800279a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fcea 	bl	8005180 <USB_HC_Halt>
 80027ac:	e04c      	b.n	8002848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c4:	d11b      	bne.n	80027fe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	3361      	adds	r3, #97	; 0x61
 80027e8:	2208      	movs	r2, #8
 80027ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 fcc2 	bl	8005180 <USB_HC_Halt>
 80027fc:	e024      	b.n	8002848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002810:	2b80      	cmp	r3, #128	; 0x80
 8002812:	d119      	bne.n	8002848 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	461a      	mov	r2, r3
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3361      	adds	r3, #97	; 0x61
 8002834:	2206      	movs	r2, #6
 8002836:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fc9c 	bl	8005180 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800285a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285e:	d112      	bne.n	8002886 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f002 fc88 	bl	8005180 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002882:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002884:	e24e      	b.n	8002d24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 80df 	bne.w	8002a5c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d019      	beq.n	80028da <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	3348      	adds	r3, #72	; 0x48
 80028b4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	0159      	lsls	r1, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	440b      	add	r3, r1
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028c8:	1ad2      	subs	r2, r2, r3
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	202c      	movs	r0, #44	; 0x2c
 80028d0:	fb00 f303 	mul.w	r3, r0, r3
 80028d4:	440b      	add	r3, r1
 80028d6:	3350      	adds	r3, #80	; 0x50
 80028d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3361      	adds	r3, #97	; 0x61
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	335c      	adds	r3, #92	; 0x5c
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	461a      	mov	r2, r3
 800290c:	2301      	movs	r3, #1
 800290e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	333f      	adds	r3, #63	; 0x3f
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	333f      	adds	r3, #63	; 0x3f
 8002932:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002934:	2b02      	cmp	r3, #2
 8002936:	d111      	bne.n	800295c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f002 fc1c 	bl	8005180 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	461a      	mov	r2, r3
 8002956:	2310      	movs	r3, #16
 8002958:	6093      	str	r3, [r2, #8]
 800295a:	e03a      	b.n	80029d2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	333f      	adds	r3, #63	; 0x3f
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d009      	beq.n	8002984 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	333f      	adds	r3, #63	; 0x3f
 800297e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002980:	2b01      	cmp	r3, #1
 8002982:	d126      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	0151      	lsls	r1, r2, #5
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	440a      	add	r2, r1
 800299a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800299e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3360      	adds	r3, #96	; 0x60
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	b2d9      	uxtb	r1, r3
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	202c      	movs	r0, #44	; 0x2c
 80029c0:	fb00 f303 	mul.w	r3, r0, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3360      	adds	r3, #96	; 0x60
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f002 fe2e 	bl	800562e <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d12b      	bne.n	8002a32 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3348      	adds	r3, #72	; 0x48
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	202c      	movs	r0, #44	; 0x2c
 80029f0:	fb00 f202 	mul.w	r2, r0, r2
 80029f4:	440a      	add	r2, r1
 80029f6:	3240      	adds	r2, #64	; 0x40
 80029f8:	8812      	ldrh	r2, [r2, #0]
 80029fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 818e 	beq.w	8002d24 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3354      	adds	r3, #84	; 0x54
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	f083 0301 	eor.w	r3, r3, #1
 8002a1c:	b2d8      	uxtb	r0, r3
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3354      	adds	r3, #84	; 0x54
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	701a      	strb	r2, [r3, #0]
}
 8002a30:	e178      	b.n	8002d24 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3354      	adds	r3, #84	; 0x54
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	f083 0301 	eor.w	r3, r3, #1
 8002a46:	b2d8      	uxtb	r0, r3
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3354      	adds	r3, #84	; 0x54
 8002a56:	4602      	mov	r2, r0
 8002a58:	701a      	strb	r2, [r3, #0]
}
 8002a5a:	e163      	b.n	8002d24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	f040 80f6 	bne.w	8002c60 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3361      	adds	r3, #97	; 0x61
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d109      	bne.n	8002a9c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3360      	adds	r3, #96	; 0x60
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e0c9      	b.n	8002c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3361      	adds	r3, #97	; 0x61
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d109      	bne.n	8002ac4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3360      	adds	r3, #96	; 0x60
 8002abe:	2205      	movs	r2, #5
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e0b5      	b.n	8002c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3361      	adds	r3, #97	; 0x61
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b06      	cmp	r3, #6
 8002ad6:	d009      	beq.n	8002aec <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d150      	bne.n	8002b8e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	335c      	adds	r3, #92	; 0x5c
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	202c      	movs	r0, #44	; 0x2c
 8002b04:	fb00 f303 	mul.w	r3, r0, r3
 8002b08:	440b      	add	r3, r1
 8002b0a:	335c      	adds	r3, #92	; 0x5c
 8002b0c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	335c      	adds	r3, #92	; 0x5c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d912      	bls.n	8002b48 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	335c      	adds	r3, #92	; 0x5c
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3360      	adds	r3, #96	; 0x60
 8002b42:	2204      	movs	r2, #4
 8002b44:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b46:	e073      	b.n	8002c30 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3360      	adds	r3, #96	; 0x60
 8002b56:	2202      	movs	r2, #2
 8002b58:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b70:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b78:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	461a      	mov	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b8c:	e050      	b.n	8002c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3361      	adds	r3, #97	; 0x61
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d122      	bne.n	8002be8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3360      	adds	r3, #96	; 0x60
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bd2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e023      	b.n	8002c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3361      	adds	r3, #97	; 0x61
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b07      	cmp	r3, #7
 8002bfa:	d119      	bne.n	8002c30 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	335c      	adds	r3, #92	; 0x5c
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	202c      	movs	r0, #44	; 0x2c
 8002c14:	fb00 f303 	mul.w	r3, r0, r3
 8002c18:	440b      	add	r3, r1
 8002c1a:	335c      	adds	r3, #92	; 0x5c
 8002c1c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	3360      	adds	r3, #96	; 0x60
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2302      	movs	r3, #2
 8002c40:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	b2d9      	uxtb	r1, r3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	202c      	movs	r0, #44	; 0x2c
 8002c4c:	fb00 f303 	mul.w	r3, r0, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3360      	adds	r3, #96	; 0x60
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f002 fce8 	bl	800562e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c5e:	e061      	b.n	8002d24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d156      	bne.n	8002d24 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	333f      	adds	r3, #63	; 0x3f
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d111      	bne.n	8002cae <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	335c      	adds	r3, #92	; 0x5c
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 fa6a 	bl	8005180 <USB_HC_Halt>
 8002cac:	e031      	b.n	8002d12 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	333f      	adds	r3, #63	; 0x3f
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	333f      	adds	r3, #63	; 0x3f
 8002cd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d11d      	bne.n	8002d12 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	335c      	adds	r3, #92	; 0x5c
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d110      	bne.n	8002d12 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3361      	adds	r3, #97	; 0x61
 8002cfe:	2203      	movs	r2, #3
 8002d00:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 fa37 	bl	8005180 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2310      	movs	r3, #16
 8002d22:	6093      	str	r3, [r2, #8]
}
 8002d24:	bf00      	nop
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d11a      	bne.n	8002d92 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3361      	adds	r3, #97	; 0x61
 8002d7c:	2206      	movs	r2, #6
 8002d7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f002 f9f8 	bl	8005180 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d90:	e331      	b.n	80033f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d12e      	bne.n	8002e06 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	461a      	mov	r2, r3
 8002db6:	2320      	movs	r3, #32
 8002db8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	333d      	adds	r3, #61	; 0x3d
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	f040 8313 	bne.w	80033f6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	333d      	adds	r3, #61	; 0x3d
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3360      	adds	r3, #96	; 0x60
 8002df0:	2202      	movs	r2, #2
 8002df2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f002 f9be 	bl	8005180 <USB_HC_Halt>
}
 8002e04:	e2f7      	b.n	80033f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e1c:	d112      	bne.n	8002e44 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e30:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 f99f 	bl	8005180 <USB_HC_Halt>
}
 8002e42:	e2d8      	b.n	80033f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d140      	bne.n	8002edc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	335c      	adds	r3, #92	; 0x5c
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d111      	bne.n	8002ea6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	333d      	adds	r3, #61	; 0x3d
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2340      	movs	r3, #64	; 0x40
 8002ea4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3361      	adds	r3, #97	; 0x61
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 f953 	bl	8005180 <USB_HC_Halt>
}
 8002eda:	e28c      	b.n	80033f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	d12c      	bne.n	8002f4c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3361      	adds	r3, #97	; 0x61
 8002f00:	2204      	movs	r2, #4
 8002f02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	333d      	adds	r3, #61	; 0x3d
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	335c      	adds	r3, #92	; 0x5c
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f002 f924 	bl	8005180 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	461a      	mov	r2, r3
 8002f46:	2340      	movs	r3, #64	; 0x40
 8002f48:	6093      	str	r3, [r2, #8]
}
 8002f4a:	e254      	b.n	80033f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d11a      	bne.n	8002f98 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2308      	movs	r3, #8
 8002f72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3361      	adds	r3, #97	; 0x61
 8002f82:	2205      	movs	r2, #5
 8002f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f002 f8f5 	bl	8005180 <USB_HC_Halt>
}
 8002f96:	e22e      	b.n	80033f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0310 	and.w	r3, r3, #16
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d140      	bne.n	8003030 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	335c      	adds	r3, #92	; 0x5c
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	3361      	adds	r3, #97	; 0x61
 8002fce:	2203      	movs	r2, #3
 8002fd0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	333d      	adds	r3, #61	; 0x3d
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d112      	bne.n	800300c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	333c      	adds	r3, #60	; 0x3c
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d108      	bne.n	800300c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	333d      	adds	r3, #61	; 0x3d
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f002 f8b2 	bl	8005180 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	2310      	movs	r3, #16
 800302c:	6093      	str	r3, [r2, #8]
}
 800302e:	e1e2      	b.n	80033f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b80      	cmp	r3, #128	; 0x80
 8003044:	d164      	bne.n	8003110 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d111      	bne.n	8003072 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3361      	adds	r3, #97	; 0x61
 800305c:	2206      	movs	r2, #6
 800305e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f002 f888 	bl	8005180 <USB_HC_Halt>
 8003070:	e044      	b.n	80030fc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	335c      	adds	r3, #92	; 0x5c
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	202c      	movs	r0, #44	; 0x2c
 800308a:	fb00 f303 	mul.w	r3, r0, r3
 800308e:	440b      	add	r3, r1
 8003090:	335c      	adds	r3, #92	; 0x5c
 8003092:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	212c      	movs	r1, #44	; 0x2c
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	4413      	add	r3, r2
 80030a0:	335c      	adds	r3, #92	; 0x5c
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d920      	bls.n	80030ea <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	335c      	adds	r3, #92	; 0x5c
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	212c      	movs	r1, #44	; 0x2c
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	3360      	adds	r3, #96	; 0x60
 80030c8:	2204      	movs	r2, #4
 80030ca:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	b2d9      	uxtb	r1, r3
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	202c      	movs	r0, #44	; 0x2c
 80030d6:	fb00 f303 	mul.w	r3, r0, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3360      	adds	r3, #96	; 0x60
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f002 faa3 	bl	800562e <HAL_HCD_HC_NotifyURBChange_Callback>
 80030e8:	e008      	b.n	80030fc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	3360      	adds	r3, #96	; 0x60
 80030f8:	2202      	movs	r2, #2
 80030fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	461a      	mov	r2, r3
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	6093      	str	r3, [r2, #8]
}
 800310e:	e172      	b.n	80033f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003126:	d11b      	bne.n	8003160 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3361      	adds	r3, #97	; 0x61
 8003136:	2208      	movs	r2, #8
 8003138:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f002 f81b 	bl	8005180 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003156:	461a      	mov	r2, r3
 8003158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800315c:	6093      	str	r3, [r2, #8]
}
 800315e:	e14a      	b.n	80033f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	4413      	add	r3, r2
 8003168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b02      	cmp	r3, #2
 8003174:	f040 813f 	bne.w	80033f6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3361      	adds	r3, #97	; 0x61
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d17d      	bne.n	8003288 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3360      	adds	r3, #96	; 0x60
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	333f      	adds	r3, #63	; 0x3f
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d00a      	beq.n	80031c8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	333f      	adds	r3, #63	; 0x3f
 80031c0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	f040 8100 	bne.w	80033c8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d113      	bne.n	80031f8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3355      	adds	r3, #85	; 0x55
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	f083 0301 	eor.w	r3, r3, #1
 80031e4:	b2d8      	uxtb	r0, r3
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3355      	adds	r3, #85	; 0x55
 80031f4:	4602      	mov	r2, r0
 80031f6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 80e3 	bne.w	80033c8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	334c      	adds	r3, #76	; 0x4c
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80d8 	beq.w	80033c8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	334c      	adds	r3, #76	; 0x4c
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	202c      	movs	r0, #44	; 0x2c
 800322e:	fb00 f202 	mul.w	r2, r0, r2
 8003232:	440a      	add	r2, r1
 8003234:	3240      	adds	r2, #64	; 0x40
 8003236:	8812      	ldrh	r2, [r2, #0]
 8003238:	4413      	add	r3, r2
 800323a:	3b01      	subs	r3, #1
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	202c      	movs	r0, #44	; 0x2c
 8003242:	fb00 f202 	mul.w	r2, r0, r2
 8003246:	440a      	add	r2, r1
 8003248:	3240      	adds	r2, #64	; 0x40
 800324a:	8812      	ldrh	r2, [r2, #0]
 800324c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80b5 	beq.w	80033c8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	3355      	adds	r3, #85	; 0x55
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2d8      	uxtb	r0, r3
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3355      	adds	r3, #85	; 0x55
 8003282:	4602      	mov	r2, r0
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e09f      	b.n	80033c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	3361      	adds	r3, #97	; 0x61
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d109      	bne.n	80032b0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3360      	adds	r3, #96	; 0x60
 80032aa:	2202      	movs	r2, #2
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	e08b      	b.n	80033c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3361      	adds	r3, #97	; 0x61
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d109      	bne.n	80032d8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3360      	adds	r3, #96	; 0x60
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	e077      	b.n	80033c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3361      	adds	r3, #97	; 0x61
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d109      	bne.n	8003300 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3360      	adds	r3, #96	; 0x60
 80032fa:	2205      	movs	r2, #5
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e063      	b.n	80033c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3361      	adds	r3, #97	; 0x61
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b06      	cmp	r3, #6
 8003312:	d009      	beq.n	8003328 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3361      	adds	r3, #97	; 0x61
 8003322:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003324:	2b08      	cmp	r3, #8
 8003326:	d14f      	bne.n	80033c8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	335c      	adds	r3, #92	; 0x5c
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	202c      	movs	r0, #44	; 0x2c
 8003340:	fb00 f303 	mul.w	r3, r0, r3
 8003344:	440b      	add	r3, r1
 8003346:	335c      	adds	r3, #92	; 0x5c
 8003348:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	335c      	adds	r3, #92	; 0x5c
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d912      	bls.n	8003384 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	212c      	movs	r1, #44	; 0x2c
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	335c      	adds	r3, #92	; 0x5c
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3360      	adds	r3, #96	; 0x60
 800337e:	2204      	movs	r2, #4
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e021      	b.n	80033c8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3360      	adds	r3, #96	; 0x60
 8003392:	2202      	movs	r2, #2
 8003394:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033ac:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033b4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c2:	461a      	mov	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d4:	461a      	mov	r2, r3
 80033d6:	2302      	movs	r3, #2
 80033d8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	b2d9      	uxtb	r1, r3
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	202c      	movs	r0, #44	; 0x2c
 80033e4:	fb00 f303 	mul.w	r3, r0, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3360      	adds	r3, #96	; 0x60
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f002 f91c 	bl	800562e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033f6:	bf00      	nop
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b08a      	sub	sp, #40	; 0x28
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	0c5b      	lsrs	r3, r3, #17
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003432:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d004      	beq.n	8003444 <HCD_RXQLVL_IRQHandler+0x46>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b05      	cmp	r3, #5
 800343e:	f000 80a9 	beq.w	8003594 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003442:	e0aa      	b.n	800359a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80a6 	beq.w	8003598 <HCD_RXQLVL_IRQHandler+0x19a>
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	3344      	adds	r3, #68	; 0x44
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 809b 	beq.w	8003598 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	3350      	adds	r3, #80	; 0x50
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	441a      	add	r2, r3
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	202c      	movs	r0, #44	; 0x2c
 800347c:	fb00 f303 	mul.w	r3, r0, r3
 8003480:	440b      	add	r3, r1
 8003482:	334c      	adds	r3, #76	; 0x4c
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d87a      	bhi.n	8003580 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	3344      	adds	r3, #68	; 0x44
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	b292      	uxth	r2, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	f001 fda8 	bl	8004ff8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3344      	adds	r3, #68	; 0x44
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	441a      	add	r2, r3
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	202c      	movs	r0, #44	; 0x2c
 80034c2:	fb00 f303 	mul.w	r3, r0, r3
 80034c6:	440b      	add	r3, r1
 80034c8:	3344      	adds	r3, #68	; 0x44
 80034ca:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3350      	adds	r3, #80	; 0x50
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	441a      	add	r2, r3
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	202c      	movs	r0, #44	; 0x2c
 80034e6:	fb00 f303 	mul.w	r3, r0, r3
 80034ea:	440b      	add	r3, r1
 80034ec:	3350      	adds	r3, #80	; 0x50
 80034ee:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	0cdb      	lsrs	r3, r3, #19
 8003500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003504:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	3340      	adds	r3, #64	; 0x40
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4293      	cmp	r3, r2
 800351c:	d13c      	bne.n	8003598 <HCD_RXQLVL_IRQHandler+0x19a>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d039      	beq.n	8003598 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	4413      	add	r3, r2
 800352c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800353a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003542:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	4413      	add	r3, r2
 800354c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003550:	461a      	mov	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3354      	adds	r3, #84	; 0x54
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	f083 0301 	eor.w	r3, r3, #1
 800356a:	b2d8      	uxtb	r0, r3
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	212c      	movs	r1, #44	; 0x2c
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	3354      	adds	r3, #84	; 0x54
 800357a:	4602      	mov	r2, r0
 800357c:	701a      	strb	r2, [r3, #0]
      break;
 800357e:	e00b      	b.n	8003598 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	3360      	adds	r3, #96	; 0x60
 800358e:	2204      	movs	r2, #4
 8003590:	701a      	strb	r2, [r3, #0]
      break;
 8003592:	e001      	b.n	8003598 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003594:	bf00      	nop
 8003596:	e000      	b.n	800359a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003598:	bf00      	nop
  }
}
 800359a:	bf00      	nop
 800359c:	3728      	adds	r7, #40	; 0x28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035ce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d10b      	bne.n	80035f2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d102      	bne.n	80035ea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f002 f806 	bl	80055f6 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d132      	bne.n	8003662 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f043 0308 	orr.w	r3, r3, #8
 8003602:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b04      	cmp	r3, #4
 800360c:	d126      	bne.n	800365c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d113      	bne.n	800363e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800361c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003620:	d106      	bne.n	8003630 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2102      	movs	r1, #2
 8003628:	4618      	mov	r0, r3
 800362a:	f001 fd5e 	bl	80050ea <USB_InitFSLSPClkSel>
 800362e:	e011      	b.n	8003654 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f001 fd57 	bl	80050ea <USB_InitFSLSPClkSel>
 800363c:	e00a      	b.n	8003654 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d106      	bne.n	8003654 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800364c:	461a      	mov	r2, r3
 800364e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003652:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f001 fff8 	bl	800564a <HAL_HCD_PortEnabled_Callback>
 800365a:	e002      	b.n	8003662 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f002 f802 	bl	8005666 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b20      	cmp	r3, #32
 800366a:	d103      	bne.n	8003674 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f043 0320 	orr.w	r3, r3, #32
 8003672:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800367a:	461a      	mov	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6013      	str	r3, [r2, #0]
}
 8003680:	bf00      	nop
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e12b      	b.n	80038f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fe32 	bl	8001318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	; 0x24
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036ec:	f001 fa20 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80036f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4a81      	ldr	r2, [pc, #516]	; (80038fc <HAL_I2C_Init+0x274>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d807      	bhi.n	800370c <HAL_I2C_Init+0x84>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4a80      	ldr	r2, [pc, #512]	; (8003900 <HAL_I2C_Init+0x278>)
 8003700:	4293      	cmp	r3, r2
 8003702:	bf94      	ite	ls
 8003704:	2301      	movls	r3, #1
 8003706:	2300      	movhi	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	e006      	b.n	800371a <HAL_I2C_Init+0x92>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a7d      	ldr	r2, [pc, #500]	; (8003904 <HAL_I2C_Init+0x27c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	bf94      	ite	ls
 8003714:	2301      	movls	r3, #1
 8003716:	2300      	movhi	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0e7      	b.n	80038f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4a78      	ldr	r2, [pc, #480]	; (8003908 <HAL_I2C_Init+0x280>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0c9b      	lsrs	r3, r3, #18
 800372c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a6a      	ldr	r2, [pc, #424]	; (80038fc <HAL_I2C_Init+0x274>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d802      	bhi.n	800375c <HAL_I2C_Init+0xd4>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	3301      	adds	r3, #1
 800375a:	e009      	b.n	8003770 <HAL_I2C_Init+0xe8>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	4a69      	ldr	r2, [pc, #420]	; (800390c <HAL_I2C_Init+0x284>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	099b      	lsrs	r3, r3, #6
 800376e:	3301      	adds	r3, #1
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	430b      	orrs	r3, r1
 8003776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	495c      	ldr	r1, [pc, #368]	; (80038fc <HAL_I2C_Init+0x274>)
 800378c:	428b      	cmp	r3, r1
 800378e:	d819      	bhi.n	80037c4 <HAL_I2C_Init+0x13c>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1e59      	subs	r1, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fbb1 f3f3 	udiv	r3, r1, r3
 800379e:	1c59      	adds	r1, r3, #1
 80037a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037a4:	400b      	ands	r3, r1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_I2C_Init+0x138>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1e59      	subs	r1, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b8:	3301      	adds	r3, #1
 80037ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037be:	e051      	b.n	8003864 <HAL_I2C_Init+0x1dc>
 80037c0:	2304      	movs	r3, #4
 80037c2:	e04f      	b.n	8003864 <HAL_I2C_Init+0x1dc>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d111      	bne.n	80037f0 <HAL_I2C_Init+0x168>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e58      	subs	r0, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	440b      	add	r3, r1
 80037da:	fbb0 f3f3 	udiv	r3, r0, r3
 80037de:	3301      	adds	r3, #1
 80037e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e012      	b.n	8003816 <HAL_I2C_Init+0x18e>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e58      	subs	r0, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	0099      	lsls	r1, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	fbb0 f3f3 	udiv	r3, r0, r3
 8003806:	3301      	adds	r3, #1
 8003808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Init+0x196>
 800381a:	2301      	movs	r3, #1
 800381c:	e022      	b.n	8003864 <HAL_I2C_Init+0x1dc>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10e      	bne.n	8003844 <HAL_I2C_Init+0x1bc>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1e58      	subs	r0, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	440b      	add	r3, r1
 8003834:	fbb0 f3f3 	udiv	r3, r0, r3
 8003838:	3301      	adds	r3, #1
 800383a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003842:	e00f      	b.n	8003864 <HAL_I2C_Init+0x1dc>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1e58      	subs	r0, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	0099      	lsls	r1, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	fbb0 f3f3 	udiv	r3, r0, r3
 800385a:	3301      	adds	r3, #1
 800385c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	6809      	ldr	r1, [r1, #0]
 8003868:	4313      	orrs	r3, r2
 800386a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6911      	ldr	r1, [r2, #16]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68d2      	ldr	r2, [r2, #12]
 800389e:	4311      	orrs	r1, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	000186a0 	.word	0x000186a0
 8003900:	001e847f 	.word	0x001e847f
 8003904:	003d08ff 	.word	0x003d08ff
 8003908:	431bde83 	.word	0x431bde83
 800390c:	10624dd3 	.word	0x10624dd3

08003910 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e128      	b.n	8003b74 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a90      	ldr	r2, [pc, #576]	; (8003b7c <HAL_I2S_Init+0x26c>)
 800393a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fd fd33 	bl	80013a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003958:	f023 030f 	bic.w	r3, r3, #15
 800395c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2202      	movs	r2, #2
 8003964:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d060      	beq.n	8003a30 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003976:	2310      	movs	r3, #16
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	e001      	b.n	8003980 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800397c:	2320      	movs	r3, #32
 800397e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b20      	cmp	r3, #32
 8003986:	d802      	bhi.n	800398e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800398e:	2001      	movs	r0, #1
 8003990:	f001 f9c4 	bl	8004d1c <HAL_RCCEx_GetPeriphCLKFreq>
 8003994:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800399e:	d125      	bne.n	80039ec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d010      	beq.n	80039ca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	461a      	mov	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	3305      	adds	r3, #5
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	e01f      	b.n	8003a0a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	461a      	mov	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	3305      	adds	r3, #5
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	e00e      	b.n	8003a0a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	461a      	mov	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	3305      	adds	r3, #5
 8003a08:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4a5c      	ldr	r2, [pc, #368]	; (8003b80 <HAL_I2S_Init+0x270>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	08db      	lsrs	r3, r3, #3
 8003a14:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	085b      	lsrs	r3, r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	e003      	b.n	8003a38 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a30:	2302      	movs	r3, #2
 8003a32:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d902      	bls.n	8003a44 <HAL_I2S_Init+0x134>
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2bff      	cmp	r3, #255	; 0xff
 8003a42:	d907      	bls.n	8003a54 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a48:	f043 0210 	orr.w	r2, r3, #16
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e08f      	b.n	8003b74 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	ea42 0103 	orr.w	r1, r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a72:	f023 030f 	bic.w	r3, r3, #15
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6851      	ldr	r1, [r2, #4]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6892      	ldr	r2, [r2, #8]
 8003a7e:	4311      	orrs	r1, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68d2      	ldr	r2, [r2, #12]
 8003a84:	4311      	orrs	r1, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6992      	ldr	r2, [r2, #24]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a96:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d161      	bne.n	8003b64 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a38      	ldr	r2, [pc, #224]	; (8003b84 <HAL_I2S_Init+0x274>)
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a37      	ldr	r2, [pc, #220]	; (8003b88 <HAL_I2S_Init+0x278>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d101      	bne.n	8003ab4 <HAL_I2S_Init+0x1a4>
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <HAL_I2S_Init+0x27c>)
 8003ab2:	e001      	b.n	8003ab8 <HAL_I2S_Init+0x1a8>
 8003ab4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	4932      	ldr	r1, [pc, #200]	; (8003b88 <HAL_I2S_Init+0x278>)
 8003ac0:	428a      	cmp	r2, r1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_I2S_Init+0x1b8>
 8003ac4:	4a31      	ldr	r2, [pc, #196]	; (8003b8c <HAL_I2S_Init+0x27c>)
 8003ac6:	e001      	b.n	8003acc <HAL_I2S_Init+0x1bc>
 8003ac8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003acc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ad0:	f023 030f 	bic.w	r3, r3, #15
 8003ad4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a2b      	ldr	r2, [pc, #172]	; (8003b88 <HAL_I2S_Init+0x278>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <HAL_I2S_Init+0x1d4>
 8003ae0:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <HAL_I2S_Init+0x27c>)
 8003ae2:	e001      	b.n	8003ae8 <HAL_I2S_Init+0x1d8>
 8003ae4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae8:	2202      	movs	r2, #2
 8003aea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <HAL_I2S_Init+0x278>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <HAL_I2S_Init+0x1ea>
 8003af6:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <HAL_I2S_Init+0x27c>)
 8003af8:	e001      	b.n	8003afe <HAL_I2S_Init+0x1ee>
 8003afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b0a:	d003      	beq.n	8003b14 <HAL_I2S_Init+0x204>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d103      	bne.n	8003b1c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	e001      	b.n	8003b20 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b34:	4313      	orrs	r3, r2
 8003b36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	897b      	ldrh	r3, [r7, #10]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b4c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a0d      	ldr	r2, [pc, #52]	; (8003b88 <HAL_I2S_Init+0x278>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_I2S_Init+0x24c>
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <HAL_I2S_Init+0x27c>)
 8003b5a:	e001      	b.n	8003b60 <HAL_I2S_Init+0x250>
 8003b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b60:	897a      	ldrh	r2, [r7, #10]
 8003b62:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3720      	adds	r7, #32
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	08003c87 	.word	0x08003c87
 8003b80:	cccccccd 	.word	0xcccccccd
 8003b84:	08003d9d 	.word	0x08003d9d
 8003b88:	40003800 	.word	0x40003800
 8003b8c:	40003400 	.word	0x40003400

08003b90 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	881a      	ldrh	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10e      	bne.n	8003c20 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff ffb8 	bl	8003b90 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	b292      	uxth	r2, r2
 8003c3c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	1c9a      	adds	r2, r3, #2
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10e      	bne.n	8003c7e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff ff93 	bl	8003ba4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b086      	sub	sp, #24
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d13a      	bne.n	8003d18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d109      	bne.n	8003cc0 <I2S_IRQHandler+0x3a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d102      	bne.n	8003cc0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ffb4 	bl	8003c28 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d126      	bne.n	8003d18 <I2S_IRQHandler+0x92>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d11f      	bne.n	8003d18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ce6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ce8:	2300      	movs	r3, #0
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	f043 0202 	orr.w	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ff50 	bl	8003bb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d136      	bne.n	8003d92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d109      	bne.n	8003d42 <I2S_IRQHandler+0xbc>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b80      	cmp	r3, #128	; 0x80
 8003d3a:	d102      	bne.n	8003d42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff45 	bl	8003bcc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d122      	bne.n	8003d92 <I2S_IRQHandler+0x10c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d11b      	bne.n	8003d92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d84:	f043 0204 	orr.w	r2, r3, #4
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff13 	bl	8003bb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d92:	bf00      	nop
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a92      	ldr	r2, [pc, #584]	; (8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d101      	bne.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003db6:	4b92      	ldr	r3, [pc, #584]	; (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003db8:	e001      	b.n	8003dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a8b      	ldr	r2, [pc, #556]	; (8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003dd4:	4b8a      	ldr	r3, [pc, #552]	; (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dd6:	e001      	b.n	8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003dd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de8:	d004      	beq.n	8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f040 8099 	bne.w	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d107      	bne.n	8003e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f925 	bl	8004058 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d107      	bne.n	8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f9c8 	bl	80041b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d13a      	bne.n	8003ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d035      	beq.n	8003ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a6e      	ldr	r2, [pc, #440]	; (8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d101      	bne.n	8003e4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e46:	4b6e      	ldr	r3, [pc, #440]	; (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e48:	e001      	b.n	8003e4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4969      	ldr	r1, [pc, #420]	; (8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e56:	428b      	cmp	r3, r1
 8003e58:	d101      	bne.n	8003e5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e5a:	4b69      	ldr	r3, [pc, #420]	; (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e5c:	e001      	b.n	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	f043 0202 	orr.w	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fe88 	bl	8003bb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	f040 80c3 	bne.w	800403a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80bd 	beq.w	800403a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ece:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a49      	ldr	r2, [pc, #292]	; (8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003eda:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003edc:	e001      	b.n	8003ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ede:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4944      	ldr	r1, [pc, #272]	; (8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eea:	428b      	cmp	r3, r1
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003eee:	4b44      	ldr	r3, [pc, #272]	; (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef0:	e001      	b.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ef2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003efa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f043 0204 	orr.w	r2, r3, #4
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff fe4a 	bl	8003bb8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f24:	e089      	b.n	800403a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d107      	bne.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8be 	bl	80040bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d107      	bne.n	8003f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8fd 	bl	8004154 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d12f      	bne.n	8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d02a      	beq.n	8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f7c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d101      	bne.n	8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f88:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f8a:	e001      	b.n	8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4919      	ldr	r1, [pc, #100]	; (8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f98:	428b      	cmp	r3, r1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f9c:	4b18      	ldr	r3, [pc, #96]	; (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f9e:	e001      	b.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fa8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	f043 0202 	orr.w	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fdfa 	bl	8003bb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d136      	bne.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d031      	beq.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fe4:	e001      	b.n	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4902      	ldr	r1, [pc, #8]	; (8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff2:	428b      	cmp	r3, r1
 8003ff4:	d106      	bne.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003ff6:	4b02      	ldr	r3, [pc, #8]	; (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff8:	e006      	b.n	8004008 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003ffa:	bf00      	nop
 8003ffc:	40003800 	.word	0x40003800
 8004000:	40003400 	.word	0x40003400
 8004004:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004008:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800400c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800401c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	f043 0204 	orr.w	r2, r3, #4
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff fdc0 	bl	8003bb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004038:	e000      	b.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800403a:	bf00      	nop
}
 800403c:	bf00      	nop
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	1c99      	adds	r1, r3, #2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6251      	str	r1, [r2, #36]	; 0x24
 800406a:	881a      	ldrh	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d113      	bne.n	80040b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004098:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ffc9 	bl	8004044 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	1c99      	adds	r1, r3, #2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6251      	str	r1, [r2, #36]	; 0x24
 80040ce:	8819      	ldrh	r1, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1d      	ldr	r2, [pc, #116]	; (800414c <I2SEx_TxISR_I2SExt+0x90>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d101      	bne.n	80040de <I2SEx_TxISR_I2SExt+0x22>
 80040da:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <I2SEx_TxISR_I2SExt+0x94>)
 80040dc:	e001      	b.n	80040e2 <I2SEx_TxISR_I2SExt+0x26>
 80040de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040e2:	460a      	mov	r2, r1
 80040e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d121      	bne.n	8004142 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a12      	ldr	r2, [pc, #72]	; (800414c <I2SEx_TxISR_I2SExt+0x90>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d101      	bne.n	800410c <I2SEx_TxISR_I2SExt+0x50>
 8004108:	4b11      	ldr	r3, [pc, #68]	; (8004150 <I2SEx_TxISR_I2SExt+0x94>)
 800410a:	e001      	b.n	8004110 <I2SEx_TxISR_I2SExt+0x54>
 800410c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	490d      	ldr	r1, [pc, #52]	; (800414c <I2SEx_TxISR_I2SExt+0x90>)
 8004118:	428b      	cmp	r3, r1
 800411a:	d101      	bne.n	8004120 <I2SEx_TxISR_I2SExt+0x64>
 800411c:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <I2SEx_TxISR_I2SExt+0x94>)
 800411e:	e001      	b.n	8004124 <I2SEx_TxISR_I2SExt+0x68>
 8004120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004124:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004128:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff ff81 	bl	8004044 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40003800 	.word	0x40003800
 8004150:	40003400 	.word	0x40003400

08004154 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68d8      	ldr	r0, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	1c99      	adds	r1, r3, #2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800416c:	b282      	uxth	r2, r0
 800416e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d113      	bne.n	80041b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004196:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ff4a 	bl	8004044 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a20      	ldr	r2, [pc, #128]	; (8004248 <I2SEx_RxISR_I2SExt+0x90>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <I2SEx_RxISR_I2SExt+0x16>
 80041ca:	4b20      	ldr	r3, [pc, #128]	; (800424c <I2SEx_RxISR_I2SExt+0x94>)
 80041cc:	e001      	b.n	80041d2 <I2SEx_RxISR_I2SExt+0x1a>
 80041ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d2:	68d8      	ldr	r0, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	1c99      	adds	r1, r3, #2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041de:	b282      	uxth	r2, r0
 80041e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d121      	bne.n	800423e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a12      	ldr	r2, [pc, #72]	; (8004248 <I2SEx_RxISR_I2SExt+0x90>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d101      	bne.n	8004208 <I2SEx_RxISR_I2SExt+0x50>
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <I2SEx_RxISR_I2SExt+0x94>)
 8004206:	e001      	b.n	800420c <I2SEx_RxISR_I2SExt+0x54>
 8004208:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	490d      	ldr	r1, [pc, #52]	; (8004248 <I2SEx_RxISR_I2SExt+0x90>)
 8004214:	428b      	cmp	r3, r1
 8004216:	d101      	bne.n	800421c <I2SEx_RxISR_I2SExt+0x64>
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <I2SEx_RxISR_I2SExt+0x94>)
 800421a:	e001      	b.n	8004220 <I2SEx_RxISR_I2SExt+0x68>
 800421c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004220:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004224:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff03 	bl	8004044 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40003800 	.word	0x40003800
 800424c:	40003400 	.word	0x40003400

08004250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e267      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d075      	beq.n	800435a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800426e:	4b88      	ldr	r3, [pc, #544]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b04      	cmp	r3, #4
 8004278:	d00c      	beq.n	8004294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427a:	4b85      	ldr	r3, [pc, #532]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004282:	2b08      	cmp	r3, #8
 8004284:	d112      	bne.n	80042ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004286:	4b82      	ldr	r3, [pc, #520]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004292:	d10b      	bne.n	80042ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004294:	4b7e      	ldr	r3, [pc, #504]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d05b      	beq.n	8004358 <HAL_RCC_OscConfig+0x108>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d157      	bne.n	8004358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e242      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b4:	d106      	bne.n	80042c4 <HAL_RCC_OscConfig+0x74>
 80042b6:	4b76      	ldr	r3, [pc, #472]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a75      	ldr	r2, [pc, #468]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e01d      	b.n	8004300 <HAL_RCC_OscConfig+0xb0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x98>
 80042ce:	4b70      	ldr	r3, [pc, #448]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6f      	ldr	r2, [pc, #444]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b6d      	ldr	r3, [pc, #436]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6c      	ldr	r2, [pc, #432]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0xb0>
 80042e8:	4b69      	ldr	r3, [pc, #420]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a68      	ldr	r2, [pc, #416]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b66      	ldr	r3, [pc, #408]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a65      	ldr	r2, [pc, #404]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fd f9ec 	bl	80016e4 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004310:	f7fd f9e8 	bl	80016e4 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e207      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b5b      	ldr	r3, [pc, #364]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0xc0>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fd f9d8 	bl	80016e4 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004338:	f7fd f9d4 	bl	80016e4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1f3      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	4b51      	ldr	r3, [pc, #324]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0xe8>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d063      	beq.n	800442e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004366:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800437a:	2b08      	cmp	r3, #8
 800437c:	d11c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437e:	4b44      	ldr	r3, [pc, #272]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x152>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1c7      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4937      	ldr	r1, [pc, #220]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	e03a      	b.n	800442e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c0:	4b34      	ldr	r3, [pc, #208]	; (8004494 <HAL_RCC_OscConfig+0x244>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fd f98d 	bl	80016e4 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fd f989 	bl	80016e4 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e1a8      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b28      	ldr	r3, [pc, #160]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4925      	ldr	r1, [pc, #148]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b24      	ldr	r3, [pc, #144]	; (8004494 <HAL_RCC_OscConfig+0x244>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fd f96c 	bl	80016e4 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004410:	f7fd f968 	bl	80016e4 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e187      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d036      	beq.n	80044a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d016      	beq.n	8004470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <HAL_RCC_OscConfig+0x248>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fd f94c 	bl	80016e4 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004450:	f7fd f948 	bl	80016e4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e167      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x200>
 800446e:	e01b      	b.n	80044a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCC_OscConfig+0x248>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004476:	f7fd f935 	bl	80016e4 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447c:	e00e      	b.n	800449c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800447e:	f7fd f931 	bl	80016e4 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d907      	bls.n	800449c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e150      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
 8004490:	40023800 	.word	0x40023800
 8004494:	42470000 	.word	0x42470000
 8004498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449c:	4b88      	ldr	r3, [pc, #544]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ea      	bne.n	800447e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8097 	beq.w	80045e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ba:	4b81      	ldr	r3, [pc, #516]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	4b7d      	ldr	r3, [pc, #500]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	4a7c      	ldr	r2, [pc, #496]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d4:	6413      	str	r3, [r2, #64]	; 0x40
 80044d6:	4b7a      	ldr	r3, [pc, #488]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e6:	4b77      	ldr	r3, [pc, #476]	; (80046c4 <HAL_RCC_OscConfig+0x474>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d118      	bne.n	8004524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f2:	4b74      	ldr	r3, [pc, #464]	; (80046c4 <HAL_RCC_OscConfig+0x474>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a73      	ldr	r2, [pc, #460]	; (80046c4 <HAL_RCC_OscConfig+0x474>)
 80044f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fe:	f7fd f8f1 	bl	80016e4 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004506:	f7fd f8ed 	bl	80016e4 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e10c      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004518:	4b6a      	ldr	r3, [pc, #424]	; (80046c4 <HAL_RCC_OscConfig+0x474>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d106      	bne.n	800453a <HAL_RCC_OscConfig+0x2ea>
 800452c:	4b64      	ldr	r3, [pc, #400]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	4a63      	ldr	r2, [pc, #396]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	6713      	str	r3, [r2, #112]	; 0x70
 8004538:	e01c      	b.n	8004574 <HAL_RCC_OscConfig+0x324>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b05      	cmp	r3, #5
 8004540:	d10c      	bne.n	800455c <HAL_RCC_OscConfig+0x30c>
 8004542:	4b5f      	ldr	r3, [pc, #380]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a5e      	ldr	r2, [pc, #376]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004548:	f043 0304 	orr.w	r3, r3, #4
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
 800454e:	4b5c      	ldr	r3, [pc, #368]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a5b      	ldr	r2, [pc, #364]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	6713      	str	r3, [r2, #112]	; 0x70
 800455a:	e00b      	b.n	8004574 <HAL_RCC_OscConfig+0x324>
 800455c:	4b58      	ldr	r3, [pc, #352]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	4a57      	ldr	r2, [pc, #348]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	6713      	str	r3, [r2, #112]	; 0x70
 8004568:	4b55      	ldr	r3, [pc, #340]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a54      	ldr	r2, [pc, #336]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800456e:	f023 0304 	bic.w	r3, r3, #4
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d015      	beq.n	80045a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fd f8b2 	bl	80016e4 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004582:	e00a      	b.n	800459a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004584:	f7fd f8ae 	bl	80016e4 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0cb      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459a:	4b49      	ldr	r3, [pc, #292]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ee      	beq.n	8004584 <HAL_RCC_OscConfig+0x334>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a8:	f7fd f89c 	bl	80016e4 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b0:	f7fd f898 	bl	80016e4 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0b5      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c6:	4b3e      	ldr	r3, [pc, #248]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1ee      	bne.n	80045b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d105      	bne.n	80045e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d8:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	4a38      	ldr	r2, [pc, #224]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80a1 	beq.w	8004730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ee:	4b34      	ldr	r3, [pc, #208]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d05c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d141      	bne.n	8004686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <HAL_RCC_OscConfig+0x478>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fd f86c 	bl	80016e4 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004610:	f7fd f868 	bl	80016e4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e087      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69da      	ldr	r2, [r3, #28]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	019b      	lsls	r3, r3, #6
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	3b01      	subs	r3, #1
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	491b      	ldr	r1, [pc, #108]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004658:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <HAL_RCC_OscConfig+0x478>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465e:	f7fd f841 	bl	80016e4 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004666:	f7fd f83d 	bl	80016e4 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e05c      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x416>
 8004684:	e054      	b.n	8004730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004686:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <HAL_RCC_OscConfig+0x478>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fd f82a 	bl	80016e4 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004694:	f7fd f826 	bl	80016e4 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e045      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x444>
 80046b2:	e03d      	b.n	8004730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e038      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
 80046c0:	40023800 	.word	0x40023800
 80046c4:	40007000 	.word	0x40007000
 80046c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046cc:	4b1b      	ldr	r3, [pc, #108]	; (800473c <HAL_RCC_OscConfig+0x4ec>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d028      	beq.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d121      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d11a      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046fc:	4013      	ands	r3, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004704:	4293      	cmp	r3, r2
 8004706:	d111      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	3b01      	subs	r3, #1
 8004716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004718:	429a      	cmp	r2, r3
 800471a:	d107      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800

08004740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0cc      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004754:	4b68      	ldr	r3, [pc, #416]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d90c      	bls.n	800477c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b63      	ldr	r3, [pc, #396]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0b8      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d020      	beq.n	80047ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004794:	4b59      	ldr	r3, [pc, #356]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a58      	ldr	r2, [pc, #352]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800479e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047ac:	4b53      	ldr	r3, [pc, #332]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a52      	ldr	r2, [pc, #328]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b8:	4b50      	ldr	r3, [pc, #320]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	494d      	ldr	r1, [pc, #308]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d044      	beq.n	8004860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047de:	4b47      	ldr	r3, [pc, #284]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d119      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e07f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d003      	beq.n	80047fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e06f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480e:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e067      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481e:	4b37      	ldr	r3, [pc, #220]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f023 0203 	bic.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	4934      	ldr	r1, [pc, #208]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	4313      	orrs	r3, r2
 800482e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004830:	f7fc ff58 	bl	80016e4 <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	e00a      	b.n	800484e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004838:	f7fc ff54 	bl	80016e4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e04f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 020c 	and.w	r2, r3, #12
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	429a      	cmp	r2, r3
 800485e:	d1eb      	bne.n	8004838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d20c      	bcs.n	8004888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e032      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4916      	ldr	r1, [pc, #88]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	490e      	ldr	r1, [pc, #56]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048c6:	f000 f821 	bl	800490c <HAL_RCC_GetSysClockFreq>
 80048ca:	4602      	mov	r2, r0
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	490a      	ldr	r1, [pc, #40]	; (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 80048d8:	5ccb      	ldrb	r3, [r1, r3]
 80048da:	fa22 f303 	lsr.w	r3, r2, r3
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <HAL_RCC_ClockConfig+0x1c8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc feb8 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023c00 	.word	0x40023c00
 80048fc:	40023800 	.word	0x40023800
 8004900:	08005780 	.word	0x08005780
 8004904:	20000000 	.word	0x20000000
 8004908:	20000004 	.word	0x20000004

0800490c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800490c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004910:	b094      	sub	sp, #80	; 0x50
 8004912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	647b      	str	r3, [r7, #68]	; 0x44
 8004918:	2300      	movs	r3, #0
 800491a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800491c:	2300      	movs	r3, #0
 800491e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004924:	4b79      	ldr	r3, [pc, #484]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	2b08      	cmp	r3, #8
 800492e:	d00d      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x40>
 8004930:	2b08      	cmp	r3, #8
 8004932:	f200 80e1 	bhi.w	8004af8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x34>
 800493a:	2b04      	cmp	r3, #4
 800493c:	d003      	beq.n	8004946 <HAL_RCC_GetSysClockFreq+0x3a>
 800493e:	e0db      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004940:	4b73      	ldr	r3, [pc, #460]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004942:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004944:	e0db      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004946:	4b73      	ldr	r3, [pc, #460]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x208>)
 8004948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800494a:	e0d8      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800494c:	4b6f      	ldr	r3, [pc, #444]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004954:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004956:	4b6d      	ldr	r3, [pc, #436]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d063      	beq.n	8004a2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004962:	4b6a      	ldr	r3, [pc, #424]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	2200      	movs	r2, #0
 800496a:	63bb      	str	r3, [r7, #56]	; 0x38
 800496c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
 8004976:	2300      	movs	r3, #0
 8004978:	637b      	str	r3, [r7, #52]	; 0x34
 800497a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800497e:	4622      	mov	r2, r4
 8004980:	462b      	mov	r3, r5
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	0159      	lsls	r1, r3, #5
 800498c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004990:	0150      	lsls	r0, r2, #5
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4621      	mov	r1, r4
 8004998:	1a51      	subs	r1, r2, r1
 800499a:	6139      	str	r1, [r7, #16]
 800499c:	4629      	mov	r1, r5
 800499e:	eb63 0301 	sbc.w	r3, r3, r1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049b0:	4659      	mov	r1, fp
 80049b2:	018b      	lsls	r3, r1, #6
 80049b4:	4651      	mov	r1, sl
 80049b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ba:	4651      	mov	r1, sl
 80049bc:	018a      	lsls	r2, r1, #6
 80049be:	4651      	mov	r1, sl
 80049c0:	ebb2 0801 	subs.w	r8, r2, r1
 80049c4:	4659      	mov	r1, fp
 80049c6:	eb63 0901 	sbc.w	r9, r3, r1
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049de:	4690      	mov	r8, r2
 80049e0:	4699      	mov	r9, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	eb18 0303 	adds.w	r3, r8, r3
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	462b      	mov	r3, r5
 80049ec:	eb49 0303 	adc.w	r3, r9, r3
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049fe:	4629      	mov	r1, r5
 8004a00:	024b      	lsls	r3, r1, #9
 8004a02:	4621      	mov	r1, r4
 8004a04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a08:	4621      	mov	r1, r4
 8004a0a:	024a      	lsls	r2, r1, #9
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a12:	2200      	movs	r2, #0
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a1c:	f7fb fff2 	bl	8000a04 <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4613      	mov	r3, r2
 8004a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a28:	e058      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2a:	4b38      	ldr	r3, [pc, #224]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	099b      	lsrs	r3, r3, #6
 8004a30:	2200      	movs	r2, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	4611      	mov	r1, r2
 8004a36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a3a:	623b      	str	r3, [r7, #32]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a44:	4642      	mov	r2, r8
 8004a46:	464b      	mov	r3, r9
 8004a48:	f04f 0000 	mov.w	r0, #0
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	0159      	lsls	r1, r3, #5
 8004a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a56:	0150      	lsls	r0, r2, #5
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a62:	4649      	mov	r1, r9
 8004a64:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a7c:	ebb2 040a 	subs.w	r4, r2, sl
 8004a80:	eb63 050b 	sbc.w	r5, r3, fp
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	00eb      	lsls	r3, r5, #3
 8004a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a92:	00e2      	lsls	r2, r4, #3
 8004a94:	4614      	mov	r4, r2
 8004a96:	461d      	mov	r5, r3
 8004a98:	4643      	mov	r3, r8
 8004a9a:	18e3      	adds	r3, r4, r3
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	eb45 0303 	adc.w	r3, r5, r3
 8004aa4:	607b      	str	r3, [r7, #4]
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	028b      	lsls	r3, r1, #10
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004abc:	4621      	mov	r1, r4
 8004abe:	028a      	lsls	r2, r1, #10
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	61fa      	str	r2, [r7, #28]
 8004acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad0:	f7fb ff98 	bl	8000a04 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4613      	mov	r3, r2
 8004ada:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004af6:	e002      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004afa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3750      	adds	r7, #80	; 0x50
 8004b04:	46bd      	mov	sp, r7
 8004b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	007a1200 	.word	0x007a1200

08004b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000000 	.word	0x20000000

08004b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b34:	f7ff fff0 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0a9b      	lsrs	r3, r3, #10
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4903      	ldr	r1, [pc, #12]	; (8004b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40023800 	.word	0x40023800
 8004b54:	08005790 	.word	0x08005790

08004b58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d035      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b80:	4b62      	ldr	r3, [pc, #392]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b86:	f7fc fdad 	bl	80016e4 <HAL_GetTick>
 8004b8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b8e:	f7fc fda9 	bl	80016e4 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0b0      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ba0:	4b5b      	ldr	r3, [pc, #364]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f0      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	019a      	lsls	r2, r3, #6
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	071b      	lsls	r3, r3, #28
 8004bb8:	4955      	ldr	r1, [pc, #340]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bc0:	4b52      	ldr	r3, [pc, #328]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fd8d 	bl	80016e4 <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bce:	f7fc fd89 	bl	80016e4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e090      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004be0:	4b4b      	ldr	r3, [pc, #300]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8083 	beq.w	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	4b44      	ldr	r3, [pc, #272]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	4a43      	ldr	r2, [pc, #268]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c08:	6413      	str	r3, [r2, #64]	; 0x40
 8004c0a:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c16:	4b3f      	ldr	r3, [pc, #252]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3e      	ldr	r2, [pc, #248]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c22:	f7fc fd5f 	bl	80016e4 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c2a:	f7fc fd5b 	bl	80016e4 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e062      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c3c:	4b35      	ldr	r3, [pc, #212]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c48:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02f      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d028      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c66:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c70:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c76:	4b28      	ldr	r3, [pc, #160]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c7c:	4a24      	ldr	r2, [pc, #144]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c82:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d114      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c8e:	f7fc fd29 	bl	80016e4 <HAL_GetTick>
 8004c92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c94:	e00a      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fc fd25 	bl	80016e4 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e02a      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cac:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ee      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc4:	d10d      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cc6:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cda:	490d      	ldr	r1, [pc, #52]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]
 8004ce0:	e005      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cec:	6093      	str	r3, [r2, #8]
 8004cee:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfa:	4905      	ldr	r1, [pc, #20]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	42470068 	.word	0x42470068
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40007000 	.word	0x40007000
 8004d18:	42470e40 	.word	0x42470e40

08004d1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d13e      	bne.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d3a:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d12f      	bne.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d50:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d52:	617b      	str	r3, [r7, #20]
          break;
 8004d54:	e02f      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d56:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d62:	d108      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d64:	4b18      	ldr	r3, [pc, #96]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d6c:	4a18      	ldr	r2, [pc, #96]	; (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	e007      	b.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d7e:	4a15      	ldr	r2, [pc, #84]	; (8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d8c:	099b      	lsrs	r3, r3, #6
 8004d8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
 8004d98:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da0:	0f1b      	lsrs	r3, r3, #28
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	617b      	str	r3, [r7, #20]
          break;
 8004dae:	e002      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
          break;
 8004db4:	bf00      	nop
        }
      }
      break;
 8004db6:	bf00      	nop
    }
  }
  return frequency;
 8004db8:	697b      	ldr	r3, [r7, #20]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	00bb8000 	.word	0x00bb8000
 8004dd0:	007a1200 	.word	0x007a1200
 8004dd4:	00f42400 	.word	0x00f42400

08004dd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e07b      	b.n	8004ee2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d108      	bne.n	8004e04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfa:	d009      	beq.n	8004e10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	61da      	str	r2, [r3, #28]
 8004e02:	e005      	b.n	8004e10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fc fb3c 	bl	80014a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	ea42 0103 	orr.w	r1, r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	f003 0104 	and.w	r1, r3, #4
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	f003 0210 	and.w	r2, r3, #16
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f043 0201 	orr.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f023 0201 	bic.w	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
	...

08004f30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3301      	adds	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <USB_FlushTxFifo+0x64>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d901      	bls.n	8004f50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e01b      	b.n	8004f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	daf2      	bge.n	8004f3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	019b      	lsls	r3, r3, #6
 8004f60:	f043 0220 	orr.w	r2, r3, #32
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a08      	ldr	r2, [pc, #32]	; (8004f94 <USB_FlushTxFifo+0x64>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e006      	b.n	8004f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d0f0      	beq.n	8004f68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	00030d40 	.word	0x00030d40

08004f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a11      	ldr	r2, [pc, #68]	; (8004ff4 <USB_FlushRxFifo+0x5c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e018      	b.n	8004fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	daf2      	bge.n	8004fa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <USB_FlushRxFifo+0x5c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e006      	b.n	8004fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d0f0      	beq.n	8004fc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	00030d40 	.word	0x00030d40

08004ff8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b08b      	sub	sp, #44	; 0x2c
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	089b      	lsrs	r3, r3, #2
 8005012:	b29b      	uxth	r3, r3
 8005014:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	e014      	b.n	800504e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	3301      	adds	r3, #1
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	3301      	adds	r3, #1
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	3301      	adds	r3, #1
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	3301      	adds	r3, #1
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	3301      	adds	r3, #1
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	6a3a      	ldr	r2, [r7, #32]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	429a      	cmp	r2, r3
 8005054:	d3e6      	bcc.n	8005024 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005056:	8bfb      	ldrh	r3, [r7, #30]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01e      	beq.n	800509a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005066:	461a      	mov	r2, r3
 8005068:	f107 0310 	add.w	r3, r7, #16
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
 800507c:	b2da      	uxtb	r2, r3
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	701a      	strb	r2, [r3, #0]
      i++;
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	3301      	adds	r3, #1
 8005086:	623b      	str	r3, [r7, #32]
      pDest++;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	3301      	adds	r3, #1
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800508e:	8bfb      	ldrh	r3, [r7, #30]
 8005090:	3b01      	subs	r3, #1
 8005092:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005094:	8bfb      	ldrh	r3, [r7, #30]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1ea      	bne.n	8005070 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800509c:	4618      	mov	r0, r3
 800509e:	372c      	adds	r7, #44	; 0x2c
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4013      	ands	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050c0:	68fb      	ldr	r3, [r7, #12]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0301 	and.w	r3, r3, #1
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	460b      	mov	r3, r1
 80050f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005108:	f023 0303 	bic.w	r3, r3, #3
 800510c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	68f9      	ldr	r1, [r7, #12]
 800511e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d107      	bne.n	800513c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005132:	461a      	mov	r2, r3
 8005134:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005138:	6053      	str	r3, [r2, #4]
 800513a:	e009      	b.n	8005150 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d106      	bne.n	8005150 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005148:	461a      	mov	r2, r3
 800514a:	f241 7370 	movw	r3, #6000	; 0x1770
 800514e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	b29b      	uxth	r3, r3
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005180:	b480      	push	{r7}
 8005182:	b089      	sub	sp, #36	; 0x24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	0c9b      	lsrs	r3, r3, #18
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	0fdb      	lsrs	r3, r3, #31
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d104      	bne.n	80051da <USB_HC_Halt+0x5a>
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e0c8      	b.n	800536c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <USB_HC_Halt+0x66>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d163      	bne.n	80052ae <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	0151      	lsls	r1, r2, #5
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	440a      	add	r2, r1
 80051fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005204:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	f040 80ab 	bne.w	800536a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d133      	bne.n	8005288 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	440a      	add	r2, r1
 8005236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800523e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	440a      	add	r2, r1
 8005256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800525a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800525e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800526c:	d81d      	bhi.n	80052aa <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005284:	d0ec      	beq.n	8005260 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005286:	e070      	b.n	800536a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	4413      	add	r3, r2
 8005290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	440a      	add	r2, r1
 800529e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052a8:	e05f      	b.n	800536a <USB_HC_Halt+0x1ea>
            break;
 80052aa:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052ac:	e05d      	b.n	800536a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052cc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d133      	bne.n	8005346 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052fc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	440a      	add	r2, r1
 8005314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800531c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800532a:	d81d      	bhi.n	8005368 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	4413      	add	r3, r2
 8005334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800533e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005342:	d0ec      	beq.n	800531e <USB_HC_Halt+0x19e>
 8005344:	e011      	b.n	800536a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	440a      	add	r2, r1
 800535c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e000      	b.n	800536a <USB_HC_Halt+0x1ea>
          break;
 8005368:	bf00      	nop
    }
  }

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3724      	adds	r7, #36	; 0x24
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff fdbd 	bl	8004f0c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005392:	2110      	movs	r1, #16
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff fdcb 	bl	8004f30 <USB_FlushTxFifo>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff fdf7 	bl	8004f98 <USB_FlushRxFifo>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80053b4:	2300      	movs	r3, #0
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	e01f      	b.n	80053fa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ee:	461a      	mov	r2, r3
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	3301      	adds	r3, #1
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b0f      	cmp	r3, #15
 80053fe:	d9dc      	bls.n	80053ba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005400:	2300      	movs	r3, #0
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	e034      	b.n	8005470 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	4413      	add	r3, r2
 800540e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800541c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005424:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800542c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	4413      	add	r3, r2
 8005436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543a:	461a      	mov	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3301      	adds	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800544c:	d80c      	bhi.n	8005468 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	4413      	add	r3, r2
 8005456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005464:	d0ec      	beq.n	8005440 <USB_StopHost+0xc8>
 8005466:	e000      	b.n	800546a <USB_StopHost+0xf2>
        break;
 8005468:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	3301      	adds	r3, #1
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b0f      	cmp	r3, #15
 8005474:	d9c7      	bls.n	8005406 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800547c:	461a      	mov	r2, r3
 800547e:	f04f 33ff 	mov.w	r3, #4294967295
 8005482:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f04f 32ff 	mov.w	r2, #4294967295
 800548a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff fd2c 	bl	8004eea <USB_EnableGlobalInt>

  return ret;
 8005492:	7ffb      	ldrb	r3, [r7, #31]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f804 	bl	80054c0 <USBH_HandleSof>
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b0b      	cmp	r3, #11
 80054d0:	d10a      	bne.n	80054e8 <USBH_HandleSof+0x28>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	4798      	blx	r3
  }
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005500:	bf00      	nop
}
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800551c:	bf00      	nop
}
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f883 	bl	8005682 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	791b      	ldrb	r3, [r3, #4]
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f80b 	bl	800559e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	795b      	ldrb	r3, [r3, #5]
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f805 	bl	800559e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	460b      	mov	r3, r1
 80055a8:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	2b0f      	cmp	r3, #15
 80055ae:	d80d      	bhi.n	80055cc <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	33e0      	adds	r3, #224	; 0xe0
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	33e0      	adds	r3, #224	; 0xe0
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff ff57 	bl	800549c <USBH_LL_IncTimer>
}
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff ff8f 	bl	8005528 <USBH_LL_Connect>
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff ff98 	bl	8005556 <USBH_LL_Disconnect>
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	460b      	mov	r3, r1
 8005638:	70fb      	strb	r3, [r7, #3]
 800563a:	4613      	mov	r3, r2
 800563c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff ff49 	bl	80054f0 <USBH_LL_PortEnabled>
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff ff49 	bl	800550c <USBH_LL_PortDisabled>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005698:	4618      	mov	r0, r3
 800569a:	f7fc ffd5 	bl	8002648 <HAL_HCD_Stop>
 800569e:	4603      	mov	r3, r0
 80056a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 f807 	bl	80056b8 <USBH_Get_USB_Status>
 80056aa:	4603      	mov	r3, r0
 80056ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d817      	bhi.n	80056fc <USBH_Get_USB_Status+0x44>
 80056cc:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <USBH_Get_USB_Status+0x1c>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	080056e5 	.word	0x080056e5
 80056d8:	080056eb 	.word	0x080056eb
 80056dc:	080056f1 	.word	0x080056f1
 80056e0:	080056f7 	.word	0x080056f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	73fb      	strb	r3, [r7, #15]
    break;
 80056e8:	e00b      	b.n	8005702 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80056ea:	2302      	movs	r3, #2
 80056ec:	73fb      	strb	r3, [r7, #15]
    break;
 80056ee:	e008      	b.n	8005702 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
    break;
 80056f4:	e005      	b.n	8005702 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80056f6:	2302      	movs	r3, #2
 80056f8:	73fb      	strb	r3, [r7, #15]
    break;
 80056fa:	e002      	b.n	8005702 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80056fc:	2302      	movs	r3, #2
 80056fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005700:	bf00      	nop
  }
  return usb_status;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <__libc_init_array>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4d0d      	ldr	r5, [pc, #52]	; (8005748 <__libc_init_array+0x38>)
 8005714:	4c0d      	ldr	r4, [pc, #52]	; (800574c <__libc_init_array+0x3c>)
 8005716:	1b64      	subs	r4, r4, r5
 8005718:	10a4      	asrs	r4, r4, #2
 800571a:	2600      	movs	r6, #0
 800571c:	42a6      	cmp	r6, r4
 800571e:	d109      	bne.n	8005734 <__libc_init_array+0x24>
 8005720:	4d0b      	ldr	r5, [pc, #44]	; (8005750 <__libc_init_array+0x40>)
 8005722:	4c0c      	ldr	r4, [pc, #48]	; (8005754 <__libc_init_array+0x44>)
 8005724:	f000 f820 	bl	8005768 <_init>
 8005728:	1b64      	subs	r4, r4, r5
 800572a:	10a4      	asrs	r4, r4, #2
 800572c:	2600      	movs	r6, #0
 800572e:	42a6      	cmp	r6, r4
 8005730:	d105      	bne.n	800573e <__libc_init_array+0x2e>
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	f855 3b04 	ldr.w	r3, [r5], #4
 8005738:	4798      	blx	r3
 800573a:	3601      	adds	r6, #1
 800573c:	e7ee      	b.n	800571c <__libc_init_array+0xc>
 800573e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005742:	4798      	blx	r3
 8005744:	3601      	adds	r6, #1
 8005746:	e7f2      	b.n	800572e <__libc_init_array+0x1e>
 8005748:	080057a0 	.word	0x080057a0
 800574c:	080057a0 	.word	0x080057a0
 8005750:	080057a0 	.word	0x080057a0
 8005754:	080057a4 	.word	0x080057a4

08005758 <memset>:
 8005758:	4402      	add	r2, r0
 800575a:	4603      	mov	r3, r0
 800575c:	4293      	cmp	r3, r2
 800575e:	d100      	bne.n	8005762 <memset+0xa>
 8005760:	4770      	bx	lr
 8005762:	f803 1b01 	strb.w	r1, [r3], #1
 8005766:	e7f9      	b.n	800575c <memset+0x4>

08005768 <_init>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	bf00      	nop
 800576c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576e:	bc08      	pop	{r3}
 8005770:	469e      	mov	lr, r3
 8005772:	4770      	bx	lr

08005774 <_fini>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	bf00      	nop
 8005778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577a:	bc08      	pop	{r3}
 800577c:	469e      	mov	lr, r3
 800577e:	4770      	bx	lr
