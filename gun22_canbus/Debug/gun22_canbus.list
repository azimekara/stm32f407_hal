
gun22_canbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000792c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad0  08007ad0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007ad0  08007ad0  00017ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ad8  08007ad8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ad8  08007ad8  00017ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000087c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000090c  2000090c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017995  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039d0  00000000  00000000  00037a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  0003b428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f0  00000000  00000000  0003c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023dac  00000000  00000000  0003d788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018571  00000000  00000000  00061534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdee1  00000000  00000000  00079aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147986  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f0c  00000000  00000000  001479d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a9c 	.word	0x08007a9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007a9c 	.word	0x08007a9c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_CAN_RxFifo0MsgPendingCallback>:
static void MX_CAN1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004d6:	4a09      	ldr	r2, [pc, #36]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004d8:	2100      	movs	r1, #0
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f001 f887 	bl	80015ee <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 4)
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004e2:	691b      	ldr	r3, [r3, #16]
 80004e4:	2b04      	cmp	r3, #4
 80004e6:	d102      	bne.n	80004ee <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		datacheck=1;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
	}
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000204 	.word	0x20000204
 80004fc:	200001e0 	.word	0x200001e0
 8000500:	20000210 	.word	0x20000210

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fce0 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f84e 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f9a0 	bl	8000854 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000514:	f000 f90a 	bl	800072c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000518:	f000 f936 	bl	8000788 <MX_I2S3_Init>
  MX_SPI1_Init();
 800051c:	f000 f964 	bl	80007e8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000520:	f006 fecc 	bl	80072bc <MX_USB_HOST_Init>
  MX_CAN1_Init();
 8000524:	f000 f8ac 	bl	8000680 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
HAL_CAN_Start(&hcan1);
 8000528:	481a      	ldr	r0, [pc, #104]	; (8000594 <main+0x90>)
 800052a:	f000 ff41 	bl	80013b0 <HAL_CAN_Start>

HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800052e:	2102      	movs	r1, #2
 8000530:	4818      	ldr	r0, [pc, #96]	; (8000594 <main+0x90>)
 8000532:	f001 f96e 	bl	8001812 <HAL_CAN_ActivateNotification>

TxHeader.DLC=4;
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <main+0x94>)
 8000538:	2204      	movs	r2, #4
 800053a:	611a      	str	r2, [r3, #16]
TxHeader.IDE = CAN_ID_STD;
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <main+0x94>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
TxHeader.StdId= 0x234;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <main+0x94>)
 8000544:	f44f 720d 	mov.w	r2, #564	; 0x234
 8000548:	601a      	str	r2, [r3, #0]
TxHeader.RTR = CAN_RTR_DATA;
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <main+0x94>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]

TxData[0]= 0x43;
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <main+0x98>)
 8000552:	2243      	movs	r2, #67	; 0x43
 8000554:	701a      	strb	r2, [r3, #0]
TxData[1]= 0x43;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <main+0x98>)
 8000558:	2243      	movs	r2, #67	; 0x43
 800055a:	705a      	strb	r2, [r3, #1]
TxData[2]= 0x43;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <main+0x98>)
 800055e:	2243      	movs	r2, #67	; 0x43
 8000560:	709a      	strb	r2, [r3, #2]
TxData[3]= 0x43;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <main+0x98>)
 8000564:	2243      	movs	r2, #67	; 0x43
 8000566:	70da      	strb	r2, [r3, #3]
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <main+0x9c>)
 800056a:	4a0c      	ldr	r2, [pc, #48]	; (800059c <main+0x98>)
 800056c:	490a      	ldr	r1, [pc, #40]	; (8000598 <main+0x94>)
 800056e:	4809      	ldr	r0, [pc, #36]	; (8000594 <main+0x90>)
 8000570:	f000 ff62 	bl	8001438 <HAL_CAN_AddTxMessage>
    HAL_Delay(1000);
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	f000 fd1a 	bl	8000fb0 <HAL_Delay>
    if(datacheck)
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <main+0xa0>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0f1      	beq.n	8000568 <main+0x64>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,1);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058a:	4807      	ldr	r0, [pc, #28]	; (80005a8 <main+0xa4>)
 800058c:	f001 fe44 	bl	8002218 <HAL_GPIO_WritePin>
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000590:	e7ea      	b.n	8000568 <main+0x64>
 8000592:	bf00      	nop
 8000594:	200000ac 	.word	0x200000ac
 8000598:	200001c8 	.word	0x200001c8
 800059c:	200001fc 	.word	0x200001fc
 80005a0:	2000020c 	.word	0x2000020c
 80005a4:	20000210 	.word	0x20000210
 80005a8:	40020c00 	.word	0x40020c00

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f007 f968 	bl	8007890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a27      	ldr	r2, [pc, #156]	; (8000678 <SystemClock_Config+0xcc>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xd0>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061c:	2308      	movs	r3, #8
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000620:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062a:	2307      	movs	r3, #7
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	4618      	mov	r0, r3
 8000634:	f003 ffdc 	bl	80045f0 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800063e:	f000 fa07 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2105      	movs	r1, #5
 8000660:	4618      	mov	r0, r3
 8000662:	f004 fa3d 	bl	8004ae0 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800066c:	f000 f9f0 	bl	8000a50 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	; 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000686:	4b27      	ldr	r3, [pc, #156]	; (8000724 <MX_CAN1_Init+0xa4>)
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <MX_CAN1_Init+0xa8>)
 800068a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <MX_CAN1_Init+0xa4>)
 800068e:	2206      	movs	r2, #6
 8000690:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <MX_CAN1_Init+0xa4>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <MX_CAN1_Init+0xa4>)
 800069a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800069e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <MX_CAN1_Init+0xa4>)
 80006a2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80006a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_CAN1_Init+0xa4>)
 80006aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006ae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <MX_CAN1_Init+0xa4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_CAN1_Init+0xa4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_CAN1_Init+0xa4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_CAN1_Init+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_CAN1_Init+0xa4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_CAN1_Init+0xa4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <MX_CAN1_Init+0xa4>)
 80006d6:	f000 fc8f 	bl	8000ff8 <HAL_CAN_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80006e0:	f000 f9b6 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 13;
 80006e8:	230d      	movs	r3, #13
 80006ea:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 80006f0:	f242 0360 	movw	r3, #8288	; 0x2060
 80006f4:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 80006fa:	f242 0360 	movw	r3, #8288	; 0x2060
 80006fe:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000708:	2301      	movs	r3, #1
 800070a:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;
 800070c:	230e      	movs	r3, #14
 800070e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <MX_CAN1_Init+0xa4>)
 8000716:	f000 fd6b 	bl	80011f0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200000ac 	.word	0x200000ac
 8000728:	40006400 	.word	0x40006400

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C1_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_I2C1_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C1_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_I2C1_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_I2C1_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_I2C1_Init+0x50>)
 800076a:	f003 f95d 	bl	8003a28 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f96c 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000d4 	.word	0x200000d4
 8000780:	40005400 	.word	0x40005400
 8000784:	000186a0 	.word	0x000186a0

08000788 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_I2S3_Init+0x54>)
 800078e:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <MX_I2S3_Init+0x58>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2S3_Init+0x54>)
 8000794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000798:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_I2S3_Init+0x54>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2S3_Init+0x54>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_I2S3_Init+0x54>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_I2S3_Init+0x54>)
 80007b0:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <MX_I2S3_Init+0x5c>)
 80007b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2S3_Init+0x54>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_I2S3_Init+0x54>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_I2S3_Init+0x54>)
 80007c8:	f003 fa72 	bl	8003cb0 <HAL_I2S_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007d2:	f000 f93d 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000128 	.word	0x20000128
 80007e0:	40003c00 	.word	0x40003c00
 80007e4:	00017700 	.word	0x00017700

080007e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_SPI1_Init+0x64>)
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <MX_SPI1_Init+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI1_Init+0x64>)
 80007f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI1_Init+0x64>)
 8000814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000818:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI1_Init+0x64>)
 8000834:	220a      	movs	r2, #10
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_SPI1_Init+0x64>)
 800083a:	f004 fc9d 	bl	8005178 <HAL_SPI_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000844:	f000 f904 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000170 	.word	0x20000170
 8000850:	40013000 	.word	0x40013000

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	4b72      	ldr	r3, [pc, #456]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a71      	ldr	r2, [pc, #452]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b6f      	ldr	r3, [pc, #444]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	4b6b      	ldr	r3, [pc, #428]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a6a      	ldr	r2, [pc, #424]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b68      	ldr	r3, [pc, #416]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b64      	ldr	r3, [pc, #400]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a63      	ldr	r2, [pc, #396]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b61      	ldr	r3, [pc, #388]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b5d      	ldr	r3, [pc, #372]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a5c      	ldr	r2, [pc, #368]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b5a      	ldr	r3, [pc, #360]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b56      	ldr	r3, [pc, #344]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a55      	ldr	r2, [pc, #340]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b4f      	ldr	r3, [pc, #316]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a4e      	ldr	r2, [pc, #312]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b4c      	ldr	r3, [pc, #304]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2108      	movs	r1, #8
 8000916:	4849      	ldr	r0, [pc, #292]	; (8000a3c <MX_GPIO_Init+0x1e8>)
 8000918:	f001 fc7e 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2101      	movs	r1, #1
 8000920:	4847      	ldr	r0, [pc, #284]	; (8000a40 <MX_GPIO_Init+0x1ec>)
 8000922:	f001 fc79 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000926:	2200      	movs	r2, #0
 8000928:	f24f 0110 	movw	r1, #61456	; 0xf010
 800092c:	4845      	ldr	r0, [pc, #276]	; (8000a44 <MX_GPIO_Init+0x1f0>)
 800092e:	f001 fc73 	bl	8002218 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000932:	2308      	movs	r3, #8
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	483c      	ldr	r0, [pc, #240]	; (8000a3c <MX_GPIO_Init+0x1e8>)
 800094a:	f001 fac9 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800094e:	2301      	movs	r3, #1
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4836      	ldr	r0, [pc, #216]	; (8000a40 <MX_GPIO_Init+0x1ec>)
 8000966:	f001 fabb 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800096a:	2308      	movs	r3, #8
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097a:	2305      	movs	r3, #5
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	482e      	ldr	r0, [pc, #184]	; (8000a40 <MX_GPIO_Init+0x1ec>)
 8000986:	f001 faab 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098a:	2301      	movs	r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	482a      	ldr	r0, [pc, #168]	; (8000a48 <MX_GPIO_Init+0x1f4>)
 80009a0:	f001 fa9e 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009a4:	2304      	movs	r3, #4
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4825      	ldr	r0, [pc, #148]	; (8000a4c <MX_GPIO_Init+0x1f8>)
 80009b8:	f001 fa92 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ce:	2305      	movs	r3, #5
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	481c      	ldr	r0, [pc, #112]	; (8000a4c <MX_GPIO_Init+0x1f8>)
 80009da:	f001 fa81 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009de:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009e2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4813      	ldr	r0, [pc, #76]	; (8000a44 <MX_GPIO_Init+0x1f0>)
 80009f8:	f001 fa72 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009fc:	2320      	movs	r3, #32
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_GPIO_Init+0x1f0>)
 8000a10:	f001 fa66 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a18:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0x1e8>)
 8000a2a:	f001 fa59 	bl	8001ee0 <HAL_GPIO_Init>

}
 8000a2e:	bf00      	nop
 8000a30:	3730      	adds	r7, #48	; 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f001 f9de 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <HAL_CAN_MspInit+0x94>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d133      	bne.n	8000b36 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <HAL_CAN_MspInit+0x98>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <HAL_CAN_MspInit+0x98>)
 8000ad8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_CAN_MspInit+0x98>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_CAN_MspInit+0x98>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <HAL_CAN_MspInit+0x98>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_CAN_MspInit+0x98>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b06:	2303      	movs	r3, #3
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b16:	2309      	movs	r3, #9
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <HAL_CAN_MspInit+0x9c>)
 8000b22:	f001 f9dd 	bl	8001ee0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2014      	movs	r0, #20
 8000b2c:	f001 f9a1 	bl	8001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b30:	2014      	movs	r0, #20
 8000b32:	f001 f9ba 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40006400 	.word	0x40006400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020c00 	.word	0x40020c00

08000b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_I2C_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12c      	bne.n	8000bc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b90:	2312      	movs	r3, #18
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <HAL_I2C_MspInit+0x8c>)
 8000ba8:	f001 f99a 	bl	8001ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	; 0x38
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a31      	ldr	r2, [pc, #196]	; (8000ccc <HAL_I2S_MspInit+0xf0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d15a      	bne.n	8000cc2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c10:	23c0      	movs	r3, #192	; 0xc0
 8000c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 f96b 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c28:	f7ff ff12 	bl	8000a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6313      	str	r3, [r2, #48]	; 0x30
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c80:	2310      	movs	r3, #16
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c90:	2306      	movs	r3, #6
 8000c92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <HAL_I2S_MspInit+0xf8>)
 8000c9c:	f001 f920 	bl	8001ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ca0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <HAL_I2S_MspInit+0xfc>)
 8000cbe:	f001 f90f 	bl	8001ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3738      	adds	r7, #56	; 0x38
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40003c00 	.word	0x40003c00
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020800 	.word	0x40020800

08000cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <HAL_SPI_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12b      	bne.n	8000d56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d36:	23e0      	movs	r3, #224	; 0xe0
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d46:	2305      	movs	r3, #5
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_SPI_MspInit+0x8c>)
 8000d52:	f001 f8c5 	bl	8001ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013000 	.word	0x40013000
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f8da 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <CAN1_RX0_IRQHandler+0x10>)
 8000dc6:	f000 fd4a 	bl	800185e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000ac 	.word	0x200000ac

08000dd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <OTG_FS_IRQHandler+0x10>)
 8000dda:	f001 fca1 	bl	8002720 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200005f8 	.word	0x200005f8

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f006 fd00 	bl	800781c <__errno>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <_sbrk+0x64>)
 8000e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20020000 	.word	0x20020000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	20000214 	.word	0x20000214
 8000e50:	20000910 	.word	0x20000910

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7e:	490e      	ldr	r1, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e94:	4c0b      	ldr	r4, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ea2:	f7ff ffd7 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f006 fcbf 	bl	8007828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eaa:	f7ff fb2b 	bl	8000504 <main>
  bx  lr    
 8000eae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ebc:	08007ae0 	.word	0x08007ae0
  ldr r2, =_sbss
 8000ec0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ec4:	2000090c 	.word	0x2000090c

08000ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <HAL_Init+0x40>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_Init+0x40>)
 8000ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_Init+0x40>)
 8000eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 ffb1 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fdac 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023c00 	.word	0x40023c00

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 ffc9 	bl	8001ec6 <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f000 ff91 	bl	8001e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000218 	.word	0x20000218

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000218 	.word	0x20000218

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff ffee 	bl	8000f98 <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_Delay+0x44>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffde 	bl	8000f98 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0ed      	b.n	80011e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fd48 	bl	8000aac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0201 	orr.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800102c:	f7ff ffb4 	bl	8000f98 <HAL_GetTick>
 8001030:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001032:	e012      	b.n	800105a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001034:	f7ff ffb0 	bl	8000f98 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b0a      	cmp	r3, #10
 8001040:	d90b      	bls.n	800105a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2205      	movs	r2, #5
 8001052:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e0c5      	b.n	80011e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0e5      	beq.n	8001034 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0202 	bic.w	r2, r2, #2
 8001076:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001078:	f7ff ff8e 	bl	8000f98 <HAL_GetTick>
 800107c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800107e:	e012      	b.n	80010a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001080:	f7ff ff8a 	bl	8000f98 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b0a      	cmp	r3, #10
 800108c:	d90b      	bls.n	80010a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2205      	movs	r2, #5
 800109e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e09f      	b.n	80011e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1e5      	bne.n	8001080 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7e1b      	ldrb	r3, [r3, #24]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e007      	b.n	80010de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7e5b      	ldrb	r3, [r3, #25]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e007      	b.n	8001108 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001106:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7e9b      	ldrb	r3, [r3, #26]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d108      	bne.n	8001122 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0220 	orr.w	r2, r2, #32
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e007      	b.n	8001132 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0220 	bic.w	r2, r2, #32
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7edb      	ldrb	r3, [r3, #27]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d108      	bne.n	800114c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0210 	bic.w	r2, r2, #16
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e007      	b.n	800115c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0210 	orr.w	r2, r2, #16
 800115a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7f1b      	ldrb	r3, [r3, #28]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d108      	bne.n	8001176 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0208 	orr.w	r2, r2, #8
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e007      	b.n	8001186 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0208 	bic.w	r2, r2, #8
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7f5b      	ldrb	r3, [r3, #29]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d108      	bne.n	80011a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 0204 	orr.w	r2, r2, #4
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e007      	b.n	80011b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0204 	bic.w	r2, r2, #4
 80011ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	ea42 0103 	orr.w	r1, r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001206:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001208:	7cfb      	ldrb	r3, [r7, #19]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d003      	beq.n	8001216 <HAL_CAN_ConfigFilter+0x26>
 800120e:	7cfb      	ldrb	r3, [r7, #19]
 8001210:	2b02      	cmp	r3, #2
 8001212:	f040 80be 	bne.w	8001392 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001216:	4b65      	ldr	r3, [pc, #404]	; (80013ac <HAL_CAN_ConfigFilter+0x1bc>)
 8001218:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001230:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	431a      	orrs	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	2201      	movs	r2, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	401a      	ands	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d123      	bne.n	80012c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43db      	mvns	r3, r3
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800129a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3248      	adds	r2, #72	; 0x48
 80012a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012b6:	6979      	ldr	r1, [r7, #20]
 80012b8:	3348      	adds	r3, #72	; 0x48
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	440b      	add	r3, r1
 80012be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d122      	bne.n	800130e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3248      	adds	r2, #72	; 0x48
 80012ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001302:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001304:	6979      	ldr	r1, [r7, #20]
 8001306:	3348      	adds	r3, #72	; 0x48
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	440b      	add	r3, r1
 800130c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43db      	mvns	r3, r3
 8001320:	401a      	ands	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001328:	e007      	b.n	800133a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	431a      	orrs	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d109      	bne.n	8001356 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	43db      	mvns	r3, r3
 800134c:	401a      	ands	r2, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001354:	e007      	b.n	8001366 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	431a      	orrs	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d107      	bne.n	800137e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	431a      	orrs	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001384:	f023 0201 	bic.w	r2, r3, #1
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e006      	b.n	80013a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
  }
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	40006400 	.word	0x40006400

080013b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d12e      	bne.n	8001422 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013dc:	f7ff fddc 	bl	8000f98 <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013e2:	e012      	b.n	800140a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013e4:	f7ff fdd8 	bl	8000f98 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b0a      	cmp	r3, #10
 80013f0:	d90b      	bls.n	800140a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2205      	movs	r2, #5
 8001402:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e012      	b.n	8001430 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e5      	bne.n	80013e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e006      	b.n	8001430 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
  }
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001456:	7ffb      	ldrb	r3, [r7, #31]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d003      	beq.n	8001464 <HAL_CAN_AddTxMessage+0x2c>
 800145c:	7ffb      	ldrb	r3, [r7, #31]
 800145e:	2b02      	cmp	r3, #2
 8001460:	f040 80b8 	bne.w	80015d4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10a      	bne.n	8001484 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 80a0 	beq.w	80015c4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	0e1b      	lsrs	r3, r3, #24
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d907      	bls.n	80014a4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e09e      	b.n	80015e2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014a4:	2201      	movs	r2, #1
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	409a      	lsls	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014c0:	68f9      	ldr	r1, [r7, #12]
 80014c2:	6809      	ldr	r1, [r1, #0]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3318      	adds	r3, #24
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	440b      	add	r3, r1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e00f      	b.n	80014f2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014e2:	68f9      	ldr	r1, [r7, #12]
 80014e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	3318      	adds	r3, #24
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	440b      	add	r3, r1
 80014f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6819      	ldr	r1, [r3, #0]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3318      	adds	r3, #24
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	440b      	add	r3, r1
 8001502:	3304      	adds	r3, #4
 8001504:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	7d1b      	ldrb	r3, [r3, #20]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d111      	bne.n	8001532 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3318      	adds	r3, #24
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4413      	add	r3, r2
 800151a:	3304      	adds	r3, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	6811      	ldr	r1, [r2, #0]
 8001522:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3318      	adds	r3, #24
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	440b      	add	r3, r1
 800152e:	3304      	adds	r3, #4
 8001530:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3307      	adds	r3, #7
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	061a      	lsls	r2, r3, #24
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3306      	adds	r3, #6
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	041b      	lsls	r3, r3, #16
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3305      	adds	r3, #5
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	4313      	orrs	r3, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	3204      	adds	r2, #4
 8001552:	7812      	ldrb	r2, [r2, #0]
 8001554:	4610      	mov	r0, r2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	6811      	ldr	r1, [r2, #0]
 800155a:	ea43 0200 	orr.w	r2, r3, r0
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	440b      	add	r3, r1
 8001564:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001568:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3303      	adds	r3, #3
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	061a      	lsls	r2, r3, #24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3302      	adds	r3, #2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3301      	adds	r3, #1
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	4313      	orrs	r3, r2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	4610      	mov	r0, r2
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	6811      	ldr	r1, [r2, #0]
 8001590:	ea43 0200 	orr.w	r2, r3, r0
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	440b      	add	r3, r1
 800159a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800159e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3318      	adds	r3, #24
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	6811      	ldr	r1, [r2, #0]
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3318      	adds	r3, #24
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	440b      	add	r3, r1
 80015be:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e00e      	b.n	80015e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e006      	b.n	80015e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
  }
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80015ee:	b480      	push	{r7}
 80015f0:	b087      	sub	sp, #28
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001602:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d003      	beq.n	8001612 <HAL_CAN_GetRxMessage+0x24>
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b02      	cmp	r3, #2
 800160e:	f040 80f3 	bne.w	80017f8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10e      	bne.n	8001636 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d116      	bne.n	8001654 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0e7      	b.n	8001806 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d107      	bne.n	8001654 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0d8      	b.n	8001806 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	331b      	adds	r3, #27
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	4413      	add	r3, r2
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0204 	and.w	r2, r3, #4
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10c      	bne.n	800168c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	331b      	adds	r3, #27
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	4413      	add	r3, r2
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0d5b      	lsrs	r3, r3, #21
 8001682:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e00b      	b.n	80016a4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	331b      	adds	r3, #27
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	4413      	add	r3, r2
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	08db      	lsrs	r3, r3, #3
 800169c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	331b      	adds	r3, #27
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0202 	and.w	r2, r3, #2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	331b      	adds	r3, #27
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	4413      	add	r3, r2
 80016c6:	3304      	adds	r3, #4
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 020f 	and.w	r2, r3, #15
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	331b      	adds	r3, #27
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	4413      	add	r3, r2
 80016de:	3304      	adds	r3, #4
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	0a1b      	lsrs	r3, r3, #8
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	331b      	adds	r3, #27
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	3304      	adds	r3, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	0c1b      	lsrs	r3, r3, #16
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4413      	add	r3, r2
 800170c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0a1a      	lsrs	r2, r3, #8
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	0c1a      	lsrs	r2, r3, #16
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	3302      	adds	r3, #2
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	4413      	add	r3, r2
 8001756:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0e1a      	lsrs	r2, r3, #24
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	3303      	adds	r3, #3
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	4413      	add	r3, r2
 8001770:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	3304      	adds	r3, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	4413      	add	r3, r2
 8001788:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0a1a      	lsrs	r2, r3, #8
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	3305      	adds	r3, #5
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0c1a      	lsrs	r2, r3, #16
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3306      	adds	r3, #6
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	0e1a      	lsrs	r2, r3, #24
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	3307      	adds	r3, #7
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d108      	bne.n	80017e4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0220 	orr.w	r2, r2, #32
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	e007      	b.n	80017f4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0220 	orr.w	r2, r2, #32
 80017f2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e006      	b.n	8001806 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
  }
}
 8001806:	4618      	mov	r0, r3
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001822:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d002      	beq.n	8001830 <HAL_CAN_ActivateNotification+0x1e>
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d109      	bne.n	8001844 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6959      	ldr	r1, [r3, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	e006      	b.n	8001852 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
  }
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b08a      	sub	sp, #40	; 0x28
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d07c      	beq.n	800199e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d023      	beq.n	80018f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2201      	movs	r2, #1
 80018b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f983 	bl	8001bcc <HAL_CAN_TxMailbox0CompleteCallback>
 80018c6:	e016      	b.n	80018f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	e00c      	b.n	80018f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d004      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	e002      	b.n	80018f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f989 	bl	8001c08 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d024      	beq.n	800194a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001908:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f963 	bl	8001be0 <HAL_CAN_TxMailbox1CompleteCallback>
 800191a:	e016      	b.n	800194a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
 800192e:	e00c      	b.n	800194a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001936:	2b00      	cmp	r3, #0
 8001938:	d004      	beq.n	8001944 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	e002      	b.n	800194a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f969 	bl	8001c1c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d024      	beq.n	800199e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800195c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f943 	bl	8001bf4 <HAL_CAN_TxMailbox2CompleteCallback>
 800196e:	e016      	b.n	800199e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
 8001982:	e00c      	b.n	800199e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
 8001996:	e002      	b.n	800199e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f949 	bl	8001c30 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00c      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2210      	movs	r2, #16
 80019c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00b      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2208      	movs	r2, #8
 80019dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f930 	bl	8001c44 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7fe fd65 	bl	80004cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00c      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2210      	movs	r2, #16
 8001a24:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2208      	movs	r2, #8
 8001a40:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f912 	bl	8001c6c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f8f9 	bl	8001c58 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00b      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2210      	movs	r2, #16
 8001a80:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f8fc 	bl	8001c80 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8f5 	bl	8001c94 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d07b      	beq.n	8001bac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d072      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d043      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d03e      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b2c:	2b60      	cmp	r3, #96	; 0x60
 8001b2e:	d02b      	beq.n	8001b88 <HAL_CAN_IRQHandler+0x32a>
 8001b30:	2b60      	cmp	r3, #96	; 0x60
 8001b32:	d82e      	bhi.n	8001b92 <HAL_CAN_IRQHandler+0x334>
 8001b34:	2b50      	cmp	r3, #80	; 0x50
 8001b36:	d022      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x320>
 8001b38:	2b50      	cmp	r3, #80	; 0x50
 8001b3a:	d82a      	bhi.n	8001b92 <HAL_CAN_IRQHandler+0x334>
 8001b3c:	2b40      	cmp	r3, #64	; 0x40
 8001b3e:	d019      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x316>
 8001b40:	2b40      	cmp	r3, #64	; 0x40
 8001b42:	d826      	bhi.n	8001b92 <HAL_CAN_IRQHandler+0x334>
 8001b44:	2b30      	cmp	r3, #48	; 0x30
 8001b46:	d010      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x30c>
 8001b48:	2b30      	cmp	r3, #48	; 0x30
 8001b4a:	d822      	bhi.n	8001b92 <HAL_CAN_IRQHandler+0x334>
 8001b4c:	2b10      	cmp	r3, #16
 8001b4e:	d002      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x2f8>
 8001b50:	2b20      	cmp	r3, #32
 8001b52:	d005      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b54:	e01d      	b.n	8001b92 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b5e:	e019      	b.n	8001b94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	f043 0310 	orr.w	r3, r3, #16
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b68:	e014      	b.n	8001b94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b72:	e00f      	b.n	8001b94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b7c:	e00a      	b.n	8001b94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b86:	e005      	b.n	8001b94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b90:	e000      	b.n	8001b94 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b92:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ba2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f872 	bl	8001ca8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4907      	ldr	r1, [pc, #28]	; (8001d58 <__NVIC_EnableIRQ+0x38>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	; (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	; (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff8e 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff29 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff3e 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff8e 	bl	8001db0 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5d 	bl	8001d5c <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff31 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffa2 	bl	8001e18 <SysTick_Config>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e16b      	b.n	80021d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	f040 815a 	bne.w	80021ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d005      	beq.n	8001f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d130      	bne.n	8001f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 0201 	and.w	r2, r3, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d017      	beq.n	8001fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d123      	bne.n	8002024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	08da      	lsrs	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3208      	adds	r2, #8
 8001fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	08da      	lsrs	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3208      	adds	r2, #8
 800201e:	69b9      	ldr	r1, [r7, #24]
 8002020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0203 	and.w	r2, r3, #3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80b4 	beq.w	80021ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b60      	ldr	r3, [pc, #384]	; (80021ec <HAL_GPIO_Init+0x30c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a5f      	ldr	r2, [pc, #380]	; (80021ec <HAL_GPIO_Init+0x30c>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b5d      	ldr	r3, [pc, #372]	; (80021ec <HAL_GPIO_Init+0x30c>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002082:	4a5b      	ldr	r2, [pc, #364]	; (80021f0 <HAL_GPIO_Init+0x310>)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_GPIO_Init+0x314>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d02b      	beq.n	8002106 <HAL_GPIO_Init+0x226>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a51      	ldr	r2, [pc, #324]	; (80021f8 <HAL_GPIO_Init+0x318>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d025      	beq.n	8002102 <HAL_GPIO_Init+0x222>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a50      	ldr	r2, [pc, #320]	; (80021fc <HAL_GPIO_Init+0x31c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01f      	beq.n	80020fe <HAL_GPIO_Init+0x21e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4f      	ldr	r2, [pc, #316]	; (8002200 <HAL_GPIO_Init+0x320>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0x21a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4e      	ldr	r2, [pc, #312]	; (8002204 <HAL_GPIO_Init+0x324>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x216>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4d      	ldr	r2, [pc, #308]	; (8002208 <HAL_GPIO_Init+0x328>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x212>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4c      	ldr	r2, [pc, #304]	; (800220c <HAL_GPIO_Init+0x32c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x20e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4b      	ldr	r2, [pc, #300]	; (8002210 <HAL_GPIO_Init+0x330>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x20a>
 80020e6:	2307      	movs	r3, #7
 80020e8:	e00e      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020ea:	2308      	movs	r3, #8
 80020ec:	e00c      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020ee:	2306      	movs	r3, #6
 80020f0:	e00a      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020f2:	2305      	movs	r3, #5
 80020f4:	e008      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020f6:	2304      	movs	r3, #4
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e004      	b.n	8002108 <HAL_GPIO_Init+0x228>
 80020fe:	2302      	movs	r3, #2
 8002100:	e002      	b.n	8002108 <HAL_GPIO_Init+0x228>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_GPIO_Init+0x228>
 8002106:	2300      	movs	r3, #0
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	f002 0203 	and.w	r2, r2, #3
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	4093      	lsls	r3, r2
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002118:	4935      	ldr	r1, [pc, #212]	; (80021f0 <HAL_GPIO_Init+0x310>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_GPIO_Init+0x334>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214a:	4a32      	ldr	r2, [pc, #200]	; (8002214 <HAL_GPIO_Init+0x334>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_GPIO_Init+0x334>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002174:	4a27      	ldr	r2, [pc, #156]	; (8002214 <HAL_GPIO_Init+0x334>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_GPIO_Init+0x334>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800219e:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <HAL_GPIO_Init+0x334>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_GPIO_Init+0x334>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c8:	4a12      	ldr	r2, [pc, #72]	; (8002214 <HAL_GPIO_Init+0x334>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b0f      	cmp	r3, #15
 80021d8:	f67f ae90 	bls.w	8001efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40013800 	.word	0x40013800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020400 	.word	0x40020400
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40021000 	.word	0x40021000
 8002208:	40021400 	.word	0x40021400
 800220c:	40021800 	.word	0x40021800
 8002210:	40021c00 	.word	0x40021c00
 8002214:	40013c00 	.word	0x40013c00

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002234:	e003      	b.n	800223e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	041a      	lsls	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	619a      	str	r2, [r3, #24]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800224a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224c:	b08f      	sub	sp, #60	; 0x3c
 800224e:	af0a      	add	r7, sp, #40	; 0x28
 8002250:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e054      	b.n	8002306 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f005 f874 	bl	8007364 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2203      	movs	r2, #3
 8002280:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f003 f867 	bl	800536e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	687e      	ldr	r6, [r7, #4]
 80022a8:	466d      	mov	r5, sp
 80022aa:	f106 0410 	add.w	r4, r6, #16
 80022ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80022be:	1d33      	adds	r3, r6, #4
 80022c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c2:	6838      	ldr	r0, [r7, #0]
 80022c4:	f002 ffe1 	bl	800528a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2101      	movs	r1, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 f85e 	bl	8005390 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	687e      	ldr	r6, [r7, #4]
 80022dc:	466d      	mov	r5, sp
 80022de:	f106 0410 	add.w	r4, r6, #16
 80022e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80022f2:	1d33      	adds	r3, r6, #4
 80022f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f6:	6838      	ldr	r0, [r7, #0]
 80022f8:	f003 f9e6 	bl	80056c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800230e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800230e:	b590      	push	{r4, r7, lr}
 8002310:	b089      	sub	sp, #36	; 0x24
 8002312:	af04      	add	r7, sp, #16
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	4608      	mov	r0, r1
 8002318:	4611      	mov	r1, r2
 800231a:	461a      	mov	r2, r3
 800231c:	4603      	mov	r3, r0
 800231e:	70fb      	strb	r3, [r7, #3]
 8002320:	460b      	mov	r3, r1
 8002322:	70bb      	strb	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_HCD_HC_Init+0x28>
 8002332:	2302      	movs	r3, #2
 8002334:	e076      	b.n	8002424 <HAL_HCD_HC_Init+0x116>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	333d      	adds	r3, #61	; 0x3d
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3338      	adds	r3, #56	; 0x38
 800235e:	787a      	ldrb	r2, [r7, #1]
 8002360:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3340      	adds	r3, #64	; 0x40
 8002370:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002372:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	3339      	adds	r3, #57	; 0x39
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	333f      	adds	r3, #63	; 0x3f
 8002394:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002398:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	78ba      	ldrb	r2, [r7, #2]
 800239e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023a2:	b2d0      	uxtb	r0, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	333a      	adds	r3, #58	; 0x3a
 80023b0:	4602      	mov	r2, r0
 80023b2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80023b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	da09      	bge.n	80023d0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	333b      	adds	r3, #59	; 0x3b
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e008      	b.n	80023e2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	333b      	adds	r3, #59	; 0x3b
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	333c      	adds	r3, #60	; 0x3c
 80023f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023f4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	787c      	ldrb	r4, [r7, #1]
 80023fc:	78ba      	ldrb	r2, [r7, #2]
 80023fe:	78f9      	ldrb	r1, [r7, #3]
 8002400:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002402:	9302      	str	r3, [sp, #8]
 8002404:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4623      	mov	r3, r4
 8002412:	f003 fab5 	bl	8005980 <USB_HC_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bd90      	pop	{r4, r7, pc}

0800242c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_HCD_HC_Halt+0x1e>
 8002446:	2302      	movs	r3, #2
 8002448:	e00f      	b.n	800246a <HAL_HCD_HC_Halt+0x3e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f003 fd05 	bl	8005e6a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	4603      	mov	r3, r0
 8002484:	70fb      	strb	r3, [r7, #3]
 8002486:	460b      	mov	r3, r1
 8002488:	70bb      	strb	r3, [r7, #2]
 800248a:	4613      	mov	r3, r2
 800248c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	333b      	adds	r3, #59	; 0x3b
 800249c:	78ba      	ldrb	r2, [r7, #2]
 800249e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	333f      	adds	r3, #63	; 0x3f
 80024ae:	787a      	ldrb	r2, [r7, #1]
 80024b0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80024b2:	7c3b      	ldrb	r3, [r7, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d112      	bne.n	80024de <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3342      	adds	r3, #66	; 0x42
 80024c6:	2203      	movs	r2, #3
 80024c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	333d      	adds	r3, #61	; 0x3d
 80024d8:	7f3a      	ldrb	r2, [r7, #28]
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e008      	b.n	80024f0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	3342      	adds	r3, #66	; 0x42
 80024ec:	2202      	movs	r2, #2
 80024ee:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	f200 80c6 	bhi.w	8002684 <HAL_HCD_HC_SubmitRequest+0x210>
 80024f8:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002511 	.word	0x08002511
 8002504:	08002671 	.word	0x08002671
 8002508:	08002575 	.word	0x08002575
 800250c:	080025f3 	.word	0x080025f3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002510:	7c3b      	ldrb	r3, [r7, #16]
 8002512:	2b01      	cmp	r3, #1
 8002514:	f040 80b8 	bne.w	8002688 <HAL_HCD_HC_SubmitRequest+0x214>
 8002518:	78bb      	ldrb	r3, [r7, #2]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 80b4 	bne.w	8002688 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002520:	8b3b      	ldrh	r3, [r7, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d108      	bne.n	8002538 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3355      	adds	r3, #85	; 0x55
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3355      	adds	r3, #85	; 0x55
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	3342      	adds	r3, #66	; 0x42
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800255e:	e093      	b.n	8002688 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3342      	adds	r3, #66	; 0x42
 800256e:	2202      	movs	r2, #2
 8002570:	701a      	strb	r2, [r3, #0]
      break;
 8002572:	e089      	b.n	8002688 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002574:	78bb      	ldrb	r3, [r7, #2]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d11d      	bne.n	80025b6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	3355      	adds	r3, #85	; 0x55
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3342      	adds	r3, #66	; 0x42
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80025a0:	e073      	b.n	800268a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3342      	adds	r3, #66	; 0x42
 80025b0:	2202      	movs	r2, #2
 80025b2:	701a      	strb	r2, [r3, #0]
      break;
 80025b4:	e069      	b.n	800268a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	3354      	adds	r3, #84	; 0x54
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	3342      	adds	r3, #66	; 0x42
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
      break;
 80025dc:	e055      	b.n	800268a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	3342      	adds	r3, #66	; 0x42
 80025ec:	2202      	movs	r2, #2
 80025ee:	701a      	strb	r2, [r3, #0]
      break;
 80025f0:	e04b      	b.n	800268a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025f2:	78bb      	ldrb	r3, [r7, #2]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d11d      	bne.n	8002634 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3355      	adds	r3, #85	; 0x55
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	3342      	adds	r3, #66	; 0x42
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800261e:	e034      	b.n	800268a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3342      	adds	r3, #66	; 0x42
 800262e:	2202      	movs	r2, #2
 8002630:	701a      	strb	r2, [r3, #0]
      break;
 8002632:	e02a      	b.n	800268a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	3354      	adds	r3, #84	; 0x54
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d109      	bne.n	800265c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	3342      	adds	r3, #66	; 0x42
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
      break;
 800265a:	e016      	b.n	800268a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	3342      	adds	r3, #66	; 0x42
 800266a:	2202      	movs	r2, #2
 800266c:	701a      	strb	r2, [r3, #0]
      break;
 800266e:	e00c      	b.n	800268a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	3342      	adds	r3, #66	; 0x42
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
      break;
 8002682:	e002      	b.n	800268a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002684:	bf00      	nop
 8002686:	e000      	b.n	800268a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002688:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3344      	adds	r3, #68	; 0x44
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	8b3a      	ldrh	r2, [r7, #24]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	202c      	movs	r0, #44	; 0x2c
 80026a4:	fb00 f303 	mul.w	r3, r0, r3
 80026a8:	440b      	add	r3, r1
 80026aa:	334c      	adds	r3, #76	; 0x4c
 80026ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	3360      	adds	r3, #96	; 0x60
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	3350      	adds	r3, #80	; 0x50
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3339      	adds	r3, #57	; 0x39
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	3361      	adds	r3, #97	; 0x61
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	222c      	movs	r2, #44	; 0x2c
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	3338      	adds	r3, #56	; 0x38
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	18d1      	adds	r1, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	f003 fa58 	bl	8005bc4 <USB_HC_StartXfer>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop

08002720 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f002 ff83 	bl	8005642 <USB_GetMode>
 800273c:	4603      	mov	r3, r0
 800273e:	2b01      	cmp	r3, #1
 8002740:	f040 80f6 	bne.w	8002930 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f002 ff67 	bl	800561c <USB_ReadInterrupts>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80ec 	beq.w	800292e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f002 ff5e 	bl	800561c <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800276a:	d104      	bne.n	8002776 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002774:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f002 ff4e 	bl	800561c <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800278a:	d104      	bne.n	8002796 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002794:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f002 ff3e 	bl	800561c <USB_ReadInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027aa:	d104      	bne.n	80027b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f002 ff2e 	bl	800561c <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d103      	bne.n	80027d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2202      	movs	r2, #2
 80027d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 ff20 	bl	800561c <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e6:	d11c      	bne.n	8002822 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10f      	bne.n	8002822 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002802:	2110      	movs	r1, #16
 8002804:	6938      	ldr	r0, [r7, #16]
 8002806:	f002 fe0f 	bl	8005428 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800280a:	6938      	ldr	r0, [r7, #16]
 800280c:	f002 fe40 	bl	8005490 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	4618      	mov	r0, r3
 8002818:	f003 f816 	bl	8005848 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f004 fe1f 	bl	8007460 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f002 fef8 	bl	800561c <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002832:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002836:	d102      	bne.n	800283e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f001 f882 	bl	8003942 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f002 feea 	bl	800561c <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b08      	cmp	r3, #8
 8002850:	d106      	bne.n	8002860 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f004 fde8 	bl	8007428 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2208      	movs	r2, #8
 800285e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f002 fed9 	bl	800561c <USB_ReadInterrupts>
 800286a:	4603      	mov	r3, r0
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b10      	cmp	r3, #16
 8002872:	d101      	bne.n	8002878 <HAL_HCD_IRQHandler+0x158>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_HCD_IRQHandler+0x15a>
 8002878:	2300      	movs	r3, #0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d012      	beq.n	80028a4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699a      	ldr	r2, [r3, #24]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0210 	bic.w	r2, r2, #16
 800288c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 ff85 	bl	800379e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0210 	orr.w	r2, r2, #16
 80028a2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 feb7 	bl	800561c <USB_ReadInterrupts>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028b8:	d13a      	bne.n	8002930 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fac2 	bl	8005e48 <USB_HC_ReadInterrupt>
 80028c4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e025      	b.n	8002918 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d018      	beq.n	8002912 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f6:	d106      	bne.n	8002906 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	4619      	mov	r1, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f88f 	bl	8002a22 <HCD_HC_IN_IRQHandler>
 8002904:	e005      	b.n	8002912 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	4619      	mov	r1, r3
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fbdd 	bl	80030cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	429a      	cmp	r2, r3
 8002920:	d3d4      	bcc.n	80028cc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292a:	615a      	str	r2, [r3, #20]
 800292c:	e000      	b.n	8002930 <HAL_HCD_IRQHandler+0x210>
      return;
 800292e:	bf00      	nop
    }
  }
}
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_HCD_Start+0x16>
 8002948:	2302      	movs	r3, #2
 800294a:	e013      	b.n	8002974 <HAL_HCD_Start+0x3e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2101      	movs	r1, #1
 800295a:	4618      	mov	r0, r3
 800295c:	f002 ffae 	bl	80058bc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fcf1 	bl	800534c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_HCD_Stop+0x16>
 800298e:	2302      	movs	r3, #2
 8002990:	e00d      	b.n	80029ae <HAL_HCD_Stop+0x32>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 fb9c 	bl	80060dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3360      	adds	r3, #96	; 0x60
 80029d0:	781b      	ldrb	r3, [r3, #0]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3350      	adds	r3, #80	; 0x50
 80029f8:	681b      	ldr	r3, [r3, #0]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f002 ffa2 	bl	800595c <USB_GetCurrentFrame>
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d11a      	bne.n	8002a88 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2304      	movs	r3, #4
 8002a62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3361      	adds	r3, #97	; 0x61
 8002a72:	2206      	movs	r2, #6
 8002a74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 f9f2 	bl	8005e6a <USB_HC_Halt>
 8002a86:	e0af      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9e:	d11b      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3361      	adds	r3, #97	; 0x61
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f003 f9ca 	bl	8005e6a <USB_HC_Halt>
 8002ad6:	e087      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d109      	bne.n	8002b02 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afa:	461a      	mov	r2, r3
 8002afc:	2320      	movs	r3, #32
 8002afe:	6093      	str	r3, [r2, #8]
 8002b00:	e072      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d11a      	bne.n	8002b4e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	461a      	mov	r2, r3
 8002b26:	2308      	movs	r3, #8
 8002b28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3361      	adds	r3, #97	; 0x61
 8002b38:	2205      	movs	r2, #5
 8002b3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 f98f 	bl	8005e6a <USB_HC_Halt>
 8002b4c:	e04c      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b64:	d11b      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b72:	461a      	mov	r2, r3
 8002b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3361      	adds	r3, #97	; 0x61
 8002b88:	2208      	movs	r2, #8
 8002b8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 f967 	bl	8005e6a <USB_HC_Halt>
 8002b9c:	e024      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	2b80      	cmp	r3, #128	; 0x80
 8002bb2:	d119      	bne.n	8002be8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3361      	adds	r3, #97	; 0x61
 8002bd4:	2206      	movs	r2, #6
 8002bd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 f941 	bl	8005e6a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfe:	d112      	bne.n	8002c26 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 f92d 	bl	8005e6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c22:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c24:	e24e      	b.n	80030c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	f040 80df 	bne.w	8002dfc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d019      	beq.n	8002c7a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3348      	adds	r3, #72	; 0x48
 8002c54:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	0159      	lsls	r1, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	440b      	add	r3, r1
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c68:	1ad2      	subs	r2, r2, r3
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	202c      	movs	r0, #44	; 0x2c
 8002c70:	fb00 f303 	mul.w	r3, r0, r3
 8002c74:	440b      	add	r3, r1
 8002c76:	3350      	adds	r3, #80	; 0x50
 8002c78:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	3361      	adds	r3, #97	; 0x61
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	335c      	adds	r3, #92	; 0x5c
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002caa:	461a      	mov	r2, r3
 8002cac:	2301      	movs	r3, #1
 8002cae:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	333f      	adds	r3, #63	; 0x3f
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	333f      	adds	r3, #63	; 0x3f
 8002cd2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d111      	bne.n	8002cfc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 f8c1 	bl	8005e6a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	6093      	str	r3, [r2, #8]
 8002cfa:	e03a      	b.n	8002d72 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	333f      	adds	r3, #63	; 0x3f
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d009      	beq.n	8002d24 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	333f      	adds	r3, #63	; 0x3f
 8002d1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d126      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	0151      	lsls	r1, r2, #5
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	440a      	add	r2, r1
 8002d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d42:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3360      	adds	r3, #96	; 0x60
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	b2d9      	uxtb	r1, r3
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	202c      	movs	r0, #44	; 0x2c
 8002d60:	fb00 f303 	mul.w	r3, r0, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3360      	adds	r3, #96	; 0x60
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f004 fb85 	bl	800747c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d12b      	bne.n	8002dd2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	3348      	adds	r3, #72	; 0x48
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	202c      	movs	r0, #44	; 0x2c
 8002d90:	fb00 f202 	mul.w	r2, r0, r2
 8002d94:	440a      	add	r2, r1
 8002d96:	3240      	adds	r2, #64	; 0x40
 8002d98:	8812      	ldrh	r2, [r2, #0]
 8002d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 818e 	beq.w	80030c4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3354      	adds	r3, #84	; 0x54
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	f083 0301 	eor.w	r3, r3, #1
 8002dbc:	b2d8      	uxtb	r0, r3
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3354      	adds	r3, #84	; 0x54
 8002dcc:	4602      	mov	r2, r0
 8002dce:	701a      	strb	r2, [r3, #0]
}
 8002dd0:	e178      	b.n	80030c4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	3354      	adds	r3, #84	; 0x54
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	f083 0301 	eor.w	r3, r3, #1
 8002de6:	b2d8      	uxtb	r0, r3
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3354      	adds	r3, #84	; 0x54
 8002df6:	4602      	mov	r2, r0
 8002df8:	701a      	strb	r2, [r3, #0]
}
 8002dfa:	e163      	b.n	80030c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	f040 80f6 	bne.w	8003000 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3361      	adds	r3, #97	; 0x61
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d109      	bne.n	8002e3c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3360      	adds	r3, #96	; 0x60
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	e0c9      	b.n	8002fd0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3361      	adds	r3, #97	; 0x61
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b05      	cmp	r3, #5
 8002e4e:	d109      	bne.n	8002e64 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3360      	adds	r3, #96	; 0x60
 8002e5e:	2205      	movs	r2, #5
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e0b5      	b.n	8002fd0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3361      	adds	r3, #97	; 0x61
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b06      	cmp	r3, #6
 8002e76:	d009      	beq.n	8002e8c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3361      	adds	r3, #97	; 0x61
 8002e86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d150      	bne.n	8002f2e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	212c      	movs	r1, #44	; 0x2c
 8002e92:	fb01 f303 	mul.w	r3, r1, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	335c      	adds	r3, #92	; 0x5c
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	202c      	movs	r0, #44	; 0x2c
 8002ea4:	fb00 f303 	mul.w	r3, r0, r3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	335c      	adds	r3, #92	; 0x5c
 8002eac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	335c      	adds	r3, #92	; 0x5c
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d912      	bls.n	8002ee8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	335c      	adds	r3, #92	; 0x5c
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3360      	adds	r3, #96	; 0x60
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ee6:	e073      	b.n	8002fd0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3360      	adds	r3, #96	; 0x60
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f10:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f18:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	461a      	mov	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f2c:	e050      	b.n	8002fd0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3361      	adds	r3, #97	; 0x61
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d122      	bne.n	8002f88 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3360      	adds	r3, #96	; 0x60
 8002f50:	2202      	movs	r2, #2
 8002f52:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f6a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f72:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	461a      	mov	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e023      	b.n	8002fd0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3361      	adds	r3, #97	; 0x61
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b07      	cmp	r3, #7
 8002f9a:	d119      	bne.n	8002fd0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	335c      	adds	r3, #92	; 0x5c
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	202c      	movs	r0, #44	; 0x2c
 8002fb4:	fb00 f303 	mul.w	r3, r0, r3
 8002fb8:	440b      	add	r3, r1
 8002fba:	335c      	adds	r3, #92	; 0x5c
 8002fbc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3360      	adds	r3, #96	; 0x60
 8002fcc:	2204      	movs	r2, #4
 8002fce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2302      	movs	r3, #2
 8002fe0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	b2d9      	uxtb	r1, r3
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	202c      	movs	r0, #44	; 0x2c
 8002fec:	fb00 f303 	mul.w	r3, r0, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3360      	adds	r3, #96	; 0x60
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f004 fa3f 	bl	800747c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ffe:	e061      	b.n	80030c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b10      	cmp	r3, #16
 8003014:	d156      	bne.n	80030c4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	333f      	adds	r3, #63	; 0x3f
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d111      	bne.n	800304e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	335c      	adds	r3, #92	; 0x5c
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f002 ff0f 	bl	8005e6a <USB_HC_Halt>
 800304c:	e031      	b.n	80030b2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	333f      	adds	r3, #63	; 0x3f
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	333f      	adds	r3, #63	; 0x3f
 8003070:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003072:	2b02      	cmp	r3, #2
 8003074:	d11d      	bne.n	80030b2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	335c      	adds	r3, #92	; 0x5c
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d110      	bne.n	80030b2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3361      	adds	r3, #97	; 0x61
 800309e:	2203      	movs	r2, #3
 80030a0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 fedc 	bl	8005e6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	461a      	mov	r2, r3
 80030c0:	2310      	movs	r3, #16
 80030c2:	6093      	str	r3, [r2, #8]
}
 80030c4:	bf00      	nop
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d11a      	bne.n	8003132 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	461a      	mov	r2, r3
 800310a:	2304      	movs	r3, #4
 800310c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3361      	adds	r3, #97	; 0x61
 800311c:	2206      	movs	r2, #6
 800311e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f002 fe9d 	bl	8005e6a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003130:	e331      	b.n	8003796 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b20      	cmp	r3, #32
 8003146:	d12e      	bne.n	80031a6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	461a      	mov	r2, r3
 8003156:	2320      	movs	r3, #32
 8003158:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	212c      	movs	r1, #44	; 0x2c
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	333d      	adds	r3, #61	; 0x3d
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	f040 8313 	bne.w	8003796 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	333d      	adds	r3, #61	; 0x3d
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3360      	adds	r3, #96	; 0x60
 8003190:	2202      	movs	r2, #2
 8003192:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f002 fe63 	bl	8005e6a <USB_HC_Halt>
}
 80031a4:	e2f7      	b.n	8003796 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031bc:	d112      	bne.n	80031e4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ca:	461a      	mov	r2, r3
 80031cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f002 fe44 	bl	8005e6a <USB_HC_Halt>
}
 80031e2:	e2d8      	b.n	8003796 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d140      	bne.n	800327c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	335c      	adds	r3, #92	; 0x5c
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d111      	bne.n	8003246 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	333d      	adds	r3, #61	; 0x3d
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003240:	461a      	mov	r2, r3
 8003242:	2340      	movs	r3, #64	; 0x40
 8003244:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4413      	add	r3, r2
 800324e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003252:	461a      	mov	r2, r3
 8003254:	2301      	movs	r3, #1
 8003256:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	3361      	adds	r3, #97	; 0x61
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f002 fdf8 	bl	8005e6a <USB_HC_Halt>
}
 800327a:	e28c      	b.n	8003796 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d12c      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	3361      	adds	r3, #97	; 0x61
 80032a0:	2204      	movs	r2, #4
 80032a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	333d      	adds	r3, #61	; 0x3d
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	335c      	adds	r3, #92	; 0x5c
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fdc9 	bl	8005e6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	461a      	mov	r2, r3
 80032e6:	2340      	movs	r3, #64	; 0x40
 80032e8:	6093      	str	r3, [r2, #8]
}
 80032ea:	e254      	b.n	8003796 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d11a      	bne.n	8003338 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	461a      	mov	r2, r3
 8003310:	2308      	movs	r3, #8
 8003312:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3361      	adds	r3, #97	; 0x61
 8003322:	2205      	movs	r2, #5
 8003324:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f002 fd9a 	bl	8005e6a <USB_HC_Halt>
}
 8003336:	e22e      	b.n	8003796 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b10      	cmp	r3, #16
 800334c:	d140      	bne.n	80033d0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	335c      	adds	r3, #92	; 0x5c
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	3361      	adds	r3, #97	; 0x61
 800336e:	2203      	movs	r2, #3
 8003370:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	333d      	adds	r3, #61	; 0x3d
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d112      	bne.n	80033ac <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	333c      	adds	r3, #60	; 0x3c
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	333d      	adds	r3, #61	; 0x3d
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f002 fd57 	bl	8005e6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c8:	461a      	mov	r2, r3
 80033ca:	2310      	movs	r3, #16
 80033cc:	6093      	str	r3, [r2, #8]
}
 80033ce:	e1e2      	b.n	8003796 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d164      	bne.n	80034b0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d111      	bne.n	8003412 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	3361      	adds	r3, #97	; 0x61
 80033fc:	2206      	movs	r2, #6
 80033fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f002 fd2d 	bl	8005e6a <USB_HC_Halt>
 8003410:	e044      	b.n	800349c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	335c      	adds	r3, #92	; 0x5c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	202c      	movs	r0, #44	; 0x2c
 800342a:	fb00 f303 	mul.w	r3, r0, r3
 800342e:	440b      	add	r3, r1
 8003430:	335c      	adds	r3, #92	; 0x5c
 8003432:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	335c      	adds	r3, #92	; 0x5c
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d920      	bls.n	800348a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	335c      	adds	r3, #92	; 0x5c
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	3360      	adds	r3, #96	; 0x60
 8003468:	2204      	movs	r2, #4
 800346a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	b2d9      	uxtb	r1, r3
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	202c      	movs	r0, #44	; 0x2c
 8003476:	fb00 f303 	mul.w	r3, r0, r3
 800347a:	4413      	add	r3, r2
 800347c:	3360      	adds	r3, #96	; 0x60
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f003 fffa 	bl	800747c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003488:	e008      	b.n	800349c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	3360      	adds	r3, #96	; 0x60
 8003498:	2202      	movs	r2, #2
 800349a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	461a      	mov	r2, r3
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	6093      	str	r3, [r2, #8]
}
 80034ae:	e172      	b.n	8003796 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c6:	d11b      	bne.n	8003500 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	212c      	movs	r1, #44	; 0x2c
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	4413      	add	r3, r2
 80034d4:	3361      	adds	r3, #97	; 0x61
 80034d6:	2208      	movs	r2, #8
 80034d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f002 fcc0 	bl	8005e6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	461a      	mov	r2, r3
 80034f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034fc:	6093      	str	r3, [r2, #8]
}
 80034fe:	e14a      	b.n	8003796 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	f040 813f 	bne.w	8003796 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3361      	adds	r3, #97	; 0x61
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d17d      	bne.n	8003628 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	3360      	adds	r3, #96	; 0x60
 800353a:	2201      	movs	r2, #1
 800353c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	333f      	adds	r3, #63	; 0x3f
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d00a      	beq.n	8003568 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	212c      	movs	r1, #44	; 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	333f      	adds	r3, #63	; 0x3f
 8003560:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003562:	2b03      	cmp	r3, #3
 8003564:	f040 8100 	bne.w	8003768 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d113      	bne.n	8003598 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	212c      	movs	r1, #44	; 0x2c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	3355      	adds	r3, #85	; 0x55
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	f083 0301 	eor.w	r3, r3, #1
 8003584:	b2d8      	uxtb	r0, r3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	212c      	movs	r1, #44	; 0x2c
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	3355      	adds	r3, #85	; 0x55
 8003594:	4602      	mov	r2, r0
 8003596:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b01      	cmp	r3, #1
 800359e:	f040 80e3 	bne.w	8003768 <HCD_HC_OUT_IRQHandler+0x69c>
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	334c      	adds	r3, #76	; 0x4c
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80d8 	beq.w	8003768 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	334c      	adds	r3, #76	; 0x4c
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	202c      	movs	r0, #44	; 0x2c
 80035ce:	fb00 f202 	mul.w	r2, r0, r2
 80035d2:	440a      	add	r2, r1
 80035d4:	3240      	adds	r2, #64	; 0x40
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	3b01      	subs	r3, #1
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	202c      	movs	r0, #44	; 0x2c
 80035e2:	fb00 f202 	mul.w	r2, r0, r2
 80035e6:	440a      	add	r2, r1
 80035e8:	3240      	adds	r2, #64	; 0x40
 80035ea:	8812      	ldrh	r2, [r2, #0]
 80035ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80b5 	beq.w	8003768 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	3355      	adds	r3, #85	; 0x55
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	f083 0301 	eor.w	r3, r3, #1
 8003612:	b2d8      	uxtb	r0, r3
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	212c      	movs	r1, #44	; 0x2c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	3355      	adds	r3, #85	; 0x55
 8003622:	4602      	mov	r2, r0
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e09f      	b.n	8003768 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	212c      	movs	r1, #44	; 0x2c
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	4413      	add	r3, r2
 8003634:	3361      	adds	r3, #97	; 0x61
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d109      	bne.n	8003650 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3360      	adds	r3, #96	; 0x60
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e08b      	b.n	8003768 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3361      	adds	r3, #97	; 0x61
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d109      	bne.n	8003678 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	212c      	movs	r1, #44	; 0x2c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	3360      	adds	r3, #96	; 0x60
 8003672:	2202      	movs	r2, #2
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	e077      	b.n	8003768 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3361      	adds	r3, #97	; 0x61
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b05      	cmp	r3, #5
 800368a:	d109      	bne.n	80036a0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3360      	adds	r3, #96	; 0x60
 800369a:	2205      	movs	r2, #5
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e063      	b.n	8003768 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3361      	adds	r3, #97	; 0x61
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b06      	cmp	r3, #6
 80036b2:	d009      	beq.n	80036c8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	212c      	movs	r1, #44	; 0x2c
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	4413      	add	r3, r2
 80036c0:	3361      	adds	r3, #97	; 0x61
 80036c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d14f      	bne.n	8003768 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	335c      	adds	r3, #92	; 0x5c
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	202c      	movs	r0, #44	; 0x2c
 80036e0:	fb00 f303 	mul.w	r3, r0, r3
 80036e4:	440b      	add	r3, r1
 80036e6:	335c      	adds	r3, #92	; 0x5c
 80036e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	212c      	movs	r1, #44	; 0x2c
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	335c      	adds	r3, #92	; 0x5c
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d912      	bls.n	8003724 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	335c      	adds	r3, #92	; 0x5c
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	3360      	adds	r3, #96	; 0x60
 800371e:	2204      	movs	r2, #4
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e021      	b.n	8003768 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	3360      	adds	r3, #96	; 0x60
 8003732:	2202      	movs	r2, #2
 8003734:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	4413      	add	r3, r2
 800373e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800374c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003754:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003762:	461a      	mov	r2, r3
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	2302      	movs	r3, #2
 8003778:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	b2d9      	uxtb	r1, r3
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	202c      	movs	r0, #44	; 0x2c
 8003784:	fb00 f303 	mul.w	r3, r0, r3
 8003788:	4413      	add	r3, r2
 800378a:	3360      	adds	r3, #96	; 0x60
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f003 fe73 	bl	800747c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003796:	bf00      	nop
 8003798:	3720      	adds	r7, #32
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b08a      	sub	sp, #40	; 0x28
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	0c5b      	lsrs	r3, r3, #17
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d004      	beq.n	80037e4 <HCD_RXQLVL_IRQHandler+0x46>
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b05      	cmp	r3, #5
 80037de:	f000 80a9 	beq.w	8003934 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037e2:	e0aa      	b.n	800393a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80a6 	beq.w	8003938 <HCD_RXQLVL_IRQHandler+0x19a>
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	212c      	movs	r1, #44	; 0x2c
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	3344      	adds	r3, #68	; 0x44
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 809b 	beq.w	8003938 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	3350      	adds	r3, #80	; 0x50
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	441a      	add	r2, r3
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	202c      	movs	r0, #44	; 0x2c
 800381c:	fb00 f303 	mul.w	r3, r0, r3
 8003820:	440b      	add	r3, r1
 8003822:	334c      	adds	r3, #76	; 0x4c
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d87a      	bhi.n	8003920 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3344      	adds	r3, #68	; 0x44
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	b292      	uxth	r2, r2
 8003842:	4619      	mov	r1, r3
 8003844:	f001 fe92 	bl	800556c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	212c      	movs	r1, #44	; 0x2c
 800384e:	fb01 f303 	mul.w	r3, r1, r3
 8003852:	4413      	add	r3, r2
 8003854:	3344      	adds	r3, #68	; 0x44
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	441a      	add	r2, r3
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	202c      	movs	r0, #44	; 0x2c
 8003862:	fb00 f303 	mul.w	r3, r0, r3
 8003866:	440b      	add	r3, r1
 8003868:	3344      	adds	r3, #68	; 0x44
 800386a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	212c      	movs	r1, #44	; 0x2c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	3350      	adds	r3, #80	; 0x50
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	441a      	add	r2, r3
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	202c      	movs	r0, #44	; 0x2c
 8003886:	fb00 f303 	mul.w	r3, r0, r3
 800388a:	440b      	add	r3, r1
 800388c:	3350      	adds	r3, #80	; 0x50
 800388e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	0cdb      	lsrs	r3, r3, #19
 80038a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3340      	adds	r3, #64	; 0x40
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d13c      	bne.n	8003938 <HCD_RXQLVL_IRQHandler+0x19a>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d039      	beq.n	8003938 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038da:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038e2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f0:	461a      	mov	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3354      	adds	r3, #84	; 0x54
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	f083 0301 	eor.w	r3, r3, #1
 800390a:	b2d8      	uxtb	r0, r3
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	4413      	add	r3, r2
 8003918:	3354      	adds	r3, #84	; 0x54
 800391a:	4602      	mov	r2, r0
 800391c:	701a      	strb	r2, [r3, #0]
      break;
 800391e:	e00b      	b.n	8003938 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	212c      	movs	r1, #44	; 0x2c
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	3360      	adds	r3, #96	; 0x60
 800392e:	2204      	movs	r2, #4
 8003930:	701a      	strb	r2, [r3, #0]
      break;
 8003932:	e001      	b.n	8003938 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003934:	bf00      	nop
 8003936:	e000      	b.n	800393a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003938:	bf00      	nop
  }
}
 800393a:	bf00      	nop
 800393c:	3728      	adds	r7, #40	; 0x28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800396e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b02      	cmp	r3, #2
 8003978:	d10b      	bne.n	8003992 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d102      	bne.n	800398a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f003 fd5d 	bl	8007444 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b08      	cmp	r3, #8
 800399a:	d132      	bne.n	8003a02 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f043 0308 	orr.w	r3, r3, #8
 80039a2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d126      	bne.n	80039fc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d113      	bne.n	80039de <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039c0:	d106      	bne.n	80039d0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2102      	movs	r1, #2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 ff3d 	bl	8005848 <USB_InitFSLSPClkSel>
 80039ce:	e011      	b.n	80039f4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 ff36 	bl	8005848 <USB_InitFSLSPClkSel>
 80039dc:	e00a      	b.n	80039f4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d106      	bne.n	80039f4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ec:	461a      	mov	r2, r3
 80039ee:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039f2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f003 fd4f 	bl	8007498 <HAL_HCD_PortEnabled_Callback>
 80039fa:	e002      	b.n	8003a02 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f003 fd59 	bl	80074b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d103      	bne.n	8003a14 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f043 0320 	orr.w	r3, r3, #32
 8003a12:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e12b      	b.n	8003c92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fd f87c 	bl	8000b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2224      	movs	r2, #36	; 0x24
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a8c:	f001 fa20 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 8003a90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4a81      	ldr	r2, [pc, #516]	; (8003c9c <HAL_I2C_Init+0x274>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d807      	bhi.n	8003aac <HAL_I2C_Init+0x84>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a80      	ldr	r2, [pc, #512]	; (8003ca0 <HAL_I2C_Init+0x278>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	bf94      	ite	ls
 8003aa4:	2301      	movls	r3, #1
 8003aa6:	2300      	movhi	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	e006      	b.n	8003aba <HAL_I2C_Init+0x92>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4a7d      	ldr	r2, [pc, #500]	; (8003ca4 <HAL_I2C_Init+0x27c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	bf94      	ite	ls
 8003ab4:	2301      	movls	r3, #1
 8003ab6:	2300      	movhi	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e0e7      	b.n	8003c92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a78      	ldr	r2, [pc, #480]	; (8003ca8 <HAL_I2C_Init+0x280>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	0c9b      	lsrs	r3, r3, #18
 8003acc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a6a      	ldr	r2, [pc, #424]	; (8003c9c <HAL_I2C_Init+0x274>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d802      	bhi.n	8003afc <HAL_I2C_Init+0xd4>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	3301      	adds	r3, #1
 8003afa:	e009      	b.n	8003b10 <HAL_I2C_Init+0xe8>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b02:	fb02 f303 	mul.w	r3, r2, r3
 8003b06:	4a69      	ldr	r2, [pc, #420]	; (8003cac <HAL_I2C_Init+0x284>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	3301      	adds	r3, #1
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	495c      	ldr	r1, [pc, #368]	; (8003c9c <HAL_I2C_Init+0x274>)
 8003b2c:	428b      	cmp	r3, r1
 8003b2e:	d819      	bhi.n	8003b64 <HAL_I2C_Init+0x13c>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1e59      	subs	r1, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3e:	1c59      	adds	r1, r3, #1
 8003b40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b44:	400b      	ands	r3, r1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_I2C_Init+0x138>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1e59      	subs	r1, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5e:	e051      	b.n	8003c04 <HAL_I2C_Init+0x1dc>
 8003b60:	2304      	movs	r3, #4
 8003b62:	e04f      	b.n	8003c04 <HAL_I2C_Init+0x1dc>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d111      	bne.n	8003b90 <HAL_I2C_Init+0x168>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1e58      	subs	r0, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	440b      	add	r3, r1
 8003b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	e012      	b.n	8003bb6 <HAL_I2C_Init+0x18e>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1e58      	subs	r0, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	0099      	lsls	r1, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_I2C_Init+0x196>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e022      	b.n	8003c04 <HAL_I2C_Init+0x1dc>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10e      	bne.n	8003be4 <HAL_I2C_Init+0x1bc>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1e58      	subs	r0, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	440b      	add	r3, r1
 8003bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be2:	e00f      	b.n	8003c04 <HAL_I2C_Init+0x1dc>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1e58      	subs	r0, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	0099      	lsls	r1, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	6809      	ldr	r1, [r1, #0]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6911      	ldr	r1, [r2, #16]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68d2      	ldr	r2, [r2, #12]
 8003c3e:	4311      	orrs	r1, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	000186a0 	.word	0x000186a0
 8003ca0:	001e847f 	.word	0x001e847f
 8003ca4:	003d08ff 	.word	0x003d08ff
 8003ca8:	431bde83 	.word	0x431bde83
 8003cac:	10624dd3 	.word	0x10624dd3

08003cb0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e128      	b.n	8003f14 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a90      	ldr	r2, [pc, #576]	; (8003f1c <HAL_I2S_Init+0x26c>)
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fc ff7d 	bl	8000bdc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cf8:	f023 030f 	bic.w	r3, r3, #15
 8003cfc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2202      	movs	r2, #2
 8003d04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d060      	beq.n	8003dd0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d16:	2310      	movs	r3, #16
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e001      	b.n	8003d20 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d1c:	2320      	movs	r3, #32
 8003d1e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d802      	bhi.n	8003d2e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f001 f9c4 	bl	80050bc <HAL_RCCEx_GetPeriphCLKFreq>
 8003d34:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3e:	d125      	bne.n	8003d8c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d010      	beq.n	8003d6a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	3305      	adds	r3, #5
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	e01f      	b.n	8003daa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d86:	3305      	adds	r3, #5
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	e00e      	b.n	8003daa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da6:	3305      	adds	r3, #5
 8003da8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4a5c      	ldr	r2, [pc, #368]	; (8003f20 <HAL_I2S_Init+0x270>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	08db      	lsrs	r3, r3, #3
 8003db4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	e003      	b.n	8003dd8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d902      	bls.n	8003de4 <HAL_I2S_Init+0x134>
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	2bff      	cmp	r3, #255	; 0xff
 8003de2:	d907      	bls.n	8003df4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f043 0210 	orr.w	r2, r3, #16
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e08f      	b.n	8003f14 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	ea42 0103 	orr.w	r1, r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e12:	f023 030f 	bic.w	r3, r3, #15
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6851      	ldr	r1, [r2, #4]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6892      	ldr	r2, [r2, #8]
 8003e1e:	4311      	orrs	r1, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68d2      	ldr	r2, [r2, #12]
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6992      	ldr	r2, [r2, #24]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e36:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d161      	bne.n	8003f04 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a38      	ldr	r2, [pc, #224]	; (8003f24 <HAL_I2S_Init+0x274>)
 8003e44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a37      	ldr	r2, [pc, #220]	; (8003f28 <HAL_I2S_Init+0x278>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_I2S_Init+0x1a4>
 8003e50:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <HAL_I2S_Init+0x27c>)
 8003e52:	e001      	b.n	8003e58 <HAL_I2S_Init+0x1a8>
 8003e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	4932      	ldr	r1, [pc, #200]	; (8003f28 <HAL_I2S_Init+0x278>)
 8003e60:	428a      	cmp	r2, r1
 8003e62:	d101      	bne.n	8003e68 <HAL_I2S_Init+0x1b8>
 8003e64:	4a31      	ldr	r2, [pc, #196]	; (8003f2c <HAL_I2S_Init+0x27c>)
 8003e66:	e001      	b.n	8003e6c <HAL_I2S_Init+0x1bc>
 8003e68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003e6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e70:	f023 030f 	bic.w	r3, r3, #15
 8003e74:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2b      	ldr	r2, [pc, #172]	; (8003f28 <HAL_I2S_Init+0x278>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_I2S_Init+0x1d4>
 8003e80:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_I2S_Init+0x27c>)
 8003e82:	e001      	b.n	8003e88 <HAL_I2S_Init+0x1d8>
 8003e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e88:	2202      	movs	r2, #2
 8003e8a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <HAL_I2S_Init+0x278>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_I2S_Init+0x1ea>
 8003e96:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <HAL_I2S_Init+0x27c>)
 8003e98:	e001      	b.n	8003e9e <HAL_I2S_Init+0x1ee>
 8003e9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eaa:	d003      	beq.n	8003eb4 <HAL_I2S_Init+0x204>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d103      	bne.n	8003ebc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	e001      	b.n	8003ec0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003eec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <HAL_I2S_Init+0x278>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <HAL_I2S_Init+0x24c>
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <HAL_I2S_Init+0x27c>)
 8003efa:	e001      	b.n	8003f00 <HAL_I2S_Init+0x250>
 8003efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f00:	897a      	ldrh	r2, [r7, #10]
 8003f02:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	08004027 	.word	0x08004027
 8003f20:	cccccccd 	.word	0xcccccccd
 8003f24:	0800413d 	.word	0x0800413d
 8003f28:	40003800 	.word	0x40003800
 8003f2c:	40003400 	.word	0x40003400

08003f30 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	881a      	ldrh	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	1c9a      	adds	r2, r3, #2
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10e      	bne.n	8003fc0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fb0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff ffb8 	bl	8003f30 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	1c9a      	adds	r2, r3, #2
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10e      	bne.n	800401e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800400e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ff93 	bl	8003f44 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b086      	sub	sp, #24
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b04      	cmp	r3, #4
 8004040:	d13a      	bne.n	80040b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	d109      	bne.n	8004060 <I2S_IRQHandler+0x3a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d102      	bne.n	8004060 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ffb4 	bl	8003fc8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004066:	2b40      	cmp	r3, #64	; 0x40
 8004068:	d126      	bne.n	80040b8 <I2S_IRQHandler+0x92>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b20      	cmp	r3, #32
 8004076:	d11f      	bne.n	80040b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004086:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f043 0202 	orr.w	r2, r3, #2
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff ff50 	bl	8003f58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d136      	bne.n	8004132 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d109      	bne.n	80040e2 <I2S_IRQHandler+0xbc>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d102      	bne.n	80040e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff ff45 	bl	8003f6c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d122      	bne.n	8004132 <I2S_IRQHandler+0x10c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d11b      	bne.n	8004132 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004108:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	f043 0204 	orr.w	r2, r3, #4
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff ff13 	bl	8003f58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004132:	bf00      	nop
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a92      	ldr	r2, [pc, #584]	; (800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004156:	4b92      	ldr	r3, [pc, #584]	; (80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004158:	e001      	b.n	800415e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800415a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a8b      	ldr	r2, [pc, #556]	; (800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004174:	4b8a      	ldr	r3, [pc, #552]	; (80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004176:	e001      	b.n	800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004188:	d004      	beq.n	8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 8099 	bne.w	80042c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d107      	bne.n	80041ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f925 	bl	80043f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d107      	bne.n	80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f9c8 	bl	8004558 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d13a      	bne.n	8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d035      	beq.n	8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a6e      	ldr	r2, [pc, #440]	; (800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80041e6:	4b6e      	ldr	r3, [pc, #440]	; (80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041e8:	e001      	b.n	80041ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80041ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4969      	ldr	r1, [pc, #420]	; (800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041f6:	428b      	cmp	r3, r1
 80041f8:	d101      	bne.n	80041fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80041fa:	4b69      	ldr	r3, [pc, #420]	; (80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041fc:	e001      	b.n	8004202 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80041fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004202:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004206:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004216:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f043 0202 	orr.w	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff fe88 	bl	8003f58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b08      	cmp	r3, #8
 8004250:	f040 80c3 	bne.w	80043da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 80bd 	beq.w	80043da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800426e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a49      	ldr	r2, [pc, #292]	; (800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800427a:	4b49      	ldr	r3, [pc, #292]	; (80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800427c:	e001      	b.n	8004282 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800427e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4944      	ldr	r1, [pc, #272]	; (800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800428a:	428b      	cmp	r3, r1
 800428c:	d101      	bne.n	8004292 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800428e:	4b44      	ldr	r3, [pc, #272]	; (80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004290:	e001      	b.n	8004296 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004296:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800429a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	f043 0204 	orr.w	r2, r3, #4
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fe4a 	bl	8003f58 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042c4:	e089      	b.n	80043da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d107      	bne.n	80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f8be 	bl	800445c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d107      	bne.n	80042fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f8fd 	bl	80044f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d12f      	bne.n	8004364 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d02a      	beq.n	8004364 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800431c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1e      	ldr	r2, [pc, #120]	; (800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d101      	bne.n	800432c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800432a:	e001      	b.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800432c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4919      	ldr	r1, [pc, #100]	; (800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004338:	428b      	cmp	r3, r1
 800433a:	d101      	bne.n	8004340 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800433c:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800433e:	e001      	b.n	8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004344:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004348:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f043 0202 	orr.w	r2, r3, #2
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fdfa 	bl	8003f58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b08      	cmp	r3, #8
 800436c:	d136      	bne.n	80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d031      	beq.n	80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a07      	ldr	r2, [pc, #28]	; (800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d101      	bne.n	8004386 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004384:	e001      	b.n	800438a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004386:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4902      	ldr	r1, [pc, #8]	; (800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004392:	428b      	cmp	r3, r1
 8004394:	d106      	bne.n	80043a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004396:	4b02      	ldr	r3, [pc, #8]	; (80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004398:	e006      	b.n	80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800439a:	bf00      	nop
 800439c:	40003800 	.word	0x40003800
 80043a0:	40003400 	.word	0x40003400
 80043a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043ac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	f043 0204 	orr.w	r2, r3, #4
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff fdc0 	bl	8003f58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043d8:	e000      	b.n	80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043da:	bf00      	nop
}
 80043dc:	bf00      	nop
 80043de:	3720      	adds	r7, #32
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	1c99      	adds	r1, r3, #2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6251      	str	r1, [r2, #36]	; 0x24
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d113      	bne.n	8004452 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004438:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d106      	bne.n	8004452 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ffc9 	bl	80043e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	1c99      	adds	r1, r3, #2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6251      	str	r1, [r2, #36]	; 0x24
 800446e:	8819      	ldrh	r1, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <I2SEx_TxISR_I2SExt+0x90>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d101      	bne.n	800447e <I2SEx_TxISR_I2SExt+0x22>
 800447a:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <I2SEx_TxISR_I2SExt+0x94>)
 800447c:	e001      	b.n	8004482 <I2SEx_TxISR_I2SExt+0x26>
 800447e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004482:	460a      	mov	r2, r1
 8004484:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d121      	bne.n	80044e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a12      	ldr	r2, [pc, #72]	; (80044ec <I2SEx_TxISR_I2SExt+0x90>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d101      	bne.n	80044ac <I2SEx_TxISR_I2SExt+0x50>
 80044a8:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <I2SEx_TxISR_I2SExt+0x94>)
 80044aa:	e001      	b.n	80044b0 <I2SEx_TxISR_I2SExt+0x54>
 80044ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	490d      	ldr	r1, [pc, #52]	; (80044ec <I2SEx_TxISR_I2SExt+0x90>)
 80044b8:	428b      	cmp	r3, r1
 80044ba:	d101      	bne.n	80044c0 <I2SEx_TxISR_I2SExt+0x64>
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <I2SEx_TxISR_I2SExt+0x94>)
 80044be:	e001      	b.n	80044c4 <I2SEx_TxISR_I2SExt+0x68>
 80044c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff81 	bl	80043e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40003800 	.word	0x40003800
 80044f0:	40003400 	.word	0x40003400

080044f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68d8      	ldr	r0, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	1c99      	adds	r1, r3, #2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800450c:	b282      	uxth	r2, r0
 800450e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d113      	bne.n	8004550 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004536:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ff4a 	bl	80043e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <I2SEx_RxISR_I2SExt+0x90>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d101      	bne.n	800456e <I2SEx_RxISR_I2SExt+0x16>
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <I2SEx_RxISR_I2SExt+0x94>)
 800456c:	e001      	b.n	8004572 <I2SEx_RxISR_I2SExt+0x1a>
 800456e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004572:	68d8      	ldr	r0, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	1c99      	adds	r1, r3, #2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800457e:	b282      	uxth	r2, r0
 8004580:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d121      	bne.n	80045de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a12      	ldr	r2, [pc, #72]	; (80045e8 <I2SEx_RxISR_I2SExt+0x90>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d101      	bne.n	80045a8 <I2SEx_RxISR_I2SExt+0x50>
 80045a4:	4b11      	ldr	r3, [pc, #68]	; (80045ec <I2SEx_RxISR_I2SExt+0x94>)
 80045a6:	e001      	b.n	80045ac <I2SEx_RxISR_I2SExt+0x54>
 80045a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	490d      	ldr	r1, [pc, #52]	; (80045e8 <I2SEx_RxISR_I2SExt+0x90>)
 80045b4:	428b      	cmp	r3, r1
 80045b6:	d101      	bne.n	80045bc <I2SEx_RxISR_I2SExt+0x64>
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <I2SEx_RxISR_I2SExt+0x94>)
 80045ba:	e001      	b.n	80045c0 <I2SEx_RxISR_I2SExt+0x68>
 80045bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff03 	bl	80043e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40003800 	.word	0x40003800
 80045ec:	40003400 	.word	0x40003400

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e267      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d075      	beq.n	80046fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800460e:	4b88      	ldr	r3, [pc, #544]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b04      	cmp	r3, #4
 8004618:	d00c      	beq.n	8004634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	4b85      	ldr	r3, [pc, #532]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004622:	2b08      	cmp	r3, #8
 8004624:	d112      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004626:	4b82      	ldr	r3, [pc, #520]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004632:	d10b      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	4b7e      	ldr	r3, [pc, #504]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05b      	beq.n	80046f8 <HAL_RCC_OscConfig+0x108>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d157      	bne.n	80046f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e242      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d106      	bne.n	8004664 <HAL_RCC_OscConfig+0x74>
 8004656:	4b76      	ldr	r3, [pc, #472]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a75      	ldr	r2, [pc, #468]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e01d      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x98>
 800466e:	4b70      	ldr	r3, [pc, #448]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6f      	ldr	r2, [pc, #444]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b6d      	ldr	r3, [pc, #436]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a6c      	ldr	r2, [pc, #432]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e00b      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004688:	4b69      	ldr	r3, [pc, #420]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a68      	ldr	r2, [pc, #416]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800468e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b66      	ldr	r3, [pc, #408]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a65      	ldr	r2, [pc, #404]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800469a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fc fc76 	bl	8000f98 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fc fc72 	bl	8000f98 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e207      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	4b5b      	ldr	r3, [pc, #364]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0xc0>
 80046ce:	e014      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fc fc62 	bl	8000f98 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d8:	f7fc fc5e 	bl	8000f98 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	; 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e1f3      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ea:	4b51      	ldr	r3, [pc, #324]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0xe8>
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d063      	beq.n	80047ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004706:	4b4a      	ldr	r3, [pc, #296]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800471a:	2b08      	cmp	r3, #8
 800471c:	d11c      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471e:	4b44      	ldr	r3, [pc, #272]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d116      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472a:	4b41      	ldr	r3, [pc, #260]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d001      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e1c7      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004742:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4937      	ldr	r1, [pc, #220]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	e03a      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d020      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004760:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_RCC_OscConfig+0x244>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7fc fc17 	bl	8000f98 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476e:	f7fc fc13 	bl	8000f98 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e1a8      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b28      	ldr	r3, [pc, #160]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4925      	ldr	r1, [pc, #148]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]
 80047a0:	e015      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a2:	4b24      	ldr	r3, [pc, #144]	; (8004834 <HAL_RCC_OscConfig+0x244>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fc fbf6 	bl	8000f98 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b0:	f7fc fbf2 	bl	8000f98 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e187      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c2:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d036      	beq.n	8004848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d016      	beq.n	8004810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <HAL_RCC_OscConfig+0x248>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fc fbd6 	bl	8000f98 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f0:	f7fc fbd2 	bl	8000f98 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e167      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x200>
 800480e:	e01b      	b.n	8004848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <HAL_RCC_OscConfig+0x248>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004816:	f7fc fbbf 	bl	8000f98 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481c:	e00e      	b.n	800483c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481e:	f7fc fbbb 	bl	8000f98 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d907      	bls.n	800483c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e150      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
 8004830:	40023800 	.word	0x40023800
 8004834:	42470000 	.word	0x42470000
 8004838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800483c:	4b88      	ldr	r3, [pc, #544]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800483e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1ea      	bne.n	800481e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8097 	beq.w	8004984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800485a:	4b81      	ldr	r3, [pc, #516]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	4b7d      	ldr	r3, [pc, #500]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a7c      	ldr	r2, [pc, #496]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
 8004876:	4b7a      	ldr	r3, [pc, #488]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004882:	2301      	movs	r3, #1
 8004884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004886:	4b77      	ldr	r3, [pc, #476]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d118      	bne.n	80048c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004892:	4b74      	ldr	r3, [pc, #464]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a73      	ldr	r2, [pc, #460]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 8004898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800489e:	f7fc fb7b 	bl	8000f98 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a6:	f7fc fb77 	bl	8000f98 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e10c      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b8:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d106      	bne.n	80048da <HAL_RCC_OscConfig+0x2ea>
 80048cc:	4b64      	ldr	r3, [pc, #400]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4a63      	ldr	r2, [pc, #396]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	6713      	str	r3, [r2, #112]	; 0x70
 80048d8:	e01c      	b.n	8004914 <HAL_RCC_OscConfig+0x324>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x30c>
 80048e2:	4b5f      	ldr	r3, [pc, #380]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	4a5e      	ldr	r2, [pc, #376]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70
 80048ee:	4b5c      	ldr	r3, [pc, #368]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	4a5b      	ldr	r2, [pc, #364]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	6713      	str	r3, [r2, #112]	; 0x70
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0x324>
 80048fc:	4b58      	ldr	r3, [pc, #352]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	4a57      	ldr	r2, [pc, #348]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	6713      	str	r3, [r2, #112]	; 0x70
 8004908:	4b55      	ldr	r3, [pc, #340]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	4a54      	ldr	r2, [pc, #336]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800490e:	f023 0304 	bic.w	r3, r3, #4
 8004912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d015      	beq.n	8004948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491c:	f7fc fb3c 	bl	8000f98 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004922:	e00a      	b.n	800493a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004924:	f7fc fb38 	bl	8000f98 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e0cb      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493a:	4b49      	ldr	r3, [pc, #292]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0ee      	beq.n	8004924 <HAL_RCC_OscConfig+0x334>
 8004946:	e014      	b.n	8004972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004948:	f7fc fb26 	bl	8000f98 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494e:	e00a      	b.n	8004966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7fc fb22 	bl	8000f98 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0b5      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004966:	4b3e      	ldr	r3, [pc, #248]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ee      	bne.n	8004950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004972:	7dfb      	ldrb	r3, [r7, #23]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d105      	bne.n	8004984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004978:	4b39      	ldr	r3, [pc, #228]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	4a38      	ldr	r2, [pc, #224]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800497e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004982:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80a1 	beq.w	8004ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800498e:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b08      	cmp	r3, #8
 8004998:	d05c      	beq.n	8004a54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d141      	bne.n	8004a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a2:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <HAL_RCC_OscConfig+0x478>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7fc faf6 	bl	8000f98 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b0:	f7fc faf2 	bl	8000f98 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e087      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c2:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	019b      	lsls	r3, r3, #6
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	3b01      	subs	r3, #1
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	061b      	lsls	r3, r3, #24
 80049f2:	491b      	ldr	r1, [pc, #108]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f8:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <HAL_RCC_OscConfig+0x478>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fe:	f7fc facb 	bl	8000f98 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a06:	f7fc fac7 	bl	8000f98 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e05c      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a18:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x416>
 8004a24:	e054      	b.n	8004ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <HAL_RCC_OscConfig+0x478>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fc fab4 	bl	8000f98 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a34:	f7fc fab0 	bl	8000f98 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e045      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x444>
 8004a52:	e03d      	b.n	8004ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d107      	bne.n	8004a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e038      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40007000 	.word	0x40007000
 8004a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a6c:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <HAL_RCC_OscConfig+0x4ec>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d028      	beq.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d121      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d11a      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d111      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d107      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800

08004ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0cc      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af4:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d90c      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b65      	ldr	r3, [pc, #404]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b63      	ldr	r3, [pc, #396]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0b8      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b34:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a58      	ldr	r2, [pc, #352]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b4c:	4b53      	ldr	r3, [pc, #332]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4a52      	ldr	r2, [pc, #328]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b58:	4b50      	ldr	r3, [pc, #320]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	494d      	ldr	r1, [pc, #308]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d044      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d119      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d003      	beq.n	8004b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9e:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e06f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bae:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e067      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bbe:	4b37      	ldr	r3, [pc, #220]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 0203 	bic.w	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4934      	ldr	r1, [pc, #208]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd0:	f7fc f9e2 	bl	8000f98 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd6:	e00a      	b.n	8004bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd8:	f7fc f9de 	bl	8000f98 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e04f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bee:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 020c 	and.w	r2, r3, #12
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d1eb      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c00:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d20c      	bcs.n	8004c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e032      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c34:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4916      	ldr	r1, [pc, #88]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c52:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	490e      	ldr	r1, [pc, #56]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c66:	f000 f821 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	490a      	ldr	r1, [pc, #40]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c78:	5ccb      	ldrb	r3, [r1, r3]
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fc f942 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40023c00 	.word	0x40023c00
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	08007ab8 	.word	0x08007ab8
 8004ca4:	20000000 	.word	0x20000000
 8004ca8:	20000004 	.word	0x20000004

08004cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb0:	b094      	sub	sp, #80	; 0x50
 8004cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb8:	2300      	movs	r3, #0
 8004cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cc4:	4b79      	ldr	r3, [pc, #484]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d00d      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x40>
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	f200 80e1 	bhi.w	8004e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d003      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cde:	e0db      	b.n	8004e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce0:	4b73      	ldr	r3, [pc, #460]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ce2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ce4:	e0db      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ce6:	4b73      	ldr	r3, [pc, #460]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cea:	e0d8      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cec:	4b6f      	ldr	r3, [pc, #444]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cf6:	4b6d      	ldr	r3, [pc, #436]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d063      	beq.n	8004dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d02:	4b6a      	ldr	r3, [pc, #424]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	2200      	movs	r2, #0
 8004d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d14:	633b      	str	r3, [r7, #48]	; 0x30
 8004d16:	2300      	movs	r3, #0
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d1e:	4622      	mov	r2, r4
 8004d20:	462b      	mov	r3, r5
 8004d22:	f04f 0000 	mov.w	r0, #0
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	0159      	lsls	r1, r3, #5
 8004d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d30:	0150      	lsls	r0, r2, #5
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4621      	mov	r1, r4
 8004d38:	1a51      	subs	r1, r2, r1
 8004d3a:	6139      	str	r1, [r7, #16]
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d50:	4659      	mov	r1, fp
 8004d52:	018b      	lsls	r3, r1, #6
 8004d54:	4651      	mov	r1, sl
 8004d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	018a      	lsls	r2, r1, #6
 8004d5e:	4651      	mov	r1, sl
 8004d60:	ebb2 0801 	subs.w	r8, r2, r1
 8004d64:	4659      	mov	r1, fp
 8004d66:	eb63 0901 	sbc.w	r9, r3, r1
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d7e:	4690      	mov	r8, r2
 8004d80:	4699      	mov	r9, r3
 8004d82:	4623      	mov	r3, r4
 8004d84:	eb18 0303 	adds.w	r3, r8, r3
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	462b      	mov	r3, r5
 8004d8c:	eb49 0303 	adc.w	r3, r9, r3
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d9e:	4629      	mov	r1, r5
 8004da0:	024b      	lsls	r3, r1, #9
 8004da2:	4621      	mov	r1, r4
 8004da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004da8:	4621      	mov	r1, r4
 8004daa:	024a      	lsls	r2, r1, #9
 8004dac:	4610      	mov	r0, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db2:	2200      	movs	r2, #0
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dbc:	f7fb fa04 	bl	80001c8 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc8:	e058      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dca:	4b38      	ldr	r3, [pc, #224]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	099b      	lsrs	r3, r3, #6
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dda:	623b      	str	r3, [r7, #32]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
 8004de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004de4:	4642      	mov	r2, r8
 8004de6:	464b      	mov	r3, r9
 8004de8:	f04f 0000 	mov.w	r0, #0
 8004dec:	f04f 0100 	mov.w	r1, #0
 8004df0:	0159      	lsls	r1, r3, #5
 8004df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df6:	0150      	lsls	r0, r2, #5
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4641      	mov	r1, r8
 8004dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e02:	4649      	mov	r1, r9
 8004e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e20:	eb63 050b 	sbc.w	r5, r3, fp
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	00eb      	lsls	r3, r5, #3
 8004e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e32:	00e2      	lsls	r2, r4, #3
 8004e34:	4614      	mov	r4, r2
 8004e36:	461d      	mov	r5, r3
 8004e38:	4643      	mov	r3, r8
 8004e3a:	18e3      	adds	r3, r4, r3
 8004e3c:	603b      	str	r3, [r7, #0]
 8004e3e:	464b      	mov	r3, r9
 8004e40:	eb45 0303 	adc.w	r3, r5, r3
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e52:	4629      	mov	r1, r5
 8004e54:	028b      	lsls	r3, r1, #10
 8004e56:	4621      	mov	r1, r4
 8004e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	028a      	lsls	r2, r1, #10
 8004e60:	4610      	mov	r0, r2
 8004e62:	4619      	mov	r1, r3
 8004e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e66:	2200      	movs	r2, #0
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	61fa      	str	r2, [r7, #28]
 8004e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e70:	f7fb f9aa 	bl	80001c8 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4613      	mov	r3, r2
 8004e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	0c1b      	lsrs	r3, r3, #16
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	3301      	adds	r3, #1
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e96:	e002      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e98:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3750      	adds	r7, #80	; 0x50
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	00f42400 	.word	0x00f42400
 8004eb4:	007a1200 	.word	0x007a1200

08004eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000000 	.word	0x20000000

08004ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ed4:	f7ff fff0 	bl	8004eb8 <HAL_RCC_GetHCLKFreq>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	0a9b      	lsrs	r3, r3, #10
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	4903      	ldr	r1, [pc, #12]	; (8004ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee6:	5ccb      	ldrb	r3, [r1, r3]
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	08007ac8 	.word	0x08007ac8

08004ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d035      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f20:	4b62      	ldr	r3, [pc, #392]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f26:	f7fc f837 	bl	8000f98 <HAL_GetTick>
 8004f2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f2e:	f7fc f833 	bl	8000f98 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e0b0      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f40:	4b5b      	ldr	r3, [pc, #364]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f0      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	019a      	lsls	r2, r3, #6
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	071b      	lsls	r3, r3, #28
 8004f58:	4955      	ldr	r1, [pc, #340]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f60:	4b52      	ldr	r3, [pc, #328]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f66:	f7fc f817 	bl	8000f98 <HAL_GetTick>
 8004f6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f6e:	f7fc f813 	bl	8000f98 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e090      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f80:	4b4b      	ldr	r3, [pc, #300]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8083 	beq.w	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	4b44      	ldr	r3, [pc, #272]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	4a43      	ldr	r2, [pc, #268]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8004faa:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fb6:	4b3f      	ldr	r3, [pc, #252]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a3e      	ldr	r2, [pc, #248]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc2:	f7fb ffe9 	bl	8000f98 <HAL_GetTick>
 8004fc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fca:	f7fb ffe5 	bl	8000f98 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e062      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fdc:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fe8:	4b31      	ldr	r3, [pc, #196]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d02f      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	429a      	cmp	r2, r3
 8005004:	d028      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005006:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005010:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005012:	2201      	movs	r2, #1
 8005014:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005016:	4b28      	ldr	r3, [pc, #160]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800501c:	4a24      	ldr	r2, [pc, #144]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005022:	4b23      	ldr	r3, [pc, #140]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b01      	cmp	r3, #1
 800502c:	d114      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800502e:	f7fb ffb3 	bl	8000f98 <HAL_GetTick>
 8005032:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005034:	e00a      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005036:	f7fb ffaf 	bl	8000f98 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	f241 3288 	movw	r2, #5000	; 0x1388
 8005044:	4293      	cmp	r3, r2
 8005046:	d901      	bls.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e02a      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504c:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ee      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005064:	d10d      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005066:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800507a:	490d      	ldr	r1, [pc, #52]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800507c:	4313      	orrs	r3, r2
 800507e:	608b      	str	r3, [r1, #8]
 8005080:	e005      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005088:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800508c:	6093      	str	r3, [r2, #8]
 800508e:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005090:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800509a:	4905      	ldr	r1, [pc, #20]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509c:	4313      	orrs	r3, r2
 800509e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	42470068 	.word	0x42470068
 80050b0:	40023800 	.word	0x40023800
 80050b4:	40007000 	.word	0x40007000
 80050b8:	42470e40 	.word	0x42470e40

080050bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d13e      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050da:	4b23      	ldr	r3, [pc, #140]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d12f      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050f0:	4b1e      	ldr	r3, [pc, #120]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050f2:	617b      	str	r3, [r7, #20]
          break;
 80050f4:	e02f      	b.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050f6:	4b1c      	ldr	r3, [pc, #112]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005102:	d108      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005104:	4b18      	ldr	r3, [pc, #96]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800510c:	4a18      	ldr	r2, [pc, #96]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800510e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	e007      	b.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005126:	4b10      	ldr	r3, [pc, #64]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	fb02 f303 	mul.w	r3, r2, r3
 8005138:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800513c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005140:	0f1b      	lsrs	r3, r3, #28
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]
          break;
 800514e:	e002      	b.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
          break;
 8005154:	bf00      	nop
        }
      }
      break;
 8005156:	bf00      	nop
    }
  }
  return frequency;
 8005158:	697b      	ldr	r3, [r7, #20]
}
 800515a:	4618      	mov	r0, r3
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40023800 	.word	0x40023800
 800516c:	00bb8000 	.word	0x00bb8000
 8005170:	007a1200 	.word	0x007a1200
 8005174:	00f42400 	.word	0x00f42400

08005178 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e07b      	b.n	8005282 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	2b00      	cmp	r3, #0
 8005190:	d108      	bne.n	80051a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800519a:	d009      	beq.n	80051b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	61da      	str	r2, [r3, #28]
 80051a2:	e005      	b.n	80051b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fb fd86 	bl	8000cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005234:	ea42 0103 	orr.w	r1, r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	0c1b      	lsrs	r3, r3, #16
 800524e:	f003 0104 	and.w	r1, r3, #4
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f003 0210 	and.w	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69da      	ldr	r2, [r3, #28]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005270:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800528a:	b084      	sub	sp, #16
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	f107 001c 	add.w	r0, r7, #28
 8005298:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d122      	bne.n	80052e8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d105      	bne.n	80052dc <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f9bf 	bl	8005660 <USB_CoreReset>
 80052e2:	4603      	mov	r3, r0
 80052e4:	73fb      	strb	r3, [r7, #15]
 80052e6:	e01a      	b.n	800531e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f9b3 	bl	8005660 <USB_CoreReset>
 80052fa:	4603      	mov	r3, r0
 80052fc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	639a      	str	r2, [r3, #56]	; 0x38
 8005310:	e005      	b.n	800531e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	2b01      	cmp	r3, #1
 8005322:	d10b      	bne.n	800533c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f043 0206 	orr.w	r2, r3, #6
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800533c:	7bfb      	ldrb	r3, [r7, #15]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005348:	b004      	add	sp, #16
 800534a:	4770      	bx	lr

0800534c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f043 0201 	orr.w	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f023 0201 	bic.w	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d115      	bne.n	80053de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053be:	2001      	movs	r0, #1
 80053c0:	f7fb fdf6 	bl	8000fb0 <HAL_Delay>
      ms++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f939 	bl	8005642 <USB_GetMode>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d01e      	beq.n	8005414 <USB_SetCurrentMode+0x84>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b31      	cmp	r3, #49	; 0x31
 80053da:	d9f0      	bls.n	80053be <USB_SetCurrentMode+0x2e>
 80053dc:	e01a      	b.n	8005414 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d115      	bne.n	8005410 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053f0:	2001      	movs	r0, #1
 80053f2:	f7fb fddd 	bl	8000fb0 <HAL_Delay>
      ms++;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3301      	adds	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f920 	bl	8005642 <USB_GetMode>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <USB_SetCurrentMode+0x84>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b31      	cmp	r3, #49	; 0x31
 800540c:	d9f0      	bls.n	80053f0 <USB_SetCurrentMode+0x60>
 800540e:	e001      	b.n	8005414 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e005      	b.n	8005420 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b32      	cmp	r3, #50	; 0x32
 8005418:	d101      	bne.n	800541e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a13      	ldr	r2, [pc, #76]	; (800548c <USB_FlushTxFifo+0x64>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e01b      	b.n	8005480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	daf2      	bge.n	8005436 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	019b      	lsls	r3, r3, #6
 8005458:	f043 0220 	orr.w	r2, r3, #32
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a08      	ldr	r2, [pc, #32]	; (800548c <USB_FlushTxFifo+0x64>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e006      	b.n	8005480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b20      	cmp	r3, #32
 800547c:	d0f0      	beq.n	8005460 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	00030d40 	.word	0x00030d40

08005490 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a11      	ldr	r2, [pc, #68]	; (80054ec <USB_FlushRxFifo+0x5c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e018      	b.n	80054e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	daf2      	bge.n	800549c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2210      	movs	r2, #16
 80054be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <USB_FlushRxFifo+0x5c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e006      	b.n	80054e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d0f0      	beq.n	80054c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	00030d40 	.word	0x00030d40

080054f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b089      	sub	sp, #36	; 0x24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4611      	mov	r1, r2
 80054fc:	461a      	mov	r2, r3
 80054fe:	460b      	mov	r3, r1
 8005500:	71fb      	strb	r3, [r7, #7]
 8005502:	4613      	mov	r3, r2
 8005504:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800550e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005512:	2b00      	cmp	r3, #0
 8005514:	d123      	bne.n	800555e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005516:	88bb      	ldrh	r3, [r7, #4]
 8005518:	3303      	adds	r3, #3
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e018      	b.n	8005556 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	031a      	lsls	r2, r3, #12
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005530:	461a      	mov	r2, r3
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	3301      	adds	r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	3301      	adds	r3, #1
 8005542:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	3301      	adds	r3, #1
 8005548:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3301      	adds	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	3301      	adds	r3, #1
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	429a      	cmp	r2, r3
 800555c:	d3e2      	bcc.n	8005524 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3724      	adds	r7, #36	; 0x24
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800556c:	b480      	push	{r7}
 800556e:	b08b      	sub	sp, #44	; 0x2c
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	b29b      	uxth	r3, r3
 8005588:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005592:	2300      	movs	r3, #0
 8005594:	623b      	str	r3, [r7, #32]
 8005596:	e014      	b.n	80055c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	3301      	adds	r3, #1
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	3301      	adds	r3, #1
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	3301      	adds	r3, #1
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	3301      	adds	r3, #1
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	3301      	adds	r3, #1
 80055c0:	623b      	str	r3, [r7, #32]
 80055c2:	6a3a      	ldr	r2, [r7, #32]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d3e6      	bcc.n	8005598 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055ca:	8bfb      	ldrh	r3, [r7, #30]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01e      	beq.n	800560e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055da:	461a      	mov	r2, r3
 80055dc:	f107 0310 	add.w	r3, r7, #16
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	701a      	strb	r2, [r3, #0]
      i++;
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	3301      	adds	r3, #1
 80055fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	3301      	adds	r3, #1
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005602:	8bfb      	ldrh	r3, [r7, #30]
 8005604:	3b01      	subs	r3, #1
 8005606:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005608:	8bfb      	ldrh	r3, [r7, #30]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ea      	bne.n	80055e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005610:	4618      	mov	r0, r3
 8005612:	372c      	adds	r7, #44	; 0x2c
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4013      	ands	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005634:	68fb      	ldr	r3, [r7, #12]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0301 	and.w	r3, r3, #1
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3301      	adds	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <USB_CoreReset+0x64>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d901      	bls.n	800567e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e01b      	b.n	80056b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	daf2      	bge.n	800566c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f043 0201 	orr.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3301      	adds	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <USB_CoreReset+0x64>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e006      	b.n	80056b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d0f0      	beq.n	8005696 <USB_CoreReset+0x36>

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	00030d40 	.word	0x00030d40

080056c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c8:	b084      	sub	sp, #16
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b086      	sub	sp, #24
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056e8:	461a      	mov	r2, r3
 80056ea:	2300      	movs	r3, #0
 80056ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d018      	beq.n	8005750 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d10a      	bne.n	800573a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005732:	f043 0304 	orr.w	r3, r3, #4
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	e014      	b.n	8005764 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005748:	f023 0304 	bic.w	r3, r3, #4
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	e009      	b.n	8005764 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800575e:	f023 0304 	bic.w	r3, r3, #4
 8005762:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005764:	2110      	movs	r1, #16
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff fe5e 	bl	8005428 <USB_FlushTxFifo>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fe8a 	bl	8005490 <USB_FlushRxFifo>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	e015      	b.n	80057b8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	461a      	mov	r2, r3
 800579a:	f04f 33ff 	mov.w	r3, #4294967295
 800579e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	461a      	mov	r2, r3
 80057ae:	2300      	movs	r3, #0
 80057b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	3301      	adds	r3, #1
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d3e5      	bcc.n	800578c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a13      	ldr	r2, [pc, #76]	; (8005834 <USB_HostInit+0x16c>)
 80057e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a13      	ldr	r2, [pc, #76]	; (8005838 <USB_HostInit+0x170>)
 80057ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80057f0:	e009      	b.n	8005806 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2280      	movs	r2, #128	; 0x80
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a10      	ldr	r2, [pc, #64]	; (800583c <USB_HostInit+0x174>)
 80057fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a0f      	ldr	r2, [pc, #60]	; (8005840 <USB_HostInit+0x178>)
 8005802:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f043 0210 	orr.w	r2, r3, #16
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	4b09      	ldr	r3, [pc, #36]	; (8005844 <USB_HostInit+0x17c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005824:	7dfb      	ldrb	r3, [r7, #23]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005830:	b004      	add	sp, #16
 8005832:	4770      	bx	lr
 8005834:	01000200 	.word	0x01000200
 8005838:	00e00300 	.word	0x00e00300
 800583c:	00600080 	.word	0x00600080
 8005840:	004000e0 	.word	0x004000e0
 8005844:	a3200008 	.word	0xa3200008

08005848 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	68f9      	ldr	r1, [r7, #12]
 800587c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005880:	4313      	orrs	r3, r2
 8005882:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d107      	bne.n	800589a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005890:	461a      	mov	r2, r3
 8005892:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005896:	6053      	str	r3, [r2, #4]
 8005898:	e009      	b.n	80058ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d106      	bne.n	80058ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a6:	461a      	mov	r2, r3
 80058a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80058ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d109      	bne.n	8005900 <USB_DriveVbus+0x44>
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d106      	bne.n	8005900 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058fe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590a:	d109      	bne.n	8005920 <USB_DriveVbus+0x64>
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800591a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800591e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800592e:	b480      	push	{r7}
 8005930:	b085      	sub	sp, #20
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	0c5b      	lsrs	r3, r3, #17
 800594c:	f003 0303 	and.w	r3, r3, #3
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	b29b      	uxth	r3, r3
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	4608      	mov	r0, r1
 800598a:	4611      	mov	r1, r2
 800598c:	461a      	mov	r2, r3
 800598e:	4603      	mov	r3, r0
 8005990:	70fb      	strb	r3, [r7, #3]
 8005992:	460b      	mov	r3, r1
 8005994:	70bb      	strb	r3, [r7, #2]
 8005996:	4613      	mov	r3, r2
 8005998:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ae:	461a      	mov	r2, r3
 80059b0:	f04f 33ff 	mov.w	r3, #4294967295
 80059b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80059b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d87e      	bhi.n	8005abc <USB_HC_Init+0x13c>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <USB_HC_Init+0x44>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059d5 	.word	0x080059d5
 80059c8:	08005a7f 	.word	0x08005a7f
 80059cc:	080059d5 	.word	0x080059d5
 80059d0:	08005a41 	.word	0x08005a41
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e0:	461a      	mov	r2, r3
 80059e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80059e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80059e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	da10      	bge.n	8005a12 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	78fa      	ldrb	r2, [r7, #3]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a0e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005a10:	e057      	b.n	8005ac2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d051      	beq.n	8005ac2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	78fa      	ldrb	r2, [r7, #3]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a3c:	60d3      	str	r3, [r2, #12]
      break;
 8005a3e:	e040      	b.n	8005ac2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005a52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	da34      	bge.n	8005ac6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005a7c:	e023      	b.n	8005ac6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f240 2325 	movw	r3, #549	; 0x225
 8005a90:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	da17      	bge.n	8005aca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ab8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005aba:	e006      	b.n	8005aca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	77fb      	strb	r3, [r7, #31]
      break;
 8005ac0:	e004      	b.n	8005acc <USB_HC_Init+0x14c>
      break;
 8005ac2:	bf00      	nop
 8005ac4:	e002      	b.n	8005acc <USB_HC_Init+0x14c>
      break;
 8005ac6:	bf00      	nop
 8005ac8:	e000      	b.n	8005acc <USB_HC_Init+0x14c>
      break;
 8005aca:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	78fa      	ldrb	r2, [r7, #3]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae6:	f043 0302 	orr.w	r3, r3, #2
 8005aea:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005af2:	699a      	ldr	r2, [r3, #24]
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	2101      	movs	r1, #1
 8005afc:	fa01 f303 	lsl.w	r3, r1, r3
 8005b00:	6939      	ldr	r1, [r7, #16]
 8005b02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b06:	4313      	orrs	r3, r2
 8005b08:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	da03      	bge.n	8005b26 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b22:	61bb      	str	r3, [r7, #24]
 8005b24:	e001      	b.n	8005b2a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff feff 	bl	800592e <USB_GetHostSpeed>
 8005b30:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d106      	bne.n	8005b48 <USB_HC_Init+0x1c8>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d003      	beq.n	8005b48 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e001      	b.n	8005b4c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b4c:	787b      	ldrb	r3, [r7, #1]
 8005b4e:	059b      	lsls	r3, r3, #22
 8005b50:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b54:	78bb      	ldrb	r3, [r7, #2]
 8005b56:	02db      	lsls	r3, r3, #11
 8005b58:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b5c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b62:	049b      	lsls	r3, r3, #18
 8005b64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	0159      	lsls	r1, r3, #5
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	440b      	add	r3, r1
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b88:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005b8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d003      	beq.n	8005b9a <USB_HC_Init+0x21a>
 8005b92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d10f      	bne.n	8005bba <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bb8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005bba:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08c      	sub	sp, #48	; 0x30
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	785b      	ldrb	r3, [r3, #1]
 8005bda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005be0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d02d      	beq.n	8005c4a <USB_HC_StartXfer+0x86>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	791b      	ldrb	r3, [r3, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d129      	bne.n	8005c4a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d117      	bne.n	8005c2c <USB_HC_StartXfer+0x68>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	79db      	ldrb	r3, [r3, #7]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <USB_HC_StartXfer+0x48>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	79db      	ldrb	r3, [r3, #7]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d10f      	bne.n	8005c2c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	6a3a      	ldr	r2, [r7, #32]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10b      	bne.n	8005c4a <USB_HC_StartXfer+0x86>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	795b      	ldrb	r3, [r3, #5]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d107      	bne.n	8005c4a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fa0f 	bl	8006064 <USB_DoPing>
      return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e0f8      	b.n	8005e3c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d018      	beq.n	8005c84 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	8912      	ldrh	r2, [r2, #8]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	8912      	ldrh	r2, [r2, #8]
 8005c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c66:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005c68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c6a:	8b7b      	ldrh	r3, [r7, #26]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d90b      	bls.n	8005c88 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005c70:	8b7b      	ldrh	r3, [r7, #26]
 8005c72:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	8912      	ldrh	r2, [r2, #8]
 8005c7a:	fb03 f202 	mul.w	r2, r3, r2
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	611a      	str	r2, [r3, #16]
 8005c82:	e001      	b.n	8005c88 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005c84:	2301      	movs	r3, #1
 8005c86:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	78db      	ldrb	r3, [r3, #3]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	8912      	ldrh	r2, [r2, #8]
 8005c96:	fb03 f202 	mul.w	r2, r3, r2
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	611a      	str	r2, [r3, #16]
 8005c9e:	e003      	b.n	8005ca8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	695a      	ldr	r2, [r3, #20]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cb2:	04d9      	lsls	r1, r3, #19
 8005cb4:	4b63      	ldr	r3, [pc, #396]	; (8005e44 <USB_HC_StartXfer+0x280>)
 8005cb6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cb8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	7a9b      	ldrb	r3, [r3, #10]
 8005cbe:	075b      	lsls	r3, r3, #29
 8005cc0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cc4:	69f9      	ldr	r1, [r7, #28]
 8005cc6:	0148      	lsls	r0, r1, #5
 8005cc8:	6a39      	ldr	r1, [r7, #32]
 8005cca:	4401      	add	r1, r0
 8005ccc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cd0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cd2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	68d9      	ldr	r1, [r3, #12]
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	460a      	mov	r2, r1
 8005cec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2301      	moveq	r3, #1
 8005d00:	2300      	movne	r3, #0
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	6a3a      	ldr	r2, [r7, #32]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d24:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	7e7b      	ldrb	r3, [r7, #25]
 8005d36:	075b      	lsls	r3, r3, #29
 8005d38:	69f9      	ldr	r1, [r7, #28]
 8005d3a:	0148      	lsls	r0, r1, #5
 8005d3c:	6a39      	ldr	r1, [r7, #32]
 8005d3e:	4401      	add	r1, r0
 8005d40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d44:	4313      	orrs	r3, r2
 8005d46:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d5e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	78db      	ldrb	r3, [r3, #3]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6e:	613b      	str	r3, [r7, #16]
 8005d70:	e003      	b.n	8005d7a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d78:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d80:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8e:	461a      	mov	r2, r3
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e04e      	b.n	8005e3c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	78db      	ldrb	r3, [r3, #3]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d149      	bne.n	8005e3a <USB_HC_StartXfer+0x276>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d045      	beq.n	8005e3a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	79db      	ldrb	r3, [r3, #7]
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d830      	bhi.n	8005e18 <USB_HC_StartXfer+0x254>
 8005db6:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <USB_HC_StartXfer+0x1f8>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005dcd 	.word	0x08005dcd
 8005dc0:	08005df1 	.word	0x08005df1
 8005dc4:	08005dcd 	.word	0x08005dcd
 8005dc8:	08005df1 	.word	0x08005df1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	3303      	adds	r3, #3
 8005dd2:	089b      	lsrs	r3, r3, #2
 8005dd4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005dd6:	8afa      	ldrh	r2, [r7, #22]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d91c      	bls.n	8005e1c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f043 0220 	orr.w	r2, r3, #32
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	619a      	str	r2, [r3, #24]
        }
        break;
 8005dee:	e015      	b.n	8005e1c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	3303      	adds	r3, #3
 8005df6:	089b      	lsrs	r3, r3, #2
 8005df8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005dfa:	8afa      	ldrh	r2, [r7, #22]
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d90a      	bls.n	8005e20 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e16:	e003      	b.n	8005e20 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e18:	bf00      	nop
 8005e1a:	e002      	b.n	8005e22 <USB_HC_StartXfer+0x25e>
        break;
 8005e1c:	bf00      	nop
 8005e1e:	e000      	b.n	8005e22 <USB_HC_StartXfer+0x25e>
        break;
 8005e20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	68d9      	ldr	r1, [r3, #12]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	785a      	ldrb	r2, [r3, #1]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2000      	movs	r0, #0
 8005e32:	9000      	str	r0, [sp, #0]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff fb5b 	bl	80054f0 <USB_WritePacket>
  }

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3728      	adds	r7, #40	; 0x28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	1ff80000 	.word	0x1ff80000

08005e48 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	b29b      	uxth	r3, r3
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b089      	sub	sp, #36	; 0x24
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	460b      	mov	r3, r1
 8005e74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	0c9b      	lsrs	r3, r3, #18
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	0fdb      	lsrs	r3, r3, #31
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d104      	bne.n	8005ec4 <USB_HC_Halt+0x5a>
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e0c8      	b.n	8006056 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <USB_HC_Halt+0x66>
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d163      	bne.n	8005f98 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f040 80ab 	bne.w	8006054 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d133      	bne.n	8005f72 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f28:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	0151      	lsls	r1, r2, #5
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	440a      	add	r2, r1
 8005f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f48:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f56:	d81d      	bhi.n	8005f94 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f6e:	d0ec      	beq.n	8005f4a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f70:	e070      	b.n	8006054 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f90:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f92:	e05f      	b.n	8006054 <USB_HC_Halt+0x1ea>
            break;
 8005f94:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f96:	e05d      	b.n	8006054 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fb6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d133      	bne.n	8006030 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fe6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006002:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006006:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006014:	d81d      	bhi.n	8006052 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	4413      	add	r3, r2
 800601e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800602c:	d0ec      	beq.n	8006008 <USB_HC_Halt+0x19e>
 800602e:	e011      	b.n	8006054 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	440a      	add	r2, r1
 8006046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800604a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	e000      	b.n	8006054 <USB_HC_Halt+0x1ea>
          break;
 8006052:	bf00      	nop
    }
  }

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3724      	adds	r7, #36	; 0x24
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006078:	2301      	movs	r3, #1
 800607a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	04da      	lsls	r2, r3, #19
 8006080:	4b15      	ldr	r3, [pc, #84]	; (80060d8 <USB_DoPing+0x74>)
 8006082:	4013      	ands	r3, r2
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	440a      	add	r2, r1
 800608c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006090:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006094:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	4413      	add	r3, r2
 800609e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060ac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060b4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c2:	461a      	mov	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	1ff80000 	.word	0x1ff80000

080060dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff f93c 	bl	800536e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060f6:	2110      	movs	r1, #16
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff f995 	bl	8005428 <USB_FlushTxFifo>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff f9c1 	bl	8005490 <USB_FlushRxFifo>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006118:	2300      	movs	r3, #0
 800611a:	61bb      	str	r3, [r7, #24]
 800611c:	e01f      	b.n	800615e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	4413      	add	r3, r2
 8006126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006134:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800613c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006144:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006152:	461a      	mov	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	3301      	adds	r3, #1
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b0f      	cmp	r3, #15
 8006162:	d9dc      	bls.n	800611e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006164:	2300      	movs	r3, #0
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e034      	b.n	80061d4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006180:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006188:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006190:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619e:	461a      	mov	r2, r3
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3301      	adds	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b0:	d80c      	bhi.n	80061cc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061c8:	d0ec      	beq.n	80061a4 <USB_StopHost+0xc8>
 80061ca:	e000      	b.n	80061ce <USB_StopHost+0xf2>
        break;
 80061cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	3301      	adds	r3, #1
 80061d2:	61bb      	str	r3, [r7, #24]
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b0f      	cmp	r3, #15
 80061d8:	d9c7      	bls.n	800616a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061e0:	461a      	mov	r2, r3
 80061e2:	f04f 33ff 	mov.w	r3, #4294967295
 80061e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f04f 32ff 	mov.w	r2, #4294967295
 80061ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff f8ab 	bl	800534c <USB_EnableGlobalInt>

  return ret;
 80061f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006200:	b590      	push	{r4, r7, lr}
 8006202:	b089      	sub	sp, #36	; 0x24
 8006204:	af04      	add	r7, sp, #16
 8006206:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006208:	2301      	movs	r3, #1
 800620a:	2202      	movs	r2, #2
 800620c:	2102      	movs	r1, #2
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fc66 	bl	8006ae0 <USBH_FindInterface>
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	2bff      	cmp	r3, #255	; 0xff
 800621c:	d002      	beq.n	8006224 <USBH_CDC_InterfaceInit+0x24>
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d901      	bls.n	8006228 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006224:	2302      	movs	r3, #2
 8006226:	e13d      	b.n	80064a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fc3b 	bl	8006aa8 <USBH_SelectInterface>
 8006232:	4603      	mov	r3, r0
 8006234:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006236:	7bbb      	ldrb	r3, [r7, #14]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800623c:	2302      	movs	r3, #2
 800623e:	e131      	b.n	80064a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006246:	2050      	movs	r0, #80	; 0x50
 8006248:	f001 fb12 	bl	8007870 <malloc>
 800624c:	4603      	mov	r3, r0
 800624e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006260:	2302      	movs	r3, #2
 8006262:	e11f      	b.n	80064a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006264:	2250      	movs	r2, #80	; 0x50
 8006266:	2100      	movs	r1, #0
 8006268:	68b8      	ldr	r0, [r7, #8]
 800626a:	f001 fb11 	bl	8007890 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	211a      	movs	r1, #26
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	4413      	add	r3, r2
 800627a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b25b      	sxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	da15      	bge.n	80062b2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	211a      	movs	r1, #26
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	4413      	add	r3, r2
 8006292:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006296:	781a      	ldrb	r2, [r3, #0]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	211a      	movs	r1, #26
 80062a2:	fb01 f303 	mul.w	r3, r1, r3
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80062ac:	881a      	ldrh	r2, [r3, #0]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	785b      	ldrb	r3, [r3, #1]
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 ff9c 	bl	80071f6 <USBH_AllocPipe>
 80062be:	4603      	mov	r3, r0
 80062c0:	461a      	mov	r2, r3
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	7819      	ldrb	r1, [r3, #0]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	7858      	ldrb	r0, [r3, #1]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	8952      	ldrh	r2, [r2, #10]
 80062de:	9202      	str	r2, [sp, #8]
 80062e0:	2203      	movs	r2, #3
 80062e2:	9201      	str	r2, [sp, #4]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	4623      	mov	r3, r4
 80062e8:	4602      	mov	r2, r0
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 ff54 	bl	8007198 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2200      	movs	r2, #0
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 fa17 	bl	800772c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80062fe:	2300      	movs	r3, #0
 8006300:	2200      	movs	r2, #0
 8006302:	210a      	movs	r1, #10
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fbeb 	bl	8006ae0 <USBH_FindInterface>
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	2bff      	cmp	r3, #255	; 0xff
 8006312:	d002      	beq.n	800631a <USBH_CDC_InterfaceInit+0x11a>
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d901      	bls.n	800631e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800631a:	2302      	movs	r3, #2
 800631c:	e0c2      	b.n	80064a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	211a      	movs	r1, #26
 8006324:	fb01 f303 	mul.w	r3, r1, r3
 8006328:	4413      	add	r3, r2
 800632a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	b25b      	sxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	da16      	bge.n	8006364 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	211a      	movs	r1, #26
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	4413      	add	r3, r2
 8006342:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006346:	781a      	ldrb	r2, [r3, #0]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	211a      	movs	r1, #26
 8006352:	fb01 f303 	mul.w	r3, r1, r3
 8006356:	4413      	add	r3, r2
 8006358:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800635c:	881a      	ldrh	r2, [r3, #0]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	835a      	strh	r2, [r3, #26]
 8006362:	e015      	b.n	8006390 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	211a      	movs	r1, #26
 800636a:	fb01 f303 	mul.w	r3, r1, r3
 800636e:	4413      	add	r3, r2
 8006370:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	211a      	movs	r1, #26
 8006380:	fb01 f303 	mul.w	r3, r1, r3
 8006384:	4413      	add	r3, r2
 8006386:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800638a:	881a      	ldrh	r2, [r3, #0]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	211a      	movs	r1, #26
 8006396:	fb01 f303 	mul.w	r3, r1, r3
 800639a:	4413      	add	r3, r2
 800639c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	b25b      	sxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	da16      	bge.n	80063d6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	211a      	movs	r1, #26
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	4413      	add	r3, r2
 80063b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063b8:	781a      	ldrb	r2, [r3, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	211a      	movs	r1, #26
 80063c4:	fb01 f303 	mul.w	r3, r1, r3
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80063ce:	881a      	ldrh	r2, [r3, #0]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	835a      	strh	r2, [r3, #26]
 80063d4:	e015      	b.n	8006402 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	211a      	movs	r1, #26
 80063dc:	fb01 f303 	mul.w	r3, r1, r3
 80063e0:	4413      	add	r3, r2
 80063e2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063e6:	781a      	ldrb	r2, [r3, #0]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	211a      	movs	r1, #26
 80063f2:	fb01 f303 	mul.w	r3, r1, r3
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80063fc:	881a      	ldrh	r2, [r3, #0]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	7b9b      	ldrb	r3, [r3, #14]
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fef4 	bl	80071f6 <USBH_AllocPipe>
 800640e:	4603      	mov	r3, r0
 8006410:	461a      	mov	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	7bdb      	ldrb	r3, [r3, #15]
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 feea 	bl	80071f6 <USBH_AllocPipe>
 8006422:	4603      	mov	r3, r0
 8006424:	461a      	mov	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	7b59      	ldrb	r1, [r3, #13]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	7b98      	ldrb	r0, [r3, #14]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	8b12      	ldrh	r2, [r2, #24]
 8006442:	9202      	str	r2, [sp, #8]
 8006444:	2202      	movs	r2, #2
 8006446:	9201      	str	r2, [sp, #4]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	4623      	mov	r3, r4
 800644c:	4602      	mov	r2, r0
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fea2 	bl	8007198 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	7b19      	ldrb	r1, [r3, #12]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	7bd8      	ldrb	r0, [r3, #15]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	8b52      	ldrh	r2, [r2, #26]
 800646c:	9202      	str	r2, [sp, #8]
 800646e:	2202      	movs	r2, #2
 8006470:	9201      	str	r2, [sp, #4]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	4623      	mov	r3, r4
 8006476:	4602      	mov	r2, r0
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fe8d 	bl	8007198 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	7b5b      	ldrb	r3, [r3, #13]
 800648a:	2200      	movs	r2, #0
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 f94c 	bl	800772c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	7b1b      	ldrb	r3, [r3, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 f945 	bl	800772c <USBH_LL_SetToggle>

  return USBH_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd90      	pop	{r4, r7, pc}

080064ac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00e      	beq.n	80064e4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fe82 	bl	80071d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fead 	bl	8007238 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	7b1b      	ldrb	r3, [r3, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00e      	beq.n	800650a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	7b1b      	ldrb	r3, [r3, #12]
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fe6f 	bl	80071d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	7b1b      	ldrb	r3, [r3, #12]
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fe9a 	bl	8007238 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	7b5b      	ldrb	r3, [r3, #13]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00e      	beq.n	8006530 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	7b5b      	ldrb	r3, [r3, #13]
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fe5c 	bl	80071d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	7b5b      	ldrb	r3, [r3, #13]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fe87 	bl	8007238 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	4618      	mov	r0, r3
 8006546:	f001 f99b 	bl	8007880 <free>
    phost->pActiveClass->pData = 0U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006550:	2200      	movs	r2, #0
 8006552:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3340      	adds	r3, #64	; 0x40
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f8b1 	bl	80066de <GetLineCoding>
 800657c:	4603      	mov	r3, r0
 800657e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006580:	7afb      	ldrb	r3, [r7, #11]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d105      	bne.n	8006592 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800658c:	2102      	movs	r1, #2
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006592:	7afb      	ldrb	r3, [r7, #11]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065a4:	2301      	movs	r3, #1
 80065a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d877      	bhi.n	80066b0 <USBH_CDC_Process+0x114>
 80065c0:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <USBH_CDC_Process+0x2c>)
 80065c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c6:	bf00      	nop
 80065c8:	080065dd 	.word	0x080065dd
 80065cc:	080065e3 	.word	0x080065e3
 80065d0:	08006613 	.word	0x08006613
 80065d4:	08006687 	.word	0x08006687
 80065d8:	08006695 	.word	0x08006695
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	73fb      	strb	r3, [r7, #15]
      break;
 80065e0:	e06d      	b.n	80066be <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f897 	bl	800671c <SetLineCoding>
 80065ee:	4603      	mov	r3, r0
 80065f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d104      	bne.n	8006602 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006600:	e058      	b.n	80066b4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d055      	beq.n	80066b4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2204      	movs	r2, #4
 800660c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006610:	e050      	b.n	80066b4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	3340      	adds	r3, #64	; 0x40
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f860 	bl	80066de <GetLineCoding>
 800661e:	4603      	mov	r3, r0
 8006620:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d126      	bne.n	8006676 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663a:	791b      	ldrb	r3, [r3, #4]
 800663c:	429a      	cmp	r2, r3
 800663e:	d13b      	bne.n	80066b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800664c:	429a      	cmp	r2, r3
 800664e:	d133      	bne.n	80066b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800665c:	429a      	cmp	r2, r3
 800665e:	d12b      	bne.n	80066b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006668:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800666a:	429a      	cmp	r2, r3
 800666c:	d124      	bne.n	80066b8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f958 	bl	8006924 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006674:	e020      	b.n	80066b8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d01d      	beq.n	80066b8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2204      	movs	r2, #4
 8006680:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006684:	e018      	b.n	80066b8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f867 	bl	800675a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f8da 	bl	8006846 <CDC_ProcessReception>
      break;
 8006692:	e014      	b.n	80066be <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006694:	2100      	movs	r1, #0
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fb08 	bl	8006cac <USBH_ClrFeature>
 800669c:	4603      	mov	r3, r0
 800669e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80066ae:	e005      	b.n	80066bc <USBH_CDC_Process+0x120>

    default:
      break;
 80066b0:	bf00      	nop
 80066b2:	e004      	b.n	80066be <USBH_CDC_Process+0x122>
      break;
 80066b4:	bf00      	nop
 80066b6:	e002      	b.n	80066be <USBH_CDC_Process+0x122>
      break;
 80066b8:	bf00      	nop
 80066ba:	e000      	b.n	80066be <USBH_CDC_Process+0x122>
      break;
 80066bc:	bf00      	nop

  }

  return status;
 80066be:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	22a1      	movs	r2, #161	; 0xa1
 80066ec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2221      	movs	r2, #33	; 0x21
 80066f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2207      	movs	r2, #7
 8006704:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2207      	movs	r2, #7
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 faf1 	bl	8006cf4 <USBH_CtlReq>
 8006712:	4603      	mov	r3, r0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2221      	movs	r2, #33	; 0x21
 800672a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2207      	movs	r2, #7
 8006742:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2207      	movs	r2, #7
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fad2 	bl	8006cf4 <USBH_CtlReq>
 8006750:	4603      	mov	r3, r0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b086      	sub	sp, #24
 800675e:	af02      	add	r7, sp, #8
 8006760:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800676c:	2300      	movs	r3, #0
 800676e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006776:	2b01      	cmp	r3, #1
 8006778:	d002      	beq.n	8006780 <CDC_ProcessTransmission+0x26>
 800677a:	2b02      	cmp	r3, #2
 800677c:	d023      	beq.n	80067c6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800677e:	e05e      	b.n	800683e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	8b12      	ldrh	r2, [r2, #24]
 8006788:	4293      	cmp	r3, r2
 800678a:	d90b      	bls.n	80067a4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	69d9      	ldr	r1, [r3, #28]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8b1a      	ldrh	r2, [r3, #24]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	7b5b      	ldrb	r3, [r3, #13]
 8006798:	2001      	movs	r0, #1
 800679a:	9000      	str	r0, [sp, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fcb8 	bl	8007112 <USBH_BulkSendData>
 80067a2:	e00b      	b.n	80067bc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	7b5b      	ldrb	r3, [r3, #13]
 80067b2:	2001      	movs	r0, #1
 80067b4:	9000      	str	r0, [sp, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fcab 	bl	8007112 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80067c4:	e03b      	b.n	800683e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	7b5b      	ldrb	r3, [r3, #13]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 ff83 	bl	80076d8 <USBH_LL_GetURBState>
 80067d2:	4603      	mov	r3, r0
 80067d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80067d6:	7afb      	ldrb	r3, [r7, #11]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d128      	bne.n	800682e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	8b12      	ldrh	r2, [r2, #24]
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d90e      	bls.n	8006806 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	8b12      	ldrh	r2, [r2, #24]
 80067f0:	1a9a      	subs	r2, r3, r2
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	8b12      	ldrh	r2, [r2, #24]
 80067fe:	441a      	add	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	61da      	str	r2, [r3, #28]
 8006804:	e002      	b.n	800680c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800681c:	e00e      	b.n	800683c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f868 	bl	80068fc <USBH_CDC_TransmitCallback>
      break;
 800682c:	e006      	b.n	800683c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d103      	bne.n	800683c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800683c:	bf00      	nop
  }
}
 800683e:	bf00      	nop
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b086      	sub	sp, #24
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006858:	2300      	movs	r3, #0
 800685a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006862:	2b03      	cmp	r3, #3
 8006864:	d002      	beq.n	800686c <CDC_ProcessReception+0x26>
 8006866:	2b04      	cmp	r3, #4
 8006868:	d00e      	beq.n	8006888 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800686a:	e043      	b.n	80068f4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	6a19      	ldr	r1, [r3, #32]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	8b5a      	ldrh	r2, [r3, #26]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	7b1b      	ldrb	r3, [r3, #12]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fc6f 	bl	800715c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2204      	movs	r2, #4
 8006882:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006886:	e035      	b.n	80068f4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	7b1b      	ldrb	r3, [r3, #12]
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 ff22 	bl	80076d8 <USBH_LL_GetURBState>
 8006894:	4603      	mov	r3, r0
 8006896:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006898:	7cfb      	ldrb	r3, [r7, #19]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d129      	bne.n	80068f2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	7b1b      	ldrb	r3, [r3, #12]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fe85 	bl	80075b4 <USBH_LL_GetLastXferSize>
 80068aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d016      	beq.n	80068e4 <CDC_ProcessReception+0x9e>
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	8b5b      	ldrh	r3, [r3, #26]
 80068ba:	461a      	mov	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4293      	cmp	r3, r2
 80068c0:	d910      	bls.n	80068e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	1ad2      	subs	r2, r2, r3
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	6a1a      	ldr	r2, [r3, #32]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	441a      	add	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2203      	movs	r2, #3
 80068de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068e2:	e006      	b.n	80068f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f80f 	bl	8006910 <USBH_CDC_ReceiveCallback>
      break;
 80068f2:	bf00      	nop
  }
}
 80068f4:	bf00      	nop
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	4613      	mov	r3, r2
 8006944:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800694c:	2302      	movs	r3, #2
 800694e:	e029      	b.n	80069a4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	79fa      	ldrb	r2, [r7, #7]
 8006954:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f81f 	bl	80069ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 fd97 	bl	80074d0 <USBH_LL_Init>

  return USBH_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	e009      	b.n	80069d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	33e0      	adds	r3, #224	; 0xe0
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	2200      	movs	r2, #0
 80069ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b0f      	cmp	r3, #15
 80069d6:	d9f2      	bls.n	80069be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	e009      	b.n	80069f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069e8:	2200      	movs	r2, #0
 80069ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f8:	d3f1      	bcc.n	80069de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2240      	movs	r2, #64	; 0x40
 8006a1e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d016      	beq.n	8006a96 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10e      	bne.n	8006a90 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a78:	1c59      	adds	r1, r3, #1
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	33de      	adds	r3, #222	; 0xde
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]
 8006a8e:	e004      	b.n	8006a9a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a90:	2302      	movs	r3, #2
 8006a92:	73fb      	strb	r3, [r7, #15]
 8006a94:	e001      	b.n	8006a9a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a96:	2302      	movs	r3, #2
 8006a98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006abe:	78fa      	ldrb	r2, [r7, #3]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d204      	bcs.n	8006ace <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	78fa      	ldrb	r2, [r7, #3]
 8006ac8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006acc:	e001      	b.n	8006ad2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ace:	2302      	movs	r3, #2
 8006ad0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	4608      	mov	r0, r1
 8006aea:	4611      	mov	r1, r2
 8006aec:	461a      	mov	r2, r3
 8006aee:	4603      	mov	r3, r0
 8006af0:	70fb      	strb	r3, [r7, #3]
 8006af2:	460b      	mov	r3, r1
 8006af4:	70bb      	strb	r3, [r7, #2]
 8006af6:	4613      	mov	r3, r2
 8006af8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b08:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b0a:	e025      	b.n	8006b58 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	221a      	movs	r2, #26
 8006b10:	fb02 f303 	mul.w	r3, r2, r3
 8006b14:	3308      	adds	r3, #8
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	3302      	adds	r3, #2
 8006b1c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	795b      	ldrb	r3, [r3, #5]
 8006b22:	78fa      	ldrb	r2, [r7, #3]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d002      	beq.n	8006b2e <USBH_FindInterface+0x4e>
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	2bff      	cmp	r3, #255	; 0xff
 8006b2c:	d111      	bne.n	8006b52 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b32:	78ba      	ldrb	r2, [r7, #2]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d002      	beq.n	8006b3e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b38:	78bb      	ldrb	r3, [r7, #2]
 8006b3a:	2bff      	cmp	r3, #255	; 0xff
 8006b3c:	d109      	bne.n	8006b52 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b42:	787a      	ldrb	r2, [r7, #1]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d002      	beq.n	8006b4e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b48:	787b      	ldrb	r3, [r7, #1]
 8006b4a:	2bff      	cmp	r3, #255	; 0xff
 8006b4c:	d101      	bne.n	8006b52 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b4e:	7dfb      	ldrb	r3, [r7, #23]
 8006b50:	e006      	b.n	8006b60 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	3301      	adds	r3, #1
 8006b56:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d9d6      	bls.n	8006b0c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b5e:	23ff      	movs	r3, #255	; 0xff
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fce7 	bl	8007548 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fdbe 	bl	80076fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b082      	sub	sp, #8
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f804 	bl	8006bce <USBH_HandleSof>
}
 8006bc6:	bf00      	nop
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b0b      	cmp	r3, #11
 8006bde:	d10a      	bne.n	8006bf6 <USBH_HandleSof+0x28>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006c0e:	bf00      	nop
}
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006c2a:	bf00      	nop
}
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fc7a 	bl	800757e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	791b      	ldrb	r3, [r3, #4]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fad1 	bl	8007238 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	795b      	ldrb	r3, [r3, #5]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 facb 	bl	8007238 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	789b      	ldrb	r3, [r3, #2]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d10f      	bne.n	8006ce0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f805 	bl	8006cf4 <USBH_CtlReq>
 8006cea:	4603      	mov	r3, r0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006d02:	2301      	movs	r3, #1
 8006d04:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	789b      	ldrb	r3, [r3, #2]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d002      	beq.n	8006d14 <USBH_CtlReq+0x20>
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d00f      	beq.n	8006d32 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006d12:	e027      	b.n	8006d64 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	88fa      	ldrh	r2, [r7, #6]
 8006d1e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d30:	e018      	b.n	8006d64 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 f81c 	bl	8006d70 <USBH_HandleControl>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <USBH_CtlReq+0x54>
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d106      	bne.n	8006d56 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	761a      	strb	r2, [r3, #24]
      break;
 8006d54:	e005      	b.n	8006d62 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d102      	bne.n	8006d62 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	709a      	strb	r2, [r3, #2]
      break;
 8006d62:	bf00      	nop
  }
  return status;
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af02      	add	r7, sp, #8
 8006d76:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	7e1b      	ldrb	r3, [r3, #24]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	2b0a      	cmp	r3, #10
 8006d88:	f200 8156 	bhi.w	8007038 <USBH_HandleControl+0x2c8>
 8006d8c:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <USBH_HandleControl+0x24>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006dc1 	.word	0x08006dc1
 8006d98:	08006ddb 	.word	0x08006ddb
 8006d9c:	08006e45 	.word	0x08006e45
 8006da0:	08006e6b 	.word	0x08006e6b
 8006da4:	08006ea3 	.word	0x08006ea3
 8006da8:	08006ecd 	.word	0x08006ecd
 8006dac:	08006f1f 	.word	0x08006f1f
 8006db0:	08006f41 	.word	0x08006f41
 8006db4:	08006f7d 	.word	0x08006f7d
 8006db8:	08006fa3 	.word	0x08006fa3
 8006dbc:	08006fe1 	.word	0x08006fe1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f103 0110 	add.w	r1, r3, #16
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	795b      	ldrb	r3, [r3, #5]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f943 	bl	8007058 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	761a      	strb	r2, [r3, #24]
      break;
 8006dd8:	e139      	b.n	800704e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	795b      	ldrb	r3, [r3, #5]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fc79 	bl	80076d8 <USBH_LL_GetURBState>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d11e      	bne.n	8006e2e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	7c1b      	ldrb	r3, [r3, #16]
 8006df4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006df8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	8adb      	ldrh	r3, [r3, #22]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006e02:	7b7b      	ldrb	r3, [r7, #13]
 8006e04:	2b80      	cmp	r3, #128	; 0x80
 8006e06:	d103      	bne.n	8006e10 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006e0e:	e115      	b.n	800703c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2205      	movs	r2, #5
 8006e14:	761a      	strb	r2, [r3, #24]
      break;
 8006e16:	e111      	b.n	800703c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006e18:	7b7b      	ldrb	r3, [r7, #13]
 8006e1a:	2b80      	cmp	r3, #128	; 0x80
 8006e1c:	d103      	bne.n	8006e26 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2209      	movs	r2, #9
 8006e22:	761a      	strb	r2, [r3, #24]
      break;
 8006e24:	e10a      	b.n	800703c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2207      	movs	r2, #7
 8006e2a:	761a      	strb	r2, [r3, #24]
      break;
 8006e2c:	e106      	b.n	800703c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d003      	beq.n	8006e3c <USBH_HandleControl+0xcc>
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	f040 8100 	bne.w	800703c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	220b      	movs	r2, #11
 8006e40:	761a      	strb	r2, [r3, #24]
      break;
 8006e42:	e0fb      	b.n	800703c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6899      	ldr	r1, [r3, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	899a      	ldrh	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	791b      	ldrb	r3, [r3, #4]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f93a 	bl	80070d6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2204      	movs	r2, #4
 8006e66:	761a      	strb	r2, [r3, #24]
      break;
 8006e68:	e0f1      	b.n	800704e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	791b      	ldrb	r3, [r3, #4]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fc31 	bl	80076d8 <USBH_LL_GetURBState>
 8006e76:	4603      	mov	r3, r0
 8006e78:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d102      	bne.n	8006e86 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2209      	movs	r2, #9
 8006e84:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	2b05      	cmp	r3, #5
 8006e8a:	d102      	bne.n	8006e92 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006e90:	e0d6      	b.n	8007040 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	f040 80d3 	bne.w	8007040 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	220b      	movs	r2, #11
 8006e9e:	761a      	strb	r2, [r3, #24]
      break;
 8006ea0:	e0ce      	b.n	8007040 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6899      	ldr	r1, [r3, #8]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	899a      	ldrh	r2, [r3, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	795b      	ldrb	r3, [r3, #5]
 8006eae:	2001      	movs	r0, #1
 8006eb0:	9000      	str	r0, [sp, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f8ea 	bl	800708c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2206      	movs	r2, #6
 8006ec8:	761a      	strb	r2, [r3, #24]
      break;
 8006eca:	e0c0      	b.n	800704e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	795b      	ldrb	r3, [r3, #5]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fc00 	bl	80076d8 <USBH_LL_GetURBState>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d103      	bne.n	8006eea <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2207      	movs	r2, #7
 8006ee6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006ee8:	e0ac      	b.n	8007044 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	2b05      	cmp	r3, #5
 8006eee:	d105      	bne.n	8006efc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	220c      	movs	r2, #12
 8006ef4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8006efa:	e0a3      	b.n	8007044 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d103      	bne.n	8006f0a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2205      	movs	r2, #5
 8006f06:	761a      	strb	r2, [r3, #24]
      break;
 8006f08:	e09c      	b.n	8007044 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	f040 8099 	bne.w	8007044 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	220b      	movs	r2, #11
 8006f16:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1c:	e092      	b.n	8007044 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	791b      	ldrb	r3, [r3, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	2100      	movs	r1, #0
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f8d5 	bl	80070d6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2208      	movs	r2, #8
 8006f3c:	761a      	strb	r2, [r3, #24]

      break;
 8006f3e:	e086      	b.n	800704e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	791b      	ldrb	r3, [r3, #4]
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fbc6 	bl	80076d8 <USBH_LL_GetURBState>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d105      	bne.n	8006f62 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	220d      	movs	r2, #13
 8006f5a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006f60:	e072      	b.n	8007048 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d103      	bne.n	8006f70 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	220b      	movs	r2, #11
 8006f6c:	761a      	strb	r2, [r3, #24]
      break;
 8006f6e:	e06b      	b.n	8007048 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	2b05      	cmp	r3, #5
 8006f74:	d168      	bne.n	8007048 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006f76:	2303      	movs	r3, #3
 8006f78:	73fb      	strb	r3, [r7, #15]
      break;
 8006f7a:	e065      	b.n	8007048 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	795b      	ldrb	r3, [r3, #5]
 8006f80:	2201      	movs	r2, #1
 8006f82:	9200      	str	r2, [sp, #0]
 8006f84:	2200      	movs	r2, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f87f 	bl	800708c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	220a      	movs	r2, #10
 8006f9e:	761a      	strb	r2, [r3, #24]
      break;
 8006fa0:	e055      	b.n	800704e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	795b      	ldrb	r3, [r3, #5]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fb95 	bl	80076d8 <USBH_LL_GetURBState>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d105      	bne.n	8006fc4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	220d      	movs	r2, #13
 8006fc0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006fc2:	e043      	b.n	800704c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d103      	bne.n	8006fd2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2209      	movs	r2, #9
 8006fce:	761a      	strb	r2, [r3, #24]
      break;
 8006fd0:	e03c      	b.n	800704c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d139      	bne.n	800704c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	220b      	movs	r2, #11
 8006fdc:	761a      	strb	r2, [r3, #24]
      break;
 8006fde:	e035      	b.n	800704c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	7e5b      	ldrb	r3, [r3, #25]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	765a      	strb	r2, [r3, #25]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	7e5b      	ldrb	r3, [r3, #25]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d806      	bhi.n	8007002 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007000:	e025      	b.n	800704e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007008:	2106      	movs	r1, #6
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	795b      	ldrb	r3, [r3, #5]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f90c 	bl	8007238 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	791b      	ldrb	r3, [r3, #4]
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f906 	bl	8007238 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007032:	2302      	movs	r3, #2
 8007034:	73fb      	strb	r3, [r7, #15]
      break;
 8007036:	e00a      	b.n	800704e <USBH_HandleControl+0x2de>

    default:
      break;
 8007038:	bf00      	nop
 800703a:	e008      	b.n	800704e <USBH_HandleControl+0x2de>
      break;
 800703c:	bf00      	nop
 800703e:	e006      	b.n	800704e <USBH_HandleControl+0x2de>
      break;
 8007040:	bf00      	nop
 8007042:	e004      	b.n	800704e <USBH_HandleControl+0x2de>
      break;
 8007044:	bf00      	nop
 8007046:	e002      	b.n	800704e <USBH_HandleControl+0x2de>
      break;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <USBH_HandleControl+0x2de>
      break;
 800704c:	bf00      	nop
  }

  return status;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af04      	add	r7, sp, #16
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	4613      	mov	r3, r2
 8007064:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007066:	79f9      	ldrb	r1, [r7, #7]
 8007068:	2300      	movs	r3, #0
 800706a:	9303      	str	r3, [sp, #12]
 800706c:	2308      	movs	r3, #8
 800706e:	9302      	str	r3, [sp, #8]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	2300      	movs	r3, #0
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2300      	movs	r3, #0
 800707a:	2200      	movs	r2, #0
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fafa 	bl	8007676 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af04      	add	r7, sp, #16
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	4611      	mov	r1, r2
 8007098:	461a      	mov	r2, r3
 800709a:	460b      	mov	r3, r1
 800709c:	80fb      	strh	r3, [r7, #6]
 800709e:	4613      	mov	r3, r2
 80070a0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80070b0:	7979      	ldrb	r1, [r7, #5]
 80070b2:	7e3b      	ldrb	r3, [r7, #24]
 80070b4:	9303      	str	r3, [sp, #12]
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	9302      	str	r3, [sp, #8]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	2301      	movs	r3, #1
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	2300      	movs	r3, #0
 80070c4:	2200      	movs	r2, #0
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 fad5 	bl	8007676 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b088      	sub	sp, #32
 80070da:	af04      	add	r7, sp, #16
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	4611      	mov	r1, r2
 80070e2:	461a      	mov	r2, r3
 80070e4:	460b      	mov	r3, r1
 80070e6:	80fb      	strh	r3, [r7, #6]
 80070e8:	4613      	mov	r3, r2
 80070ea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80070ec:	7979      	ldrb	r1, [r7, #5]
 80070ee:	2300      	movs	r3, #0
 80070f0:	9303      	str	r3, [sp, #12]
 80070f2:	88fb      	ldrh	r3, [r7, #6]
 80070f4:	9302      	str	r3, [sp, #8]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	2301      	movs	r3, #1
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	2300      	movs	r3, #0
 8007100:	2201      	movs	r2, #1
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 fab7 	bl	8007676 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007108:	2300      	movs	r3, #0

}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b088      	sub	sp, #32
 8007116:	af04      	add	r7, sp, #16
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	4611      	mov	r1, r2
 800711e:	461a      	mov	r2, r3
 8007120:	460b      	mov	r3, r1
 8007122:	80fb      	strh	r3, [r7, #6]
 8007124:	4613      	mov	r3, r2
 8007126:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007136:	7979      	ldrb	r1, [r7, #5]
 8007138:	7e3b      	ldrb	r3, [r7, #24]
 800713a:	9303      	str	r3, [sp, #12]
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	9302      	str	r3, [sp, #8]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	9301      	str	r3, [sp, #4]
 8007144:	2301      	movs	r3, #1
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	2302      	movs	r3, #2
 800714a:	2200      	movs	r2, #0
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fa92 	bl	8007676 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af04      	add	r7, sp, #16
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4611      	mov	r1, r2
 8007168:	461a      	mov	r2, r3
 800716a:	460b      	mov	r3, r1
 800716c:	80fb      	strh	r3, [r7, #6]
 800716e:	4613      	mov	r3, r2
 8007170:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007172:	7979      	ldrb	r1, [r7, #5]
 8007174:	2300      	movs	r3, #0
 8007176:	9303      	str	r3, [sp, #12]
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	9302      	str	r3, [sp, #8]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	9301      	str	r3, [sp, #4]
 8007180:	2301      	movs	r3, #1
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	2302      	movs	r3, #2
 8007186:	2201      	movs	r2, #1
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 fa74 	bl	8007676 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af04      	add	r7, sp, #16
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	4608      	mov	r0, r1
 80071a2:	4611      	mov	r1, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	4603      	mov	r3, r0
 80071a8:	70fb      	strb	r3, [r7, #3]
 80071aa:	460b      	mov	r3, r1
 80071ac:	70bb      	strb	r3, [r7, #2]
 80071ae:	4613      	mov	r3, r2
 80071b0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80071b2:	7878      	ldrb	r0, [r7, #1]
 80071b4:	78ba      	ldrb	r2, [r7, #2]
 80071b6:	78f9      	ldrb	r1, [r7, #3]
 80071b8:	8b3b      	ldrh	r3, [r7, #24]
 80071ba:	9302      	str	r3, [sp, #8]
 80071bc:	7d3b      	ldrb	r3, [r7, #20]
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	7c3b      	ldrb	r3, [r7, #16]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	4603      	mov	r3, r0
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa07 	bl	80075da <USBH_LL_OpenPipe>

  return USBH_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa26 	bl	8007638 <USBH_LL_ClosePipe>

  return USBH_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f836 	bl	8007274 <USBH_GetFreePipe>
 8007208:	4603      	mov	r3, r0
 800720a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800720c:	89fb      	ldrh	r3, [r7, #14]
 800720e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007212:	4293      	cmp	r3, r2
 8007214:	d00a      	beq.n	800722c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	89fb      	ldrh	r3, [r7, #14]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	33e0      	adds	r3, #224	; 0xe0
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	440b      	add	r3, r1
 800722a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800722c:	89fb      	ldrh	r3, [r7, #14]
 800722e:	b2db      	uxtb	r3, r3
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	2b0f      	cmp	r3, #15
 8007248:	d80d      	bhi.n	8007266 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800724a:	78fb      	ldrb	r3, [r7, #3]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	33e0      	adds	r3, #224	; 0xe0
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	33e0      	adds	r3, #224	; 0xe0
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	440b      	add	r3, r1
 8007264:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]
 8007284:	e00f      	b.n	80072a6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	33e0      	adds	r3, #224	; 0xe0
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d102      	bne.n	80072a0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	b29b      	uxth	r3, r3
 800729e:	e007      	b.n	80072b0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	3301      	adds	r3, #1
 80072a4:	73fb      	strb	r3, [r7, #15]
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2b0f      	cmp	r3, #15
 80072aa:	d9ec      	bls.n	8007286 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80072ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80072c0:	2201      	movs	r2, #1
 80072c2:	490e      	ldr	r1, [pc, #56]	; (80072fc <MX_USB_HOST_Init+0x40>)
 80072c4:	480e      	ldr	r0, [pc, #56]	; (8007300 <MX_USB_HOST_Init+0x44>)
 80072c6:	f7ff fb37 	bl	8006938 <USBH_Init>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80072d0:	f7f9 fbbe 	bl	8000a50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80072d4:	490b      	ldr	r1, [pc, #44]	; (8007304 <MX_USB_HOST_Init+0x48>)
 80072d6:	480a      	ldr	r0, [pc, #40]	; (8007300 <MX_USB_HOST_Init+0x44>)
 80072d8:	f7ff fbbc 	bl	8006a54 <USBH_RegisterClass>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80072e2:	f7f9 fbb5 	bl	8000a50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80072e6:	4806      	ldr	r0, [pc, #24]	; (8007300 <MX_USB_HOST_Init+0x44>)
 80072e8:	f7ff fc40 	bl	8006b6c <USBH_Start>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80072f2:	f7f9 fbad 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80072f6:	bf00      	nop
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	08007309 	.word	0x08007309
 8007300:	2000021c 	.word	0x2000021c
 8007304:	2000000c 	.word	0x2000000c

08007308 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	3b01      	subs	r3, #1
 8007318:	2b04      	cmp	r3, #4
 800731a:	d819      	bhi.n	8007350 <USBH_UserProcess+0x48>
 800731c:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <USBH_UserProcess+0x1c>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	08007351 	.word	0x08007351
 8007328:	08007341 	.word	0x08007341
 800732c:	08007351 	.word	0x08007351
 8007330:	08007349 	.word	0x08007349
 8007334:	08007339 	.word	0x08007339
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007338:	4b09      	ldr	r3, [pc, #36]	; (8007360 <USBH_UserProcess+0x58>)
 800733a:	2203      	movs	r2, #3
 800733c:	701a      	strb	r2, [r3, #0]
  break;
 800733e:	e008      	b.n	8007352 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007340:	4b07      	ldr	r3, [pc, #28]	; (8007360 <USBH_UserProcess+0x58>)
 8007342:	2202      	movs	r2, #2
 8007344:	701a      	strb	r2, [r3, #0]
  break;
 8007346:	e004      	b.n	8007352 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <USBH_UserProcess+0x58>)
 800734a:	2201      	movs	r2, #1
 800734c:	701a      	strb	r2, [r3, #0]
  break;
 800734e:	e000      	b.n	8007352 <USBH_UserProcess+0x4a>

  default:
  break;
 8007350:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	200005f4 	.word	0x200005f4

08007364 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800736c:	f107 0314 	add.w	r3, r7, #20
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	609a      	str	r2, [r3, #8]
 8007378:	60da      	str	r2, [r3, #12]
 800737a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007384:	d147      	bne.n	8007416 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007386:	2300      	movs	r3, #0
 8007388:	613b      	str	r3, [r7, #16]
 800738a:	4b25      	ldr	r3, [pc, #148]	; (8007420 <HAL_HCD_MspInit+0xbc>)
 800738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738e:	4a24      	ldr	r2, [pc, #144]	; (8007420 <HAL_HCD_MspInit+0xbc>)
 8007390:	f043 0301 	orr.w	r3, r3, #1
 8007394:	6313      	str	r3, [r2, #48]	; 0x30
 8007396:	4b22      	ldr	r3, [pc, #136]	; (8007420 <HAL_HCD_MspInit+0xbc>)
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80073a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ac:	2300      	movs	r3, #0
 80073ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80073b0:	f107 0314 	add.w	r3, r7, #20
 80073b4:	4619      	mov	r1, r3
 80073b6:	481b      	ldr	r0, [pc, #108]	; (8007424 <HAL_HCD_MspInit+0xc0>)
 80073b8:	f7fa fd92 	bl	8001ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80073bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80073c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073c2:	2302      	movs	r3, #2
 80073c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073ca:	2300      	movs	r3, #0
 80073cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80073ce:	230a      	movs	r3, #10
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073d2:	f107 0314 	add.w	r3, r7, #20
 80073d6:	4619      	mov	r1, r3
 80073d8:	4812      	ldr	r0, [pc, #72]	; (8007424 <HAL_HCD_MspInit+0xc0>)
 80073da:	f7fa fd81 	bl	8001ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073de:	4b10      	ldr	r3, [pc, #64]	; (8007420 <HAL_HCD_MspInit+0xbc>)
 80073e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e2:	4a0f      	ldr	r2, [pc, #60]	; (8007420 <HAL_HCD_MspInit+0xbc>)
 80073e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e8:	6353      	str	r3, [r2, #52]	; 0x34
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <HAL_HCD_MspInit+0xbc>)
 80073f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f2:	4a0b      	ldr	r2, [pc, #44]	; (8007420 <HAL_HCD_MspInit+0xbc>)
 80073f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073f8:	6453      	str	r3, [r2, #68]	; 0x44
 80073fa:	4b09      	ldr	r3, [pc, #36]	; (8007420 <HAL_HCD_MspInit+0xbc>)
 80073fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007406:	2200      	movs	r2, #0
 8007408:	2100      	movs	r1, #0
 800740a:	2043      	movs	r0, #67	; 0x43
 800740c:	f7fa fd31 	bl	8001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007410:	2043      	movs	r0, #67	; 0x43
 8007412:	f7fa fd4a 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007416:	bf00      	nop
 8007418:	3728      	adds	r7, #40	; 0x28
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40023800 	.word	0x40023800
 8007424:	40020000 	.word	0x40020000

08007428 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff fbb7 	bl	8006baa <USBH_LL_IncTimer>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff fbef 	bl	8006c36 <USBH_LL_Connect>
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fbf8 	bl	8006c64 <USBH_LL_Disconnect>
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	70fb      	strb	r3, [r7, #3]
 8007488:	4613      	mov	r3, r2
 800748a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff fba9 	bl	8006bfe <USBH_LL_PortEnabled>
}
 80074ac:	bf00      	nop
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff fba9 	bl	8006c1a <USBH_LL_PortDisabled>
}
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d12a      	bne.n	8007538 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80074e2:	4a18      	ldr	r2, [pc, #96]	; (8007544 <USBH_LL_Init+0x74>)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a15      	ldr	r2, [pc, #84]	; (8007544 <USBH_LL_Init+0x74>)
 80074ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074f2:	4b14      	ldr	r3, [pc, #80]	; (8007544 <USBH_LL_Init+0x74>)
 80074f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80074fa:	4b12      	ldr	r3, [pc, #72]	; (8007544 <USBH_LL_Init+0x74>)
 80074fc:	2208      	movs	r2, #8
 80074fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007500:	4b10      	ldr	r3, [pc, #64]	; (8007544 <USBH_LL_Init+0x74>)
 8007502:	2201      	movs	r2, #1
 8007504:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007506:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <USBH_LL_Init+0x74>)
 8007508:	2200      	movs	r2, #0
 800750a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800750c:	4b0d      	ldr	r3, [pc, #52]	; (8007544 <USBH_LL_Init+0x74>)
 800750e:	2202      	movs	r2, #2
 8007510:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007512:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <USBH_LL_Init+0x74>)
 8007514:	2200      	movs	r2, #0
 8007516:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007518:	480a      	ldr	r0, [pc, #40]	; (8007544 <USBH_LL_Init+0x74>)
 800751a:	f7fa fe96 	bl	800224a <HAL_HCD_Init>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007524:	f7f9 fa94 	bl	8000a50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007528:	4806      	ldr	r0, [pc, #24]	; (8007544 <USBH_LL_Init+0x74>)
 800752a:	f7fb fa6c 	bl	8002a06 <HAL_HCD_GetCurrentFrame>
 800752e:	4603      	mov	r3, r0
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff fb2a 	bl	8006b8c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	200005f8 	.word	0x200005f8

08007548 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800755e:	4618      	mov	r0, r3
 8007560:	f7fb f9e9 	bl	8002936 <HAL_HCD_Start>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f90e 	bl	800778c <USBH_Get_USB_Status>
 8007570:	4603      	mov	r3, r0
 8007572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007574:	7bbb      	ldrb	r3, [r7, #14]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007594:	4618      	mov	r0, r3
 8007596:	f7fb f9f1 	bl	800297c <HAL_HCD_Stop>
 800759a:	4603      	mov	r3, r0
 800759c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 f8f3 	bl	800778c <USBH_Get_USB_Status>
 80075a6:	4603      	mov	r3, r0
 80075a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075c6:	78fa      	ldrb	r2, [r7, #3]
 80075c8:	4611      	mov	r1, r2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fb fa07 	bl	80029de <HAL_HCD_HC_GetXferCount>
 80075d0:	4603      	mov	r3, r0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80075da:	b590      	push	{r4, r7, lr}
 80075dc:	b089      	sub	sp, #36	; 0x24
 80075de:	af04      	add	r7, sp, #16
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	4608      	mov	r0, r1
 80075e4:	4611      	mov	r1, r2
 80075e6:	461a      	mov	r2, r3
 80075e8:	4603      	mov	r3, r0
 80075ea:	70fb      	strb	r3, [r7, #3]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70bb      	strb	r3, [r7, #2]
 80075f0:	4613      	mov	r3, r2
 80075f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007602:	787c      	ldrb	r4, [r7, #1]
 8007604:	78ba      	ldrb	r2, [r7, #2]
 8007606:	78f9      	ldrb	r1, [r7, #3]
 8007608:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800760a:	9302      	str	r3, [sp, #8]
 800760c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	4623      	mov	r3, r4
 800761a:	f7fa fe78 	bl	800230e <HAL_HCD_HC_Init>
 800761e:	4603      	mov	r3, r0
 8007620:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 f8b1 	bl	800778c <USBH_Get_USB_Status>
 800762a:	4603      	mov	r3, r0
 800762c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800762e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	bd90      	pop	{r4, r7, pc}

08007638 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007652:	78fa      	ldrb	r2, [r7, #3]
 8007654:	4611      	mov	r1, r2
 8007656:	4618      	mov	r0, r3
 8007658:	f7fa fee8 	bl	800242c <HAL_HCD_HC_Halt>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	4618      	mov	r0, r3
 8007664:	f000 f892 	bl	800778c <USBH_Get_USB_Status>
 8007668:	4603      	mov	r3, r0
 800766a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800766c:	7bbb      	ldrb	r3, [r7, #14]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007676:	b590      	push	{r4, r7, lr}
 8007678:	b089      	sub	sp, #36	; 0x24
 800767a:	af04      	add	r7, sp, #16
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	4608      	mov	r0, r1
 8007680:	4611      	mov	r1, r2
 8007682:	461a      	mov	r2, r3
 8007684:	4603      	mov	r3, r0
 8007686:	70fb      	strb	r3, [r7, #3]
 8007688:	460b      	mov	r3, r1
 800768a:	70bb      	strb	r3, [r7, #2]
 800768c:	4613      	mov	r3, r2
 800768e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800769e:	787c      	ldrb	r4, [r7, #1]
 80076a0:	78ba      	ldrb	r2, [r7, #2]
 80076a2:	78f9      	ldrb	r1, [r7, #3]
 80076a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076ac:	9302      	str	r3, [sp, #8]
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	4623      	mov	r3, r4
 80076ba:	f7fa fedb 	bl	8002474 <HAL_HCD_HC_SubmitRequest>
 80076be:	4603      	mov	r3, r0
 80076c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 f861 	bl	800778c <USBH_Get_USB_Status>
 80076ca:	4603      	mov	r3, r0
 80076cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd90      	pop	{r4, r7, pc}

080076d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076ea:	78fa      	ldrb	r2, [r7, #3]
 80076ec:	4611      	mov	r1, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fb f961 	bl	80029b6 <HAL_HCD_HC_GetURBState>
 80076f4:	4603      	mov	r3, r0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007710:	2b01      	cmp	r3, #1
 8007712:	d103      	bne.n	800771c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007714:	78fb      	ldrb	r3, [r7, #3]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f864 	bl	80077e4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800771c:	20c8      	movs	r0, #200	; 0xc8
 800771e:	f7f9 fc47 	bl	8000fb0 <HAL_Delay>
  return USBH_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	70fb      	strb	r3, [r7, #3]
 8007738:	4613      	mov	r3, r2
 800773a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007742:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	212c      	movs	r1, #44	; 0x2c
 800774a:	fb01 f303 	mul.w	r3, r1, r3
 800774e:	4413      	add	r3, r2
 8007750:	333b      	adds	r3, #59	; 0x3b
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d009      	beq.n	800776c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	212c      	movs	r1, #44	; 0x2c
 800775e:	fb01 f303 	mul.w	r3, r1, r3
 8007762:	4413      	add	r3, r2
 8007764:	3354      	adds	r3, #84	; 0x54
 8007766:	78ba      	ldrb	r2, [r7, #2]
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	e008      	b.n	800777e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	212c      	movs	r1, #44	; 0x2c
 8007772:	fb01 f303 	mul.w	r3, r1, r3
 8007776:	4413      	add	r3, r2
 8007778:	3355      	adds	r3, #85	; 0x55
 800777a:	78ba      	ldrb	r2, [r7, #2]
 800777c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	2b03      	cmp	r3, #3
 800779e:	d817      	bhi.n	80077d0 <USBH_Get_USB_Status+0x44>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <USBH_Get_USB_Status+0x1c>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077b9 	.word	0x080077b9
 80077ac:	080077bf 	.word	0x080077bf
 80077b0:	080077c5 	.word	0x080077c5
 80077b4:	080077cb 	.word	0x080077cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
    break;
 80077bc:	e00b      	b.n	80077d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80077be:	2302      	movs	r3, #2
 80077c0:	73fb      	strb	r3, [r7, #15]
    break;
 80077c2:	e008      	b.n	80077d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
    break;
 80077c8:	e005      	b.n	80077d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80077ca:	2302      	movs	r3, #2
 80077cc:	73fb      	strb	r3, [r7, #15]
    break;
 80077ce:	e002      	b.n	80077d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80077d0:	2302      	movs	r3, #2
 80077d2:	73fb      	strb	r3, [r7, #15]
    break;
 80077d4:	bf00      	nop
  }
  return usb_status;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d102      	bne.n	80077fe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80077f8:	2300      	movs	r3, #0
 80077fa:	73fb      	strb	r3, [r7, #15]
 80077fc:	e001      	b.n	8007802 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80077fe:	2301      	movs	r3, #1
 8007800:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	461a      	mov	r2, r3
 8007806:	2101      	movs	r1, #1
 8007808:	4803      	ldr	r0, [pc, #12]	; (8007818 <MX_DriverVbusFS+0x34>)
 800780a:	f7fa fd05 	bl	8002218 <HAL_GPIO_WritePin>
}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	40020800 	.word	0x40020800

0800781c <__errno>:
 800781c:	4b01      	ldr	r3, [pc, #4]	; (8007824 <__errno+0x8>)
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	2000002c 	.word	0x2000002c

08007828 <__libc_init_array>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	4d0d      	ldr	r5, [pc, #52]	; (8007860 <__libc_init_array+0x38>)
 800782c:	4c0d      	ldr	r4, [pc, #52]	; (8007864 <__libc_init_array+0x3c>)
 800782e:	1b64      	subs	r4, r4, r5
 8007830:	10a4      	asrs	r4, r4, #2
 8007832:	2600      	movs	r6, #0
 8007834:	42a6      	cmp	r6, r4
 8007836:	d109      	bne.n	800784c <__libc_init_array+0x24>
 8007838:	4d0b      	ldr	r5, [pc, #44]	; (8007868 <__libc_init_array+0x40>)
 800783a:	4c0c      	ldr	r4, [pc, #48]	; (800786c <__libc_init_array+0x44>)
 800783c:	f000 f92e 	bl	8007a9c <_init>
 8007840:	1b64      	subs	r4, r4, r5
 8007842:	10a4      	asrs	r4, r4, #2
 8007844:	2600      	movs	r6, #0
 8007846:	42a6      	cmp	r6, r4
 8007848:	d105      	bne.n	8007856 <__libc_init_array+0x2e>
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007850:	4798      	blx	r3
 8007852:	3601      	adds	r6, #1
 8007854:	e7ee      	b.n	8007834 <__libc_init_array+0xc>
 8007856:	f855 3b04 	ldr.w	r3, [r5], #4
 800785a:	4798      	blx	r3
 800785c:	3601      	adds	r6, #1
 800785e:	e7f2      	b.n	8007846 <__libc_init_array+0x1e>
 8007860:	08007ad8 	.word	0x08007ad8
 8007864:	08007ad8 	.word	0x08007ad8
 8007868:	08007ad8 	.word	0x08007ad8
 800786c:	08007adc 	.word	0x08007adc

08007870 <malloc>:
 8007870:	4b02      	ldr	r3, [pc, #8]	; (800787c <malloc+0xc>)
 8007872:	4601      	mov	r1, r0
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	f000 b87f 	b.w	8007978 <_malloc_r>
 800787a:	bf00      	nop
 800787c:	2000002c 	.word	0x2000002c

08007880 <free>:
 8007880:	4b02      	ldr	r3, [pc, #8]	; (800788c <free+0xc>)
 8007882:	4601      	mov	r1, r0
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	f000 b80b 	b.w	80078a0 <_free_r>
 800788a:	bf00      	nop
 800788c:	2000002c 	.word	0x2000002c

08007890 <memset>:
 8007890:	4402      	add	r2, r0
 8007892:	4603      	mov	r3, r0
 8007894:	4293      	cmp	r3, r2
 8007896:	d100      	bne.n	800789a <memset+0xa>
 8007898:	4770      	bx	lr
 800789a:	f803 1b01 	strb.w	r1, [r3], #1
 800789e:	e7f9      	b.n	8007894 <memset+0x4>

080078a0 <_free_r>:
 80078a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078a2:	2900      	cmp	r1, #0
 80078a4:	d044      	beq.n	8007930 <_free_r+0x90>
 80078a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078aa:	9001      	str	r0, [sp, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f1a1 0404 	sub.w	r4, r1, #4
 80078b2:	bfb8      	it	lt
 80078b4:	18e4      	addlt	r4, r4, r3
 80078b6:	f000 f8e3 	bl	8007a80 <__malloc_lock>
 80078ba:	4a1e      	ldr	r2, [pc, #120]	; (8007934 <_free_r+0x94>)
 80078bc:	9801      	ldr	r0, [sp, #4]
 80078be:	6813      	ldr	r3, [r2, #0]
 80078c0:	b933      	cbnz	r3, 80078d0 <_free_r+0x30>
 80078c2:	6063      	str	r3, [r4, #4]
 80078c4:	6014      	str	r4, [r2, #0]
 80078c6:	b003      	add	sp, #12
 80078c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078cc:	f000 b8de 	b.w	8007a8c <__malloc_unlock>
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d908      	bls.n	80078e6 <_free_r+0x46>
 80078d4:	6825      	ldr	r5, [r4, #0]
 80078d6:	1961      	adds	r1, r4, r5
 80078d8:	428b      	cmp	r3, r1
 80078da:	bf01      	itttt	eq
 80078dc:	6819      	ldreq	r1, [r3, #0]
 80078de:	685b      	ldreq	r3, [r3, #4]
 80078e0:	1949      	addeq	r1, r1, r5
 80078e2:	6021      	streq	r1, [r4, #0]
 80078e4:	e7ed      	b.n	80078c2 <_free_r+0x22>
 80078e6:	461a      	mov	r2, r3
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	b10b      	cbz	r3, 80078f0 <_free_r+0x50>
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	d9fa      	bls.n	80078e6 <_free_r+0x46>
 80078f0:	6811      	ldr	r1, [r2, #0]
 80078f2:	1855      	adds	r5, r2, r1
 80078f4:	42a5      	cmp	r5, r4
 80078f6:	d10b      	bne.n	8007910 <_free_r+0x70>
 80078f8:	6824      	ldr	r4, [r4, #0]
 80078fa:	4421      	add	r1, r4
 80078fc:	1854      	adds	r4, r2, r1
 80078fe:	42a3      	cmp	r3, r4
 8007900:	6011      	str	r1, [r2, #0]
 8007902:	d1e0      	bne.n	80078c6 <_free_r+0x26>
 8007904:	681c      	ldr	r4, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	6053      	str	r3, [r2, #4]
 800790a:	4421      	add	r1, r4
 800790c:	6011      	str	r1, [r2, #0]
 800790e:	e7da      	b.n	80078c6 <_free_r+0x26>
 8007910:	d902      	bls.n	8007918 <_free_r+0x78>
 8007912:	230c      	movs	r3, #12
 8007914:	6003      	str	r3, [r0, #0]
 8007916:	e7d6      	b.n	80078c6 <_free_r+0x26>
 8007918:	6825      	ldr	r5, [r4, #0]
 800791a:	1961      	adds	r1, r4, r5
 800791c:	428b      	cmp	r3, r1
 800791e:	bf04      	itt	eq
 8007920:	6819      	ldreq	r1, [r3, #0]
 8007922:	685b      	ldreq	r3, [r3, #4]
 8007924:	6063      	str	r3, [r4, #4]
 8007926:	bf04      	itt	eq
 8007928:	1949      	addeq	r1, r1, r5
 800792a:	6021      	streq	r1, [r4, #0]
 800792c:	6054      	str	r4, [r2, #4]
 800792e:	e7ca      	b.n	80078c6 <_free_r+0x26>
 8007930:	b003      	add	sp, #12
 8007932:	bd30      	pop	{r4, r5, pc}
 8007934:	200008fc 	.word	0x200008fc

08007938 <sbrk_aligned>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	4e0e      	ldr	r6, [pc, #56]	; (8007974 <sbrk_aligned+0x3c>)
 800793c:	460c      	mov	r4, r1
 800793e:	6831      	ldr	r1, [r6, #0]
 8007940:	4605      	mov	r5, r0
 8007942:	b911      	cbnz	r1, 800794a <sbrk_aligned+0x12>
 8007944:	f000 f88c 	bl	8007a60 <_sbrk_r>
 8007948:	6030      	str	r0, [r6, #0]
 800794a:	4621      	mov	r1, r4
 800794c:	4628      	mov	r0, r5
 800794e:	f000 f887 	bl	8007a60 <_sbrk_r>
 8007952:	1c43      	adds	r3, r0, #1
 8007954:	d00a      	beq.n	800796c <sbrk_aligned+0x34>
 8007956:	1cc4      	adds	r4, r0, #3
 8007958:	f024 0403 	bic.w	r4, r4, #3
 800795c:	42a0      	cmp	r0, r4
 800795e:	d007      	beq.n	8007970 <sbrk_aligned+0x38>
 8007960:	1a21      	subs	r1, r4, r0
 8007962:	4628      	mov	r0, r5
 8007964:	f000 f87c 	bl	8007a60 <_sbrk_r>
 8007968:	3001      	adds	r0, #1
 800796a:	d101      	bne.n	8007970 <sbrk_aligned+0x38>
 800796c:	f04f 34ff 	mov.w	r4, #4294967295
 8007970:	4620      	mov	r0, r4
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	20000900 	.word	0x20000900

08007978 <_malloc_r>:
 8007978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800797c:	1ccd      	adds	r5, r1, #3
 800797e:	f025 0503 	bic.w	r5, r5, #3
 8007982:	3508      	adds	r5, #8
 8007984:	2d0c      	cmp	r5, #12
 8007986:	bf38      	it	cc
 8007988:	250c      	movcc	r5, #12
 800798a:	2d00      	cmp	r5, #0
 800798c:	4607      	mov	r7, r0
 800798e:	db01      	blt.n	8007994 <_malloc_r+0x1c>
 8007990:	42a9      	cmp	r1, r5
 8007992:	d905      	bls.n	80079a0 <_malloc_r+0x28>
 8007994:	230c      	movs	r3, #12
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	2600      	movs	r6, #0
 800799a:	4630      	mov	r0, r6
 800799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a0:	4e2e      	ldr	r6, [pc, #184]	; (8007a5c <_malloc_r+0xe4>)
 80079a2:	f000 f86d 	bl	8007a80 <__malloc_lock>
 80079a6:	6833      	ldr	r3, [r6, #0]
 80079a8:	461c      	mov	r4, r3
 80079aa:	bb34      	cbnz	r4, 80079fa <_malloc_r+0x82>
 80079ac:	4629      	mov	r1, r5
 80079ae:	4638      	mov	r0, r7
 80079b0:	f7ff ffc2 	bl	8007938 <sbrk_aligned>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	4604      	mov	r4, r0
 80079b8:	d14d      	bne.n	8007a56 <_malloc_r+0xde>
 80079ba:	6834      	ldr	r4, [r6, #0]
 80079bc:	4626      	mov	r6, r4
 80079be:	2e00      	cmp	r6, #0
 80079c0:	d140      	bne.n	8007a44 <_malloc_r+0xcc>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	4631      	mov	r1, r6
 80079c6:	4638      	mov	r0, r7
 80079c8:	eb04 0803 	add.w	r8, r4, r3
 80079cc:	f000 f848 	bl	8007a60 <_sbrk_r>
 80079d0:	4580      	cmp	r8, r0
 80079d2:	d13a      	bne.n	8007a4a <_malloc_r+0xd2>
 80079d4:	6821      	ldr	r1, [r4, #0]
 80079d6:	3503      	adds	r5, #3
 80079d8:	1a6d      	subs	r5, r5, r1
 80079da:	f025 0503 	bic.w	r5, r5, #3
 80079de:	3508      	adds	r5, #8
 80079e0:	2d0c      	cmp	r5, #12
 80079e2:	bf38      	it	cc
 80079e4:	250c      	movcc	r5, #12
 80079e6:	4629      	mov	r1, r5
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff ffa5 	bl	8007938 <sbrk_aligned>
 80079ee:	3001      	adds	r0, #1
 80079f0:	d02b      	beq.n	8007a4a <_malloc_r+0xd2>
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	442b      	add	r3, r5
 80079f6:	6023      	str	r3, [r4, #0]
 80079f8:	e00e      	b.n	8007a18 <_malloc_r+0xa0>
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	1b52      	subs	r2, r2, r5
 80079fe:	d41e      	bmi.n	8007a3e <_malloc_r+0xc6>
 8007a00:	2a0b      	cmp	r2, #11
 8007a02:	d916      	bls.n	8007a32 <_malloc_r+0xba>
 8007a04:	1961      	adds	r1, r4, r5
 8007a06:	42a3      	cmp	r3, r4
 8007a08:	6025      	str	r5, [r4, #0]
 8007a0a:	bf18      	it	ne
 8007a0c:	6059      	strne	r1, [r3, #4]
 8007a0e:	6863      	ldr	r3, [r4, #4]
 8007a10:	bf08      	it	eq
 8007a12:	6031      	streq	r1, [r6, #0]
 8007a14:	5162      	str	r2, [r4, r5]
 8007a16:	604b      	str	r3, [r1, #4]
 8007a18:	4638      	mov	r0, r7
 8007a1a:	f104 060b 	add.w	r6, r4, #11
 8007a1e:	f000 f835 	bl	8007a8c <__malloc_unlock>
 8007a22:	f026 0607 	bic.w	r6, r6, #7
 8007a26:	1d23      	adds	r3, r4, #4
 8007a28:	1af2      	subs	r2, r6, r3
 8007a2a:	d0b6      	beq.n	800799a <_malloc_r+0x22>
 8007a2c:	1b9b      	subs	r3, r3, r6
 8007a2e:	50a3      	str	r3, [r4, r2]
 8007a30:	e7b3      	b.n	800799a <_malloc_r+0x22>
 8007a32:	6862      	ldr	r2, [r4, #4]
 8007a34:	42a3      	cmp	r3, r4
 8007a36:	bf0c      	ite	eq
 8007a38:	6032      	streq	r2, [r6, #0]
 8007a3a:	605a      	strne	r2, [r3, #4]
 8007a3c:	e7ec      	b.n	8007a18 <_malloc_r+0xa0>
 8007a3e:	4623      	mov	r3, r4
 8007a40:	6864      	ldr	r4, [r4, #4]
 8007a42:	e7b2      	b.n	80079aa <_malloc_r+0x32>
 8007a44:	4634      	mov	r4, r6
 8007a46:	6876      	ldr	r6, [r6, #4]
 8007a48:	e7b9      	b.n	80079be <_malloc_r+0x46>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	603b      	str	r3, [r7, #0]
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f000 f81c 	bl	8007a8c <__malloc_unlock>
 8007a54:	e7a1      	b.n	800799a <_malloc_r+0x22>
 8007a56:	6025      	str	r5, [r4, #0]
 8007a58:	e7de      	b.n	8007a18 <_malloc_r+0xa0>
 8007a5a:	bf00      	nop
 8007a5c:	200008fc 	.word	0x200008fc

08007a60 <_sbrk_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d06      	ldr	r5, [pc, #24]	; (8007a7c <_sbrk_r+0x1c>)
 8007a64:	2300      	movs	r3, #0
 8007a66:	4604      	mov	r4, r0
 8007a68:	4608      	mov	r0, r1
 8007a6a:	602b      	str	r3, [r5, #0]
 8007a6c:	f7f9 f9bc 	bl	8000de8 <_sbrk>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_sbrk_r+0x1a>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_sbrk_r+0x1a>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	20000904 	.word	0x20000904

08007a80 <__malloc_lock>:
 8007a80:	4801      	ldr	r0, [pc, #4]	; (8007a88 <__malloc_lock+0x8>)
 8007a82:	f000 b809 	b.w	8007a98 <__retarget_lock_acquire_recursive>
 8007a86:	bf00      	nop
 8007a88:	20000908 	.word	0x20000908

08007a8c <__malloc_unlock>:
 8007a8c:	4801      	ldr	r0, [pc, #4]	; (8007a94 <__malloc_unlock+0x8>)
 8007a8e:	f000 b804 	b.w	8007a9a <__retarget_lock_release_recursive>
 8007a92:	bf00      	nop
 8007a94:	20000908 	.word	0x20000908

08007a98 <__retarget_lock_acquire_recursive>:
 8007a98:	4770      	bx	lr

08007a9a <__retarget_lock_release_recursive>:
 8007a9a:	4770      	bx	lr

08007a9c <_init>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	bf00      	nop
 8007aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa2:	bc08      	pop	{r3}
 8007aa4:	469e      	mov	lr, r3
 8007aa6:	4770      	bx	lr

08007aa8 <_fini>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	bf00      	nop
 8007aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aae:	bc08      	pop	{r3}
 8007ab0:	469e      	mov	lr, r3
 8007ab2:	4770      	bx	lr
