
gun2_pollinguartbutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc0  08005bc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc8  08005bc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000484  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004f4  200004f4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015900  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003130  00000000  00000000  000359a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  00038ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001050  00000000  00000000  00039c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002306b  00000000  00000000  0003ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017365  00000000  00000000  0005dcfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccabc  00000000  00000000  00075060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141b1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d3c  00000000  00000000  00141b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b54 	.word	0x08005b54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005b54 	.word	0x08005b54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <button>:
char tbuffer[5];
extern UART_HandleTypeDef huart2;


void button (void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_Delay(150);
 8000578:	2096      	movs	r0, #150	; 0x96
 800057a:	f000 fd8f 	bl	800109c <HAL_Delay>
	HAL_UART_Transmit(&huart2,(uint8_t*)tbuffer,sprintf(tbuffer,"Hello\n"),100);
 800057e:	4906      	ldr	r1, [pc, #24]	; (8000598 <button+0x24>)
 8000580:	4806      	ldr	r0, [pc, #24]	; (800059c <button+0x28>)
 8000582:	f004 ff69 	bl	8005458 <siprintf>
 8000586:	4603      	mov	r3, r0
 8000588:	b29a      	uxth	r2, r3
 800058a:	2364      	movs	r3, #100	; 0x64
 800058c:	4903      	ldr	r1, [pc, #12]	; (800059c <button+0x28>)
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <button+0x2c>)
 8000590:	f003 fe18 	bl	80041c4 <HAL_UART_Transmit>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08005b6c 	.word	0x08005b6c
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	20000188 	.word	0x20000188

080005a4 <led>:

extern char rbuffer[5];
extern UART_HandleTypeDef huart2;

void led (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

	switch(rbuffer[0])
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <led+0x94>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	3b31      	subs	r3, #49	; 0x31
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d826      	bhi.n	8000600 <led+0x5c>
 80005b2:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <led+0x14>)
 80005b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b8:	080005c9 	.word	0x080005c9
 80005bc:	080005d7 	.word	0x080005d7
 80005c0:	080005e5 	.word	0x080005e5
 80005c4:	080005f3 	.word	0x080005f3
	{
		case '1':
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ce:	481b      	ldr	r0, [pc, #108]	; (800063c <led+0x98>)
 80005d0:	f001 f822 	bl	8001618 <HAL_GPIO_WritePin>
			break;
 80005d4:	e02d      	b.n	8000632 <led+0x8e>
		case '2':
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005dc:	4817      	ldr	r0, [pc, #92]	; (800063c <led+0x98>)
 80005de:	f001 f81b 	bl	8001618 <HAL_GPIO_WritePin>
			break;
 80005e2:	e026      	b.n	8000632 <led+0x8e>
		case '3':
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ea:	4814      	ldr	r0, [pc, #80]	; (800063c <led+0x98>)
 80005ec:	f001 f814 	bl	8001618 <HAL_GPIO_WritePin>
			break;
 80005f0:	e01f      	b.n	8000632 <led+0x8e>
		case '4':
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f8:	4810      	ldr	r0, [pc, #64]	; (800063c <led+0x98>)
 80005fa:	f001 f80d 	bl	8001618 <HAL_GPIO_WritePin>
			break;
 80005fe:	e018      	b.n	8000632 <led+0x8e>
		default:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000606:	480d      	ldr	r0, [pc, #52]	; (800063c <led+0x98>)
 8000608:	f001 f806 	bl	8001618 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <led+0x98>)
 8000614:	f001 f800 	bl	8001618 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	4807      	ldr	r0, [pc, #28]	; (800063c <led+0x98>)
 8000620:	f000 fffa 	bl	8001618 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <led+0x98>)
 800062c:	f000 fff4 	bl	8001618 <HAL_GPIO_WritePin>
	}

}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200001d0 	.word	0x200001d0
 800063c:	40020c00 	.word	0x40020c00

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fcb8 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f864 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f98a 	bl	8000964 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000650:	f000 f8ca 	bl	80007e8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000654:	f000 f8f6 	bl	8000844 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000658:	f000 f924 	bl	80008a4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800065c:	f000 f958 	bl	8000910 <MX_USART2_UART_Init>
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */

	  HAL_Delay(100);
 8000660:	2064      	movs	r0, #100	; 0x64
 8000662:	f000 fd1b 	bl	800109c <HAL_Delay>

	  	  	if (status==0 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_RESET))
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <main+0xc4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10a      	bne.n	8000684 <main+0x44>
 800066e:	2101      	movs	r1, #1
 8000670:	4825      	ldr	r0, [pc, #148]	; (8000708 <main+0xc8>)
 8000672:	f000 ffb9 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d103      	bne.n	8000684 <main+0x44>
	  	  	{
	  	  		//while((HAL_GPIO_ReadPin(GPIOA,button6Stream_Pin)==GPIO_PIN_SET));

	  	  		status=0;
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <main+0xc4>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	e02d      	b.n	80006e0 <main+0xa0>
	  	  	}
	  	  	//sadece buton low olduğunda ve status=0 olduğunda buton flagini 1 yapıyoruz ve buton okuması gerçekleştiriyoruz
	  	  	else if( (status==0 &&  HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET) )
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <main+0xc4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d10c      	bne.n	80006a6 <main+0x66>
 800068c:	2101      	movs	r1, #1
 800068e:	481e      	ldr	r0, [pc, #120]	; (8000708 <main+0xc8>)
 8000690:	f000 ffaa 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b01      	cmp	r3, #1
 8000698:	d105      	bne.n	80006a6 <main+0x66>
	  	  	{
	  	  		status=1;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <main+0xc4>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]

	  	  		button();
 80006a0:	f7ff ff68 	bl	8000574 <button>
 80006a4:	e01c      	b.n	80006e0 <main+0xa0>
	  	  	}
	  	  	else if (status==1 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_RESET))
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <main+0xc4>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d10a      	bne.n	80006c4 <main+0x84>
 80006ae:	2101      	movs	r1, #1
 80006b0:	4815      	ldr	r0, [pc, #84]	; (8000708 <main+0xc8>)
 80006b2:	f000 ff99 	bl	80015e8 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d103      	bne.n	80006c4 <main+0x84>
	  	  	{
	  	  		status=0;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <main+0xc4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	e00d      	b.n	80006e0 <main+0xa0>
	  	  	}
	  	  	else if (status==1 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET))
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <main+0xc4>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d109      	bne.n	80006e0 <main+0xa0>
 80006cc:	2101      	movs	r1, #1
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <main+0xc8>)
 80006d0:	f000 ff8a 	bl	80015e8 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d102      	bne.n	80006e0 <main+0xa0>
	  	  	{
	  	  		status=1;
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <main+0xc4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
	  	  	}
	  	  	else {}

	   	   HAL_UART_Receive(&huart2, (uint8_t*)rbuffer, 1 , 100);
 80006e0:	2364      	movs	r3, #100	; 0x64
 80006e2:	2201      	movs	r2, #1
 80006e4:	4909      	ldr	r1, [pc, #36]	; (800070c <main+0xcc>)
 80006e6:	480a      	ldr	r0, [pc, #40]	; (8000710 <main+0xd0>)
 80006e8:	f003 fdfe 	bl	80042e8 <HAL_UART_Receive>

	  	  	if (rbuffer[0] != '\0')
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <main+0xcc>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0b5      	beq.n	8000660 <main+0x20>
	  	  	{
	  	  		led();
 80006f4:	f7ff ff56 	bl	80005a4 <led>
	  	  		memset(rbuffer,'\0',sizeof(rbuffer));
 80006f8:	2205      	movs	r2, #5
 80006fa:	2100      	movs	r1, #0
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <main+0xcc>)
 80006fe:	f004 fdb3 	bl	8005268 <memset>
	  HAL_Delay(100);
 8000702:	e7ad      	b.n	8000660 <main+0x20>
 8000704:	200001cc 	.word	0x200001cc
 8000708:	40020000 	.word	0x40020000
 800070c:	200001d0 	.word	0x200001d0
 8000710:	20000188 	.word	0x20000188

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fda0 	bl	8005268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a27      	ldr	r2, [pc, #156]	; (80007e0 <SystemClock_Config+0xcc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <SystemClock_Config+0xd0>)
 800075e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000784:	2308      	movs	r3, #8
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000788:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000792:	2307      	movs	r3, #7
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fe64 	bl	8003468 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007a6:	f000 f9db 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2105      	movs	r1, #5
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 f8c5 	bl	8003958 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007d4:	f000 f9c4 	bl	8000b60 <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3750      	adds	r7, #80	; 0x50
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C1_Init+0x50>)
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <MX_I2C1_Init+0x54>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C1_Init+0x50>)
 80007f4:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_I2C1_Init+0x58>)
 80007f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_I2C1_Init+0x50>)
 8000806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800080a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_I2C1_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_I2C1_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_I2C1_Init+0x50>)
 8000826:	f002 f83b 	bl	80028a0 <HAL_I2C_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000830:	f000 f996 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000094 	.word	0x20000094
 800083c:	40005400 	.word	0x40005400
 8000840:	000186a0 	.word	0x000186a0

08000844 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_I2S3_Init+0x54>)
 800084a:	4a14      	ldr	r2, [pc, #80]	; (800089c <MX_I2S3_Init+0x58>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2S3_Init+0x54>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_I2S3_Init+0x54>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_I2S3_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_I2S3_Init+0x54>)
 8000864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000868:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_I2S3_Init+0x54>)
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <MX_I2S3_Init+0x5c>)
 800086e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_I2S3_Init+0x54>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_I2S3_Init+0x54>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_I2S3_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_I2S3_Init+0x54>)
 8000884:	f002 f950 	bl	8002b28 <HAL_I2S_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800088e:	f000 f967 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000e8 	.word	0x200000e8
 800089c:	40003c00 	.word	0x40003c00
 80008a0:	00017700 	.word	0x00017700

080008a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_SPI1_Init+0x64>)
 80008aa:	4a18      	ldr	r2, [pc, #96]	; (800090c <MX_SPI1_Init+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_SPI1_Init+0x64>)
 80008b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_SPI1_Init+0x64>)
 80008d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_SPI1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_SPI1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_SPI1_Init+0x64>)
 80008f0:	220a      	movs	r2, #10
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_SPI1_Init+0x64>)
 80008f6:	f003 fb8f 	bl	8004018 <HAL_SPI_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000900:	f000 f92e 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000130 	.word	0x20000130
 800090c:	40013000 	.word	0x40013000

08000910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <MX_USART2_UART_Init+0x50>)
 8000918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_USART2_UART_Init+0x4c>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USART2_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USART2_UART_Init+0x4c>)
 8000948:	f003 fbef 	bl	800412a <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000952:	f000 f905 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000188 	.word	0x20000188
 8000960:	40004400 	.word	0x40004400

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	4b72      	ldr	r3, [pc, #456]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a71      	ldr	r2, [pc, #452]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000984:	f043 0310 	orr.w	r3, r3, #16
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b6f      	ldr	r3, [pc, #444]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	4b6b      	ldr	r3, [pc, #428]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a6a      	ldr	r2, [pc, #424]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b68      	ldr	r3, [pc, #416]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b64      	ldr	r3, [pc, #400]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a63      	ldr	r2, [pc, #396]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b61      	ldr	r3, [pc, #388]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b5d      	ldr	r3, [pc, #372]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a5c      	ldr	r2, [pc, #368]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a55      	ldr	r2, [pc, #340]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a4e      	ldr	r2, [pc, #312]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2108      	movs	r1, #8
 8000a26:	4849      	ldr	r0, [pc, #292]	; (8000b4c <MX_GPIO_Init+0x1e8>)
 8000a28:	f000 fdf6 	bl	8001618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4847      	ldr	r0, [pc, #284]	; (8000b50 <MX_GPIO_Init+0x1ec>)
 8000a32:	f000 fdf1 	bl	8001618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a36:	2200      	movs	r2, #0
 8000a38:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a3c:	4845      	ldr	r0, [pc, #276]	; (8000b54 <MX_GPIO_Init+0x1f0>)
 8000a3e:	f000 fdeb 	bl	8001618 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a42:	2308      	movs	r3, #8
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	483c      	ldr	r0, [pc, #240]	; (8000b4c <MX_GPIO_Init+0x1e8>)
 8000a5a:	f000 fc29 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4836      	ldr	r0, [pc, #216]	; (8000b50 <MX_GPIO_Init+0x1ec>)
 8000a76:	f000 fc1b 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a8a:	2305      	movs	r3, #5
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	482e      	ldr	r0, [pc, #184]	; (8000b50 <MX_GPIO_Init+0x1ec>)
 8000a96:	f000 fc0b 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a9e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	482a      	ldr	r0, [pc, #168]	; (8000b58 <MX_GPIO_Init+0x1f4>)
 8000ab0:	f000 fbfe 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4825      	ldr	r0, [pc, #148]	; (8000b5c <MX_GPIO_Init+0x1f8>)
 8000ac8:	f000 fbf2 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	481c      	ldr	r0, [pc, #112]	; (8000b5c <MX_GPIO_Init+0x1f8>)
 8000aea:	f000 fbe1 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aee:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000af2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4813      	ldr	r0, [pc, #76]	; (8000b54 <MX_GPIO_Init+0x1f0>)
 8000b08:	f000 fbd2 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_GPIO_Init+0x1f0>)
 8000b20:	f000 fbc6 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b28:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_GPIO_Init+0x1e8>)
 8000b3a:	f000 fbb9 	bl	80012b0 <HAL_GPIO_Init>

}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020c00 	.word	0x40020c00
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020400 	.word	0x40020400

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000baa:	2007      	movs	r0, #7
 8000bac:	f000 fb4c 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_I2C_MspInit+0x84>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d12c      	bne.n	8000c38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bfa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c00:	2312      	movs	r3, #18
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	480c      	ldr	r0, [pc, #48]	; (8000c48 <HAL_I2C_MspInit+0x8c>)
 8000c18:	f000 fb4a 	bl	80012b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40005400 	.word	0x40005400
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020400 	.word	0x40020400

08000c4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a31      	ldr	r2, [pc, #196]	; (8000d3c <HAL_I2S_MspInit+0xf0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d15a      	bne.n	8000d32 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c80:	23c0      	movs	r3, #192	; 0xc0
 8000c82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 f883 	bl	8003d98 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c98:	f7ff ff62 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <HAL_I2S_MspInit+0xf4>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <HAL_I2S_MspInit+0xf4>)
 8000ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <HAL_I2S_MspInit+0xf4>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <HAL_I2S_MspInit+0xf4>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <HAL_I2S_MspInit+0xf4>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_I2S_MspInit+0xf4>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_I2S_MspInit+0xf4>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <HAL_I2S_MspInit+0xf4>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_I2S_MspInit+0xf4>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d00:	2306      	movs	r3, #6
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480e      	ldr	r0, [pc, #56]	; (8000d44 <HAL_I2S_MspInit+0xf8>)
 8000d0c:	f000 fad0 	bl	80012b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d10:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d22:	2306      	movs	r3, #6
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4806      	ldr	r0, [pc, #24]	; (8000d48 <HAL_I2S_MspInit+0xfc>)
 8000d2e:	f000 fabf 	bl	80012b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3738      	adds	r7, #56	; 0x38
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40003c00 	.word	0x40003c00
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40020800 	.word	0x40020800

08000d4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <HAL_SPI_MspInit+0x84>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12b      	bne.n	8000dc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_SPI_MspInit+0x88>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_SPI_MspInit+0x88>)
 8000d78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_SPI_MspInit+0x88>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_SPI_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <HAL_SPI_MspInit+0x88>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_SPI_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000da6:	23e0      	movs	r3, #224	; 0xe0
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db6:	2305      	movs	r3, #5
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <HAL_SPI_MspInit+0x8c>)
 8000dc2:	f000 fa75 	bl	80012b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40013000 	.word	0x40013000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <HAL_UART_MspInit+0x84>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d12b      	bne.n	8000e56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_UART_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e36:	230c      	movs	r3, #12
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e46:	2307      	movs	r3, #7
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <HAL_UART_MspInit+0x8c>)
 8000e52:	f000 fa2d 	bl	80012b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40004400 	.word	0x40004400
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <NMI_Handler+0x4>

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <MemManage_Handler+0x4>

08000e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f8d0 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <OTG_FS_IRQHandler+0x10>)
 8000ec6:	f000 fbc0 	bl	800164a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200001e0 	.word	0x200001e0

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f004 f986 	bl	8005214 <__errno>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <_sbrk+0x64>)
 8000f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20020000 	.word	0x20020000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	200001d8 	.word	0x200001d8
 8000f3c:	200004f8 	.word	0x200004f8

08000f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff ffd7 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f004 f945 	bl	8005220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fb53 	bl	8000640 <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fa8:	08005bd0 	.word	0x08005bd0
  ldr r2, =_sbss
 8000fac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fb0:	200004f4 	.word	0x200004f4

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_Init+0x40>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_Init+0x40>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x40>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f931 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f808 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fdbe 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x54>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x58>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f93b 	bl	8001296 <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f000 f911 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_InitTick+0x5c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000000 	.word	0x20000000
 8001054:	20000008 	.word	0x20000008
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008
 8001080:	200001dc 	.word	0x200001dc

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200001dc 	.word	0x200001dc

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff ffee 	bl	8001084 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c2:	bf00      	nop
 80010c4:	f7ff ffde 	bl	8001084 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff47 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff5c 	bl	800112c <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffb0 	bl	8001204 <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	e16b      	b.n	80015a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012cc:	2201      	movs	r2, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f040 815a 	bne.w	800159e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d005      	beq.n	8001302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d130      	bne.n	8001364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001338:	2201      	movs	r2, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	f003 0201 	and.w	r2, r3, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b03      	cmp	r3, #3
 800136e:	d017      	beq.n	80013a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d123      	bne.n	80013f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	08da      	lsrs	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3208      	adds	r2, #8
 80013b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	220f      	movs	r2, #15
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	08da      	lsrs	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3208      	adds	r2, #8
 80013ee:	69b9      	ldr	r1, [r7, #24]
 80013f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80b4 	beq.w	800159e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b60      	ldr	r3, [pc, #384]	; (80015bc <HAL_GPIO_Init+0x30c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a5f      	ldr	r2, [pc, #380]	; (80015bc <HAL_GPIO_Init+0x30c>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <HAL_GPIO_Init+0x30c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001452:	4a5b      	ldr	r2, [pc, #364]	; (80015c0 <HAL_GPIO_Init+0x310>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <HAL_GPIO_Init+0x314>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d02b      	beq.n	80014d6 <HAL_GPIO_Init+0x226>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a51      	ldr	r2, [pc, #324]	; (80015c8 <HAL_GPIO_Init+0x318>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d025      	beq.n	80014d2 <HAL_GPIO_Init+0x222>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a50      	ldr	r2, [pc, #320]	; (80015cc <HAL_GPIO_Init+0x31c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01f      	beq.n	80014ce <HAL_GPIO_Init+0x21e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4f      	ldr	r2, [pc, #316]	; (80015d0 <HAL_GPIO_Init+0x320>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0x21a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4e      	ldr	r2, [pc, #312]	; (80015d4 <HAL_GPIO_Init+0x324>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x216>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4d      	ldr	r2, [pc, #308]	; (80015d8 <HAL_GPIO_Init+0x328>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x212>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4c      	ldr	r2, [pc, #304]	; (80015dc <HAL_GPIO_Init+0x32c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x20e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4b      	ldr	r2, [pc, #300]	; (80015e0 <HAL_GPIO_Init+0x330>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x20a>
 80014b6:	2307      	movs	r3, #7
 80014b8:	e00e      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014ba:	2308      	movs	r3, #8
 80014bc:	e00c      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014be:	2306      	movs	r3, #6
 80014c0:	e00a      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014c2:	2305      	movs	r3, #5
 80014c4:	e008      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014d6:	2300      	movs	r3, #0
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	f002 0203 	and.w	r2, r2, #3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e8:	4935      	ldr	r1, [pc, #212]	; (80015c0 <HAL_GPIO_Init+0x310>)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <HAL_GPIO_Init+0x334>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151a:	4a32      	ldr	r2, [pc, #200]	; (80015e4 <HAL_GPIO_Init+0x334>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001520:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_GPIO_Init+0x334>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001544:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <HAL_GPIO_Init+0x334>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_GPIO_Init+0x334>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156e:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <HAL_GPIO_Init+0x334>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_GPIO_Init+0x334>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <HAL_GPIO_Init+0x334>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3301      	adds	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b0f      	cmp	r3, #15
 80015a8:	f67f ae90 	bls.w	80012cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40013800 	.word	0x40013800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40021400 	.word	0x40021400
 80015dc:	40021800 	.word	0x40021800
 80015e0:	40021c00 	.word	0x40021c00
 80015e4:	40013c00 	.word	0x40013c00

080015e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e001      	b.n	800160a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
 8001624:	4613      	mov	r3, r2
 8001626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001628:	787b      	ldrb	r3, [r7, #1]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001634:	e003      	b.n	800163e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	041a      	lsls	r2, r3, #16
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fab6 	bl	8004bd2 <USB_GetMode>
 8001666:	4603      	mov	r3, r0
 8001668:	2b01      	cmp	r3, #1
 800166a:	f040 80f6 	bne.w	800185a <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f003 fa9a 	bl	8004bac <USB_ReadInterrupts>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80ec 	beq.w	8001858 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f003 fa91 	bl	8004bac <USB_ReadInterrupts>
 800168a:	4603      	mov	r3, r0
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001694:	d104      	bne.n	80016a0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800169e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fa81 	bl	8004bac <USB_ReadInterrupts>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016b4:	d104      	bne.n	80016c0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fa71 	bl	8004bac <USB_ReadInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016d4:	d104      	bne.n	80016e0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016de:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fa61 	bl	8004bac <USB_ReadInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d103      	bne.n	80016fc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2202      	movs	r2, #2
 80016fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fa53 	bl	8004bac <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800170c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001710:	d11c      	bne.n	800174c <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800171a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10f      	bne.n	800174c <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800172c:	2110      	movs	r1, #16
 800172e:	6938      	ldr	r0, [r7, #16]
 8001730:	f003 f980 	bl	8004a34 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001734:	6938      	ldr	r0, [r7, #16]
 8001736:	f003 f9b1 	bl	8004a9c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2101      	movs	r1, #1
 8001740:	4618      	mov	r0, r3
 8001742:	f003 fa54 	bl	8004bee <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f003 fce5 	bl	8005116 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f003 fa2b 	bl	8004bac <USB_ReadInterrupts>
 8001756:	4603      	mov	r3, r0
 8001758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d102      	bne.n	8001768 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f001 f829 	bl	80027ba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fa1d 	bl	8004bac <USB_ReadInterrupts>
 8001772:	4603      	mov	r3, r0
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b08      	cmp	r3, #8
 800177a:	d106      	bne.n	800178a <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f003 fcae 	bl	80050de <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2208      	movs	r2, #8
 8001788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f003 fa0c 	bl	8004bac <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b10      	cmp	r3, #16
 800179c:	d101      	bne.n	80017a2 <HAL_HCD_IRQHandler+0x158>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_HCD_IRQHandler+0x15a>
 80017a2:	2300      	movs	r3, #0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d012      	beq.n	80017ce <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0210 	bic.w	r2, r2, #16
 80017b6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 ff2c 	bl	8002616 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0210 	orr.w	r2, r2, #16
 80017cc:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 f9ea 	bl	8004bac <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017e2:	d13a      	bne.n	800185a <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fa3a 	bl	8004c62 <USB_HC_ReadInterrupt>
 80017ee:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e025      	b.n	8001842 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d018      	beq.n	800183c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4413      	add	r3, r2
 8001812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800181c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001820:	d106      	bne.n	8001830 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4619      	mov	r1, r3
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f836 	bl	800189a <HCD_HC_IN_IRQHandler>
 800182e:	e005      	b.n	800183c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4619      	mov	r1, r3
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fb84 	bl	8001f44 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	429a      	cmp	r2, r3
 800184a:	d3d4      	bcc.n	80017f6 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	e000      	b.n	800185a <HAL_HCD_IRQHandler+0x210>
      return;
 8001858:	bf00      	nop
    }
  }
}
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_HCD_Stop+0x16>
 8001872:	2302      	movs	r3, #2
 8001874:	e00d      	b.n	8001892 <HAL_HCD_Stop+0x32>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f003 fafa 	bl	8004e7c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	015a      	lsls	r2, r3, #5
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d11a      	bne.n	8001900 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d6:	461a      	mov	r2, r3
 80018d8:	2304      	movs	r3, #4
 80018da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3361      	adds	r3, #97	; 0x61
 80018ea:	2206      	movs	r2, #6
 80018ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 f9c3 	bl	8004c84 <USB_HC_Halt>
 80018fe:	e0af      	b.n	8001a60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	015a      	lsls	r2, r3, #5
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4413      	add	r3, r2
 8001908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001916:	d11b      	bne.n	8001950 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	015a      	lsls	r2, r3, #5
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4413      	add	r3, r2
 8001920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001924:	461a      	mov	r2, r3
 8001926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800192a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	212c      	movs	r1, #44	; 0x2c
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	3361      	adds	r3, #97	; 0x61
 800193a:	2207      	movs	r2, #7
 800193c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f003 f99b 	bl	8004c84 <USB_HC_Halt>
 800194e:	e087      	b.n	8001a60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4413      	add	r3, r2
 8001958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b20      	cmp	r3, #32
 8001964:	d109      	bne.n	800197a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4413      	add	r3, r2
 800196e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001972:	461a      	mov	r2, r3
 8001974:	2320      	movs	r3, #32
 8001976:	6093      	str	r3, [r2, #8]
 8001978:	e072      	b.n	8001a60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4413      	add	r3, r2
 8001982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b08      	cmp	r3, #8
 800198e:	d11a      	bne.n	80019c6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	015a      	lsls	r2, r3, #5
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4413      	add	r3, r2
 8001998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199c:	461a      	mov	r2, r3
 800199e:	2308      	movs	r3, #8
 80019a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	3361      	adds	r3, #97	; 0x61
 80019b0:	2205      	movs	r2, #5
 80019b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 f960 	bl	8004c84 <USB_HC_Halt>
 80019c4:	e04c      	b.n	8001a60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	015a      	lsls	r2, r3, #5
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4413      	add	r3, r2
 80019ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019dc:	d11b      	bne.n	8001a16 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ea:	461a      	mov	r2, r3
 80019ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	212c      	movs	r1, #44	; 0x2c
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	3361      	adds	r3, #97	; 0x61
 8001a00:	2208      	movs	r2, #8
 8001a02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 f938 	bl	8004c84 <USB_HC_Halt>
 8001a14:	e024      	b.n	8001a60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a28:	2b80      	cmp	r3, #128	; 0x80
 8001a2a:	d119      	bne.n	8001a60 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	015a      	lsls	r2, r3, #5
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4413      	add	r3, r2
 8001a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3361      	adds	r3, #97	; 0x61
 8001a4c:	2206      	movs	r2, #6
 8001a4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 f912 	bl	8004c84 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a76:	d112      	bne.n	8001a9e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 f8fe 	bl	8004c84 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	015a      	lsls	r2, r3, #5
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a94:	461a      	mov	r2, r3
 8001a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a9a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a9c:	e24e      	b.n	8001f3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	f040 80df 	bne.w	8001c74 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d019      	beq.n	8001af2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3348      	adds	r3, #72	; 0x48
 8001acc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	0159      	lsls	r1, r3, #5
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	440b      	add	r3, r1
 8001ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ae0:	1ad2      	subs	r2, r2, r3
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	202c      	movs	r0, #44	; 0x2c
 8001ae8:	fb00 f303 	mul.w	r3, r0, r3
 8001aec:	440b      	add	r3, r1
 8001aee:	3350      	adds	r3, #80	; 0x50
 8001af0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	212c      	movs	r1, #44	; 0x2c
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	3361      	adds	r3, #97	; 0x61
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	212c      	movs	r1, #44	; 0x2c
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	335c      	adds	r3, #92	; 0x5c
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b22:	461a      	mov	r2, r3
 8001b24:	2301      	movs	r3, #1
 8001b26:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	333f      	adds	r3, #63	; 0x3f
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	333f      	adds	r3, #63	; 0x3f
 8001b4a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d111      	bne.n	8001b74 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 f892 	bl	8004c84 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2310      	movs	r3, #16
 8001b70:	6093      	str	r3, [r2, #8]
 8001b72:	e03a      	b.n	8001bea <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	212c      	movs	r1, #44	; 0x2c
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	333f      	adds	r3, #63	; 0x3f
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d009      	beq.n	8001b9c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	212c      	movs	r1, #44	; 0x2c
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	333f      	adds	r3, #63	; 0x3f
 8001b96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d126      	bne.n	8001bea <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	0151      	lsls	r1, r2, #5
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	440a      	add	r2, r1
 8001bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	212c      	movs	r1, #44	; 0x2c
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3360      	adds	r3, #96	; 0x60
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	b2d9      	uxtb	r1, r3
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	202c      	movs	r0, #44	; 0x2c
 8001bd8:	fb00 f303 	mul.w	r3, r0, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3360      	adds	r3, #96	; 0x60
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f003 faa4 	bl	8005132 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d12b      	bne.n	8001c4a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	212c      	movs	r1, #44	; 0x2c
 8001bf8:	fb01 f303 	mul.w	r3, r1, r3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3348      	adds	r3, #72	; 0x48
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	202c      	movs	r0, #44	; 0x2c
 8001c08:	fb00 f202 	mul.w	r2, r0, r2
 8001c0c:	440a      	add	r2, r1
 8001c0e:	3240      	adds	r2, #64	; 0x40
 8001c10:	8812      	ldrh	r2, [r2, #0]
 8001c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 818e 	beq.w	8001f3c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	212c      	movs	r1, #44	; 0x2c
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3354      	adds	r3, #84	; 0x54
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f083 0301 	eor.w	r3, r3, #1
 8001c34:	b2d8      	uxtb	r0, r3
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	3354      	adds	r3, #84	; 0x54
 8001c44:	4602      	mov	r2, r0
 8001c46:	701a      	strb	r2, [r3, #0]
}
 8001c48:	e178      	b.n	8001f3c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	3354      	adds	r3, #84	; 0x54
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	f083 0301 	eor.w	r3, r3, #1
 8001c5e:	b2d8      	uxtb	r0, r3
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3354      	adds	r3, #84	; 0x54
 8001c6e:	4602      	mov	r2, r0
 8001c70:	701a      	strb	r2, [r3, #0]
}
 8001c72:	e163      	b.n	8001f3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	f040 80f6 	bne.w	8001e78 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3361      	adds	r3, #97	; 0x61
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d109      	bne.n	8001cb4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3360      	adds	r3, #96	; 0x60
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e0c9      	b.n	8001e48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3361      	adds	r3, #97	; 0x61
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d109      	bne.n	8001cdc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3360      	adds	r3, #96	; 0x60
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	e0b5      	b.n	8001e48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3361      	adds	r3, #97	; 0x61
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b06      	cmp	r3, #6
 8001cee:	d009      	beq.n	8001d04 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3361      	adds	r3, #97	; 0x61
 8001cfe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d150      	bne.n	8001da6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	335c      	adds	r3, #92	; 0x5c
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	202c      	movs	r0, #44	; 0x2c
 8001d1c:	fb00 f303 	mul.w	r3, r0, r3
 8001d20:	440b      	add	r3, r1
 8001d22:	335c      	adds	r3, #92	; 0x5c
 8001d24:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	212c      	movs	r1, #44	; 0x2c
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	335c      	adds	r3, #92	; 0x5c
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d912      	bls.n	8001d60 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	212c      	movs	r1, #44	; 0x2c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	335c      	adds	r3, #92	; 0x5c
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3360      	adds	r3, #96	; 0x60
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d5e:	e073      	b.n	8001e48 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	212c      	movs	r1, #44	; 0x2c
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3360      	adds	r3, #96	; 0x60
 8001d6e:	2202      	movs	r2, #2
 8001d70:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d88:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d90:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001da4:	e050      	b.n	8001e48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	212c      	movs	r1, #44	; 0x2c
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	3361      	adds	r3, #97	; 0x61
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d122      	bne.n	8001e00 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3360      	adds	r3, #96	; 0x60
 8001dc8:	2202      	movs	r2, #2
 8001dca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001de2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	461a      	mov	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e023      	b.n	8001e48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	212c      	movs	r1, #44	; 0x2c
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3361      	adds	r3, #97	; 0x61
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b07      	cmp	r3, #7
 8001e12:	d119      	bne.n	8001e48 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	212c      	movs	r1, #44	; 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	335c      	adds	r3, #92	; 0x5c
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	202c      	movs	r0, #44	; 0x2c
 8001e2c:	fb00 f303 	mul.w	r3, r0, r3
 8001e30:	440b      	add	r3, r1
 8001e32:	335c      	adds	r3, #92	; 0x5c
 8001e34:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	212c      	movs	r1, #44	; 0x2c
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	3360      	adds	r3, #96	; 0x60
 8001e44:	2204      	movs	r2, #4
 8001e46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	461a      	mov	r2, r3
 8001e56:	2302      	movs	r3, #2
 8001e58:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	b2d9      	uxtb	r1, r3
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	202c      	movs	r0, #44	; 0x2c
 8001e64:	fb00 f303 	mul.w	r3, r0, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3360      	adds	r3, #96	; 0x60
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f003 f95e 	bl	8005132 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001e76:	e061      	b.n	8001f3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d156      	bne.n	8001f3c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	333f      	adds	r3, #63	; 0x3f
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d111      	bne.n	8001ec6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	335c      	adds	r3, #92	; 0x5c
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 fee0 	bl	8004c84 <USB_HC_Halt>
 8001ec4:	e031      	b.n	8001f2a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	333f      	adds	r3, #63	; 0x3f
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	212c      	movs	r1, #44	; 0x2c
 8001ee0:	fb01 f303 	mul.w	r3, r1, r3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	333f      	adds	r3, #63	; 0x3f
 8001ee8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d11d      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	335c      	adds	r3, #92	; 0x5c
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d110      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	3361      	adds	r3, #97	; 0x61
 8001f16:	2203      	movs	r2, #3
 8001f18:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f002 fead 	bl	8004c84 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	461a      	mov	r2, r3
 8001f38:	2310      	movs	r3, #16
 8001f3a:	6093      	str	r3, [r2, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d11a      	bne.n	8001faa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	461a      	mov	r2, r3
 8001f82:	2304      	movs	r3, #4
 8001f84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	212c      	movs	r1, #44	; 0x2c
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	3361      	adds	r3, #97	; 0x61
 8001f94:	2206      	movs	r2, #6
 8001f96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fe6e 	bl	8004c84 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001fa8:	e331      	b.n	800260e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d12e      	bne.n	800201e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2320      	movs	r3, #32
 8001fd0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	333d      	adds	r3, #61	; 0x3d
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	f040 8313 	bne.w	800260e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	333d      	adds	r3, #61	; 0x3d
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	4413      	add	r3, r2
 8002006:	3360      	adds	r3, #96	; 0x60
 8002008:	2202      	movs	r2, #2
 800200a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f002 fe34 	bl	8004c84 <USB_HC_Halt>
}
 800201c:	e2f7      	b.n	800260e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4413      	add	r3, r2
 8002026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002034:	d112      	bne.n	800205c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4413      	add	r3, r2
 800203e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002042:	461a      	mov	r2, r3
 8002044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002048:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fe15 	bl	8004c84 <USB_HC_Halt>
}
 800205a:	e2d8      	b.n	800260e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	4413      	add	r3, r2
 8002064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d140      	bne.n	80020f4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	335c      	adds	r3, #92	; 0x5c
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d111      	bne.n	80020be <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	333d      	adds	r3, #61	; 0x3d
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	461a      	mov	r2, r3
 80020ba:	2340      	movs	r3, #64	; 0x40
 80020bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	461a      	mov	r2, r3
 80020cc:	2301      	movs	r3, #1
 80020ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3361      	adds	r3, #97	; 0x61
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fdc9 	bl	8004c84 <USB_HC_Halt>
}
 80020f2:	e28c      	b.n	800260e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	d12c      	bne.n	8002164 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3361      	adds	r3, #97	; 0x61
 8002118:	2204      	movs	r2, #4
 800211a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	333d      	adds	r3, #61	; 0x3d
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	335c      	adds	r3, #92	; 0x5c
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f002 fd9a 	bl	8004c84 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	461a      	mov	r2, r3
 800215e:	2340      	movs	r3, #64	; 0x40
 8002160:	6093      	str	r3, [r2, #8]
}
 8002162:	e254      	b.n	800260e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b08      	cmp	r3, #8
 8002178:	d11a      	bne.n	80021b0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	461a      	mov	r2, r3
 8002188:	2308      	movs	r3, #8
 800218a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3361      	adds	r3, #97	; 0x61
 800219a:	2205      	movs	r2, #5
 800219c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f002 fd6b 	bl	8004c84 <USB_HC_Halt>
}
 80021ae:	e22e      	b.n	800260e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d140      	bne.n	8002248 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	335c      	adds	r3, #92	; 0x5c
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3361      	adds	r3, #97	; 0x61
 80021e6:	2203      	movs	r2, #3
 80021e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	333d      	adds	r3, #61	; 0x3d
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d112      	bne.n	8002224 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	333c      	adds	r3, #60	; 0x3c
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d108      	bne.n	8002224 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	333d      	adds	r3, #61	; 0x3d
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f002 fd28 	bl	8004c84 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002240:	461a      	mov	r2, r3
 8002242:	2310      	movs	r3, #16
 8002244:	6093      	str	r3, [r2, #8]
}
 8002246:	e1e2      	b.n	800260e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	2b80      	cmp	r3, #128	; 0x80
 800225c:	d164      	bne.n	8002328 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d111      	bne.n	800228a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	3361      	adds	r3, #97	; 0x61
 8002274:	2206      	movs	r2, #6
 8002276:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f002 fcfe 	bl	8004c84 <USB_HC_Halt>
 8002288:	e044      	b.n	8002314 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	335c      	adds	r3, #92	; 0x5c
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	202c      	movs	r0, #44	; 0x2c
 80022a2:	fb00 f303 	mul.w	r3, r0, r3
 80022a6:	440b      	add	r3, r1
 80022a8:	335c      	adds	r3, #92	; 0x5c
 80022aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	335c      	adds	r3, #92	; 0x5c
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d920      	bls.n	8002302 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	212c      	movs	r1, #44	; 0x2c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	335c      	adds	r3, #92	; 0x5c
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3360      	adds	r3, #96	; 0x60
 80022e0:	2204      	movs	r2, #4
 80022e2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	b2d9      	uxtb	r1, r3
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	202c      	movs	r0, #44	; 0x2c
 80022ee:	fb00 f303 	mul.w	r3, r0, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3360      	adds	r3, #96	; 0x60
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f002 ff19 	bl	8005132 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002300:	e008      	b.n	8002314 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	3360      	adds	r3, #96	; 0x60
 8002310:	2202      	movs	r2, #2
 8002312:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	461a      	mov	r2, r3
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	6093      	str	r3, [r2, #8]
}
 8002326:	e172      	b.n	800260e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	4413      	add	r3, r2
 8002330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233e:	d11b      	bne.n	8002378 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3361      	adds	r3, #97	; 0x61
 800234e:	2208      	movs	r2, #8
 8002350:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f002 fc91 	bl	8004c84 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	461a      	mov	r2, r3
 8002370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002374:	6093      	str	r3, [r2, #8]
}
 8002376:	e14a      	b.n	800260e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b02      	cmp	r3, #2
 800238c:	f040 813f 	bne.w	800260e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3361      	adds	r3, #97	; 0x61
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d17d      	bne.n	80024a0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3360      	adds	r3, #96	; 0x60
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	333f      	adds	r3, #63	; 0x3f
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d00a      	beq.n	80023e0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	333f      	adds	r3, #63	; 0x3f
 80023d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023da:	2b03      	cmp	r3, #3
 80023dc:	f040 8100 	bne.w	80025e0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d113      	bne.n	8002410 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3355      	adds	r3, #85	; 0x55
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f083 0301 	eor.w	r3, r3, #1
 80023fc:	b2d8      	uxtb	r0, r3
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	3355      	adds	r3, #85	; 0x55
 800240c:	4602      	mov	r2, r0
 800240e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b01      	cmp	r3, #1
 8002416:	f040 80e3 	bne.w	80025e0 <HCD_HC_OUT_IRQHandler+0x69c>
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	334c      	adds	r3, #76	; 0x4c
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80d8 	beq.w	80025e0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	334c      	adds	r3, #76	; 0x4c
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	202c      	movs	r0, #44	; 0x2c
 8002446:	fb00 f202 	mul.w	r2, r0, r2
 800244a:	440a      	add	r2, r1
 800244c:	3240      	adds	r2, #64	; 0x40
 800244e:	8812      	ldrh	r2, [r2, #0]
 8002450:	4413      	add	r3, r2
 8002452:	3b01      	subs	r3, #1
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	202c      	movs	r0, #44	; 0x2c
 800245a:	fb00 f202 	mul.w	r2, r0, r2
 800245e:	440a      	add	r2, r1
 8002460:	3240      	adds	r2, #64	; 0x40
 8002462:	8812      	ldrh	r2, [r2, #0]
 8002464:	fbb3 f3f2 	udiv	r3, r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80b5 	beq.w	80025e0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3355      	adds	r3, #85	; 0x55
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2d8      	uxtb	r0, r3
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3355      	adds	r3, #85	; 0x55
 800249a:	4602      	mov	r2, r0
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	e09f      	b.n	80025e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	3361      	adds	r3, #97	; 0x61
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d109      	bne.n	80024c8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3360      	adds	r3, #96	; 0x60
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e08b      	b.n	80025e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3361      	adds	r3, #97	; 0x61
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d109      	bne.n	80024f0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3360      	adds	r3, #96	; 0x60
 80024ea:	2202      	movs	r2, #2
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e077      	b.n	80025e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3361      	adds	r3, #97	; 0x61
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b05      	cmp	r3, #5
 8002502:	d109      	bne.n	8002518 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3360      	adds	r3, #96	; 0x60
 8002512:	2205      	movs	r2, #5
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e063      	b.n	80025e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3361      	adds	r3, #97	; 0x61
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d009      	beq.n	8002540 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3361      	adds	r3, #97	; 0x61
 800253a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800253c:	2b08      	cmp	r3, #8
 800253e:	d14f      	bne.n	80025e0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	335c      	adds	r3, #92	; 0x5c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	202c      	movs	r0, #44	; 0x2c
 8002558:	fb00 f303 	mul.w	r3, r0, r3
 800255c:	440b      	add	r3, r1
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	335c      	adds	r3, #92	; 0x5c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d912      	bls.n	800259c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	335c      	adds	r3, #92	; 0x5c
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	2204      	movs	r2, #4
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e021      	b.n	80025e0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	212c      	movs	r1, #44	; 0x2c
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	3360      	adds	r3, #96	; 0x60
 80025aa:	2202      	movs	r2, #2
 80025ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025c4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025cc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	461a      	mov	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	461a      	mov	r2, r3
 80025ee:	2302      	movs	r3, #2
 80025f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	b2d9      	uxtb	r1, r3
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	202c      	movs	r0, #44	; 0x2c
 80025fc:	fb00 f303 	mul.w	r3, r0, r3
 8002600:	4413      	add	r3, r2
 8002602:	3360      	adds	r3, #96	; 0x60
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f002 fd92 	bl	8005132 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800260e:	bf00      	nop
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b08a      	sub	sp, #40	; 0x28
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	0c5b      	lsrs	r3, r3, #17
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800264a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d004      	beq.n	800265c <HCD_RXQLVL_IRQHandler+0x46>
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b05      	cmp	r3, #5
 8002656:	f000 80a9 	beq.w	80027ac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800265a:	e0aa      	b.n	80027b2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80a6 	beq.w	80027b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3344      	adds	r3, #68	; 0x44
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 809b 	beq.w	80027b0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	3350      	adds	r3, #80	; 0x50
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	441a      	add	r2, r3
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	202c      	movs	r0, #44	; 0x2c
 8002694:	fb00 f303 	mul.w	r3, r0, r3
 8002698:	440b      	add	r3, r1
 800269a:	334c      	adds	r3, #76	; 0x4c
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d87a      	bhi.n	8002798 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	3344      	adds	r3, #68	; 0x44
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	b292      	uxth	r2, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	f002 fa1e 	bl	8004afc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	3344      	adds	r3, #68	; 0x44
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	441a      	add	r2, r3
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	202c      	movs	r0, #44	; 0x2c
 80026da:	fb00 f303 	mul.w	r3, r0, r3
 80026de:	440b      	add	r3, r1
 80026e0:	3344      	adds	r3, #68	; 0x44
 80026e2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	3350      	adds	r3, #80	; 0x50
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	441a      	add	r2, r3
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	202c      	movs	r0, #44	; 0x2c
 80026fe:	fb00 f303 	mul.w	r3, r0, r3
 8002702:	440b      	add	r3, r1
 8002704:	3350      	adds	r3, #80	; 0x50
 8002706:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	0cdb      	lsrs	r3, r3, #19
 8002718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800271c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3340      	adds	r3, #64	; 0x40
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4293      	cmp	r3, r2
 8002734:	d13c      	bne.n	80027b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d039      	beq.n	80027b0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002752:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800275a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3354      	adds	r3, #84	; 0x54
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	f083 0301 	eor.w	r3, r3, #1
 8002782:	b2d8      	uxtb	r0, r3
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	212c      	movs	r1, #44	; 0x2c
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	4413      	add	r3, r2
 8002790:	3354      	adds	r3, #84	; 0x54
 8002792:	4602      	mov	r2, r0
 8002794:	701a      	strb	r2, [r3, #0]
      break;
 8002796:	e00b      	b.n	80027b0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	3360      	adds	r3, #96	; 0x60
 80027a6:	2204      	movs	r2, #4
 80027a8:	701a      	strb	r2, [r3, #0]
      break;
 80027aa:	e001      	b.n	80027b0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80027ac:	bf00      	nop
 80027ae:	e000      	b.n	80027b2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80027b0:	bf00      	nop
  }
}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80027e6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d10b      	bne.n	800280a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d102      	bne.n	8002802 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f002 fc7c 	bl	80050fa <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b08      	cmp	r3, #8
 8002812:	d132      	bne.n	800287a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f043 0308 	orr.w	r3, r3, #8
 800281a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b04      	cmp	r3, #4
 8002824:	d126      	bne.n	8002874 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d113      	bne.n	8002856 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002834:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002838:	d106      	bne.n	8002848 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f002 f9d4 	bl	8004bee <USB_InitFSLSPClkSel>
 8002846:	e011      	b.n	800286c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f002 f9cd 	bl	8004bee <USB_InitFSLSPClkSel>
 8002854:	e00a      	b.n	800286c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d106      	bne.n	800286c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002864:	461a      	mov	r2, r3
 8002866:	f64e 2360 	movw	r3, #60000	; 0xea60
 800286a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f002 fc6e 	bl	800514e <HAL_HCD_PortEnabled_Callback>
 8002872:	e002      	b.n	800287a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f002 fc78 	bl	800516a <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b20      	cmp	r3, #32
 8002882:	d103      	bne.n	800288c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f043 0320 	orr.w	r3, r3, #32
 800288a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e12b      	b.n	8002b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe f978 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2224      	movs	r2, #36	; 0x24
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002904:	f001 fa20 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8002908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4a81      	ldr	r2, [pc, #516]	; (8002b14 <HAL_I2C_Init+0x274>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d807      	bhi.n	8002924 <HAL_I2C_Init+0x84>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a80      	ldr	r2, [pc, #512]	; (8002b18 <HAL_I2C_Init+0x278>)
 8002918:	4293      	cmp	r3, r2
 800291a:	bf94      	ite	ls
 800291c:	2301      	movls	r3, #1
 800291e:	2300      	movhi	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e006      	b.n	8002932 <HAL_I2C_Init+0x92>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a7d      	ldr	r2, [pc, #500]	; (8002b1c <HAL_I2C_Init+0x27c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	bf94      	ite	ls
 800292c:	2301      	movls	r3, #1
 800292e:	2300      	movhi	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e0e7      	b.n	8002b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a78      	ldr	r2, [pc, #480]	; (8002b20 <HAL_I2C_Init+0x280>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0c9b      	lsrs	r3, r3, #18
 8002944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a6a      	ldr	r2, [pc, #424]	; (8002b14 <HAL_I2C_Init+0x274>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d802      	bhi.n	8002974 <HAL_I2C_Init+0xd4>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3301      	adds	r3, #1
 8002972:	e009      	b.n	8002988 <HAL_I2C_Init+0xe8>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	4a69      	ldr	r2, [pc, #420]	; (8002b24 <HAL_I2C_Init+0x284>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	3301      	adds	r3, #1
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800299a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	495c      	ldr	r1, [pc, #368]	; (8002b14 <HAL_I2C_Init+0x274>)
 80029a4:	428b      	cmp	r3, r1
 80029a6:	d819      	bhi.n	80029dc <HAL_I2C_Init+0x13c>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e59      	subs	r1, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b6:	1c59      	adds	r1, r3, #1
 80029b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029bc:	400b      	ands	r3, r1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_I2C_Init+0x138>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1e59      	subs	r1, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d6:	e051      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 80029d8:	2304      	movs	r3, #4
 80029da:	e04f      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d111      	bne.n	8002a08 <HAL_I2C_Init+0x168>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	440b      	add	r3, r1
 80029f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e012      	b.n	8002a2e <HAL_I2C_Init+0x18e>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e58      	subs	r0, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	0099      	lsls	r1, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Init+0x196>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e022      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10e      	bne.n	8002a5c <HAL_I2C_Init+0x1bc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1e58      	subs	r0, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	440b      	add	r3, r1
 8002a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5a:	e00f      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e58      	subs	r0, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	0099      	lsls	r1, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	6809      	ldr	r1, [r1, #0]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6911      	ldr	r1, [r2, #16]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68d2      	ldr	r2, [r2, #12]
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	000186a0 	.word	0x000186a0
 8002b18:	001e847f 	.word	0x001e847f
 8002b1c:	003d08ff 	.word	0x003d08ff
 8002b20:	431bde83 	.word	0x431bde83
 8002b24:	10624dd3 	.word	0x10624dd3

08002b28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e128      	b.n	8002d8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a90      	ldr	r2, [pc, #576]	; (8002d94 <HAL_I2S_Init+0x26c>)
 8002b52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7fe f879 	bl	8000c4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b70:	f023 030f 	bic.w	r3, r3, #15
 8002b74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d060      	beq.n	8002c48 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002b8e:	2310      	movs	r3, #16
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e001      	b.n	8002b98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002b94:	2320      	movs	r3, #32
 8002b96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d802      	bhi.n	8002ba6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f001 f9d8 	bl	8003f5c <HAL_RCCEx_GetPeriphCLKFreq>
 8002bac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb6:	d125      	bne.n	8002c04 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d010      	beq.n	8002be2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	3305      	adds	r3, #5
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	e01f      	b.n	8002c22 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	3305      	adds	r3, #5
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	e00e      	b.n	8002c22 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	461a      	mov	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	3305      	adds	r3, #5
 8002c20:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4a5c      	ldr	r2, [pc, #368]	; (8002d98 <HAL_I2S_Init+0x270>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	08db      	lsrs	r3, r3, #3
 8002c2c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	e003      	b.n	8002c50 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d902      	bls.n	8002c5c <HAL_I2S_Init+0x134>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	2bff      	cmp	r3, #255	; 0xff
 8002c5a:	d907      	bls.n	8002c6c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e08f      	b.n	8002d8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	ea42 0103 	orr.w	r1, r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002c8a:	f023 030f 	bic.w	r3, r3, #15
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6851      	ldr	r1, [r2, #4]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6892      	ldr	r2, [r2, #8]
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68d2      	ldr	r2, [r2, #12]
 8002c9c:	4311      	orrs	r1, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6992      	ldr	r2, [r2, #24]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d161      	bne.n	8002d7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a38      	ldr	r2, [pc, #224]	; (8002d9c <HAL_I2S_Init+0x274>)
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a37      	ldr	r2, [pc, #220]	; (8002da0 <HAL_I2S_Init+0x278>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d101      	bne.n	8002ccc <HAL_I2S_Init+0x1a4>
 8002cc8:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <HAL_I2S_Init+0x27c>)
 8002cca:	e001      	b.n	8002cd0 <HAL_I2S_Init+0x1a8>
 8002ccc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	4932      	ldr	r1, [pc, #200]	; (8002da0 <HAL_I2S_Init+0x278>)
 8002cd8:	428a      	cmp	r2, r1
 8002cda:	d101      	bne.n	8002ce0 <HAL_I2S_Init+0x1b8>
 8002cdc:	4a31      	ldr	r2, [pc, #196]	; (8002da4 <HAL_I2S_Init+0x27c>)
 8002cde:	e001      	b.n	8002ce4 <HAL_I2S_Init+0x1bc>
 8002ce0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002ce4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ce8:	f023 030f 	bic.w	r3, r3, #15
 8002cec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a2b      	ldr	r2, [pc, #172]	; (8002da0 <HAL_I2S_Init+0x278>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2S_Init+0x1d4>
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <HAL_I2S_Init+0x27c>)
 8002cfa:	e001      	b.n	8002d00 <HAL_I2S_Init+0x1d8>
 8002cfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d00:	2202      	movs	r2, #2
 8002d02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <HAL_I2S_Init+0x278>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2S_Init+0x1ea>
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_I2S_Init+0x27c>)
 8002d10:	e001      	b.n	8002d16 <HAL_I2S_Init+0x1ee>
 8002d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d22:	d003      	beq.n	8002d2c <HAL_I2S_Init+0x204>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	e001      	b.n	8002d38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d42:	4313      	orrs	r3, r2
 8002d44:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d56:	4313      	orrs	r3, r2
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <HAL_I2S_Init+0x278>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d101      	bne.n	8002d74 <HAL_I2S_Init+0x24c>
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_I2S_Init+0x27c>)
 8002d72:	e001      	b.n	8002d78 <HAL_I2S_Init+0x250>
 8002d74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d78:	897a      	ldrh	r2, [r7, #10]
 8002d7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3720      	adds	r7, #32
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	08002e9f 	.word	0x08002e9f
 8002d98:	cccccccd 	.word	0xcccccccd
 8002d9c:	08002fb5 	.word	0x08002fb5
 8002da0:	40003800 	.word	0x40003800
 8002da4:	40003400 	.word	0x40003400

08002da8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	881a      	ldrh	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	1c9a      	adds	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10e      	bne.n	8002e38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffb8 	bl	8002da8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	b292      	uxth	r2, r2
 8002e54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	1c9a      	adds	r2, r3, #2
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10e      	bne.n	8002e96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ff93 	bl	8002dbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d13a      	bne.n	8002f30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d109      	bne.n	8002ed8 <I2S_IRQHandler+0x3a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d102      	bne.n	8002ed8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffb4 	bl	8002e40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b40      	cmp	r3, #64	; 0x40
 8002ee0:	d126      	bne.n	8002f30 <I2S_IRQHandler+0x92>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d11f      	bne.n	8002f30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002efe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	f043 0202 	orr.w	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ff50 	bl	8002dd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d136      	bne.n	8002faa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d109      	bne.n	8002f5a <I2S_IRQHandler+0xbc>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d102      	bne.n	8002f5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ff45 	bl	8002de4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d122      	bne.n	8002faa <I2S_IRQHandler+0x10c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d11b      	bne.n	8002faa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	f043 0204 	orr.w	r2, r3, #4
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ff13 	bl	8002dd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a92      	ldr	r2, [pc, #584]	; (8003214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002fce:	4b92      	ldr	r3, [pc, #584]	; (8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fd0:	e001      	b.n	8002fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002fd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a8b      	ldr	r2, [pc, #556]	; (8003214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002fec:	4b8a      	ldr	r3, [pc, #552]	; (8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fee:	e001      	b.n	8002ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d004      	beq.n	800300c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 8099 	bne.w	800313e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b02      	cmp	r3, #2
 8003014:	d107      	bne.n	8003026 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f925 	bl	8003270 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d107      	bne.n	8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f9c8 	bl	80033d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d13a      	bne.n	80030c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d035      	beq.n	80030c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a6e      	ldr	r2, [pc, #440]	; (8003214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800305e:	4b6e      	ldr	r3, [pc, #440]	; (8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003060:	e001      	b.n	8003066 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003062:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4969      	ldr	r1, [pc, #420]	; (8003214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800306e:	428b      	cmp	r3, r1
 8003070:	d101      	bne.n	8003076 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003072:	4b69      	ldr	r3, [pc, #420]	; (8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003074:	e001      	b.n	800307a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800307e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800308e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f043 0202 	orr.w	r2, r3, #2
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff fe88 	bl	8002dd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	f040 80c3 	bne.w	8003252 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80bd 	beq.w	8003252 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a49      	ldr	r2, [pc, #292]	; (8003214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80030f2:	4b49      	ldr	r3, [pc, #292]	; (8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030f4:	e001      	b.n	80030fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80030f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4944      	ldr	r1, [pc, #272]	; (8003214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003102:	428b      	cmp	r3, r1
 8003104:	d101      	bne.n	800310a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003106:	4b44      	ldr	r3, [pc, #272]	; (8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003108:	e001      	b.n	800310e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800310a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800310e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003112:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f043 0204 	orr.w	r2, r3, #4
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff fe4a 	bl	8002dd0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800313c:	e089      	b.n	8003252 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b02      	cmp	r3, #2
 8003146:	d107      	bne.n	8003158 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8be 	bl	80032d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f8fd 	bl	800336c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b40      	cmp	r3, #64	; 0x40
 800317a:	d12f      	bne.n	80031dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d02a      	beq.n	80031dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003194:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1e      	ldr	r2, [pc, #120]	; (8003214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d101      	bne.n	80031a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80031a0:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031a2:	e001      	b.n	80031a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80031a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4919      	ldr	r1, [pc, #100]	; (8003214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031b0:	428b      	cmp	r3, r1
 80031b2:	d101      	bne.n	80031b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80031b4:	4b18      	ldr	r3, [pc, #96]	; (8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031b6:	e001      	b.n	80031bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80031b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f043 0202 	orr.w	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fdfa 	bl	8002dd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d136      	bne.n	8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d031      	beq.n	8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a07      	ldr	r2, [pc, #28]	; (8003214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031fc:	e001      	b.n	8003202 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80031fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4902      	ldr	r1, [pc, #8]	; (8003214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800320a:	428b      	cmp	r3, r1
 800320c:	d106      	bne.n	800321c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800320e:	4b02      	ldr	r3, [pc, #8]	; (8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003210:	e006      	b.n	8003220 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003212:	bf00      	nop
 8003214:	40003800 	.word	0x40003800
 8003218:	40003400 	.word	0x40003400
 800321c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003220:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003224:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003234:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	f043 0204 	orr.w	r2, r3, #4
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fdc0 	bl	8002dd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003250:	e000      	b.n	8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003252:	bf00      	nop
}
 8003254:	bf00      	nop
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c99      	adds	r1, r3, #2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6251      	str	r1, [r2, #36]	; 0x24
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d113      	bne.n	80032ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ffc9 	bl	800325c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	1c99      	adds	r1, r3, #2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6251      	str	r1, [r2, #36]	; 0x24
 80032e6:	8819      	ldrh	r1, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <I2SEx_TxISR_I2SExt+0x90>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <I2SEx_TxISR_I2SExt+0x22>
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <I2SEx_TxISR_I2SExt+0x94>)
 80032f4:	e001      	b.n	80032fa <I2SEx_TxISR_I2SExt+0x26>
 80032f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032fa:	460a      	mov	r2, r1
 80032fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d121      	bne.n	800335a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <I2SEx_TxISR_I2SExt+0x90>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <I2SEx_TxISR_I2SExt+0x50>
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <I2SEx_TxISR_I2SExt+0x94>)
 8003322:	e001      	b.n	8003328 <I2SEx_TxISR_I2SExt+0x54>
 8003324:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	490d      	ldr	r1, [pc, #52]	; (8003364 <I2SEx_TxISR_I2SExt+0x90>)
 8003330:	428b      	cmp	r3, r1
 8003332:	d101      	bne.n	8003338 <I2SEx_TxISR_I2SExt+0x64>
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <I2SEx_TxISR_I2SExt+0x94>)
 8003336:	e001      	b.n	800333c <I2SEx_TxISR_I2SExt+0x68>
 8003338:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800333c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003340:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff81 	bl	800325c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40003800 	.word	0x40003800
 8003368:	40003400 	.word	0x40003400

0800336c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68d8      	ldr	r0, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	1c99      	adds	r1, r3, #2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003384:	b282      	uxth	r2, r0
 8003386:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d113      	bne.n	80033c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff4a 	bl	800325c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a20      	ldr	r2, [pc, #128]	; (8003460 <I2SEx_RxISR_I2SExt+0x90>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <I2SEx_RxISR_I2SExt+0x16>
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <I2SEx_RxISR_I2SExt+0x94>)
 80033e4:	e001      	b.n	80033ea <I2SEx_RxISR_I2SExt+0x1a>
 80033e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ea:	68d8      	ldr	r0, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	1c99      	adds	r1, r3, #2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80033f6:	b282      	uxth	r2, r0
 80033f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d121      	bne.n	8003456 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a12      	ldr	r2, [pc, #72]	; (8003460 <I2SEx_RxISR_I2SExt+0x90>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d101      	bne.n	8003420 <I2SEx_RxISR_I2SExt+0x50>
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <I2SEx_RxISR_I2SExt+0x94>)
 800341e:	e001      	b.n	8003424 <I2SEx_RxISR_I2SExt+0x54>
 8003420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	490d      	ldr	r1, [pc, #52]	; (8003460 <I2SEx_RxISR_I2SExt+0x90>)
 800342c:	428b      	cmp	r3, r1
 800342e:	d101      	bne.n	8003434 <I2SEx_RxISR_I2SExt+0x64>
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <I2SEx_RxISR_I2SExt+0x94>)
 8003432:	e001      	b.n	8003438 <I2SEx_RxISR_I2SExt+0x68>
 8003434:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003438:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800343c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff03 	bl	800325c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40003800 	.word	0x40003800
 8003464:	40003400 	.word	0x40003400

08003468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e267      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d075      	beq.n	8003572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003486:	4b88      	ldr	r3, [pc, #544]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b04      	cmp	r3, #4
 8003490:	d00c      	beq.n	80034ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003492:	4b85      	ldr	r3, [pc, #532]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800349a:	2b08      	cmp	r3, #8
 800349c:	d112      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349e:	4b82      	ldr	r3, [pc, #520]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	4b7e      	ldr	r3, [pc, #504]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05b      	beq.n	8003570 <HAL_RCC_OscConfig+0x108>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d157      	bne.n	8003570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e242      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d106      	bne.n	80034dc <HAL_RCC_OscConfig+0x74>
 80034ce:	4b76      	ldr	r3, [pc, #472]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a75      	ldr	r2, [pc, #468]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e01d      	b.n	8003518 <HAL_RCC_OscConfig+0xb0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x98>
 80034e6:	4b70      	ldr	r3, [pc, #448]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6f      	ldr	r2, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b6d      	ldr	r3, [pc, #436]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a6c      	ldr	r2, [pc, #432]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0xb0>
 8003500:	4b69      	ldr	r3, [pc, #420]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a68      	ldr	r2, [pc, #416]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b66      	ldr	r3, [pc, #408]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a65      	ldr	r2, [pc, #404]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d013      	beq.n	8003548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fd fdb0 	bl	8001084 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003528:	f7fd fdac 	bl	8001084 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e207      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b5b      	ldr	r3, [pc, #364]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0xc0>
 8003546:	e014      	b.n	8003572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fd fd9c 	bl	8001084 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003550:	f7fd fd98 	bl	8001084 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e1f3      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	4b51      	ldr	r3, [pc, #324]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0xe8>
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d063      	beq.n	8003646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800357e:	4b4a      	ldr	r3, [pc, #296]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358a:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003592:	2b08      	cmp	r3, #8
 8003594:	d11c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b44      	ldr	r3, [pc, #272]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a2:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_RCC_OscConfig+0x152>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e1c7      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4937      	ldr	r1, [pc, #220]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	e03a      	b.n	8003646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d8:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCC_OscConfig+0x244>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fd fd51 	bl	8001084 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e6:	f7fd fd4d 	bl	8001084 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1a8      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003604:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4925      	ldr	r1, [pc, #148]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
 8003618:	e015      	b.n	8003646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_RCC_OscConfig+0x244>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fd30 	bl	8001084 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003628:	f7fd fd2c 	bl	8001084 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e187      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d036      	beq.n	80036c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_RCC_OscConfig+0x248>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fd fd10 	bl	8001084 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003668:	f7fd fd0c 	bl	8001084 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e167      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x200>
 8003686:	e01b      	b.n	80036c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_OscConfig+0x248>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7fd fcf9 	bl	8001084 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003694:	e00e      	b.n	80036b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003696:	f7fd fcf5 	bl	8001084 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d907      	bls.n	80036b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e150      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
 80036a8:	40023800 	.word	0x40023800
 80036ac:	42470000 	.word	0x42470000
 80036b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	4b88      	ldr	r3, [pc, #544]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ea      	bne.n	8003696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8097 	beq.w	80037fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d2:	4b81      	ldr	r3, [pc, #516]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	4b7d      	ldr	r3, [pc, #500]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	4a7c      	ldr	r2, [pc, #496]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ec:	6413      	str	r3, [r2, #64]	; 0x40
 80036ee:	4b7a      	ldr	r3, [pc, #488]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fe:	4b77      	ldr	r3, [pc, #476]	; (80038dc <HAL_RCC_OscConfig+0x474>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d118      	bne.n	800373c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370a:	4b74      	ldr	r3, [pc, #464]	; (80038dc <HAL_RCC_OscConfig+0x474>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a73      	ldr	r2, [pc, #460]	; (80038dc <HAL_RCC_OscConfig+0x474>)
 8003710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003716:	f7fd fcb5 	bl	8001084 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371e:	f7fd fcb1 	bl	8001084 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e10c      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003730:	4b6a      	ldr	r3, [pc, #424]	; (80038dc <HAL_RCC_OscConfig+0x474>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d106      	bne.n	8003752 <HAL_RCC_OscConfig+0x2ea>
 8003744:	4b64      	ldr	r3, [pc, #400]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4a63      	ldr	r2, [pc, #396]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	; 0x70
 8003750:	e01c      	b.n	800378c <HAL_RCC_OscConfig+0x324>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b05      	cmp	r3, #5
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0x30c>
 800375a:	4b5f      	ldr	r3, [pc, #380]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a5e      	ldr	r2, [pc, #376]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003760:	f043 0304 	orr.w	r3, r3, #4
 8003764:	6713      	str	r3, [r2, #112]	; 0x70
 8003766:	4b5c      	ldr	r3, [pc, #368]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	4a5b      	ldr	r2, [pc, #364]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6713      	str	r3, [r2, #112]	; 0x70
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0x324>
 8003774:	4b58      	ldr	r3, [pc, #352]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4a57      	ldr	r2, [pc, #348]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
 8003780:	4b55      	ldr	r3, [pc, #340]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4a54      	ldr	r2, [pc, #336]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003786:	f023 0304 	bic.w	r3, r3, #4
 800378a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d015      	beq.n	80037c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fd fc76 	bl	8001084 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f7fd fc72 	bl	8001084 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e0cb      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	4b49      	ldr	r3, [pc, #292]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0ee      	beq.n	800379c <HAL_RCC_OscConfig+0x334>
 80037be:	e014      	b.n	80037ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c0:	f7fd fc60 	bl	8001084 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c6:	e00a      	b.n	80037de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c8:	f7fd fc5c 	bl	8001084 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0b5      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037de:	4b3e      	ldr	r3, [pc, #248]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ee      	bne.n	80037c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d105      	bne.n	80037fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f0:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	4a38      	ldr	r2, [pc, #224]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80a1 	beq.w	8003948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003806:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b08      	cmp	r3, #8
 8003810:	d05c      	beq.n	80038cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d141      	bne.n	800389e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <HAL_RCC_OscConfig+0x478>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fd fc30 	bl	8001084 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003828:	f7fd fc2c 	bl	8001084 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e087      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69da      	ldr	r2, [r3, #28]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	019b      	lsls	r3, r3, #6
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	3b01      	subs	r3, #1
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	491b      	ldr	r1, [pc, #108]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003870:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_RCC_OscConfig+0x478>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7fd fc05 	bl	8001084 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387e:	f7fd fc01 	bl	8001084 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e05c      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003890:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x416>
 800389c:	e054      	b.n	8003948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <HAL_RCC_OscConfig+0x478>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fd fbee 	bl	8001084 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fd fbea 	bl	8001084 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e045      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x444>
 80038ca:	e03d      	b.n	8003948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d107      	bne.n	80038e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e038      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40007000 	.word	0x40007000
 80038e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x4ec>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d028      	beq.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d121      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d11a      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003914:	4013      	ands	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800391a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800391c:	4293      	cmp	r3, r2
 800391e:	d111      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	3b01      	subs	r3, #1
 800392e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0cc      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800396c:	4b68      	ldr	r3, [pc, #416]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d90c      	bls.n	8003994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b65      	ldr	r3, [pc, #404]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b63      	ldr	r3, [pc, #396]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0b8      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ac:	4b59      	ldr	r3, [pc, #356]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4a58      	ldr	r2, [pc, #352]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c4:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a52      	ldr	r2, [pc, #328]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d0:	4b50      	ldr	r3, [pc, #320]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	494d      	ldr	r1, [pc, #308]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d044      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d119      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e07f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a16:	4b3f      	ldr	r3, [pc, #252]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e06f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a26:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e067      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a36:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f023 0203 	bic.w	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4934      	ldr	r1, [pc, #208]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a48:	f7fd fb1c 	bl	8001084 <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a50:	f7fd fb18 	bl	8001084 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e04f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 020c 	and.w	r2, r3, #12
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d1eb      	bne.n	8003a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d20c      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e032      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4916      	ldr	r1, [pc, #88]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	490e      	ldr	r1, [pc, #56]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ade:	f000 f821 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	490a      	ldr	r1, [pc, #40]	; (8003b18 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	5ccb      	ldrb	r3, [r1, r3]
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fa7c 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023c00 	.word	0x40023c00
 8003b14:	40023800 	.word	0x40023800
 8003b18:	08005b74 	.word	0x08005b74
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	20000004 	.word	0x20000004

08003b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b28:	b094      	sub	sp, #80	; 0x50
 8003b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b30:	2300      	movs	r3, #0
 8003b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b34:	2300      	movs	r3, #0
 8003b36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b3c:	4b79      	ldr	r3, [pc, #484]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d00d      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x40>
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	f200 80e1 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x34>
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d003      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b56:	e0db      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b58:	4b73      	ldr	r3, [pc, #460]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b5c:	e0db      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b5e:	4b73      	ldr	r3, [pc, #460]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b62:	e0d8      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b64:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b6e:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d063      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7a:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	099b      	lsrs	r3, r3, #6
 8003b80:	2200      	movs	r2, #0
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b8e:	2300      	movs	r3, #0
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
 8003b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b96:	4622      	mov	r2, r4
 8003b98:	462b      	mov	r3, r5
 8003b9a:	f04f 0000 	mov.w	r0, #0
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	0159      	lsls	r1, r3, #5
 8003ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba8:	0150      	lsls	r0, r2, #5
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4621      	mov	r1, r4
 8003bb0:	1a51      	subs	r1, r2, r1
 8003bb2:	6139      	str	r1, [r7, #16]
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bc8:	4659      	mov	r1, fp
 8003bca:	018b      	lsls	r3, r1, #6
 8003bcc:	4651      	mov	r1, sl
 8003bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bd2:	4651      	mov	r1, sl
 8003bd4:	018a      	lsls	r2, r1, #6
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bdc:	4659      	mov	r1, fp
 8003bde:	eb63 0901 	sbc.w	r9, r3, r1
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bf6:	4690      	mov	r8, r2
 8003bf8:	4699      	mov	r9, r3
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	eb18 0303 	adds.w	r3, r8, r3
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	462b      	mov	r3, r5
 8003c04:	eb49 0303 	adc.w	r3, r9, r3
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c16:	4629      	mov	r1, r5
 8003c18:	024b      	lsls	r3, r1, #9
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c20:	4621      	mov	r1, r4
 8003c22:	024a      	lsls	r2, r1, #9
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c34:	f7fc fb1c 	bl	8000270 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c40:	e058      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	2300      	movs	r3, #0
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
 8003c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	f04f 0000 	mov.w	r0, #0
 8003c64:	f04f 0100 	mov.w	r1, #0
 8003c68:	0159      	lsls	r1, r3, #5
 8003c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6e:	0150      	lsls	r0, r2, #5
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4641      	mov	r1, r8
 8003c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c94:	ebb2 040a 	subs.w	r4, r2, sl
 8003c98:	eb63 050b 	sbc.w	r5, r3, fp
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	00eb      	lsls	r3, r5, #3
 8003ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003caa:	00e2      	lsls	r2, r4, #3
 8003cac:	4614      	mov	r4, r2
 8003cae:	461d      	mov	r5, r3
 8003cb0:	4643      	mov	r3, r8
 8003cb2:	18e3      	adds	r3, r4, r3
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	eb45 0303 	adc.w	r3, r5, r3
 8003cbc:	607b      	str	r3, [r7, #4]
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cca:	4629      	mov	r1, r5
 8003ccc:	028b      	lsls	r3, r1, #10
 8003cce:	4621      	mov	r1, r4
 8003cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	028a      	lsls	r2, r1, #10
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cde:	2200      	movs	r2, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	61fa      	str	r2, [r7, #28]
 8003ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce8:	f7fc fac2 	bl	8000270 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3750      	adds	r7, #80	; 0x50
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	00f42400 	.word	0x00f42400
 8003d2c:	007a1200 	.word	0x007a1200

08003d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000000 	.word	0x20000000

08003d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d4c:	f7ff fff0 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4903      	ldr	r1, [pc, #12]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	08005b84 	.word	0x08005b84

08003d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d74:	f7ff ffdc 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	0b5b      	lsrs	r3, r3, #13
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4903      	ldr	r1, [pc, #12]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40023800 	.word	0x40023800
 8003d94:	08005b84 	.word	0x08005b84

08003d98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d035      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dc0:	4b62      	ldr	r3, [pc, #392]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dc6:	f7fd f95d 	bl	8001084 <HAL_GetTick>
 8003dca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dce:	f7fd f959 	bl	8001084 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e0b0      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003de0:	4b5b      	ldr	r3, [pc, #364]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f0      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	019a      	lsls	r2, r3, #6
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	071b      	lsls	r3, r3, #28
 8003df8:	4955      	ldr	r1, [pc, #340]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e00:	4b52      	ldr	r3, [pc, #328]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e06:	f7fd f93d 	bl	8001084 <HAL_GetTick>
 8003e0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e0e:	f7fd f939 	bl	8001084 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e090      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e20:	4b4b      	ldr	r3, [pc, #300]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8083 	beq.w	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	4b44      	ldr	r3, [pc, #272]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a43      	ldr	r2, [pc, #268]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e56:	4b3f      	ldr	r3, [pc, #252]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a3e      	ldr	r2, [pc, #248]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e62:	f7fd f90f 	bl	8001084 <HAL_GetTick>
 8003e66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e6a:	f7fd f90b 	bl	8001084 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e062      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e7c:	4b35      	ldr	r3, [pc, #212]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e88:	4b31      	ldr	r3, [pc, #196]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02f      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d028      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eb0:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb6:	4b28      	ldr	r3, [pc, #160]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ebc:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ec2:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d114      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ece:	f7fd f8d9 	bl	8001084 <HAL_GetTick>
 8003ed2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fd f8d5 	bl	8001084 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e02a      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eec:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ee      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f04:	d10d      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f06:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1a:	490d      	ldr	r1, [pc, #52]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	608b      	str	r3, [r1, #8]
 8003f20:	e005      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f22:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f2c:	6093      	str	r3, [r2, #8]
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3a:	4905      	ldr	r1, [pc, #20]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	42470068 	.word	0x42470068
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40007000 	.word	0x40007000
 8003f58:	42470e40 	.word	0x42470e40

08003f5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d13e      	bne.n	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003f7a:	4b23      	ldr	r3, [pc, #140]	; (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d12f      	bne.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f90:	4b1e      	ldr	r3, [pc, #120]	; (800400c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f92:	617b      	str	r3, [r7, #20]
          break;
 8003f94:	e02f      	b.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f96:	4b1c      	ldr	r3, [pc, #112]	; (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa2:	d108      	bne.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fa4:	4b18      	ldr	r3, [pc, #96]	; (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fac:	4a18      	ldr	r2, [pc, #96]	; (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	e007      	b.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fb6:	4b14      	ldr	r3, [pc, #80]	; (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fbe:	4a15      	ldr	r2, [pc, #84]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003fda:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe0:	0f1b      	lsrs	r3, r3, #28
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
          break;
 8003fee:	e002      	b.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
          break;
 8003ff4:	bf00      	nop
        }
      }
      break;
 8003ff6:	bf00      	nop
    }
  }
  return frequency;
 8003ff8:	697b      	ldr	r3, [r7, #20]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	00bb8000 	.word	0x00bb8000
 8004010:	007a1200 	.word	0x007a1200
 8004014:	00f42400 	.word	0x00f42400

08004018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07b      	b.n	8004122 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d108      	bne.n	8004044 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403a:	d009      	beq.n	8004050 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	61da      	str	r2, [r3, #28]
 8004042:	e005      	b.n	8004050 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fc fe6e 	bl	8000d4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	ea42 0103 	orr.w	r1, r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0104 	and.w	r1, r3, #4
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0210 	and.w	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004110:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e03f      	b.n	80041bc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d106      	bne.n	8004156 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fc fe43 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2224      	movs	r2, #36	; 0x24
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800416c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f9ca 	bl	8004508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004182:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004192:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d17c      	bne.n	80042de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_UART_Transmit+0x2c>
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e075      	b.n	80042e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_UART_Transmit+0x3e>
 80041fe:	2302      	movs	r3, #2
 8004200:	e06e      	b.n	80042e0 <HAL_UART_Transmit+0x11c>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2221      	movs	r2, #33	; 0x21
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004218:	f7fc ff34 	bl	8001084 <HAL_GetTick>
 800421c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	d108      	bne.n	8004246 <HAL_UART_Transmit+0x82>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	e003      	b.n	800424e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004256:	e02a      	b.n	80042ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2200      	movs	r2, #0
 8004260:	2180      	movs	r1, #128	; 0x80
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f8e2 	bl	800442c <UART_WaitOnFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e036      	b.n	80042e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004286:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	3302      	adds	r3, #2
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	e007      	b.n	80042a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3301      	adds	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1cf      	bne.n	8004258 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2200      	movs	r2, #0
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f8b2 	bl	800442c <UART_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e006      	b.n	80042e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b20      	cmp	r3, #32
 8004306:	f040 808c 	bne.w	8004422 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <HAL_UART_Receive+0x2e>
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e084      	b.n	8004424 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_UART_Receive+0x40>
 8004324:	2302      	movs	r3, #2
 8004326:	e07d      	b.n	8004424 <HAL_UART_Receive+0x13c>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2222      	movs	r2, #34	; 0x22
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004344:	f7fc fe9e 	bl	8001084 <HAL_GetTick>
 8004348:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435e:	d108      	bne.n	8004372 <HAL_UART_Receive+0x8a>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	e003      	b.n	800437a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004382:	e043      	b.n	800440c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2200      	movs	r2, #0
 800438c:	2120      	movs	r1, #32
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f84c 	bl	800442c <UART_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e042      	b.n	8004424 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10c      	bne.n	80043be <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	3302      	adds	r3, #2
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	e01f      	b.n	80043fe <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c6:	d007      	beq.n	80043d8 <HAL_UART_Receive+0xf0>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <HAL_UART_Receive+0xfe>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	e008      	b.n	80043f8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	3301      	adds	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1b6      	bne.n	8004384 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e000      	b.n	8004424 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
  }
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b090      	sub	sp, #64	; 0x40
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443c:	e050      	b.n	80044e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d04c      	beq.n	80044e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0x30>
 800444c:	f7fc fe1a 	bl	8001084 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004458:	429a      	cmp	r2, r3
 800445a:	d241      	bcs.n	80044e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800447c:	637a      	str	r2, [r7, #52]	; 0x34
 800447e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	613b      	str	r3, [r7, #16]
   return(result);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044b0:	623a      	str	r2, [r7, #32]
 80044b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	69f9      	ldr	r1, [r7, #28]
 80044b6:	6a3a      	ldr	r2, [r7, #32]
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e00f      	b.n	8004500 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4013      	ands	r3, r2
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d09f      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3740      	adds	r7, #64	; 0x40
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800450c:	b0c0      	sub	sp, #256	; 0x100
 800450e:	af00      	add	r7, sp, #0
 8004510:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	68d9      	ldr	r1, [r3, #12]
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	ea40 0301 	orr.w	r3, r0, r1
 8004530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	431a      	orrs	r2, r3
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	431a      	orrs	r2, r3
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004560:	f021 010c 	bic.w	r1, r1, #12
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800456e:	430b      	orrs	r3, r1
 8004570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004582:	6999      	ldr	r1, [r3, #24]
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	ea40 0301 	orr.w	r3, r0, r1
 800458e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4b8f      	ldr	r3, [pc, #572]	; (80047d4 <UART_SetConfig+0x2cc>)
 8004598:	429a      	cmp	r2, r3
 800459a:	d005      	beq.n	80045a8 <UART_SetConfig+0xa0>
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b8d      	ldr	r3, [pc, #564]	; (80047d8 <UART_SetConfig+0x2d0>)
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d104      	bne.n	80045b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045a8:	f7ff fbe2 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 80045ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045b0:	e003      	b.n	80045ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045b2:	f7ff fbc9 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 80045b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c4:	f040 810c 	bne.w	80047e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045da:	4622      	mov	r2, r4
 80045dc:	462b      	mov	r3, r5
 80045de:	1891      	adds	r1, r2, r2
 80045e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80045e2:	415b      	adcs	r3, r3
 80045e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045ea:	4621      	mov	r1, r4
 80045ec:	eb12 0801 	adds.w	r8, r2, r1
 80045f0:	4629      	mov	r1, r5
 80045f2:	eb43 0901 	adc.w	r9, r3, r1
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800460a:	4690      	mov	r8, r2
 800460c:	4699      	mov	r9, r3
 800460e:	4623      	mov	r3, r4
 8004610:	eb18 0303 	adds.w	r3, r8, r3
 8004614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004618:	462b      	mov	r3, r5
 800461a:	eb49 0303 	adc.w	r3, r9, r3
 800461e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800462e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004632:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004636:	460b      	mov	r3, r1
 8004638:	18db      	adds	r3, r3, r3
 800463a:	653b      	str	r3, [r7, #80]	; 0x50
 800463c:	4613      	mov	r3, r2
 800463e:	eb42 0303 	adc.w	r3, r2, r3
 8004642:	657b      	str	r3, [r7, #84]	; 0x54
 8004644:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004648:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800464c:	f7fb fe10 	bl	8000270 <__aeabi_uldivmod>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4b61      	ldr	r3, [pc, #388]	; (80047dc <UART_SetConfig+0x2d4>)
 8004656:	fba3 2302 	umull	r2, r3, r3, r2
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	011c      	lsls	r4, r3, #4
 800465e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004668:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800466c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	1891      	adds	r1, r2, r2
 8004676:	64b9      	str	r1, [r7, #72]	; 0x48
 8004678:	415b      	adcs	r3, r3
 800467a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800467c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004680:	4641      	mov	r1, r8
 8004682:	eb12 0a01 	adds.w	sl, r2, r1
 8004686:	4649      	mov	r1, r9
 8004688:	eb43 0b01 	adc.w	fp, r3, r1
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004698:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800469c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046a0:	4692      	mov	sl, r2
 80046a2:	469b      	mov	fp, r3
 80046a4:	4643      	mov	r3, r8
 80046a6:	eb1a 0303 	adds.w	r3, sl, r3
 80046aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046ae:	464b      	mov	r3, r9
 80046b0:	eb4b 0303 	adc.w	r3, fp, r3
 80046b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046cc:	460b      	mov	r3, r1
 80046ce:	18db      	adds	r3, r3, r3
 80046d0:	643b      	str	r3, [r7, #64]	; 0x40
 80046d2:	4613      	mov	r3, r2
 80046d4:	eb42 0303 	adc.w	r3, r2, r3
 80046d8:	647b      	str	r3, [r7, #68]	; 0x44
 80046da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046e2:	f7fb fdc5 	bl	8000270 <__aeabi_uldivmod>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	4b3b      	ldr	r3, [pc, #236]	; (80047dc <UART_SetConfig+0x2d4>)
 80046ee:	fba3 2301 	umull	r2, r3, r3, r1
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2264      	movs	r2, #100	; 0x64
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	1acb      	subs	r3, r1, r3
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004702:	4b36      	ldr	r3, [pc, #216]	; (80047dc <UART_SetConfig+0x2d4>)
 8004704:	fba3 2302 	umull	r2, r3, r3, r2
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004710:	441c      	add	r4, r3
 8004712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800471c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004720:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004724:	4642      	mov	r2, r8
 8004726:	464b      	mov	r3, r9
 8004728:	1891      	adds	r1, r2, r2
 800472a:	63b9      	str	r1, [r7, #56]	; 0x38
 800472c:	415b      	adcs	r3, r3
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004734:	4641      	mov	r1, r8
 8004736:	1851      	adds	r1, r2, r1
 8004738:	6339      	str	r1, [r7, #48]	; 0x30
 800473a:	4649      	mov	r1, r9
 800473c:	414b      	adcs	r3, r1
 800473e:	637b      	str	r3, [r7, #52]	; 0x34
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800474c:	4659      	mov	r1, fp
 800474e:	00cb      	lsls	r3, r1, #3
 8004750:	4651      	mov	r1, sl
 8004752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004756:	4651      	mov	r1, sl
 8004758:	00ca      	lsls	r2, r1, #3
 800475a:	4610      	mov	r0, r2
 800475c:	4619      	mov	r1, r3
 800475e:	4603      	mov	r3, r0
 8004760:	4642      	mov	r2, r8
 8004762:	189b      	adds	r3, r3, r2
 8004764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004768:	464b      	mov	r3, r9
 800476a:	460a      	mov	r2, r1
 800476c:	eb42 0303 	adc.w	r3, r2, r3
 8004770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004780:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004788:	460b      	mov	r3, r1
 800478a:	18db      	adds	r3, r3, r3
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
 800478e:	4613      	mov	r3, r2
 8004790:	eb42 0303 	adc.w	r3, r2, r3
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004796:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800479a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800479e:	f7fb fd67 	bl	8000270 <__aeabi_uldivmod>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <UART_SetConfig+0x2d4>)
 80047a8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	2164      	movs	r1, #100	; 0x64
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	3332      	adds	r3, #50	; 0x32
 80047ba:	4a08      	ldr	r2, [pc, #32]	; (80047dc <UART_SetConfig+0x2d4>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	f003 0207 	and.w	r2, r3, #7
 80047c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4422      	add	r2, r4
 80047ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047d0:	e105      	b.n	80049de <UART_SetConfig+0x4d6>
 80047d2:	bf00      	nop
 80047d4:	40011000 	.word	0x40011000
 80047d8:	40011400 	.word	0x40011400
 80047dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047f2:	4642      	mov	r2, r8
 80047f4:	464b      	mov	r3, r9
 80047f6:	1891      	adds	r1, r2, r2
 80047f8:	6239      	str	r1, [r7, #32]
 80047fa:	415b      	adcs	r3, r3
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
 80047fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004802:	4641      	mov	r1, r8
 8004804:	1854      	adds	r4, r2, r1
 8004806:	4649      	mov	r1, r9
 8004808:	eb43 0501 	adc.w	r5, r3, r1
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	00eb      	lsls	r3, r5, #3
 8004816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800481a:	00e2      	lsls	r2, r4, #3
 800481c:	4614      	mov	r4, r2
 800481e:	461d      	mov	r5, r3
 8004820:	4643      	mov	r3, r8
 8004822:	18e3      	adds	r3, r4, r3
 8004824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004828:	464b      	mov	r3, r9
 800482a:	eb45 0303 	adc.w	r3, r5, r3
 800482e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800483e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800484e:	4629      	mov	r1, r5
 8004850:	008b      	lsls	r3, r1, #2
 8004852:	4621      	mov	r1, r4
 8004854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004858:	4621      	mov	r1, r4
 800485a:	008a      	lsls	r2, r1, #2
 800485c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004860:	f7fb fd06 	bl	8000270 <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4b60      	ldr	r3, [pc, #384]	; (80049ec <UART_SetConfig+0x4e4>)
 800486a:	fba3 2302 	umull	r2, r3, r3, r2
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	011c      	lsls	r4, r3, #4
 8004872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004876:	2200      	movs	r2, #0
 8004878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800487c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004880:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	1891      	adds	r1, r2, r2
 800488a:	61b9      	str	r1, [r7, #24]
 800488c:	415b      	adcs	r3, r3
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004894:	4641      	mov	r1, r8
 8004896:	1851      	adds	r1, r2, r1
 8004898:	6139      	str	r1, [r7, #16]
 800489a:	4649      	mov	r1, r9
 800489c:	414b      	adcs	r3, r1
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048ac:	4659      	mov	r1, fp
 80048ae:	00cb      	lsls	r3, r1, #3
 80048b0:	4651      	mov	r1, sl
 80048b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b6:	4651      	mov	r1, sl
 80048b8:	00ca      	lsls	r2, r1, #3
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	4642      	mov	r2, r8
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048c8:	464b      	mov	r3, r9
 80048ca:	460a      	mov	r2, r1
 80048cc:	eb42 0303 	adc.w	r3, r2, r3
 80048d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80048de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048ec:	4649      	mov	r1, r9
 80048ee:	008b      	lsls	r3, r1, #2
 80048f0:	4641      	mov	r1, r8
 80048f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f6:	4641      	mov	r1, r8
 80048f8:	008a      	lsls	r2, r1, #2
 80048fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048fe:	f7fb fcb7 	bl	8000270 <__aeabi_uldivmod>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4b39      	ldr	r3, [pc, #228]	; (80049ec <UART_SetConfig+0x4e4>)
 8004908:	fba3 1302 	umull	r1, r3, r3, r2
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	2164      	movs	r1, #100	; 0x64
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	3332      	adds	r3, #50	; 0x32
 800491a:	4a34      	ldr	r2, [pc, #208]	; (80049ec <UART_SetConfig+0x4e4>)
 800491c:	fba2 2303 	umull	r2, r3, r2, r3
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004926:	441c      	add	r4, r3
 8004928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800492c:	2200      	movs	r2, #0
 800492e:	673b      	str	r3, [r7, #112]	; 0x70
 8004930:	677a      	str	r2, [r7, #116]	; 0x74
 8004932:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004936:	4642      	mov	r2, r8
 8004938:	464b      	mov	r3, r9
 800493a:	1891      	adds	r1, r2, r2
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	415b      	adcs	r3, r3
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004946:	4641      	mov	r1, r8
 8004948:	1851      	adds	r1, r2, r1
 800494a:	6039      	str	r1, [r7, #0]
 800494c:	4649      	mov	r1, r9
 800494e:	414b      	adcs	r3, r1
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800495e:	4659      	mov	r1, fp
 8004960:	00cb      	lsls	r3, r1, #3
 8004962:	4651      	mov	r1, sl
 8004964:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004968:	4651      	mov	r1, sl
 800496a:	00ca      	lsls	r2, r1, #3
 800496c:	4610      	mov	r0, r2
 800496e:	4619      	mov	r1, r3
 8004970:	4603      	mov	r3, r0
 8004972:	4642      	mov	r2, r8
 8004974:	189b      	adds	r3, r3, r2
 8004976:	66bb      	str	r3, [r7, #104]	; 0x68
 8004978:	464b      	mov	r3, r9
 800497a:	460a      	mov	r2, r1
 800497c:	eb42 0303 	adc.w	r3, r2, r3
 8004980:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	663b      	str	r3, [r7, #96]	; 0x60
 800498c:	667a      	str	r2, [r7, #100]	; 0x64
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800499a:	4649      	mov	r1, r9
 800499c:	008b      	lsls	r3, r1, #2
 800499e:	4641      	mov	r1, r8
 80049a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a4:	4641      	mov	r1, r8
 80049a6:	008a      	lsls	r2, r1, #2
 80049a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049ac:	f7fb fc60 	bl	8000270 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <UART_SetConfig+0x4e4>)
 80049b6:	fba3 1302 	umull	r1, r3, r3, r2
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2164      	movs	r1, #100	; 0x64
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	3332      	adds	r3, #50	; 0x32
 80049c8:	4a08      	ldr	r2, [pc, #32]	; (80049ec <UART_SetConfig+0x4e4>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	f003 020f 	and.w	r2, r3, #15
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4422      	add	r2, r4
 80049dc:	609a      	str	r2, [r3, #8]
}
 80049de:	bf00      	nop
 80049e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049e4:	46bd      	mov	sp, r7
 80049e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ea:	bf00      	nop
 80049ec:	51eb851f 	.word	0x51eb851f

080049f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f043 0201 	orr.w	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 0201 	bic.w	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3301      	adds	r3, #1
 8004a46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <USB_FlushTxFifo+0x64>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e01b      	b.n	8004a8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	daf2      	bge.n	8004a42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	019b      	lsls	r3, r3, #6
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a08      	ldr	r2, [pc, #32]	; (8004a98 <USB_FlushTxFifo+0x64>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e006      	b.n	8004a8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d0f0      	beq.n	8004a6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	00030d40 	.word	0x00030d40

08004a9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <USB_FlushRxFifo+0x5c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e018      	b.n	8004aec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	daf2      	bge.n	8004aa8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2210      	movs	r2, #16
 8004aca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <USB_FlushRxFifo+0x5c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e006      	b.n	8004aec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d0f0      	beq.n	8004acc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	00030d40 	.word	0x00030d40

08004afc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b08b      	sub	sp, #44	; 0x2c
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	089b      	lsrs	r3, r3, #2
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	623b      	str	r3, [r7, #32]
 8004b26:	e014      	b.n	8004b52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	3301      	adds	r3, #1
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	3301      	adds	r3, #1
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	3301      	adds	r3, #1
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	623b      	str	r3, [r7, #32]
 8004b52:	6a3a      	ldr	r2, [r7, #32]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d3e6      	bcc.n	8004b28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b5a:	8bfb      	ldrh	r3, [r7, #30]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01e      	beq.n	8004b9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f107 0310 	add.w	r3, r7, #16
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	701a      	strb	r2, [r3, #0]
      i++;
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	3301      	adds	r3, #1
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b92:	8bfb      	ldrh	r3, [r7, #30]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b98:	8bfb      	ldrh	r3, [r7, #30]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1ea      	bne.n	8004b74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	372c      	adds	r7, #44	; 0x2c
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f003 0301 	and.w	r3, r3, #1
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c0c:	f023 0303 	bic.w	r3, r3, #3
 8004c10:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	68f9      	ldr	r1, [r7, #12]
 8004c22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d107      	bne.n	8004c40 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c36:	461a      	mov	r2, r3
 8004c38:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c3c:	6053      	str	r3, [r2, #4]
 8004c3e:	e009      	b.n	8004c54 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d106      	bne.n	8004c54 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c52:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	b29b      	uxth	r3, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	; 0x24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	0c9b      	lsrs	r3, r3, #18
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	0fdb      	lsrs	r3, r3, #31
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d104      	bne.n	8004cde <USB_HC_Halt+0x5a>
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e0c8      	b.n	8004e70 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <USB_HC_Halt+0x66>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d163      	bne.n	8004db2 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d08:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 80ab 	bne.w	8004e6e <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d133      	bne.n	8004d8c <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d42:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d62:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d70:	d81d      	bhi.n	8004dae <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d88:	d0ec      	beq.n	8004d64 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004d8a:	e070      	b.n	8004e6e <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004daa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004dac:	e05f      	b.n	8004e6e <USB_HC_Halt+0x1ea>
            break;
 8004dae:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004db0:	e05d      	b.n	8004e6e <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dd0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d133      	bne.n	8004e4a <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e00:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e20:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3301      	adds	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e2e:	d81d      	bhi.n	8004e6c <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e46:	d0ec      	beq.n	8004e22 <USB_HC_Halt+0x19e>
 8004e48:	e011      	b.n	8004e6e <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e000      	b.n	8004e6e <USB_HC_Halt+0x1ea>
          break;
 8004e6c:	bf00      	nop
    }
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3724      	adds	r7, #36	; 0x24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff fdbe 	bl	8004a12 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e96:	2110      	movs	r1, #16
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff fdcb 	bl	8004a34 <USB_FlushTxFifo>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff fdf7 	bl	8004a9c <USB_FlushRxFifo>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61bb      	str	r3, [r7, #24]
 8004ebc:	e01f      	b.n	8004efe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ed4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004edc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ee4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	3301      	adds	r3, #1
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b0f      	cmp	r3, #15
 8004f02:	d9dc      	bls.n	8004ebe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004f04:	2300      	movs	r3, #0
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	e034      	b.n	8004f74 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f20:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3e:	461a      	mov	r2, r3
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f50:	d80c      	bhi.n	8004f6c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f68:	d0ec      	beq.n	8004f44 <USB_StopHost+0xc8>
 8004f6a:	e000      	b.n	8004f6e <USB_StopHost+0xf2>
        break;
 8004f6c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	3301      	adds	r3, #1
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b0f      	cmp	r3, #15
 8004f78:	d9c7      	bls.n	8004f0a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f80:	461a      	mov	r2, r3
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295
 8004f86:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff fd2d 	bl	80049f0 <USB_EnableGlobalInt>

  return ret;
 8004f96:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f804 	bl	8004fc4 <USBH_HandleSof>
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b0b      	cmp	r3, #11
 8004fd4:	d10a      	bne.n	8004fec <USBH_HandleSof+0x28>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
  }
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005004:	bf00      	nop
}
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005020:	bf00      	nop
}
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f883 	bl	8005186 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	791b      	ldrb	r3, [r3, #4]
 8005084:	4619      	mov	r1, r3
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f80b 	bl	80050a2 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	795b      	ldrb	r3, [r3, #5]
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f805 	bl	80050a2 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	460b      	mov	r3, r1
 80050ac:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	2b0f      	cmp	r3, #15
 80050b2:	d80d      	bhi.n	80050d0 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	33e0      	adds	r3, #224	; 0xe0
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	33e0      	adds	r3, #224	; 0xe0
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff ff57 	bl	8004fa0 <USBH_LL_IncTimer>
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff ff8f 	bl	800502c <USBH_LL_Connect>
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff ff98 	bl	800505a <USBH_LL_Disconnect>
}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	70fb      	strb	r3, [r7, #3]
 800513e:	4613      	mov	r3, r2
 8005140:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff ff49 	bl	8004ff4 <USBH_LL_PortEnabled>
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff ff49 	bl	8005010 <USBH_LL_PortDisabled>
}
 800517e:	bf00      	nop
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800519c:	4618      	mov	r0, r3
 800519e:	f7fc fb5f 	bl	8001860 <HAL_HCD_Stop>
 80051a2:	4603      	mov	r3, r0
 80051a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 f807 	bl	80051bc <USBH_Get_USB_Status>
 80051ae:	4603      	mov	r3, r0
 80051b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d817      	bhi.n	8005200 <USBH_Get_USB_Status+0x44>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <USBH_Get_USB_Status+0x1c>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051ef 	.word	0x080051ef
 80051e0:	080051f5 	.word	0x080051f5
 80051e4:	080051fb 	.word	0x080051fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	73fb      	strb	r3, [r7, #15]
    break;
 80051ec:	e00b      	b.n	8005206 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80051ee:	2302      	movs	r3, #2
 80051f0:	73fb      	strb	r3, [r7, #15]
    break;
 80051f2:	e008      	b.n	8005206 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
    break;
 80051f8:	e005      	b.n	8005206 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80051fa:	2302      	movs	r3, #2
 80051fc:	73fb      	strb	r3, [r7, #15]
    break;
 80051fe:	e002      	b.n	8005206 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005200:	2302      	movs	r3, #2
 8005202:	73fb      	strb	r3, [r7, #15]
    break;
 8005204:	bf00      	nop
  }
  return usb_status;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <__errno>:
 8005214:	4b01      	ldr	r3, [pc, #4]	; (800521c <__errno+0x8>)
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	2000000c 	.word	0x2000000c

08005220 <__libc_init_array>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	4d0d      	ldr	r5, [pc, #52]	; (8005258 <__libc_init_array+0x38>)
 8005224:	4c0d      	ldr	r4, [pc, #52]	; (800525c <__libc_init_array+0x3c>)
 8005226:	1b64      	subs	r4, r4, r5
 8005228:	10a4      	asrs	r4, r4, #2
 800522a:	2600      	movs	r6, #0
 800522c:	42a6      	cmp	r6, r4
 800522e:	d109      	bne.n	8005244 <__libc_init_array+0x24>
 8005230:	4d0b      	ldr	r5, [pc, #44]	; (8005260 <__libc_init_array+0x40>)
 8005232:	4c0c      	ldr	r4, [pc, #48]	; (8005264 <__libc_init_array+0x44>)
 8005234:	f000 fc8e 	bl	8005b54 <_init>
 8005238:	1b64      	subs	r4, r4, r5
 800523a:	10a4      	asrs	r4, r4, #2
 800523c:	2600      	movs	r6, #0
 800523e:	42a6      	cmp	r6, r4
 8005240:	d105      	bne.n	800524e <__libc_init_array+0x2e>
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	f855 3b04 	ldr.w	r3, [r5], #4
 8005248:	4798      	blx	r3
 800524a:	3601      	adds	r6, #1
 800524c:	e7ee      	b.n	800522c <__libc_init_array+0xc>
 800524e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005252:	4798      	blx	r3
 8005254:	3601      	adds	r6, #1
 8005256:	e7f2      	b.n	800523e <__libc_init_array+0x1e>
 8005258:	08005bc8 	.word	0x08005bc8
 800525c:	08005bc8 	.word	0x08005bc8
 8005260:	08005bc8 	.word	0x08005bc8
 8005264:	08005bcc 	.word	0x08005bcc

08005268 <memset>:
 8005268:	4402      	add	r2, r0
 800526a:	4603      	mov	r3, r0
 800526c:	4293      	cmp	r3, r2
 800526e:	d100      	bne.n	8005272 <memset+0xa>
 8005270:	4770      	bx	lr
 8005272:	f803 1b01 	strb.w	r1, [r3], #1
 8005276:	e7f9      	b.n	800526c <memset+0x4>

08005278 <_free_r>:
 8005278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800527a:	2900      	cmp	r1, #0
 800527c:	d044      	beq.n	8005308 <_free_r+0x90>
 800527e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005282:	9001      	str	r0, [sp, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f1a1 0404 	sub.w	r4, r1, #4
 800528a:	bfb8      	it	lt
 800528c:	18e4      	addlt	r4, r4, r3
 800528e:	f000 f903 	bl	8005498 <__malloc_lock>
 8005292:	4a1e      	ldr	r2, [pc, #120]	; (800530c <_free_r+0x94>)
 8005294:	9801      	ldr	r0, [sp, #4]
 8005296:	6813      	ldr	r3, [r2, #0]
 8005298:	b933      	cbnz	r3, 80052a8 <_free_r+0x30>
 800529a:	6063      	str	r3, [r4, #4]
 800529c:	6014      	str	r4, [r2, #0]
 800529e:	b003      	add	sp, #12
 80052a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052a4:	f000 b8fe 	b.w	80054a4 <__malloc_unlock>
 80052a8:	42a3      	cmp	r3, r4
 80052aa:	d908      	bls.n	80052be <_free_r+0x46>
 80052ac:	6825      	ldr	r5, [r4, #0]
 80052ae:	1961      	adds	r1, r4, r5
 80052b0:	428b      	cmp	r3, r1
 80052b2:	bf01      	itttt	eq
 80052b4:	6819      	ldreq	r1, [r3, #0]
 80052b6:	685b      	ldreq	r3, [r3, #4]
 80052b8:	1949      	addeq	r1, r1, r5
 80052ba:	6021      	streq	r1, [r4, #0]
 80052bc:	e7ed      	b.n	800529a <_free_r+0x22>
 80052be:	461a      	mov	r2, r3
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	b10b      	cbz	r3, 80052c8 <_free_r+0x50>
 80052c4:	42a3      	cmp	r3, r4
 80052c6:	d9fa      	bls.n	80052be <_free_r+0x46>
 80052c8:	6811      	ldr	r1, [r2, #0]
 80052ca:	1855      	adds	r5, r2, r1
 80052cc:	42a5      	cmp	r5, r4
 80052ce:	d10b      	bne.n	80052e8 <_free_r+0x70>
 80052d0:	6824      	ldr	r4, [r4, #0]
 80052d2:	4421      	add	r1, r4
 80052d4:	1854      	adds	r4, r2, r1
 80052d6:	42a3      	cmp	r3, r4
 80052d8:	6011      	str	r1, [r2, #0]
 80052da:	d1e0      	bne.n	800529e <_free_r+0x26>
 80052dc:	681c      	ldr	r4, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	6053      	str	r3, [r2, #4]
 80052e2:	4421      	add	r1, r4
 80052e4:	6011      	str	r1, [r2, #0]
 80052e6:	e7da      	b.n	800529e <_free_r+0x26>
 80052e8:	d902      	bls.n	80052f0 <_free_r+0x78>
 80052ea:	230c      	movs	r3, #12
 80052ec:	6003      	str	r3, [r0, #0]
 80052ee:	e7d6      	b.n	800529e <_free_r+0x26>
 80052f0:	6825      	ldr	r5, [r4, #0]
 80052f2:	1961      	adds	r1, r4, r5
 80052f4:	428b      	cmp	r3, r1
 80052f6:	bf04      	itt	eq
 80052f8:	6819      	ldreq	r1, [r3, #0]
 80052fa:	685b      	ldreq	r3, [r3, #4]
 80052fc:	6063      	str	r3, [r4, #4]
 80052fe:	bf04      	itt	eq
 8005300:	1949      	addeq	r1, r1, r5
 8005302:	6021      	streq	r1, [r4, #0]
 8005304:	6054      	str	r4, [r2, #4]
 8005306:	e7ca      	b.n	800529e <_free_r+0x26>
 8005308:	b003      	add	sp, #12
 800530a:	bd30      	pop	{r4, r5, pc}
 800530c:	200004e4 	.word	0x200004e4

08005310 <sbrk_aligned>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	4e0e      	ldr	r6, [pc, #56]	; (800534c <sbrk_aligned+0x3c>)
 8005314:	460c      	mov	r4, r1
 8005316:	6831      	ldr	r1, [r6, #0]
 8005318:	4605      	mov	r5, r0
 800531a:	b911      	cbnz	r1, 8005322 <sbrk_aligned+0x12>
 800531c:	f000 f88c 	bl	8005438 <_sbrk_r>
 8005320:	6030      	str	r0, [r6, #0]
 8005322:	4621      	mov	r1, r4
 8005324:	4628      	mov	r0, r5
 8005326:	f000 f887 	bl	8005438 <_sbrk_r>
 800532a:	1c43      	adds	r3, r0, #1
 800532c:	d00a      	beq.n	8005344 <sbrk_aligned+0x34>
 800532e:	1cc4      	adds	r4, r0, #3
 8005330:	f024 0403 	bic.w	r4, r4, #3
 8005334:	42a0      	cmp	r0, r4
 8005336:	d007      	beq.n	8005348 <sbrk_aligned+0x38>
 8005338:	1a21      	subs	r1, r4, r0
 800533a:	4628      	mov	r0, r5
 800533c:	f000 f87c 	bl	8005438 <_sbrk_r>
 8005340:	3001      	adds	r0, #1
 8005342:	d101      	bne.n	8005348 <sbrk_aligned+0x38>
 8005344:	f04f 34ff 	mov.w	r4, #4294967295
 8005348:	4620      	mov	r0, r4
 800534a:	bd70      	pop	{r4, r5, r6, pc}
 800534c:	200004e8 	.word	0x200004e8

08005350 <_malloc_r>:
 8005350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005354:	1ccd      	adds	r5, r1, #3
 8005356:	f025 0503 	bic.w	r5, r5, #3
 800535a:	3508      	adds	r5, #8
 800535c:	2d0c      	cmp	r5, #12
 800535e:	bf38      	it	cc
 8005360:	250c      	movcc	r5, #12
 8005362:	2d00      	cmp	r5, #0
 8005364:	4607      	mov	r7, r0
 8005366:	db01      	blt.n	800536c <_malloc_r+0x1c>
 8005368:	42a9      	cmp	r1, r5
 800536a:	d905      	bls.n	8005378 <_malloc_r+0x28>
 800536c:	230c      	movs	r3, #12
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	2600      	movs	r6, #0
 8005372:	4630      	mov	r0, r6
 8005374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005378:	4e2e      	ldr	r6, [pc, #184]	; (8005434 <_malloc_r+0xe4>)
 800537a:	f000 f88d 	bl	8005498 <__malloc_lock>
 800537e:	6833      	ldr	r3, [r6, #0]
 8005380:	461c      	mov	r4, r3
 8005382:	bb34      	cbnz	r4, 80053d2 <_malloc_r+0x82>
 8005384:	4629      	mov	r1, r5
 8005386:	4638      	mov	r0, r7
 8005388:	f7ff ffc2 	bl	8005310 <sbrk_aligned>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	4604      	mov	r4, r0
 8005390:	d14d      	bne.n	800542e <_malloc_r+0xde>
 8005392:	6834      	ldr	r4, [r6, #0]
 8005394:	4626      	mov	r6, r4
 8005396:	2e00      	cmp	r6, #0
 8005398:	d140      	bne.n	800541c <_malloc_r+0xcc>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	4631      	mov	r1, r6
 800539e:	4638      	mov	r0, r7
 80053a0:	eb04 0803 	add.w	r8, r4, r3
 80053a4:	f000 f848 	bl	8005438 <_sbrk_r>
 80053a8:	4580      	cmp	r8, r0
 80053aa:	d13a      	bne.n	8005422 <_malloc_r+0xd2>
 80053ac:	6821      	ldr	r1, [r4, #0]
 80053ae:	3503      	adds	r5, #3
 80053b0:	1a6d      	subs	r5, r5, r1
 80053b2:	f025 0503 	bic.w	r5, r5, #3
 80053b6:	3508      	adds	r5, #8
 80053b8:	2d0c      	cmp	r5, #12
 80053ba:	bf38      	it	cc
 80053bc:	250c      	movcc	r5, #12
 80053be:	4629      	mov	r1, r5
 80053c0:	4638      	mov	r0, r7
 80053c2:	f7ff ffa5 	bl	8005310 <sbrk_aligned>
 80053c6:	3001      	adds	r0, #1
 80053c8:	d02b      	beq.n	8005422 <_malloc_r+0xd2>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	442b      	add	r3, r5
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	e00e      	b.n	80053f0 <_malloc_r+0xa0>
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	1b52      	subs	r2, r2, r5
 80053d6:	d41e      	bmi.n	8005416 <_malloc_r+0xc6>
 80053d8:	2a0b      	cmp	r2, #11
 80053da:	d916      	bls.n	800540a <_malloc_r+0xba>
 80053dc:	1961      	adds	r1, r4, r5
 80053de:	42a3      	cmp	r3, r4
 80053e0:	6025      	str	r5, [r4, #0]
 80053e2:	bf18      	it	ne
 80053e4:	6059      	strne	r1, [r3, #4]
 80053e6:	6863      	ldr	r3, [r4, #4]
 80053e8:	bf08      	it	eq
 80053ea:	6031      	streq	r1, [r6, #0]
 80053ec:	5162      	str	r2, [r4, r5]
 80053ee:	604b      	str	r3, [r1, #4]
 80053f0:	4638      	mov	r0, r7
 80053f2:	f104 060b 	add.w	r6, r4, #11
 80053f6:	f000 f855 	bl	80054a4 <__malloc_unlock>
 80053fa:	f026 0607 	bic.w	r6, r6, #7
 80053fe:	1d23      	adds	r3, r4, #4
 8005400:	1af2      	subs	r2, r6, r3
 8005402:	d0b6      	beq.n	8005372 <_malloc_r+0x22>
 8005404:	1b9b      	subs	r3, r3, r6
 8005406:	50a3      	str	r3, [r4, r2]
 8005408:	e7b3      	b.n	8005372 <_malloc_r+0x22>
 800540a:	6862      	ldr	r2, [r4, #4]
 800540c:	42a3      	cmp	r3, r4
 800540e:	bf0c      	ite	eq
 8005410:	6032      	streq	r2, [r6, #0]
 8005412:	605a      	strne	r2, [r3, #4]
 8005414:	e7ec      	b.n	80053f0 <_malloc_r+0xa0>
 8005416:	4623      	mov	r3, r4
 8005418:	6864      	ldr	r4, [r4, #4]
 800541a:	e7b2      	b.n	8005382 <_malloc_r+0x32>
 800541c:	4634      	mov	r4, r6
 800541e:	6876      	ldr	r6, [r6, #4]
 8005420:	e7b9      	b.n	8005396 <_malloc_r+0x46>
 8005422:	230c      	movs	r3, #12
 8005424:	603b      	str	r3, [r7, #0]
 8005426:	4638      	mov	r0, r7
 8005428:	f000 f83c 	bl	80054a4 <__malloc_unlock>
 800542c:	e7a1      	b.n	8005372 <_malloc_r+0x22>
 800542e:	6025      	str	r5, [r4, #0]
 8005430:	e7de      	b.n	80053f0 <_malloc_r+0xa0>
 8005432:	bf00      	nop
 8005434:	200004e4 	.word	0x200004e4

08005438 <_sbrk_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4d06      	ldr	r5, [pc, #24]	; (8005454 <_sbrk_r+0x1c>)
 800543c:	2300      	movs	r3, #0
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	602b      	str	r3, [r5, #0]
 8005444:	f7fb fd46 	bl	8000ed4 <_sbrk>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_sbrk_r+0x1a>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_sbrk_r+0x1a>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200004ec 	.word	0x200004ec

08005458 <siprintf>:
 8005458:	b40e      	push	{r1, r2, r3}
 800545a:	b500      	push	{lr}
 800545c:	b09c      	sub	sp, #112	; 0x70
 800545e:	ab1d      	add	r3, sp, #116	; 0x74
 8005460:	9002      	str	r0, [sp, #8]
 8005462:	9006      	str	r0, [sp, #24]
 8005464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005468:	4809      	ldr	r0, [pc, #36]	; (8005490 <siprintf+0x38>)
 800546a:	9107      	str	r1, [sp, #28]
 800546c:	9104      	str	r1, [sp, #16]
 800546e:	4909      	ldr	r1, [pc, #36]	; (8005494 <siprintf+0x3c>)
 8005470:	f853 2b04 	ldr.w	r2, [r3], #4
 8005474:	9105      	str	r1, [sp, #20]
 8005476:	6800      	ldr	r0, [r0, #0]
 8005478:	9301      	str	r3, [sp, #4]
 800547a:	a902      	add	r1, sp, #8
 800547c:	f000 f874 	bl	8005568 <_svfiprintf_r>
 8005480:	9b02      	ldr	r3, [sp, #8]
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	b01c      	add	sp, #112	; 0x70
 8005488:	f85d eb04 	ldr.w	lr, [sp], #4
 800548c:	b003      	add	sp, #12
 800548e:	4770      	bx	lr
 8005490:	2000000c 	.word	0x2000000c
 8005494:	ffff0208 	.word	0xffff0208

08005498 <__malloc_lock>:
 8005498:	4801      	ldr	r0, [pc, #4]	; (80054a0 <__malloc_lock+0x8>)
 800549a:	f000 baf9 	b.w	8005a90 <__retarget_lock_acquire_recursive>
 800549e:	bf00      	nop
 80054a0:	200004f0 	.word	0x200004f0

080054a4 <__malloc_unlock>:
 80054a4:	4801      	ldr	r0, [pc, #4]	; (80054ac <__malloc_unlock+0x8>)
 80054a6:	f000 baf4 	b.w	8005a92 <__retarget_lock_release_recursive>
 80054aa:	bf00      	nop
 80054ac:	200004f0 	.word	0x200004f0

080054b0 <__ssputs_r>:
 80054b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b4:	688e      	ldr	r6, [r1, #8]
 80054b6:	429e      	cmp	r6, r3
 80054b8:	4682      	mov	sl, r0
 80054ba:	460c      	mov	r4, r1
 80054bc:	4690      	mov	r8, r2
 80054be:	461f      	mov	r7, r3
 80054c0:	d838      	bhi.n	8005534 <__ssputs_r+0x84>
 80054c2:	898a      	ldrh	r2, [r1, #12]
 80054c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054c8:	d032      	beq.n	8005530 <__ssputs_r+0x80>
 80054ca:	6825      	ldr	r5, [r4, #0]
 80054cc:	6909      	ldr	r1, [r1, #16]
 80054ce:	eba5 0901 	sub.w	r9, r5, r1
 80054d2:	6965      	ldr	r5, [r4, #20]
 80054d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054dc:	3301      	adds	r3, #1
 80054de:	444b      	add	r3, r9
 80054e0:	106d      	asrs	r5, r5, #1
 80054e2:	429d      	cmp	r5, r3
 80054e4:	bf38      	it	cc
 80054e6:	461d      	movcc	r5, r3
 80054e8:	0553      	lsls	r3, r2, #21
 80054ea:	d531      	bpl.n	8005550 <__ssputs_r+0xa0>
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7ff ff2f 	bl	8005350 <_malloc_r>
 80054f2:	4606      	mov	r6, r0
 80054f4:	b950      	cbnz	r0, 800550c <__ssputs_r+0x5c>
 80054f6:	230c      	movs	r3, #12
 80054f8:	f8ca 3000 	str.w	r3, [sl]
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005502:	81a3      	strh	r3, [r4, #12]
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800550c:	6921      	ldr	r1, [r4, #16]
 800550e:	464a      	mov	r2, r9
 8005510:	f000 fac0 	bl	8005a94 <memcpy>
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800551a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551e:	81a3      	strh	r3, [r4, #12]
 8005520:	6126      	str	r6, [r4, #16]
 8005522:	6165      	str	r5, [r4, #20]
 8005524:	444e      	add	r6, r9
 8005526:	eba5 0509 	sub.w	r5, r5, r9
 800552a:	6026      	str	r6, [r4, #0]
 800552c:	60a5      	str	r5, [r4, #8]
 800552e:	463e      	mov	r6, r7
 8005530:	42be      	cmp	r6, r7
 8005532:	d900      	bls.n	8005536 <__ssputs_r+0x86>
 8005534:	463e      	mov	r6, r7
 8005536:	6820      	ldr	r0, [r4, #0]
 8005538:	4632      	mov	r2, r6
 800553a:	4641      	mov	r1, r8
 800553c:	f000 fab8 	bl	8005ab0 <memmove>
 8005540:	68a3      	ldr	r3, [r4, #8]
 8005542:	1b9b      	subs	r3, r3, r6
 8005544:	60a3      	str	r3, [r4, #8]
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	4433      	add	r3, r6
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	2000      	movs	r0, #0
 800554e:	e7db      	b.n	8005508 <__ssputs_r+0x58>
 8005550:	462a      	mov	r2, r5
 8005552:	f000 fac7 	bl	8005ae4 <_realloc_r>
 8005556:	4606      	mov	r6, r0
 8005558:	2800      	cmp	r0, #0
 800555a:	d1e1      	bne.n	8005520 <__ssputs_r+0x70>
 800555c:	6921      	ldr	r1, [r4, #16]
 800555e:	4650      	mov	r0, sl
 8005560:	f7ff fe8a 	bl	8005278 <_free_r>
 8005564:	e7c7      	b.n	80054f6 <__ssputs_r+0x46>
	...

08005568 <_svfiprintf_r>:
 8005568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556c:	4698      	mov	r8, r3
 800556e:	898b      	ldrh	r3, [r1, #12]
 8005570:	061b      	lsls	r3, r3, #24
 8005572:	b09d      	sub	sp, #116	; 0x74
 8005574:	4607      	mov	r7, r0
 8005576:	460d      	mov	r5, r1
 8005578:	4614      	mov	r4, r2
 800557a:	d50e      	bpl.n	800559a <_svfiprintf_r+0x32>
 800557c:	690b      	ldr	r3, [r1, #16]
 800557e:	b963      	cbnz	r3, 800559a <_svfiprintf_r+0x32>
 8005580:	2140      	movs	r1, #64	; 0x40
 8005582:	f7ff fee5 	bl	8005350 <_malloc_r>
 8005586:	6028      	str	r0, [r5, #0]
 8005588:	6128      	str	r0, [r5, #16]
 800558a:	b920      	cbnz	r0, 8005596 <_svfiprintf_r+0x2e>
 800558c:	230c      	movs	r3, #12
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	f04f 30ff 	mov.w	r0, #4294967295
 8005594:	e0d1      	b.n	800573a <_svfiprintf_r+0x1d2>
 8005596:	2340      	movs	r3, #64	; 0x40
 8005598:	616b      	str	r3, [r5, #20]
 800559a:	2300      	movs	r3, #0
 800559c:	9309      	str	r3, [sp, #36]	; 0x24
 800559e:	2320      	movs	r3, #32
 80055a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80055a8:	2330      	movs	r3, #48	; 0x30
 80055aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005754 <_svfiprintf_r+0x1ec>
 80055ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055b2:	f04f 0901 	mov.w	r9, #1
 80055b6:	4623      	mov	r3, r4
 80055b8:	469a      	mov	sl, r3
 80055ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055be:	b10a      	cbz	r2, 80055c4 <_svfiprintf_r+0x5c>
 80055c0:	2a25      	cmp	r2, #37	; 0x25
 80055c2:	d1f9      	bne.n	80055b8 <_svfiprintf_r+0x50>
 80055c4:	ebba 0b04 	subs.w	fp, sl, r4
 80055c8:	d00b      	beq.n	80055e2 <_svfiprintf_r+0x7a>
 80055ca:	465b      	mov	r3, fp
 80055cc:	4622      	mov	r2, r4
 80055ce:	4629      	mov	r1, r5
 80055d0:	4638      	mov	r0, r7
 80055d2:	f7ff ff6d 	bl	80054b0 <__ssputs_r>
 80055d6:	3001      	adds	r0, #1
 80055d8:	f000 80aa 	beq.w	8005730 <_svfiprintf_r+0x1c8>
 80055dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055de:	445a      	add	r2, fp
 80055e0:	9209      	str	r2, [sp, #36]	; 0x24
 80055e2:	f89a 3000 	ldrb.w	r3, [sl]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80a2 	beq.w	8005730 <_svfiprintf_r+0x1c8>
 80055ec:	2300      	movs	r3, #0
 80055ee:	f04f 32ff 	mov.w	r2, #4294967295
 80055f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055f6:	f10a 0a01 	add.w	sl, sl, #1
 80055fa:	9304      	str	r3, [sp, #16]
 80055fc:	9307      	str	r3, [sp, #28]
 80055fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005602:	931a      	str	r3, [sp, #104]	; 0x68
 8005604:	4654      	mov	r4, sl
 8005606:	2205      	movs	r2, #5
 8005608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560c:	4851      	ldr	r0, [pc, #324]	; (8005754 <_svfiprintf_r+0x1ec>)
 800560e:	f7fa fddf 	bl	80001d0 <memchr>
 8005612:	9a04      	ldr	r2, [sp, #16]
 8005614:	b9d8      	cbnz	r0, 800564e <_svfiprintf_r+0xe6>
 8005616:	06d0      	lsls	r0, r2, #27
 8005618:	bf44      	itt	mi
 800561a:	2320      	movmi	r3, #32
 800561c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005620:	0711      	lsls	r1, r2, #28
 8005622:	bf44      	itt	mi
 8005624:	232b      	movmi	r3, #43	; 0x2b
 8005626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800562a:	f89a 3000 	ldrb.w	r3, [sl]
 800562e:	2b2a      	cmp	r3, #42	; 0x2a
 8005630:	d015      	beq.n	800565e <_svfiprintf_r+0xf6>
 8005632:	9a07      	ldr	r2, [sp, #28]
 8005634:	4654      	mov	r4, sl
 8005636:	2000      	movs	r0, #0
 8005638:	f04f 0c0a 	mov.w	ip, #10
 800563c:	4621      	mov	r1, r4
 800563e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005642:	3b30      	subs	r3, #48	; 0x30
 8005644:	2b09      	cmp	r3, #9
 8005646:	d94e      	bls.n	80056e6 <_svfiprintf_r+0x17e>
 8005648:	b1b0      	cbz	r0, 8005678 <_svfiprintf_r+0x110>
 800564a:	9207      	str	r2, [sp, #28]
 800564c:	e014      	b.n	8005678 <_svfiprintf_r+0x110>
 800564e:	eba0 0308 	sub.w	r3, r0, r8
 8005652:	fa09 f303 	lsl.w	r3, r9, r3
 8005656:	4313      	orrs	r3, r2
 8005658:	9304      	str	r3, [sp, #16]
 800565a:	46a2      	mov	sl, r4
 800565c:	e7d2      	b.n	8005604 <_svfiprintf_r+0x9c>
 800565e:	9b03      	ldr	r3, [sp, #12]
 8005660:	1d19      	adds	r1, r3, #4
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	9103      	str	r1, [sp, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	bfbb      	ittet	lt
 800566a:	425b      	neglt	r3, r3
 800566c:	f042 0202 	orrlt.w	r2, r2, #2
 8005670:	9307      	strge	r3, [sp, #28]
 8005672:	9307      	strlt	r3, [sp, #28]
 8005674:	bfb8      	it	lt
 8005676:	9204      	strlt	r2, [sp, #16]
 8005678:	7823      	ldrb	r3, [r4, #0]
 800567a:	2b2e      	cmp	r3, #46	; 0x2e
 800567c:	d10c      	bne.n	8005698 <_svfiprintf_r+0x130>
 800567e:	7863      	ldrb	r3, [r4, #1]
 8005680:	2b2a      	cmp	r3, #42	; 0x2a
 8005682:	d135      	bne.n	80056f0 <_svfiprintf_r+0x188>
 8005684:	9b03      	ldr	r3, [sp, #12]
 8005686:	1d1a      	adds	r2, r3, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	9203      	str	r2, [sp, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	bfb8      	it	lt
 8005690:	f04f 33ff 	movlt.w	r3, #4294967295
 8005694:	3402      	adds	r4, #2
 8005696:	9305      	str	r3, [sp, #20]
 8005698:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005764 <_svfiprintf_r+0x1fc>
 800569c:	7821      	ldrb	r1, [r4, #0]
 800569e:	2203      	movs	r2, #3
 80056a0:	4650      	mov	r0, sl
 80056a2:	f7fa fd95 	bl	80001d0 <memchr>
 80056a6:	b140      	cbz	r0, 80056ba <_svfiprintf_r+0x152>
 80056a8:	2340      	movs	r3, #64	; 0x40
 80056aa:	eba0 000a 	sub.w	r0, r0, sl
 80056ae:	fa03 f000 	lsl.w	r0, r3, r0
 80056b2:	9b04      	ldr	r3, [sp, #16]
 80056b4:	4303      	orrs	r3, r0
 80056b6:	3401      	adds	r4, #1
 80056b8:	9304      	str	r3, [sp, #16]
 80056ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056be:	4826      	ldr	r0, [pc, #152]	; (8005758 <_svfiprintf_r+0x1f0>)
 80056c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056c4:	2206      	movs	r2, #6
 80056c6:	f7fa fd83 	bl	80001d0 <memchr>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d038      	beq.n	8005740 <_svfiprintf_r+0x1d8>
 80056ce:	4b23      	ldr	r3, [pc, #140]	; (800575c <_svfiprintf_r+0x1f4>)
 80056d0:	bb1b      	cbnz	r3, 800571a <_svfiprintf_r+0x1b2>
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	3307      	adds	r3, #7
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	3308      	adds	r3, #8
 80056dc:	9303      	str	r3, [sp, #12]
 80056de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e0:	4433      	add	r3, r6
 80056e2:	9309      	str	r3, [sp, #36]	; 0x24
 80056e4:	e767      	b.n	80055b6 <_svfiprintf_r+0x4e>
 80056e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80056ea:	460c      	mov	r4, r1
 80056ec:	2001      	movs	r0, #1
 80056ee:	e7a5      	b.n	800563c <_svfiprintf_r+0xd4>
 80056f0:	2300      	movs	r3, #0
 80056f2:	3401      	adds	r4, #1
 80056f4:	9305      	str	r3, [sp, #20]
 80056f6:	4619      	mov	r1, r3
 80056f8:	f04f 0c0a 	mov.w	ip, #10
 80056fc:	4620      	mov	r0, r4
 80056fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005702:	3a30      	subs	r2, #48	; 0x30
 8005704:	2a09      	cmp	r2, #9
 8005706:	d903      	bls.n	8005710 <_svfiprintf_r+0x1a8>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0c5      	beq.n	8005698 <_svfiprintf_r+0x130>
 800570c:	9105      	str	r1, [sp, #20]
 800570e:	e7c3      	b.n	8005698 <_svfiprintf_r+0x130>
 8005710:	fb0c 2101 	mla	r1, ip, r1, r2
 8005714:	4604      	mov	r4, r0
 8005716:	2301      	movs	r3, #1
 8005718:	e7f0      	b.n	80056fc <_svfiprintf_r+0x194>
 800571a:	ab03      	add	r3, sp, #12
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	462a      	mov	r2, r5
 8005720:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <_svfiprintf_r+0x1f8>)
 8005722:	a904      	add	r1, sp, #16
 8005724:	4638      	mov	r0, r7
 8005726:	f3af 8000 	nop.w
 800572a:	1c42      	adds	r2, r0, #1
 800572c:	4606      	mov	r6, r0
 800572e:	d1d6      	bne.n	80056de <_svfiprintf_r+0x176>
 8005730:	89ab      	ldrh	r3, [r5, #12]
 8005732:	065b      	lsls	r3, r3, #25
 8005734:	f53f af2c 	bmi.w	8005590 <_svfiprintf_r+0x28>
 8005738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800573a:	b01d      	add	sp, #116	; 0x74
 800573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005740:	ab03      	add	r3, sp, #12
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	462a      	mov	r2, r5
 8005746:	4b06      	ldr	r3, [pc, #24]	; (8005760 <_svfiprintf_r+0x1f8>)
 8005748:	a904      	add	r1, sp, #16
 800574a:	4638      	mov	r0, r7
 800574c:	f000 f87a 	bl	8005844 <_printf_i>
 8005750:	e7eb      	b.n	800572a <_svfiprintf_r+0x1c2>
 8005752:	bf00      	nop
 8005754:	08005b8c 	.word	0x08005b8c
 8005758:	08005b96 	.word	0x08005b96
 800575c:	00000000 	.word	0x00000000
 8005760:	080054b1 	.word	0x080054b1
 8005764:	08005b92 	.word	0x08005b92

08005768 <_printf_common>:
 8005768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800576c:	4616      	mov	r6, r2
 800576e:	4699      	mov	r9, r3
 8005770:	688a      	ldr	r2, [r1, #8]
 8005772:	690b      	ldr	r3, [r1, #16]
 8005774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005778:	4293      	cmp	r3, r2
 800577a:	bfb8      	it	lt
 800577c:	4613      	movlt	r3, r2
 800577e:	6033      	str	r3, [r6, #0]
 8005780:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005784:	4607      	mov	r7, r0
 8005786:	460c      	mov	r4, r1
 8005788:	b10a      	cbz	r2, 800578e <_printf_common+0x26>
 800578a:	3301      	adds	r3, #1
 800578c:	6033      	str	r3, [r6, #0]
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	0699      	lsls	r1, r3, #26
 8005792:	bf42      	ittt	mi
 8005794:	6833      	ldrmi	r3, [r6, #0]
 8005796:	3302      	addmi	r3, #2
 8005798:	6033      	strmi	r3, [r6, #0]
 800579a:	6825      	ldr	r5, [r4, #0]
 800579c:	f015 0506 	ands.w	r5, r5, #6
 80057a0:	d106      	bne.n	80057b0 <_printf_common+0x48>
 80057a2:	f104 0a19 	add.w	sl, r4, #25
 80057a6:	68e3      	ldr	r3, [r4, #12]
 80057a8:	6832      	ldr	r2, [r6, #0]
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	42ab      	cmp	r3, r5
 80057ae:	dc26      	bgt.n	80057fe <_printf_common+0x96>
 80057b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057b4:	1e13      	subs	r3, r2, #0
 80057b6:	6822      	ldr	r2, [r4, #0]
 80057b8:	bf18      	it	ne
 80057ba:	2301      	movne	r3, #1
 80057bc:	0692      	lsls	r2, r2, #26
 80057be:	d42b      	bmi.n	8005818 <_printf_common+0xb0>
 80057c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057c4:	4649      	mov	r1, r9
 80057c6:	4638      	mov	r0, r7
 80057c8:	47c0      	blx	r8
 80057ca:	3001      	adds	r0, #1
 80057cc:	d01e      	beq.n	800580c <_printf_common+0xa4>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	68e5      	ldr	r5, [r4, #12]
 80057d2:	6832      	ldr	r2, [r6, #0]
 80057d4:	f003 0306 	and.w	r3, r3, #6
 80057d8:	2b04      	cmp	r3, #4
 80057da:	bf08      	it	eq
 80057dc:	1aad      	subeq	r5, r5, r2
 80057de:	68a3      	ldr	r3, [r4, #8]
 80057e0:	6922      	ldr	r2, [r4, #16]
 80057e2:	bf0c      	ite	eq
 80057e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057e8:	2500      	movne	r5, #0
 80057ea:	4293      	cmp	r3, r2
 80057ec:	bfc4      	itt	gt
 80057ee:	1a9b      	subgt	r3, r3, r2
 80057f0:	18ed      	addgt	r5, r5, r3
 80057f2:	2600      	movs	r6, #0
 80057f4:	341a      	adds	r4, #26
 80057f6:	42b5      	cmp	r5, r6
 80057f8:	d11a      	bne.n	8005830 <_printf_common+0xc8>
 80057fa:	2000      	movs	r0, #0
 80057fc:	e008      	b.n	8005810 <_printf_common+0xa8>
 80057fe:	2301      	movs	r3, #1
 8005800:	4652      	mov	r2, sl
 8005802:	4649      	mov	r1, r9
 8005804:	4638      	mov	r0, r7
 8005806:	47c0      	blx	r8
 8005808:	3001      	adds	r0, #1
 800580a:	d103      	bne.n	8005814 <_printf_common+0xac>
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005814:	3501      	adds	r5, #1
 8005816:	e7c6      	b.n	80057a6 <_printf_common+0x3e>
 8005818:	18e1      	adds	r1, r4, r3
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	2030      	movs	r0, #48	; 0x30
 800581e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005822:	4422      	add	r2, r4
 8005824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800582c:	3302      	adds	r3, #2
 800582e:	e7c7      	b.n	80057c0 <_printf_common+0x58>
 8005830:	2301      	movs	r3, #1
 8005832:	4622      	mov	r2, r4
 8005834:	4649      	mov	r1, r9
 8005836:	4638      	mov	r0, r7
 8005838:	47c0      	blx	r8
 800583a:	3001      	adds	r0, #1
 800583c:	d0e6      	beq.n	800580c <_printf_common+0xa4>
 800583e:	3601      	adds	r6, #1
 8005840:	e7d9      	b.n	80057f6 <_printf_common+0x8e>
	...

08005844 <_printf_i>:
 8005844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	7e0f      	ldrb	r7, [r1, #24]
 800584a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800584c:	2f78      	cmp	r7, #120	; 0x78
 800584e:	4691      	mov	r9, r2
 8005850:	4680      	mov	r8, r0
 8005852:	460c      	mov	r4, r1
 8005854:	469a      	mov	sl, r3
 8005856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800585a:	d807      	bhi.n	800586c <_printf_i+0x28>
 800585c:	2f62      	cmp	r7, #98	; 0x62
 800585e:	d80a      	bhi.n	8005876 <_printf_i+0x32>
 8005860:	2f00      	cmp	r7, #0
 8005862:	f000 80d8 	beq.w	8005a16 <_printf_i+0x1d2>
 8005866:	2f58      	cmp	r7, #88	; 0x58
 8005868:	f000 80a3 	beq.w	80059b2 <_printf_i+0x16e>
 800586c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005874:	e03a      	b.n	80058ec <_printf_i+0xa8>
 8005876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800587a:	2b15      	cmp	r3, #21
 800587c:	d8f6      	bhi.n	800586c <_printf_i+0x28>
 800587e:	a101      	add	r1, pc, #4	; (adr r1, 8005884 <_printf_i+0x40>)
 8005880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005884:	080058dd 	.word	0x080058dd
 8005888:	080058f1 	.word	0x080058f1
 800588c:	0800586d 	.word	0x0800586d
 8005890:	0800586d 	.word	0x0800586d
 8005894:	0800586d 	.word	0x0800586d
 8005898:	0800586d 	.word	0x0800586d
 800589c:	080058f1 	.word	0x080058f1
 80058a0:	0800586d 	.word	0x0800586d
 80058a4:	0800586d 	.word	0x0800586d
 80058a8:	0800586d 	.word	0x0800586d
 80058ac:	0800586d 	.word	0x0800586d
 80058b0:	080059fd 	.word	0x080059fd
 80058b4:	08005921 	.word	0x08005921
 80058b8:	080059df 	.word	0x080059df
 80058bc:	0800586d 	.word	0x0800586d
 80058c0:	0800586d 	.word	0x0800586d
 80058c4:	08005a1f 	.word	0x08005a1f
 80058c8:	0800586d 	.word	0x0800586d
 80058cc:	08005921 	.word	0x08005921
 80058d0:	0800586d 	.word	0x0800586d
 80058d4:	0800586d 	.word	0x0800586d
 80058d8:	080059e7 	.word	0x080059e7
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	1d1a      	adds	r2, r3, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	602a      	str	r2, [r5, #0]
 80058e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0a3      	b.n	8005a38 <_printf_i+0x1f4>
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	6829      	ldr	r1, [r5, #0]
 80058f4:	0606      	lsls	r6, r0, #24
 80058f6:	f101 0304 	add.w	r3, r1, #4
 80058fa:	d50a      	bpl.n	8005912 <_printf_i+0xce>
 80058fc:	680e      	ldr	r6, [r1, #0]
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	2e00      	cmp	r6, #0
 8005902:	da03      	bge.n	800590c <_printf_i+0xc8>
 8005904:	232d      	movs	r3, #45	; 0x2d
 8005906:	4276      	negs	r6, r6
 8005908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800590c:	485e      	ldr	r0, [pc, #376]	; (8005a88 <_printf_i+0x244>)
 800590e:	230a      	movs	r3, #10
 8005910:	e019      	b.n	8005946 <_printf_i+0x102>
 8005912:	680e      	ldr	r6, [r1, #0]
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	f010 0f40 	tst.w	r0, #64	; 0x40
 800591a:	bf18      	it	ne
 800591c:	b236      	sxthne	r6, r6
 800591e:	e7ef      	b.n	8005900 <_printf_i+0xbc>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	6820      	ldr	r0, [r4, #0]
 8005924:	1d19      	adds	r1, r3, #4
 8005926:	6029      	str	r1, [r5, #0]
 8005928:	0601      	lsls	r1, r0, #24
 800592a:	d501      	bpl.n	8005930 <_printf_i+0xec>
 800592c:	681e      	ldr	r6, [r3, #0]
 800592e:	e002      	b.n	8005936 <_printf_i+0xf2>
 8005930:	0646      	lsls	r6, r0, #25
 8005932:	d5fb      	bpl.n	800592c <_printf_i+0xe8>
 8005934:	881e      	ldrh	r6, [r3, #0]
 8005936:	4854      	ldr	r0, [pc, #336]	; (8005a88 <_printf_i+0x244>)
 8005938:	2f6f      	cmp	r7, #111	; 0x6f
 800593a:	bf0c      	ite	eq
 800593c:	2308      	moveq	r3, #8
 800593e:	230a      	movne	r3, #10
 8005940:	2100      	movs	r1, #0
 8005942:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005946:	6865      	ldr	r5, [r4, #4]
 8005948:	60a5      	str	r5, [r4, #8]
 800594a:	2d00      	cmp	r5, #0
 800594c:	bfa2      	ittt	ge
 800594e:	6821      	ldrge	r1, [r4, #0]
 8005950:	f021 0104 	bicge.w	r1, r1, #4
 8005954:	6021      	strge	r1, [r4, #0]
 8005956:	b90e      	cbnz	r6, 800595c <_printf_i+0x118>
 8005958:	2d00      	cmp	r5, #0
 800595a:	d04d      	beq.n	80059f8 <_printf_i+0x1b4>
 800595c:	4615      	mov	r5, r2
 800595e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005962:	fb03 6711 	mls	r7, r3, r1, r6
 8005966:	5dc7      	ldrb	r7, [r0, r7]
 8005968:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800596c:	4637      	mov	r7, r6
 800596e:	42bb      	cmp	r3, r7
 8005970:	460e      	mov	r6, r1
 8005972:	d9f4      	bls.n	800595e <_printf_i+0x11a>
 8005974:	2b08      	cmp	r3, #8
 8005976:	d10b      	bne.n	8005990 <_printf_i+0x14c>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	07de      	lsls	r6, r3, #31
 800597c:	d508      	bpl.n	8005990 <_printf_i+0x14c>
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	6861      	ldr	r1, [r4, #4]
 8005982:	4299      	cmp	r1, r3
 8005984:	bfde      	ittt	le
 8005986:	2330      	movle	r3, #48	; 0x30
 8005988:	f805 3c01 	strble.w	r3, [r5, #-1]
 800598c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005990:	1b52      	subs	r2, r2, r5
 8005992:	6122      	str	r2, [r4, #16]
 8005994:	f8cd a000 	str.w	sl, [sp]
 8005998:	464b      	mov	r3, r9
 800599a:	aa03      	add	r2, sp, #12
 800599c:	4621      	mov	r1, r4
 800599e:	4640      	mov	r0, r8
 80059a0:	f7ff fee2 	bl	8005768 <_printf_common>
 80059a4:	3001      	adds	r0, #1
 80059a6:	d14c      	bne.n	8005a42 <_printf_i+0x1fe>
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	b004      	add	sp, #16
 80059ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b2:	4835      	ldr	r0, [pc, #212]	; (8005a88 <_printf_i+0x244>)
 80059b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059b8:	6829      	ldr	r1, [r5, #0]
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80059c0:	6029      	str	r1, [r5, #0]
 80059c2:	061d      	lsls	r5, r3, #24
 80059c4:	d514      	bpl.n	80059f0 <_printf_i+0x1ac>
 80059c6:	07df      	lsls	r7, r3, #31
 80059c8:	bf44      	itt	mi
 80059ca:	f043 0320 	orrmi.w	r3, r3, #32
 80059ce:	6023      	strmi	r3, [r4, #0]
 80059d0:	b91e      	cbnz	r6, 80059da <_printf_i+0x196>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	f023 0320 	bic.w	r3, r3, #32
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	2310      	movs	r3, #16
 80059dc:	e7b0      	b.n	8005940 <_printf_i+0xfc>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	f043 0320 	orr.w	r3, r3, #32
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	2378      	movs	r3, #120	; 0x78
 80059e8:	4828      	ldr	r0, [pc, #160]	; (8005a8c <_printf_i+0x248>)
 80059ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059ee:	e7e3      	b.n	80059b8 <_printf_i+0x174>
 80059f0:	0659      	lsls	r1, r3, #25
 80059f2:	bf48      	it	mi
 80059f4:	b2b6      	uxthmi	r6, r6
 80059f6:	e7e6      	b.n	80059c6 <_printf_i+0x182>
 80059f8:	4615      	mov	r5, r2
 80059fa:	e7bb      	b.n	8005974 <_printf_i+0x130>
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	6826      	ldr	r6, [r4, #0]
 8005a00:	6961      	ldr	r1, [r4, #20]
 8005a02:	1d18      	adds	r0, r3, #4
 8005a04:	6028      	str	r0, [r5, #0]
 8005a06:	0635      	lsls	r5, r6, #24
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	d501      	bpl.n	8005a10 <_printf_i+0x1cc>
 8005a0c:	6019      	str	r1, [r3, #0]
 8005a0e:	e002      	b.n	8005a16 <_printf_i+0x1d2>
 8005a10:	0670      	lsls	r0, r6, #25
 8005a12:	d5fb      	bpl.n	8005a0c <_printf_i+0x1c8>
 8005a14:	8019      	strh	r1, [r3, #0]
 8005a16:	2300      	movs	r3, #0
 8005a18:	6123      	str	r3, [r4, #16]
 8005a1a:	4615      	mov	r5, r2
 8005a1c:	e7ba      	b.n	8005994 <_printf_i+0x150>
 8005a1e:	682b      	ldr	r3, [r5, #0]
 8005a20:	1d1a      	adds	r2, r3, #4
 8005a22:	602a      	str	r2, [r5, #0]
 8005a24:	681d      	ldr	r5, [r3, #0]
 8005a26:	6862      	ldr	r2, [r4, #4]
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f7fa fbd0 	bl	80001d0 <memchr>
 8005a30:	b108      	cbz	r0, 8005a36 <_printf_i+0x1f2>
 8005a32:	1b40      	subs	r0, r0, r5
 8005a34:	6060      	str	r0, [r4, #4]
 8005a36:	6863      	ldr	r3, [r4, #4]
 8005a38:	6123      	str	r3, [r4, #16]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a40:	e7a8      	b.n	8005994 <_printf_i+0x150>
 8005a42:	6923      	ldr	r3, [r4, #16]
 8005a44:	462a      	mov	r2, r5
 8005a46:	4649      	mov	r1, r9
 8005a48:	4640      	mov	r0, r8
 8005a4a:	47d0      	blx	sl
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d0ab      	beq.n	80059a8 <_printf_i+0x164>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	079b      	lsls	r3, r3, #30
 8005a54:	d413      	bmi.n	8005a7e <_printf_i+0x23a>
 8005a56:	68e0      	ldr	r0, [r4, #12]
 8005a58:	9b03      	ldr	r3, [sp, #12]
 8005a5a:	4298      	cmp	r0, r3
 8005a5c:	bfb8      	it	lt
 8005a5e:	4618      	movlt	r0, r3
 8005a60:	e7a4      	b.n	80059ac <_printf_i+0x168>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4632      	mov	r2, r6
 8005a66:	4649      	mov	r1, r9
 8005a68:	4640      	mov	r0, r8
 8005a6a:	47d0      	blx	sl
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d09b      	beq.n	80059a8 <_printf_i+0x164>
 8005a70:	3501      	adds	r5, #1
 8005a72:	68e3      	ldr	r3, [r4, #12]
 8005a74:	9903      	ldr	r1, [sp, #12]
 8005a76:	1a5b      	subs	r3, r3, r1
 8005a78:	42ab      	cmp	r3, r5
 8005a7a:	dcf2      	bgt.n	8005a62 <_printf_i+0x21e>
 8005a7c:	e7eb      	b.n	8005a56 <_printf_i+0x212>
 8005a7e:	2500      	movs	r5, #0
 8005a80:	f104 0619 	add.w	r6, r4, #25
 8005a84:	e7f5      	b.n	8005a72 <_printf_i+0x22e>
 8005a86:	bf00      	nop
 8005a88:	08005b9d 	.word	0x08005b9d
 8005a8c:	08005bae 	.word	0x08005bae

08005a90 <__retarget_lock_acquire_recursive>:
 8005a90:	4770      	bx	lr

08005a92 <__retarget_lock_release_recursive>:
 8005a92:	4770      	bx	lr

08005a94 <memcpy>:
 8005a94:	440a      	add	r2, r1
 8005a96:	4291      	cmp	r1, r2
 8005a98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a9c:	d100      	bne.n	8005aa0 <memcpy+0xc>
 8005a9e:	4770      	bx	lr
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aaa:	4291      	cmp	r1, r2
 8005aac:	d1f9      	bne.n	8005aa2 <memcpy+0xe>
 8005aae:	bd10      	pop	{r4, pc}

08005ab0 <memmove>:
 8005ab0:	4288      	cmp	r0, r1
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	eb01 0402 	add.w	r4, r1, r2
 8005ab8:	d902      	bls.n	8005ac0 <memmove+0x10>
 8005aba:	4284      	cmp	r4, r0
 8005abc:	4623      	mov	r3, r4
 8005abe:	d807      	bhi.n	8005ad0 <memmove+0x20>
 8005ac0:	1e43      	subs	r3, r0, #1
 8005ac2:	42a1      	cmp	r1, r4
 8005ac4:	d008      	beq.n	8005ad8 <memmove+0x28>
 8005ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ace:	e7f8      	b.n	8005ac2 <memmove+0x12>
 8005ad0:	4402      	add	r2, r0
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	428a      	cmp	r2, r1
 8005ad6:	d100      	bne.n	8005ada <memmove+0x2a>
 8005ad8:	bd10      	pop	{r4, pc}
 8005ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ae2:	e7f7      	b.n	8005ad4 <memmove+0x24>

08005ae4 <_realloc_r>:
 8005ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae8:	4680      	mov	r8, r0
 8005aea:	4614      	mov	r4, r2
 8005aec:	460e      	mov	r6, r1
 8005aee:	b921      	cbnz	r1, 8005afa <_realloc_r+0x16>
 8005af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af4:	4611      	mov	r1, r2
 8005af6:	f7ff bc2b 	b.w	8005350 <_malloc_r>
 8005afa:	b92a      	cbnz	r2, 8005b08 <_realloc_r+0x24>
 8005afc:	f7ff fbbc 	bl	8005278 <_free_r>
 8005b00:	4625      	mov	r5, r4
 8005b02:	4628      	mov	r0, r5
 8005b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b08:	f000 f81b 	bl	8005b42 <_malloc_usable_size_r>
 8005b0c:	4284      	cmp	r4, r0
 8005b0e:	4607      	mov	r7, r0
 8005b10:	d802      	bhi.n	8005b18 <_realloc_r+0x34>
 8005b12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b16:	d812      	bhi.n	8005b3e <_realloc_r+0x5a>
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	f7ff fc18 	bl	8005350 <_malloc_r>
 8005b20:	4605      	mov	r5, r0
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d0ed      	beq.n	8005b02 <_realloc_r+0x1e>
 8005b26:	42bc      	cmp	r4, r7
 8005b28:	4622      	mov	r2, r4
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	bf28      	it	cs
 8005b2e:	463a      	movcs	r2, r7
 8005b30:	f7ff ffb0 	bl	8005a94 <memcpy>
 8005b34:	4631      	mov	r1, r6
 8005b36:	4640      	mov	r0, r8
 8005b38:	f7ff fb9e 	bl	8005278 <_free_r>
 8005b3c:	e7e1      	b.n	8005b02 <_realloc_r+0x1e>
 8005b3e:	4635      	mov	r5, r6
 8005b40:	e7df      	b.n	8005b02 <_realloc_r+0x1e>

08005b42 <_malloc_usable_size_r>:
 8005b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b46:	1f18      	subs	r0, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	bfbc      	itt	lt
 8005b4c:	580b      	ldrlt	r3, [r1, r0]
 8005b4e:	18c0      	addlt	r0, r0, r3
 8005b50:	4770      	bx	lr
	...

08005b54 <_init>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	bf00      	nop
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr

08005b60 <_fini>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	bf00      	nop
 8005b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b66:	bc08      	pop	{r3}
 8005b68:	469e      	mov	lr, r3
 8005b6a:	4770      	bx	lr
