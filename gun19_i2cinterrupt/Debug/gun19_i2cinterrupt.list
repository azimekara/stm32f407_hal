
gun19_i2cinterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006634  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d4  080067d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067dc  080067dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080067e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000440  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000450  20000450  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001328b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e98  00000000  00000000  000332cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00036168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e88  00000000  00000000  00037120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a33  00000000  00000000  00037fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001494b  00000000  00000000  0005a9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb0e2  00000000  00000000  0006f326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a408  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041d4  00000000  00000000  0013a458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080067a4 	.word	0x080067a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080067a4 	.word	0x080067a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fca5 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f81f 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f91b 	bl	8000714 <MX_GPIO_Init>
  MX_I2S3_Init();
 80004de:	f000 f8b3 	bl	8000648 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e2:	f000 f8e1 	bl	80006a8 <MX_SPI1_Init>
  MX_I2C3_Init();
 80004e6:	f000 f881 	bl	80005ec <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  setupr();
 80004ea:	f000 fa29 	bl	8000940 <setupr>

  //HAL_I2C_Mem_Read_DMA(&hi2c3, 0xd1, 0x3B, 1, pDataa, 6);
  HAL_Delay(5);
 80004ee:	2005      	movs	r0, #5
 80004f0:	f000 fd08 	bl	8000f04 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_Mem_Read_IT(&hi2c3, 0xd1, 0x3B, 1, pDataa, 6);
 80004f4:	2306      	movs	r3, #6
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <main+0x44>)
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2301      	movs	r3, #1
 80004fe:	223b      	movs	r2, #59	; 0x3b
 8000500:	21d1      	movs	r1, #209	; 0xd1
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <main+0x48>)
 8000504:	f002 fb82 	bl	8002c0c <HAL_I2C_Mem_Read_IT>
	  //HAL_I2C_Mem_Read(&hi2c3, 0xd1, 0x3B, 1, pDataa, 6,100);
	  HAL_Delay(5);
 8000508:	2005      	movs	r0, #5
 800050a:	f000 fcfb 	bl	8000f04 <HAL_Delay>
	  HAL_I2C_Mem_Read_IT(&hi2c3, 0xd1, 0x3B, 1, pDataa, 6);
 800050e:	e7f1      	b.n	80004f4 <main+0x28>
 8000510:	2000002c 	.word	0x2000002c
 8000514:	20000038 	.word	0x20000038

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f006 f934 	bl	8006794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fe74 	bl	800528c <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 f9c1 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2105      	movs	r1, #5
 80005cc:	4618      	mov	r0, r3
 80005ce:	f005 f8d5 	bl	800577c <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d8:	f000 f9aa 	bl	8000930 <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_I2C3_Init+0x50>)
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <MX_I2C3_Init+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_I2C3_Init+0x50>)
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_I2C3_Init+0x58>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_I2C3_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_I2C3_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_I2C3_Init+0x50>)
 800060a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_I2C3_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_I2C3_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_I2C3_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_I2C3_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_I2C3_Init+0x50>)
 800062a:	f002 f8b1 	bl	8002790 <HAL_I2C_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 f97c 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000038 	.word	0x20000038
 8000640:	40005c00 	.word	0x40005c00
 8000644:	000186a0 	.word	0x000186a0

08000648 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_I2S3_Init+0x54>)
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <MX_I2S3_Init+0x58>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2S3_Init+0x54>)
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_I2S3_Init+0x54>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_I2S3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_I2S3_Init+0x54>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <MX_I2S3_Init+0x5c>)
 8000672:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_I2S3_Init+0x54>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_I2S3_Init+0x54>)
 8000688:	f004 f960 	bl	800494c <HAL_I2S_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000692:	f000 f94d 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	40003c00 	.word	0x40003c00
 80006a4:	00017700 	.word	0x00017700

080006a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_SPI1_Init+0x64>)
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MX_SPI1_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_SPI1_Init+0x64>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_SPI1_Init+0x64>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_SPI1_Init+0x64>)
 80006fa:	f005 fb8b 	bl	8005e14 <HAL_SPI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f914 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000d4 	.word	0x200000d4
 8000710:	40013000 	.word	0x40013000

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	; 0x30
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
 800072e:	4b7a      	ldr	r3, [pc, #488]	; (8000918 <MX_GPIO_Init+0x204>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a79      	ldr	r2, [pc, #484]	; (8000918 <MX_GPIO_Init+0x204>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b77      	ldr	r3, [pc, #476]	; (8000918 <MX_GPIO_Init+0x204>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	4b73      	ldr	r3, [pc, #460]	; (8000918 <MX_GPIO_Init+0x204>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a72      	ldr	r2, [pc, #456]	; (8000918 <MX_GPIO_Init+0x204>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b70      	ldr	r3, [pc, #448]	; (8000918 <MX_GPIO_Init+0x204>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b6c      	ldr	r3, [pc, #432]	; (8000918 <MX_GPIO_Init+0x204>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a6b      	ldr	r2, [pc, #428]	; (8000918 <MX_GPIO_Init+0x204>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b69      	ldr	r3, [pc, #420]	; (8000918 <MX_GPIO_Init+0x204>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b65      	ldr	r3, [pc, #404]	; (8000918 <MX_GPIO_Init+0x204>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a64      	ldr	r2, [pc, #400]	; (8000918 <MX_GPIO_Init+0x204>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b62      	ldr	r3, [pc, #392]	; (8000918 <MX_GPIO_Init+0x204>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b5e      	ldr	r3, [pc, #376]	; (8000918 <MX_GPIO_Init+0x204>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a5d      	ldr	r2, [pc, #372]	; (8000918 <MX_GPIO_Init+0x204>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b5b      	ldr	r3, [pc, #364]	; (8000918 <MX_GPIO_Init+0x204>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b57      	ldr	r3, [pc, #348]	; (8000918 <MX_GPIO_Init+0x204>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a56      	ldr	r2, [pc, #344]	; (8000918 <MX_GPIO_Init+0x204>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b54      	ldr	r3, [pc, #336]	; (8000918 <MX_GPIO_Init+0x204>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2108      	movs	r1, #8
 80007d6:	4851      	ldr	r0, [pc, #324]	; (800091c <MX_GPIO_Init+0x208>)
 80007d8:	f000 fe96 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2101      	movs	r1, #1
 80007e0:	484f      	ldr	r0, [pc, #316]	; (8000920 <MX_GPIO_Init+0x20c>)
 80007e2:	f000 fe91 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007e6:	2200      	movs	r2, #0
 80007e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007ec:	484d      	ldr	r0, [pc, #308]	; (8000924 <MX_GPIO_Init+0x210>)
 80007ee:	f000 fe8b 	bl	8001508 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4844      	ldr	r0, [pc, #272]	; (800091c <MX_GPIO_Init+0x208>)
 800080a:	f000 fce1 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800080e:	2301      	movs	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	483e      	ldr	r0, [pc, #248]	; (8000920 <MX_GPIO_Init+0x20c>)
 8000826:	f000 fcd3 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082a:	2308      	movs	r3, #8
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083a:	2305      	movs	r3, #5
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4836      	ldr	r0, [pc, #216]	; (8000920 <MX_GPIO_Init+0x20c>)
 8000846:	f000 fcc3 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800084e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4832      	ldr	r0, [pc, #200]	; (8000928 <MX_GPIO_Init+0x214>)
 8000860:	f000 fcb6 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000864:	2304      	movs	r3, #4
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	482d      	ldr	r0, [pc, #180]	; (800092c <MX_GPIO_Init+0x218>)
 8000878:	f000 fcaa 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088e:	2305      	movs	r3, #5
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4824      	ldr	r0, [pc, #144]	; (800092c <MX_GPIO_Init+0x218>)
 800089a:	f000 fc99 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089e:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	481b      	ldr	r0, [pc, #108]	; (8000924 <MX_GPIO_Init+0x210>)
 80008b8:	f000 fc8a 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4815      	ldr	r0, [pc, #84]	; (8000924 <MX_GPIO_Init+0x210>)
 80008d0:	f000 fc7e 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008d4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008da:	2312      	movs	r3, #18
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e6:	2304      	movs	r3, #4
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	480e      	ldr	r0, [pc, #56]	; (800092c <MX_GPIO_Init+0x218>)
 80008f2:	f000 fc6d 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0x208>)
 800090c:	f000 fc60 	bl	80011d0 <HAL_GPIO_Init>

}
 8000910:	bf00      	nop
 8000912:	3730      	adds	r7, #48	; 0x30
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40021000 	.word	0x40021000
 8000920:	40020800 	.word	0x40020800
 8000924:	40020c00 	.word	0x40020c00
 8000928:	40020000 	.word	0x40020000
 800092c:	40020400 	.word	0x40020400

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
 800093a:	0000      	movs	r0, r0
 800093c:	0000      	movs	r0, r0
	...

08000940 <setupr>:
int mpu9250inst, ak8963inst;

char init_seq = 0;

void setupr(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x6B, 1, &deger1, 1, 100);
 8000946:	2364      	movs	r3, #100	; 0x64
 8000948:	9302      	str	r3, [sp, #8]
 800094a:	2301      	movs	r3, #1
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <setupr+0x100>)
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2301      	movs	r3, #1
 8000954:	226b      	movs	r2, #107	; 0x6b
 8000956:	21d0      	movs	r1, #208	; 0xd0
 8000958:	483a      	ldr	r0, [pc, #232]	; (8000a44 <setupr+0x104>)
 800095a:	f002 f85d 	bl	8002a18 <HAL_I2C_Mem_Write>
	// Accel Range +-2g
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1C, 1, &deger1, 1, 100);
 800095e:	2364      	movs	r3, #100	; 0x64
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	2301      	movs	r3, #1
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <setupr+0x100>)
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2301      	movs	r3, #1
 800096c:	221c      	movs	r2, #28
 800096e:	21d0      	movs	r1, #208	; 0xd0
 8000970:	4834      	ldr	r0, [pc, #208]	; (8000a44 <setupr+0x104>)
 8000972:	f002 f851 	bl	8002a18 <HAL_I2C_Mem_Write>
	accl_scale = 16384.0;
 8000976:	4934      	ldr	r1, [pc, #208]	; (8000a48 <setupr+0x108>)
 8000978:	f04f 0200 	mov.w	r2, #0
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <setupr+0x10c>)
 800097e:	e9c1 2300 	strd	r2, r3, [r1]
	// Filter 420 Hz
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1D, 1, &deger4, 1, 100);
 8000982:	2364      	movs	r3, #100	; 0x64
 8000984:	9302      	str	r3, [sp, #8]
 8000986:	2301      	movs	r3, #1
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <setupr+0x110>)
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	2301      	movs	r3, #1
 8000990:	221d      	movs	r2, #29
 8000992:	21d0      	movs	r1, #208	; 0xd0
 8000994:	482b      	ldr	r0, [pc, #172]	; (8000a44 <setupr+0x104>)
 8000996:	f002 f83f 	bl	8002a18 <HAL_I2C_Mem_Write>
	 // Gyro Range +-250 degrees/s
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1B, 1, &deger1, 1, 100);
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	2301      	movs	r3, #1
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <setupr+0x100>)
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	2301      	movs	r3, #1
 80009a8:	221b      	movs	r2, #27
 80009aa:	21d0      	movs	r1, #208	; 0xd0
 80009ac:	4825      	ldr	r0, [pc, #148]	; (8000a44 <setupr+0x104>)
 80009ae:	f002 f833 	bl	8002a18 <HAL_I2C_Mem_Write>
	gyro_scale = 131.0;
 80009b2:	4928      	ldr	r1, [pc, #160]	; (8000a54 <setupr+0x114>)
 80009b4:	a31e      	add	r3, pc, #120	; (adr r3, 8000a30 <setupr+0xf0>)
 80009b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ba:	e9c1 2300 	strd	r2, r3, [r1]
	// DLPF Bandwidth = 10
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1A, 1, &deger3, 1, 100);
 80009be:	2364      	movs	r3, #100	; 0x64
 80009c0:	9302      	str	r3, [sp, #8]
 80009c2:	2301      	movs	r3, #1
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <setupr+0x118>)
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	221a      	movs	r2, #26
 80009ce:	21d0      	movs	r1, #208	; 0xd0
 80009d0:	481c      	ldr	r0, [pc, #112]	; (8000a44 <setupr+0x104>)
 80009d2:	f002 f821 	bl	8002a18 <HAL_I2C_Mem_Write>
	// Enable Magnetometer (address 0x0c)
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x37, 1, &deger2, 1, 100);
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2301      	movs	r3, #1
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <setupr+0x11c>)
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2301      	movs	r3, #1
 80009e4:	2237      	movs	r2, #55	; 0x37
 80009e6:	21d0      	movs	r1, #208	; 0xd0
 80009e8:	4816      	ldr	r0, [pc, #88]	; (8000a44 <setupr+0x104>)
 80009ea:	f002 f815 	bl	8002a18 <HAL_I2C_Mem_Write>
	// Set power-down mode before the transition to another mode.
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x0A, 1, &deger1, 1, 100);
 80009ee:	2364      	movs	r3, #100	; 0x64
 80009f0:	9302      	str	r3, [sp, #8]
 80009f2:	2301      	movs	r3, #1
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <setupr+0x100>)
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2301      	movs	r3, #1
 80009fc:	220a      	movs	r2, #10
 80009fe:	21d0      	movs	r1, #208	; 0xd0
 8000a00:	4810      	ldr	r0, [pc, #64]	; (8000a44 <setupr+0x104>)
 8000a02:	f002 f809 	bl	8002a18 <HAL_I2C_Mem_Write>
	// Set Continuous measurement mode 0x12 - 8Hz & 16-bit; 0x16 - 100 Hz & 16-bit
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x0A, 1, &deger5, 1, 100);
 8000a06:	2364      	movs	r3, #100	; 0x64
 8000a08:	9302      	str	r3, [sp, #8]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <setupr+0x120>)
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2301      	movs	r3, #1
 8000a14:	220a      	movs	r2, #10
 8000a16:	21d0      	movs	r1, #208	; 0xd0
 8000a18:	480a      	ldr	r0, [pc, #40]	; (8000a44 <setupr+0x104>)
 8000a1a:	f001 fffd 	bl	8002a18 <HAL_I2C_Mem_Write>
	magn_scale = 6826.7;
 8000a1e:	4911      	ldr	r1, [pc, #68]	; (8000a64 <setupr+0x124>)
 8000a20:	a305      	add	r3, pc, #20	; (adr r3, 8000a38 <setupr+0xf8>)
 8000a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a26:	e9c1 2300 	strd	r2, r3, [r1]

}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	00000000 	.word	0x00000000
 8000a34:	40606000 	.word	0x40606000
 8000a38:	33333333 	.word	0x33333333
 8000a3c:	40baaab3 	.word	0x40baaab3
 8000a40:	2000012c 	.word	0x2000012c
 8000a44:	20000038 	.word	0x20000038
 8000a48:	20000130 	.word	0x20000130
 8000a4c:	40d00000 	.word	0x40d00000
 8000a50:	20000002 	.word	0x20000002
 8000a54:	20000138 	.word	0x20000138
 8000a58:	20000001 	.word	0x20000001
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000003 	.word	0x20000003
 8000a64:	20000140 	.word	0x20000140

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa6:	2007      	movs	r0, #7
 8000aa8:	f000 fb20 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a2d      	ldr	r2, [pc, #180]	; (8000b8c <HAL_I2C_MspInit+0xd4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d153      	bne.n	8000b82 <HAL_I2C_MspInit+0xca>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <HAL_I2C_MspInit+0xd8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a2b      	ldr	r2, [pc, #172]	; (8000b90 <HAL_I2C_MspInit+0xd8>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <HAL_I2C_MspInit+0xd8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <HAL_I2C_MspInit+0xd8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <HAL_I2C_MspInit+0xd8>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <HAL_I2C_MspInit+0xd8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b18:	2312      	movs	r3, #18
 8000b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b24:	2304      	movs	r3, #4
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4819      	ldr	r0, [pc, #100]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000b30:	f000 fb4e 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3a:	2312      	movs	r3, #18
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b46:	2304      	movs	r3, #4
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4811      	ldr	r0, [pc, #68]	; (8000b98 <HAL_I2C_MspInit+0xe0>)
 8000b52:	f000 fb3d 	bl	80011d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_I2C_MspInit+0xd8>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <HAL_I2C_MspInit+0xd8>)
 8000b60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_I2C_MspInit+0xd8>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2048      	movs	r0, #72	; 0x48
 8000b78:	f000 fac3 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000b7c:	2048      	movs	r0, #72	; 0x48
 8000b7e:	f000 fadc 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40005c00 	.word	0x40005c00
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020000 	.word	0x40020000

08000b9c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	; 0x38
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <HAL_I2S_MspInit+0xf0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d15a      	bne.n	8000c82 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bd0:	23c0      	movs	r3, #192	; 0xc0
 8000bd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 ffd9 	bl	8005b94 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000be8:	f7ff fea2 	bl	8000930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <HAL_I2S_MspInit+0xf4>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	4a26      	ldr	r2, [pc, #152]	; (8000c90 <HAL_I2S_MspInit+0xf4>)
 8000bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <HAL_I2S_MspInit+0xf4>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <HAL_I2S_MspInit+0xf4>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <HAL_I2S_MspInit+0xf4>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <HAL_I2S_MspInit+0xf4>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_I2S_MspInit+0xf4>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <HAL_I2S_MspInit+0xf4>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <HAL_I2S_MspInit+0xf4>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c40:	2310      	movs	r3, #16
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c50:	2306      	movs	r3, #6
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480e      	ldr	r0, [pc, #56]	; (8000c94 <HAL_I2S_MspInit+0xf8>)
 8000c5c:	f000 fab8 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c60:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c72:	2306      	movs	r3, #6
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4806      	ldr	r0, [pc, #24]	; (8000c98 <HAL_I2S_MspInit+0xfc>)
 8000c7e:	f000 faa7 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3738      	adds	r7, #56	; 0x38
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40003c00 	.word	0x40003c00
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020800 	.word	0x40020800

08000c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <HAL_SPI_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12b      	bne.n	8000d16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cf6:	23e0      	movs	r3, #224	; 0xe0
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d06:	2305      	movs	r3, #5
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000d12:	f000 fa5d 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40013000 	.word	0x40013000
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f8a4 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <OTG_FS_IRQHandler+0x10>)
 8000d86:	f000 fbd8 	bl	800153a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000014c 	.word	0x2000014c

08000d94 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <I2C3_EV_IRQHandler+0x10>)
 8000d9a:	f001 fff5 	bl	8002d88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000038 	.word	0x20000038

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd2:	490e      	ldr	r1, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de8:	4c0b      	ldr	r4, [pc, #44]	; (8000e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df6:	f7ff ffd7 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f005 fca7 	bl	800674c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fb65 	bl	80004cc <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e10:	080067e4 	.word	0x080067e4
  ldr r2, =_sbss
 8000e14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e18:	20000450 	.word	0x20000450

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f94f 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fe08 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f967 	bl	8001156 <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f92f 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000004 	.word	0x20000004
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	20000148 	.word	0x20000148

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000148 	.word	0x20000148

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff ffee 	bl	8000eec <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1c:	d005      	beq.n	8000f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_Delay+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2a:	bf00      	nop
 8000f2c:	f7ff ffde 	bl	8000eec <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <HAL_Delay+0x28>
  {
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000000c 	.word	0x2000000c

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff8e 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff29 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff3e 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff8e 	bl	8001040 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5d 	bl	8000fec <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff31 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffa2 	bl	80010a8 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d004      	beq.n	800118c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e00c      	b.n	80011a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2205      	movs	r2, #5
 8001190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c0:	b2db      	uxtb	r3, r3
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	e16b      	b.n	80014c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 815a 	bne.w	80014be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d005      	beq.n	8001222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	2b02      	cmp	r3, #2
 8001220:	d130      	bne.n	8001284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 0201 	and.w	r2, r3, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b03      	cmp	r3, #3
 800128e:	d017      	beq.n	80012c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d123      	bne.n	8001314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	69b9      	ldr	r1, [r7, #24]
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80b4 	beq.w	80014be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b60      	ldr	r3, [pc, #384]	; (80014dc <HAL_GPIO_Init+0x30c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a5f      	ldr	r2, [pc, #380]	; (80014dc <HAL_GPIO_Init+0x30c>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_GPIO_Init+0x30c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001372:	4a5b      	ldr	r2, [pc, #364]	; (80014e0 <HAL_GPIO_Init+0x310>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_GPIO_Init+0x314>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d02b      	beq.n	80013f6 <HAL_GPIO_Init+0x226>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a51      	ldr	r2, [pc, #324]	; (80014e8 <HAL_GPIO_Init+0x318>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d025      	beq.n	80013f2 <HAL_GPIO_Init+0x222>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a50      	ldr	r2, [pc, #320]	; (80014ec <HAL_GPIO_Init+0x31c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01f      	beq.n	80013ee <HAL_GPIO_Init+0x21e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	; (80014f0 <HAL_GPIO_Init+0x320>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <HAL_GPIO_Init+0x324>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <HAL_GPIO_Init+0x328>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_GPIO_Init+0x32c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_GPIO_Init+0x330>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d101      	bne.n	80013da <HAL_GPIO_Init+0x20a>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00e      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013da:	2308      	movs	r3, #8
 80013dc:	e00c      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013de:	2306      	movs	r3, #6
 80013e0:	e00a      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e008      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e004      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013f6:	2300      	movs	r3, #0
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f002 0203 	and.w	r2, r2, #3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4093      	lsls	r3, r2
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001408:	4935      	ldr	r1, [pc, #212]	; (80014e0 <HAL_GPIO_Init+0x310>)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143a:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_GPIO_Init+0x334>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <HAL_GPIO_Init+0x334>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148e:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <HAL_GPIO_Init+0x334>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	f67f ae90 	bls.w	80011ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40021400 	.word	0x40021400
 80014fc:	40021800 	.word	0x40021800
 8001500:	40021c00 	.word	0x40021c00
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fdda 	bl	800610a <USB_GetMode>
 8001556:	4603      	mov	r3, r0
 8001558:	2b01      	cmp	r3, #1
 800155a:	f040 80f6 	bne.w	800174a <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f004 fdbe 	bl	80060e4 <USB_ReadInterrupts>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 80ec 	beq.w	8001748 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f004 fdb5 	bl	80060e4 <USB_ReadInterrupts>
 800157a:	4603      	mov	r3, r0
 800157c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001584:	d104      	bne.n	8001590 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800158e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f004 fda5 	bl	80060e4 <USB_ReadInterrupts>
 800159a:	4603      	mov	r3, r0
 800159c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015a4:	d104      	bne.n	80015b0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015ae:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 fd95 	bl	80060e4 <USB_ReadInterrupts>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015c4:	d104      	bne.n	80015d0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015ce:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f004 fd85 	bl	80060e4 <USB_ReadInterrupts>
 80015da:	4603      	mov	r3, r0
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d103      	bne.n	80015ec <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2202      	movs	r2, #2
 80015ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 fd77 	bl	80060e4 <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001600:	d11c      	bne.n	800163c <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800160a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10f      	bne.n	800163c <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800161c:	2110      	movs	r1, #16
 800161e:	6938      	ldr	r0, [r7, #16]
 8001620:	f004 fca4 	bl	8005f6c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001624:	6938      	ldr	r0, [r7, #16]
 8001626:	f004 fcd5 	bl	8005fd4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2101      	movs	r1, #1
 8001630:	4618      	mov	r0, r3
 8001632:	f004 fd78 	bl	8006126 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f005 f809 	bl	800664e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f004 fd4f 	bl	80060e4 <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d102      	bne.n	8001658 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f001 f829 	bl	80026aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f004 fd41 	bl	80060e4 <USB_ReadInterrupts>
 8001662:	4603      	mov	r3, r0
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b08      	cmp	r3, #8
 800166a:	d106      	bne.n	800167a <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f004 ffd2 	bl	8006616 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2208      	movs	r2, #8
 8001678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fd30 	bl	80060e4 <USB_ReadInterrupts>
 8001684:	4603      	mov	r3, r0
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b10      	cmp	r3, #16
 800168c:	d101      	bne.n	8001692 <HAL_HCD_IRQHandler+0x158>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_HCD_IRQHandler+0x15a>
 8001692:	2300      	movs	r3, #0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d012      	beq.n	80016be <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0210 	bic.w	r2, r2, #16
 80016a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 ff2c 	bl	8002506 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	699a      	ldr	r2, [r3, #24]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0210 	orr.w	r2, r2, #16
 80016bc:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fd0e 	bl	80060e4 <USB_ReadInterrupts>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016d2:	d13a      	bne.n	800174a <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fd5e 	bl	800619a <USB_HC_ReadInterrupt>
 80016de:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e025      	b.n	8001732 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d018      	beq.n	800172c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	015a      	lsls	r2, r3, #5
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800170c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001710:	d106      	bne.n	8001720 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	4619      	mov	r1, r3
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f836 	bl	800178a <HCD_HC_IN_IRQHandler>
 800171e:	e005      	b.n	800172c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 fb84 	bl	8001e34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	429a      	cmp	r2, r3
 800173a:	d3d4      	bcc.n	80016e6 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001744:	615a      	str	r2, [r3, #20]
 8001746:	e000      	b.n	800174a <HAL_HCD_IRQHandler+0x210>
      return;
 8001748:	bf00      	nop
    }
  }
}
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_HCD_Stop+0x16>
 8001762:	2302      	movs	r3, #2
 8001764:	e00d      	b.n	8001782 <HAL_HCD_Stop+0x32>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f004 fe1e 	bl	80063b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	015a      	lsls	r2, r3, #5
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d11a      	bne.n	80017f0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	015a      	lsls	r2, r3, #5
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c6:	461a      	mov	r2, r3
 80017c8:	2304      	movs	r3, #4
 80017ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3361      	adds	r3, #97	; 0x61
 80017da:	2206      	movs	r2, #6
 80017dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f004 fce7 	bl	80061bc <USB_HC_Halt>
 80017ee:	e0af      	b.n	8001950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001806:	d11b      	bne.n	8001840 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4413      	add	r3, r2
 8001810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001814:	461a      	mov	r2, r3
 8001816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800181a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	3361      	adds	r3, #97	; 0x61
 800182a:	2207      	movs	r2, #7
 800182c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f004 fcbf 	bl	80061bc <USB_HC_Halt>
 800183e:	e087      	b.n	8001950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4413      	add	r3, r2
 8001848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	2b20      	cmp	r3, #32
 8001854:	d109      	bne.n	800186a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	015a      	lsls	r2, r3, #5
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4413      	add	r3, r2
 800185e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001862:	461a      	mov	r2, r3
 8001864:	2320      	movs	r3, #32
 8001866:	6093      	str	r3, [r2, #8]
 8001868:	e072      	b.n	8001950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	015a      	lsls	r2, r3, #5
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4413      	add	r3, r2
 8001872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b08      	cmp	r3, #8
 800187e:	d11a      	bne.n	80018b6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	015a      	lsls	r2, r3, #5
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4413      	add	r3, r2
 8001888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188c:	461a      	mov	r2, r3
 800188e:	2308      	movs	r3, #8
 8001890:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3361      	adds	r3, #97	; 0x61
 80018a0:	2205      	movs	r2, #5
 80018a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f004 fc84 	bl	80061bc <USB_HC_Halt>
 80018b4:	e04c      	b.n	8001950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	015a      	lsls	r2, r3, #5
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4413      	add	r3, r2
 80018be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018cc:	d11b      	bne.n	8001906 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018da:	461a      	mov	r2, r3
 80018dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	212c      	movs	r1, #44	; 0x2c
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	3361      	adds	r3, #97	; 0x61
 80018f0:	2208      	movs	r2, #8
 80018f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f004 fc5c 	bl	80061bc <USB_HC_Halt>
 8001904:	e024      	b.n	8001950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4413      	add	r3, r2
 800190e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001918:	2b80      	cmp	r3, #128	; 0x80
 800191a:	d119      	bne.n	8001950 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	015a      	lsls	r2, r3, #5
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4413      	add	r3, r2
 8001924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001928:	461a      	mov	r2, r3
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	212c      	movs	r1, #44	; 0x2c
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	3361      	adds	r3, #97	; 0x61
 800193c:	2206      	movs	r2, #6
 800193e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f004 fc36 	bl	80061bc <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4413      	add	r3, r2
 8001958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001966:	d112      	bne.n	800198e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f004 fc22 	bl	80061bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	015a      	lsls	r2, r3, #5
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4413      	add	r3, r2
 8001980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001984:	461a      	mov	r2, r3
 8001986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800198a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800198c:	e24e      	b.n	8001e2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4413      	add	r3, r2
 8001996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	f040 80df 	bne.w	8001b64 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d019      	beq.n	80019e2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	3348      	adds	r3, #72	; 0x48
 80019bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	0159      	lsls	r1, r3, #5
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	440b      	add	r3, r1
 80019c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80019d0:	1ad2      	subs	r2, r2, r3
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	202c      	movs	r0, #44	; 0x2c
 80019d8:	fb00 f303 	mul.w	r3, r0, r3
 80019dc:	440b      	add	r3, r1
 80019de:	3350      	adds	r3, #80	; 0x50
 80019e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	212c      	movs	r1, #44	; 0x2c
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	3361      	adds	r3, #97	; 0x61
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	212c      	movs	r1, #44	; 0x2c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	335c      	adds	r3, #92	; 0x5c
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a12:	461a      	mov	r2, r3
 8001a14:	2301      	movs	r3, #1
 8001a16:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	333f      	adds	r3, #63	; 0x3f
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d009      	beq.n	8001a40 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	333f      	adds	r3, #63	; 0x3f
 8001a3a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d111      	bne.n	8001a64 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 fbb6 	bl	80061bc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2310      	movs	r3, #16
 8001a60:	6093      	str	r3, [r2, #8]
 8001a62:	e03a      	b.n	8001ada <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	333f      	adds	r3, #63	; 0x3f
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d009      	beq.n	8001a8c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	333f      	adds	r3, #63	; 0x3f
 8001a86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d126      	bne.n	8001ada <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	015a      	lsls	r2, r3, #5
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	0151      	lsls	r1, r2, #5
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	440a      	add	r2, r1
 8001aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001aaa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	212c      	movs	r1, #44	; 0x2c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3360      	adds	r3, #96	; 0x60
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	b2d9      	uxtb	r1, r3
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	202c      	movs	r0, #44	; 0x2c
 8001ac8:	fb00 f303 	mul.w	r3, r0, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	3360      	adds	r3, #96	; 0x60
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f004 fdc8 	bl	800666a <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d12b      	bne.n	8001b3a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	3348      	adds	r3, #72	; 0x48
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	202c      	movs	r0, #44	; 0x2c
 8001af8:	fb00 f202 	mul.w	r2, r0, r2
 8001afc:	440a      	add	r2, r1
 8001afe:	3240      	adds	r2, #64	; 0x40
 8001b00:	8812      	ldrh	r2, [r2, #0]
 8001b02:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 818e 	beq.w	8001e2c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3354      	adds	r3, #84	; 0x54
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f083 0301 	eor.w	r3, r3, #1
 8001b24:	b2d8      	uxtb	r0, r3
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	3354      	adds	r3, #84	; 0x54
 8001b34:	4602      	mov	r2, r0
 8001b36:	701a      	strb	r2, [r3, #0]
}
 8001b38:	e178      	b.n	8001e2c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	212c      	movs	r1, #44	; 0x2c
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	3354      	adds	r3, #84	; 0x54
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	f083 0301 	eor.w	r3, r3, #1
 8001b4e:	b2d8      	uxtb	r0, r3
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3354      	adds	r3, #84	; 0x54
 8001b5e:	4602      	mov	r2, r0
 8001b60:	701a      	strb	r2, [r3, #0]
}
 8001b62:	e163      	b.n	8001e2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	015a      	lsls	r2, r3, #5
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	f040 80f6 	bne.w	8001d68 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	212c      	movs	r1, #44	; 0x2c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	3361      	adds	r3, #97	; 0x61
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d109      	bne.n	8001ba4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	212c      	movs	r1, #44	; 0x2c
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3360      	adds	r3, #96	; 0x60
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	e0c9      	b.n	8001d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	3361      	adds	r3, #97	; 0x61
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d109      	bne.n	8001bcc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3360      	adds	r3, #96	; 0x60
 8001bc6:	2205      	movs	r2, #5
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	e0b5      	b.n	8001d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	212c      	movs	r1, #44	; 0x2c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3361      	adds	r3, #97	; 0x61
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b06      	cmp	r3, #6
 8001bde:	d009      	beq.n	8001bf4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	212c      	movs	r1, #44	; 0x2c
 8001be6:	fb01 f303 	mul.w	r3, r1, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	3361      	adds	r3, #97	; 0x61
 8001bee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d150      	bne.n	8001c96 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	212c      	movs	r1, #44	; 0x2c
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	335c      	adds	r3, #92	; 0x5c
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	202c      	movs	r0, #44	; 0x2c
 8001c0c:	fb00 f303 	mul.w	r3, r0, r3
 8001c10:	440b      	add	r3, r1
 8001c12:	335c      	adds	r3, #92	; 0x5c
 8001c14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	335c      	adds	r3, #92	; 0x5c
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d912      	bls.n	8001c50 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	335c      	adds	r3, #92	; 0x5c
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	212c      	movs	r1, #44	; 0x2c
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	3360      	adds	r3, #96	; 0x60
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c4e:	e073      	b.n	8001d38 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	212c      	movs	r1, #44	; 0x2c
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3360      	adds	r3, #96	; 0x60
 8001c5e:	2202      	movs	r2, #2
 8001c60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c78:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c80:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c94:	e050      	b.n	8001d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	212c      	movs	r1, #44	; 0x2c
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3361      	adds	r3, #97	; 0x61
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d122      	bne.n	8001cf0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	212c      	movs	r1, #44	; 0x2c
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3360      	adds	r3, #96	; 0x60
 8001cb8:	2202      	movs	r2, #2
 8001cba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e023      	b.n	8001d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3361      	adds	r3, #97	; 0x61
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b07      	cmp	r3, #7
 8001d02:	d119      	bne.n	8001d38 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	335c      	adds	r3, #92	; 0x5c
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	202c      	movs	r0, #44	; 0x2c
 8001d1c:	fb00 f303 	mul.w	r3, r0, r3
 8001d20:	440b      	add	r3, r1
 8001d22:	335c      	adds	r3, #92	; 0x5c
 8001d24:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	212c      	movs	r1, #44	; 0x2c
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	3360      	adds	r3, #96	; 0x60
 8001d34:	2204      	movs	r2, #4
 8001d36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	461a      	mov	r2, r3
 8001d46:	2302      	movs	r3, #2
 8001d48:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	b2d9      	uxtb	r1, r3
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	202c      	movs	r0, #44	; 0x2c
 8001d54:	fb00 f303 	mul.w	r3, r0, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	3360      	adds	r3, #96	; 0x60
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f004 fc82 	bl	800666a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001d66:	e061      	b.n	8001e2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d156      	bne.n	8001e2c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	333f      	adds	r3, #63	; 0x3f
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d111      	bne.n	8001db6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	335c      	adds	r3, #92	; 0x5c
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	4611      	mov	r1, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f004 fa04 	bl	80061bc <USB_HC_Halt>
 8001db4:	e031      	b.n	8001e1a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	333f      	adds	r3, #63	; 0x3f
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	333f      	adds	r3, #63	; 0x3f
 8001dd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d11d      	bne.n	8001e1a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	335c      	adds	r3, #92	; 0x5c
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d110      	bne.n	8001e1a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	212c      	movs	r1, #44	; 0x2c
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	3361      	adds	r3, #97	; 0x61
 8001e06:	2203      	movs	r2, #3
 8001e08:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 f9d1 	bl	80061bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	461a      	mov	r2, r3
 8001e28:	2310      	movs	r3, #16
 8001e2a:	6093      	str	r3, [r2, #8]
}
 8001e2c:	bf00      	nop
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d11a      	bne.n	8001e9a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e70:	461a      	mov	r2, r3
 8001e72:	2304      	movs	r3, #4
 8001e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	3361      	adds	r3, #97	; 0x61
 8001e84:	2206      	movs	r2, #6
 8001e86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 f992 	bl	80061bc <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001e98:	e331      	b.n	80024fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d12e      	bne.n	8001f0e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	212c      	movs	r1, #44	; 0x2c
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	333d      	adds	r3, #61	; 0x3d
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	f040 8313 	bne.w	80024fe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	212c      	movs	r1, #44	; 0x2c
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	333d      	adds	r3, #61	; 0x3d
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	212c      	movs	r1, #44	; 0x2c
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3360      	adds	r3, #96	; 0x60
 8001ef8:	2202      	movs	r2, #2
 8001efa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 f958 	bl	80061bc <USB_HC_Halt>
}
 8001f0c:	e2f7      	b.n	80024fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f24:	d112      	bne.n	8001f4c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f004 f939 	bl	80061bc <USB_HC_Halt>
}
 8001f4a:	e2d8      	b.n	80024fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d140      	bne.n	8001fe4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	335c      	adds	r3, #92	; 0x5c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f86:	2b40      	cmp	r3, #64	; 0x40
 8001f88:	d111      	bne.n	8001fae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	333d      	adds	r3, #61	; 0x3d
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2340      	movs	r3, #64	; 0x40
 8001fac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3361      	adds	r3, #97	; 0x61
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f004 f8ed 	bl	80061bc <USB_HC_Halt>
}
 8001fe2:	e28c      	b.n	80024fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d12c      	bne.n	8002054 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	4413      	add	r3, r2
 8002006:	3361      	adds	r3, #97	; 0x61
 8002008:	2204      	movs	r2, #4
 800200a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	333d      	adds	r3, #61	; 0x3d
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	335c      	adds	r3, #92	; 0x5c
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f004 f8be 	bl	80061bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	461a      	mov	r2, r3
 800204e:	2340      	movs	r3, #64	; 0x40
 8002050:	6093      	str	r3, [r2, #8]
}
 8002052:	e254      	b.n	80024fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	4413      	add	r3, r2
 800205c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b08      	cmp	r3, #8
 8002068:	d11a      	bne.n	80020a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002076:	461a      	mov	r2, r3
 8002078:	2308      	movs	r3, #8
 800207a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	212c      	movs	r1, #44	; 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	3361      	adds	r3, #97	; 0x61
 800208a:	2205      	movs	r2, #5
 800208c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f004 f88f 	bl	80061bc <USB_HC_Halt>
}
 800209e:	e22e      	b.n	80024fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d140      	bne.n	8002138 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	335c      	adds	r3, #92	; 0x5c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3361      	adds	r3, #97	; 0x61
 80020d6:	2203      	movs	r2, #3
 80020d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	333d      	adds	r3, #61	; 0x3d
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d112      	bne.n	8002114 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	333c      	adds	r3, #60	; 0x3c
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	212c      	movs	r1, #44	; 0x2c
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	4413      	add	r3, r2
 800210e:	333d      	adds	r3, #61	; 0x3d
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f004 f84c 	bl	80061bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002130:	461a      	mov	r2, r3
 8002132:	2310      	movs	r3, #16
 8002134:	6093      	str	r3, [r2, #8]
}
 8002136:	e1e2      	b.n	80024fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	2b80      	cmp	r3, #128	; 0x80
 800214c:	d164      	bne.n	8002218 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d111      	bne.n	800217a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3361      	adds	r3, #97	; 0x61
 8002164:	2206      	movs	r2, #6
 8002166:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f004 f822 	bl	80061bc <USB_HC_Halt>
 8002178:	e044      	b.n	8002204 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	335c      	adds	r3, #92	; 0x5c
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	202c      	movs	r0, #44	; 0x2c
 8002192:	fb00 f303 	mul.w	r3, r0, r3
 8002196:	440b      	add	r3, r1
 8002198:	335c      	adds	r3, #92	; 0x5c
 800219a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	335c      	adds	r3, #92	; 0x5c
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d920      	bls.n	80021f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	335c      	adds	r3, #92	; 0x5c
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3360      	adds	r3, #96	; 0x60
 80021d0:	2204      	movs	r2, #4
 80021d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	b2d9      	uxtb	r1, r3
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	202c      	movs	r0, #44	; 0x2c
 80021de:	fb00 f303 	mul.w	r3, r0, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3360      	adds	r3, #96	; 0x60
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f004 fa3d 	bl	800666a <HAL_HCD_HC_NotifyURBChange_Callback>
 80021f0:	e008      	b.n	8002204 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	3360      	adds	r3, #96	; 0x60
 8002200:	2202      	movs	r2, #2
 8002202:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	461a      	mov	r2, r3
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	6093      	str	r3, [r2, #8]
}
 8002216:	e172      	b.n	80024fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222e:	d11b      	bne.n	8002268 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3361      	adds	r3, #97	; 0x61
 800223e:	2208      	movs	r2, #8
 8002240:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f003 ffb5 	bl	80061bc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	461a      	mov	r2, r3
 8002260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002264:	6093      	str	r3, [r2, #8]
}
 8002266:	e14a      	b.n	80024fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b02      	cmp	r3, #2
 800227c:	f040 813f 	bne.w	80024fe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3361      	adds	r3, #97	; 0x61
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d17d      	bne.n	8002390 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3360      	adds	r3, #96	; 0x60
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	333f      	adds	r3, #63	; 0x3f
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d00a      	beq.n	80022d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	333f      	adds	r3, #63	; 0x3f
 80022c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	f040 8100 	bne.w	80024d0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d113      	bne.n	8002300 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	3355      	adds	r3, #85	; 0x55
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f083 0301 	eor.w	r3, r3, #1
 80022ec:	b2d8      	uxtb	r0, r3
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	3355      	adds	r3, #85	; 0x55
 80022fc:	4602      	mov	r2, r0
 80022fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 80e3 	bne.w	80024d0 <HCD_HC_OUT_IRQHandler+0x69c>
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	334c      	adds	r3, #76	; 0x4c
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80d8 	beq.w	80024d0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	334c      	adds	r3, #76	; 0x4c
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	202c      	movs	r0, #44	; 0x2c
 8002336:	fb00 f202 	mul.w	r2, r0, r2
 800233a:	440a      	add	r2, r1
 800233c:	3240      	adds	r2, #64	; 0x40
 800233e:	8812      	ldrh	r2, [r2, #0]
 8002340:	4413      	add	r3, r2
 8002342:	3b01      	subs	r3, #1
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	202c      	movs	r0, #44	; 0x2c
 800234a:	fb00 f202 	mul.w	r2, r0, r2
 800234e:	440a      	add	r2, r1
 8002350:	3240      	adds	r2, #64	; 0x40
 8002352:	8812      	ldrh	r2, [r2, #0]
 8002354:	fbb3 f3f2 	udiv	r3, r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80b5 	beq.w	80024d0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	3355      	adds	r3, #85	; 0x55
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	f083 0301 	eor.w	r3, r3, #1
 800237a:	b2d8      	uxtb	r0, r3
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3355      	adds	r3, #85	; 0x55
 800238a:	4602      	mov	r2, r0
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e09f      	b.n	80024d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3361      	adds	r3, #97	; 0x61
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d109      	bne.n	80023b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3360      	adds	r3, #96	; 0x60
 80023b2:	2202      	movs	r2, #2
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	e08b      	b.n	80024d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3361      	adds	r3, #97	; 0x61
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d109      	bne.n	80023e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3360      	adds	r3, #96	; 0x60
 80023da:	2202      	movs	r2, #2
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e077      	b.n	80024d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	3361      	adds	r3, #97	; 0x61
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d109      	bne.n	8002408 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3360      	adds	r3, #96	; 0x60
 8002402:	2205      	movs	r2, #5
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e063      	b.n	80024d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	3361      	adds	r3, #97	; 0x61
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b06      	cmp	r3, #6
 800241a:	d009      	beq.n	8002430 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3361      	adds	r3, #97	; 0x61
 800242a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800242c:	2b08      	cmp	r3, #8
 800242e:	d14f      	bne.n	80024d0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	335c      	adds	r3, #92	; 0x5c
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	202c      	movs	r0, #44	; 0x2c
 8002448:	fb00 f303 	mul.w	r3, r0, r3
 800244c:	440b      	add	r3, r1
 800244e:	335c      	adds	r3, #92	; 0x5c
 8002450:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	335c      	adds	r3, #92	; 0x5c
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d912      	bls.n	800248c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	335c      	adds	r3, #92	; 0x5c
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3360      	adds	r3, #96	; 0x60
 8002486:	2204      	movs	r2, #4
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e021      	b.n	80024d0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3360      	adds	r3, #96	; 0x60
 800249a:	2202      	movs	r2, #2
 800249c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	461a      	mov	r2, r3
 80024de:	2302      	movs	r3, #2
 80024e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	b2d9      	uxtb	r1, r3
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	202c      	movs	r0, #44	; 0x2c
 80024ec:	fb00 f303 	mul.w	r3, r0, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3360      	adds	r3, #96	; 0x60
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f004 f8b6 	bl	800666a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024fe:	bf00      	nop
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b08a      	sub	sp, #40	; 0x28
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	0c5b      	lsrs	r3, r3, #17
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d004      	beq.n	800254c <HCD_RXQLVL_IRQHandler+0x46>
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b05      	cmp	r3, #5
 8002546:	f000 80a9 	beq.w	800269c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800254a:	e0aa      	b.n	80026a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80a6 	beq.w	80026a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3344      	adds	r3, #68	; 0x44
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 809b 	beq.w	80026a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	3350      	adds	r3, #80	; 0x50
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	441a      	add	r2, r3
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	202c      	movs	r0, #44	; 0x2c
 8002584:	fb00 f303 	mul.w	r3, r0, r3
 8002588:	440b      	add	r3, r1
 800258a:	334c      	adds	r3, #76	; 0x4c
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d87a      	bhi.n	8002688 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	3344      	adds	r3, #68	; 0x44
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	b292      	uxth	r2, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	f003 fd42 	bl	8006034 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3344      	adds	r3, #68	; 0x44
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	441a      	add	r2, r3
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	202c      	movs	r0, #44	; 0x2c
 80025ca:	fb00 f303 	mul.w	r3, r0, r3
 80025ce:	440b      	add	r3, r1
 80025d0:	3344      	adds	r3, #68	; 0x44
 80025d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	3350      	adds	r3, #80	; 0x50
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	441a      	add	r2, r3
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	202c      	movs	r0, #44	; 0x2c
 80025ee:	fb00 f303 	mul.w	r3, r0, r3
 80025f2:	440b      	add	r3, r1
 80025f4:	3350      	adds	r3, #80	; 0x50
 80025f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	0cdb      	lsrs	r3, r3, #19
 8002608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3340      	adds	r3, #64	; 0x40
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4293      	cmp	r3, r2
 8002624:	d13c      	bne.n	80026a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d039      	beq.n	80026a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002642:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800264a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	3354      	adds	r3, #84	; 0x54
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	f083 0301 	eor.w	r3, r3, #1
 8002672:	b2d8      	uxtb	r0, r3
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	3354      	adds	r3, #84	; 0x54
 8002682:	4602      	mov	r2, r0
 8002684:	701a      	strb	r2, [r3, #0]
      break;
 8002686:	e00b      	b.n	80026a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3360      	adds	r3, #96	; 0x60
 8002696:	2204      	movs	r2, #4
 8002698:	701a      	strb	r2, [r3, #0]
      break;
 800269a:	e001      	b.n	80026a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800269c:	bf00      	nop
 800269e:	e000      	b.n	80026a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80026a0:	bf00      	nop
  }
}
 80026a2:	bf00      	nop
 80026a4:	3728      	adds	r7, #40	; 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d10b      	bne.n	80026fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d102      	bne.n	80026f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f003 ffa0 	bl	8006632 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b08      	cmp	r3, #8
 8002702:	d132      	bne.n	800276a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f043 0308 	orr.w	r3, r3, #8
 800270a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d126      	bne.n	8002764 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d113      	bne.n	8002746 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002724:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002728:	d106      	bne.n	8002738 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2102      	movs	r1, #2
 8002730:	4618      	mov	r0, r3
 8002732:	f003 fcf8 	bl	8006126 <USB_InitFSLSPClkSel>
 8002736:	e011      	b.n	800275c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2101      	movs	r1, #1
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fcf1 	bl	8006126 <USB_InitFSLSPClkSel>
 8002744:	e00a      	b.n	800275c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d106      	bne.n	800275c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002754:	461a      	mov	r2, r3
 8002756:	f64e 2360 	movw	r3, #60000	; 0xea60
 800275a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f003 ff92 	bl	8006686 <HAL_HCD_PortEnabled_Callback>
 8002762:	e002      	b.n	800276a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f003 ff9c 	bl	80066a2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b20      	cmp	r3, #32
 8002772:	d103      	bne.n	800277c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f043 0320 	orr.w	r3, r3, #32
 800277a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e12b      	b.n	80029fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe f97e 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2224      	movs	r2, #36	; 0x24
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027f4:	f003 f9ba 	bl	8005b6c <HAL_RCC_GetPCLK1Freq>
 80027f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4a81      	ldr	r2, [pc, #516]	; (8002a04 <HAL_I2C_Init+0x274>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d807      	bhi.n	8002814 <HAL_I2C_Init+0x84>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a80      	ldr	r2, [pc, #512]	; (8002a08 <HAL_I2C_Init+0x278>)
 8002808:	4293      	cmp	r3, r2
 800280a:	bf94      	ite	ls
 800280c:	2301      	movls	r3, #1
 800280e:	2300      	movhi	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e006      	b.n	8002822 <HAL_I2C_Init+0x92>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a7d      	ldr	r2, [pc, #500]	; (8002a0c <HAL_I2C_Init+0x27c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	bf94      	ite	ls
 800281c:	2301      	movls	r3, #1
 800281e:	2300      	movhi	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e0e7      	b.n	80029fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4a78      	ldr	r2, [pc, #480]	; (8002a10 <HAL_I2C_Init+0x280>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0c9b      	lsrs	r3, r3, #18
 8002834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a6a      	ldr	r2, [pc, #424]	; (8002a04 <HAL_I2C_Init+0x274>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d802      	bhi.n	8002864 <HAL_I2C_Init+0xd4>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	3301      	adds	r3, #1
 8002862:	e009      	b.n	8002878 <HAL_I2C_Init+0xe8>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	4a69      	ldr	r2, [pc, #420]	; (8002a14 <HAL_I2C_Init+0x284>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	3301      	adds	r3, #1
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	430b      	orrs	r3, r1
 800287e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800288a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	495c      	ldr	r1, [pc, #368]	; (8002a04 <HAL_I2C_Init+0x274>)
 8002894:	428b      	cmp	r3, r1
 8002896:	d819      	bhi.n	80028cc <HAL_I2C_Init+0x13c>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1e59      	subs	r1, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a6:	1c59      	adds	r1, r3, #1
 80028a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028ac:	400b      	ands	r3, r1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_I2C_Init+0x138>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1e59      	subs	r1, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80028c0:	3301      	adds	r3, #1
 80028c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c6:	e051      	b.n	800296c <HAL_I2C_Init+0x1dc>
 80028c8:	2304      	movs	r3, #4
 80028ca:	e04f      	b.n	800296c <HAL_I2C_Init+0x1dc>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d111      	bne.n	80028f8 <HAL_I2C_Init+0x168>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1e58      	subs	r0, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	440b      	add	r3, r1
 80028e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e6:	3301      	adds	r3, #1
 80028e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	e012      	b.n	800291e <HAL_I2C_Init+0x18e>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e58      	subs	r0, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	0099      	lsls	r1, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Init+0x196>
 8002922:	2301      	movs	r3, #1
 8002924:	e022      	b.n	800296c <HAL_I2C_Init+0x1dc>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10e      	bne.n	800294c <HAL_I2C_Init+0x1bc>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1e58      	subs	r0, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6859      	ldr	r1, [r3, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	440b      	add	r3, r1
 800293c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002940:	3301      	adds	r3, #1
 8002942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294a:	e00f      	b.n	800296c <HAL_I2C_Init+0x1dc>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1e58      	subs	r0, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	0099      	lsls	r1, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002962:	3301      	adds	r3, #1
 8002964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	6809      	ldr	r1, [r1, #0]
 8002970:	4313      	orrs	r3, r2
 8002972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800299a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6911      	ldr	r1, [r2, #16]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68d2      	ldr	r2, [r2, #12]
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	000186a0 	.word	0x000186a0
 8002a08:	001e847f 	.word	0x001e847f
 8002a0c:	003d08ff 	.word	0x003d08ff
 8002a10:	431bde83 	.word	0x431bde83
 8002a14:	10624dd3 	.word	0x10624dd3

08002a18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	4608      	mov	r0, r1
 8002a22:	4611      	mov	r1, r2
 8002a24:	461a      	mov	r2, r3
 8002a26:	4603      	mov	r3, r0
 8002a28:	817b      	strh	r3, [r7, #10]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	813b      	strh	r3, [r7, #8]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a32:	f7fe fa5b 	bl	8000eec <HAL_GetTick>
 8002a36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	f040 80d9 	bne.w	8002bf8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	2319      	movs	r3, #25
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	496d      	ldr	r1, [pc, #436]	; (8002c04 <HAL_I2C_Mem_Write+0x1ec>)
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f001 fda7 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0cc      	b.n	8002bfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_I2C_Mem_Write+0x56>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e0c5      	b.n	8002bfa <HAL_I2C_Mem_Write+0x1e2>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d007      	beq.n	8002a94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2221      	movs	r2, #33	; 0x21
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2240      	movs	r2, #64	; 0x40
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a3a      	ldr	r2, [r7, #32]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a4d      	ldr	r2, [pc, #308]	; (8002c08 <HAL_I2C_Mem_Write+0x1f0>)
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ad6:	88f8      	ldrh	r0, [r7, #6]
 8002ad8:	893a      	ldrh	r2, [r7, #8]
 8002ada:	8979      	ldrh	r1, [r7, #10]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f001 fc1e 	bl	8004328 <I2C_RequestMemoryWrite>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d052      	beq.n	8002b98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e081      	b.n	8002bfa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f001 fe28 	bl	8004750 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d107      	bne.n	8002b1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06b      	b.n	8002bfa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d11b      	bne.n	8002b98 <HAL_I2C_Mem_Write+0x180>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d017      	beq.n	8002b98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	781a      	ldrb	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1aa      	bne.n	8002af6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f001 fe14 	bl	80047d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00d      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d107      	bne.n	8002bc8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e016      	b.n	8002bfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e000      	b.n	8002bfa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
  }
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	00100002 	.word	0x00100002
 8002c08:	ffff0000 	.word	0xffff0000

08002c0c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	4608      	mov	r0, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	817b      	strh	r3, [r7, #10]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	813b      	strh	r3, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	f040 809a 	bne.w	8002d6c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_I2C_Mem_Read_IT+0x170>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	08db      	lsrs	r3, r3, #3
 8002c3e:	4a50      	ldr	r2, [pc, #320]	; (8002d80 <HAL_I2C_Mem_Read_IT+0x174>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	0a1a      	lsrs	r2, r3, #8
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009a      	lsls	r2, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d116      	bne.n	8002c8c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f043 0220 	orr.w	r2, r3, #32
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e070      	b.n	8002d6e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d0db      	beq.n	8002c52 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_I2C_Mem_Read_IT+0x9c>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e062      	b.n	8002d6e <HAL_I2C_Mem_Read_IT+0x162>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d007      	beq.n	8002cce <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cdc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2222      	movs	r2, #34	; 0x22
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2240      	movs	r2, #64	; 0x40
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a3a      	ldr	r2, [r7, #32]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_I2C_Mem_Read_IT+0x178>)
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002d10:	897a      	ldrh	r2, [r7, #10]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002d16:	893a      	ldrh	r2, [r7, #8]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d36:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d46:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002d66:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e000      	b.n	8002d6e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000004 	.word	0x20000004
 8002d80:	14f8b589 	.word	0x14f8b589
 8002d84:	ffff0000 	.word	0xffff0000

08002d88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d003      	beq.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x38>
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	f040 80c1 	bne.w	8002f42 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <HAL_I2C_EV_IRQHandler+0x6e>
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002de0:	d003      	beq.n	8002dea <HAL_I2C_EV_IRQHandler+0x62>
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002de8:	d101      	bne.n	8002dee <HAL_I2C_EV_IRQHandler+0x66>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_I2C_EV_IRQHandler+0x68>
 8002dee:	2300      	movs	r3, #0
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	f000 8132 	beq.w	800305a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00c      	beq.n	8002e1a <HAL_I2C_EV_IRQHandler+0x92>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	0a5b      	lsrs	r3, r3, #9
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f001 fd82 	bl	8004916 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fcdc 	bl	80037d0 <I2C_Master_SB>
 8002e18:	e092      	b.n	8002f40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	08db      	lsrs	r3, r3, #3
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <HAL_I2C_EV_IRQHandler+0xb2>
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	0a5b      	lsrs	r3, r3, #9
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fd52 	bl	80038dc <I2C_Master_ADD10>
 8002e38:	e082      	b.n	8002f40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_I2C_EV_IRQHandler+0xd2>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	0a5b      	lsrs	r3, r3, #9
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fd6c 	bl	8003930 <I2C_Master_ADDR>
 8002e58:	e072      	b.n	8002f40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d03b      	beq.n	8002ede <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e74:	f000 80f3 	beq.w	800305e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	09db      	lsrs	r3, r3, #7
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00f      	beq.n	8002ea4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	0a9b      	lsrs	r3, r3, #10
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d103      	bne.n	8002ea4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f94c 	bl	800313a <I2C_MasterTransmit_TXE>
 8002ea2:	e04d      	b.n	8002f40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80d6 	beq.w	800305e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	0a5b      	lsrs	r3, r3, #9
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80cf 	beq.w	800305e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002ec0:	7bbb      	ldrb	r3, [r7, #14]
 8002ec2:	2b21      	cmp	r3, #33	; 0x21
 8002ec4:	d103      	bne.n	8002ece <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f9d3 	bl	8003272 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ecc:	e0c7      	b.n	800305e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	f040 80c4 	bne.w	800305e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fa41 	bl	800335e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002edc:	e0bf      	b.n	800305e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eec:	f000 80b7 	beq.w	800305e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00f      	beq.n	8002f1c <HAL_I2C_EV_IRQHandler+0x194>
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	0a9b      	lsrs	r3, r3, #10
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d009      	beq.n	8002f1c <HAL_I2C_EV_IRQHandler+0x194>
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d103      	bne.n	8002f1c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fab6 	bl	8003486 <I2C_MasterReceive_RXNE>
 8002f1a:	e011      	b.n	8002f40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 809a 	beq.w	800305e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	0a5b      	lsrs	r3, r3, #9
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8093 	beq.w	800305e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fb5f 	bl	80035fc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f3e:	e08e      	b.n	800305e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f40:	e08d      	b.n	800305e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	e007      	b.n	8002f64 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d012      	beq.n	8002f96 <HAL_I2C_EV_IRQHandler+0x20e>
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	0a5b      	lsrs	r3, r3, #9
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00c      	beq.n	8002f96 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002f8c:	69b9      	ldr	r1, [r7, #24]
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 ff1d 	bl	8003dce <I2C_Slave_ADDR>
 8002f94:	e066      	b.n	8003064 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x22e>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	0a5b      	lsrs	r3, r3, #9
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 ff58 	bl	8003e64 <I2C_Slave_STOPF>
 8002fb4:	e056      	b.n	8003064 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fb6:	7bbb      	ldrb	r3, [r7, #14]
 8002fb8:	2b21      	cmp	r3, #33	; 0x21
 8002fba:	d002      	beq.n	8002fc2 <HAL_I2C_EV_IRQHandler+0x23a>
 8002fbc:	7bbb      	ldrb	r3, [r7, #14]
 8002fbe:	2b29      	cmp	r3, #41	; 0x29
 8002fc0:	d125      	bne.n	800300e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	09db      	lsrs	r3, r3, #7
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00f      	beq.n	8002fee <HAL_I2C_EV_IRQHandler+0x266>
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	0a9b      	lsrs	r3, r3, #10
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_I2C_EV_IRQHandler+0x266>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fe33 	bl	8003c52 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fec:	e039      	b.n	8003062 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d033      	beq.n	8003062 <HAL_I2C_EV_IRQHandler+0x2da>
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	0a5b      	lsrs	r3, r3, #9
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d02d      	beq.n	8003062 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fe60 	bl	8003ccc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800300c:	e029      	b.n	8003062 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00f      	beq.n	800303a <HAL_I2C_EV_IRQHandler+0x2b2>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	0a9b      	lsrs	r3, r3, #10
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fe6b 	bl	8003d0e <I2C_SlaveReceive_RXNE>
 8003038:	e014      	b.n	8003064 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00e      	beq.n	8003064 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	0a5b      	lsrs	r3, r3, #9
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fe99 	bl	8003d8a <I2C_SlaveReceive_BTF>
 8003058:	e004      	b.n	8003064 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800305a:	bf00      	nop
 800305c:	e002      	b.n	8003064 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800305e:	bf00      	nop
 8003060:	e000      	b.n	8003064 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003062:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	70fb      	strb	r3, [r7, #3]
 80030c6:	4613      	mov	r3, r2
 80030c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003150:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d150      	bne.n	8003202 <I2C_MasterTransmit_TXE+0xc8>
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b21      	cmp	r3, #33	; 0x21
 8003164:	d14d      	bne.n	8003202 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b08      	cmp	r3, #8
 800316a:	d01d      	beq.n	80031a8 <I2C_MasterTransmit_TXE+0x6e>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b20      	cmp	r3, #32
 8003170:	d01a      	beq.n	80031a8 <I2C_MasterTransmit_TXE+0x6e>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003178:	d016      	beq.n	80031a8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003188:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2211      	movs	r2, #17
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff ff62 	bl	800306a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031a6:	e060      	b.n	800326a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031b6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d107      	bne.n	80031f2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ff7d 	bl	80030ea <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031f0:	e03b      	b.n	800326a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ff35 	bl	800306a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003200:	e033      	b.n	800326a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b21      	cmp	r3, #33	; 0x21
 8003206:	d005      	beq.n	8003214 <I2C_MasterTransmit_TXE+0xda>
 8003208:	7bbb      	ldrb	r3, [r7, #14]
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d12d      	bne.n	800326a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	2b22      	cmp	r3, #34	; 0x22
 8003212:	d12a      	bne.n	800326a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d108      	bne.n	8003230 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800322e:	e01c      	b.n	800326a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d103      	bne.n	8003244 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f88e 	bl	800335e <I2C_MemoryTransmit_TXE_BTF>
}
 8003242:	e012      	b.n	800326a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003268:	e7ff      	b.n	800326a <I2C_MasterTransmit_TXE+0x130>
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b21      	cmp	r3, #33	; 0x21
 800328a:	d164      	bne.n	8003356 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d012      	beq.n	80032bc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	781a      	ldrb	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80032ba:	e04c      	b.n	8003356 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d01d      	beq.n	80032fe <I2C_MasterTransmit_BTF+0x8c>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d01a      	beq.n	80032fe <I2C_MasterTransmit_BTF+0x8c>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ce:	d016      	beq.n	80032fe <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032de:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2211      	movs	r2, #17
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff feb7 	bl	800306a <HAL_I2C_MasterTxCpltCallback>
}
 80032fc:	e02b      	b.n	8003356 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800330c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d107      	bne.n	8003348 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff fed2 	bl	80030ea <HAL_I2C_MemTxCpltCallback>
}
 8003346:	e006      	b.n	8003356 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff fe8a 	bl	800306a <HAL_I2C_MasterTxCpltCallback>
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	2b00      	cmp	r3, #0
 8003374:	d11d      	bne.n	80033b2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337a:	2b01      	cmp	r3, #1
 800337c:	d10b      	bne.n	8003396 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003382:	b2da      	uxtb	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338e:	1c9a      	adds	r2, r3, #2
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003394:	e073      	b.n	800347e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339a:	b29b      	uxth	r3, r3
 800339c:	121b      	asrs	r3, r3, #8
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80033b0:	e065      	b.n	800347e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d10b      	bne.n	80033d2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80033d0:	e055      	b.n	800347e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d151      	bne.n	800347e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b22      	cmp	r3, #34	; 0x22
 80033de:	d10d      	bne.n	80033fc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ee:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80033fa:	e040      	b.n	800347e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d015      	beq.n	8003432 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b21      	cmp	r3, #33	; 0x21
 800340a:	d112      	bne.n	8003432 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003430:	e025      	b.n	800347e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d120      	bne.n	800347e <I2C_MemoryTransmit_TXE_BTF+0x120>
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b21      	cmp	r3, #33	; 0x21
 8003440:	d11d      	bne.n	800347e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003450:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003460:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fe36 	bl	80030ea <HAL_I2C_MemTxCpltCallback>
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b22      	cmp	r3, #34	; 0x22
 8003498:	f040 80ac 	bne.w	80035f4 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d921      	bls.n	80034ee <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	f040 808c 	bne.w	80035f4 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ea:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80034ec:	e082      	b.n	80035f4 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d075      	beq.n	80035e2 <I2C_MasterReceive_RXNE+0x15c>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d002      	beq.n	8003502 <I2C_MasterReceive_RXNE+0x7c>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d16f      	bne.n	80035e2 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f001 f9a6 	bl	8004854 <I2C_WaitOnSTOPRequestThroughIT>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d142      	bne.n	8003594 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800352c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d10a      	bne.n	800357e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fdc1 	bl	80030fe <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800357c:	e03a      	b.n	80035f4 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2212      	movs	r2, #18
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fd76 	bl	800307e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003592:	e02f      	b.n	80035f4 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fd99 	bl	8003112 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035e0:	e008      	b.n	80035f4 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f0:	605a      	str	r2, [r3, #4]
}
 80035f2:	e7ff      	b.n	80035f4 <I2C_MasterReceive_RXNE+0x16e>
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b04      	cmp	r3, #4
 8003612:	d11b      	bne.n	800364c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003622:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800364a:	e0bd      	b.n	80037c8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b03      	cmp	r3, #3
 8003654:	d129      	bne.n	80036aa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003664:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d00a      	beq.n	8003682 <I2C_MasterReceive_BTF+0x86>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d007      	beq.n	8003682 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003680:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036a8:	e08e      	b.n	80037c8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d176      	bne.n	80037a2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d002      	beq.n	80036c0 <I2C_MasterReceive_BTF+0xc4>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d108      	bne.n	80036d2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e019      	b.n	8003706 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d002      	beq.n	80036de <I2C_MasterReceive_BTF+0xe2>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d108      	bne.n	80036f0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e00a      	b.n	8003706 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d007      	beq.n	8003706 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003704:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003760:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b40      	cmp	r3, #64	; 0x40
 8003774:	d10a      	bne.n	800378c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff fcba 	bl	80030fe <HAL_I2C_MemRxCpltCallback>
}
 800378a:	e01d      	b.n	80037c8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2212      	movs	r2, #18
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff fc6f 	bl	800307e <HAL_I2C_MasterRxCpltCallback>
}
 80037a0:	e012      	b.n	80037c8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d117      	bne.n	8003814 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037fc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80037fe:	e067      	b.n	80038d0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	b2da      	uxtb	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	611a      	str	r2, [r3, #16]
}
 8003812:	e05d      	b.n	80038d0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800381c:	d133      	bne.n	8003886 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b21      	cmp	r3, #33	; 0x21
 8003828:	d109      	bne.n	800383e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800383a:	611a      	str	r2, [r3, #16]
 800383c:	e008      	b.n	8003850 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	b2da      	uxtb	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	2b00      	cmp	r3, #0
 8003856:	d004      	beq.n	8003862 <I2C_Master_SB+0x92>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	2b00      	cmp	r3, #0
 8003868:	d032      	beq.n	80038d0 <I2C_Master_SB+0x100>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d02d      	beq.n	80038d0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003882:	605a      	str	r2, [r3, #4]
}
 8003884:	e024      	b.n	80038d0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10e      	bne.n	80038ac <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	b29b      	uxth	r3, r3
 8003894:	11db      	asrs	r3, r3, #7
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 0306 	and.w	r3, r3, #6
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f063 030f 	orn	r3, r3, #15
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	611a      	str	r2, [r3, #16]
}
 80038aa:	e011      	b.n	80038d0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d10d      	bne.n	80038d0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	11db      	asrs	r3, r3, #7
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f003 0306 	and.w	r3, r3, #6
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f063 030e 	orn	r3, r3, #14
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	611a      	str	r2, [r3, #16]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <I2C_Master_ADD10+0x26>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d108      	bne.n	8003914 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <I2C_Master_ADD10+0x48>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003922:	605a      	str	r2, [r3, #4]
  }
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003930:	b480      	push	{r7}
 8003932:	b091      	sub	sp, #68	; 0x44
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b22      	cmp	r3, #34	; 0x22
 8003958:	f040 8169 	bne.w	8003c2e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10f      	bne.n	8003984 <I2C_Master_ADDR+0x54>
 8003964:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d10b      	bne.n	8003984 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396c:	2300      	movs	r3, #0
 800396e:	633b      	str	r3, [r7, #48]	; 0x30
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	633b      	str	r3, [r7, #48]	; 0x30
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	633b      	str	r3, [r7, #48]	; 0x30
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	e160      	b.n	8003c46 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003988:	2b00      	cmp	r3, #0
 800398a:	d11d      	bne.n	80039c8 <I2C_Master_ADDR+0x98>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003994:	d118      	bne.n	80039c8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003996:	2300      	movs	r3, #0
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ba:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	651a      	str	r2, [r3, #80]	; 0x50
 80039c6:	e13e      	b.n	8003c46 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d113      	bne.n	80039fa <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d2:	2300      	movs	r3, #0
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e115      	b.n	8003c26 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	f040 808a 	bne.w	8003b1a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a0c:	d137      	bne.n	8003a7e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2c:	d113      	bne.n	8003a56 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	e0e7      	b.n	8003c26 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a56:	2300      	movs	r3, #0
 8003a58:	623b      	str	r3, [r7, #32]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	623b      	str	r3, [r7, #32]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	623b      	str	r3, [r7, #32]
 8003a6a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e0d3      	b.n	8003c26 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d02e      	beq.n	8003ae2 <I2C_Master_ADDR+0x1b2>
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d02b      	beq.n	8003ae2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8c:	2b12      	cmp	r3, #18
 8003a8e:	d102      	bne.n	8003a96 <I2C_Master_ADDR+0x166>
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d125      	bne.n	8003ae2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d00e      	beq.n	8003aba <I2C_Master_ADDR+0x18a>
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d00b      	beq.n	8003aba <I2C_Master_ADDR+0x18a>
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d008      	beq.n	8003aba <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	e007      	b.n	8003aca <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ac8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	e0a1      	b.n	8003c26 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	e085      	b.n	8003c26 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d14d      	bne.n	8003bc0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d016      	beq.n	8003b58 <I2C_Master_ADDR+0x228>
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d013      	beq.n	8003b58 <I2C_Master_ADDR+0x228>
 8003b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d010      	beq.n	8003b58 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e007      	b.n	8003b68 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b66:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b76:	d117      	bne.n	8003ba8 <I2C_Master_ADDR+0x278>
 8003b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b7e:	d00b      	beq.n	8003b98 <I2C_Master_ADDR+0x268>
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d008      	beq.n	8003b98 <I2C_Master_ADDR+0x268>
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d005      	beq.n	8003b98 <I2C_Master_ADDR+0x268>
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d002      	beq.n	8003b98 <I2C_Master_ADDR+0x268>
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d107      	bne.n	8003ba8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ba6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	e032      	b.n	8003c26 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bce:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bde:	d117      	bne.n	8003c10 <I2C_Master_ADDR+0x2e0>
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003be6:	d00b      	beq.n	8003c00 <I2C_Master_ADDR+0x2d0>
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d008      	beq.n	8003c00 <I2C_Master_ADDR+0x2d0>
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d005      	beq.n	8003c00 <I2C_Master_ADDR+0x2d0>
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	d002      	beq.n	8003c00 <I2C_Master_ADDR+0x2d0>
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d107      	bne.n	8003c10 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c0e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003c2c:	e00b      	b.n	8003c46 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	e7ff      	b.n	8003c46 <I2C_Master_ADDR+0x316>
 8003c46:	bf00      	nop
 8003c48:	3744      	adds	r7, #68	; 0x44
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02b      	beq.n	8003cc4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d114      	bne.n	8003cc4 <I2C_SlaveTransmit_TXE+0x72>
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2b29      	cmp	r3, #41	; 0x29
 8003c9e:	d111      	bne.n	8003cc4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2221      	movs	r2, #33	; 0x21
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2228      	movs	r2, #40	; 0x28
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff f9e7 	bl	8003092 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d011      	beq.n	8003d02 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d02c      	beq.n	8003d82 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d114      	bne.n	8003d82 <I2C_SlaveReceive_RXNE+0x74>
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d5c:	d111      	bne.n	8003d82 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2222      	movs	r2, #34	; 0x22
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2228      	movs	r2, #40	; 0x28
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff f992 	bl	80030a6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d012      	beq.n	8003dc2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003de8:	2b28      	cmp	r3, #40	; 0x28
 8003dea:	d127      	bne.n	8003e3c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	09db      	lsrs	r3, r3, #7
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	81bb      	strh	r3, [r7, #12]
 8003e1e:	e002      	b.n	8003e26 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003e2e:	89ba      	ldrh	r2, [r7, #12]
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	4619      	mov	r1, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff f940 	bl	80030ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e3a:	e00e      	b.n	8003e5a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec0:	d172      	bne.n	8003fa8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b22      	cmp	r3, #34	; 0x22
 8003ec6:	d002      	beq.n	8003ece <I2C_Slave_STOPF+0x6a>
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b2a      	cmp	r3, #42	; 0x2a
 8003ecc:	d135      	bne.n	8003f3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f043 0204 	orr.w	r2, r3, #4
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd f953 	bl	80011b2 <HAL_DMA_GetState>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d049      	beq.n	8003fa6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	4a69      	ldr	r2, [pc, #420]	; (80040bc <I2C_Slave_STOPF+0x258>)
 8003f18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd f925 	bl	800116e <HAL_DMA_Abort_IT>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d03d      	beq.n	8003fa6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f34:	4610      	mov	r0, r2
 8003f36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f38:	e035      	b.n	8003fa6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0204 	orr.w	r2, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd f91d 	bl	80011b2 <HAL_DMA_GetState>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d014      	beq.n	8003fa8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	4a4e      	ldr	r2, [pc, #312]	; (80040bc <I2C_Slave_STOPF+0x258>)
 8003f84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd f8ef 	bl	800116e <HAL_DMA_Abort_IT>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4798      	blx	r3
 8003fa4:	e000      	b.n	8003fa8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fa6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d03e      	beq.n	8004030 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d112      	bne.n	8003fe6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d112      	bne.n	800401a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f043 0204 	orr.w	r2, r3, #4
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f843 	bl	80040c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800403e:	e039      	b.n	80040b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b2a      	cmp	r3, #42	; 0x2a
 8004044:	d109      	bne.n	800405a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2228      	movs	r2, #40	; 0x28
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff f826 	bl	80030a6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b28      	cmp	r3, #40	; 0x28
 8004064:	d111      	bne.n	800408a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a15      	ldr	r2, [pc, #84]	; (80040c0 <I2C_Slave_STOPF+0x25c>)
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff f827 	bl	80030d6 <HAL_I2C_ListenCpltCallback>
}
 8004088:	e014      	b.n	80040b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	2b22      	cmp	r3, #34	; 0x22
 8004090:	d002      	beq.n	8004098 <I2C_Slave_STOPF+0x234>
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	2b22      	cmp	r3, #34	; 0x22
 8004096:	d10d      	bne.n	80040b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fe fff9 	bl	80030a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	08004455 	.word	0x08004455
 80040c0:	ffff0000 	.word	0xffff0000

080040c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040dc:	7bbb      	ldrb	r3, [r7, #14]
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d002      	beq.n	80040e8 <I2C_ITError+0x24>
 80040e2:	7bbb      	ldrb	r3, [r7, #14]
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d10a      	bne.n	80040fe <I2C_ITError+0x3a>
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b22      	cmp	r3, #34	; 0x22
 80040ec:	d107      	bne.n	80040fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004104:	2b28      	cmp	r3, #40	; 0x28
 8004106:	d107      	bne.n	8004118 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2228      	movs	r2, #40	; 0x28
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004116:	e015      	b.n	8004144 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004126:	d00a      	beq.n	800413e <I2C_ITError+0x7a>
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b60      	cmp	r3, #96	; 0x60
 800412c:	d007      	beq.n	800413e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004152:	d162      	bne.n	800421a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004162:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d020      	beq.n	80041b4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	4a6a      	ldr	r2, [pc, #424]	; (8004320 <I2C_ITError+0x25c>)
 8004178:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc fff5 	bl	800116e <HAL_DMA_Abort_IT>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8089 	beq.w	800429e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ae:	4610      	mov	r0, r2
 80041b0:	4798      	blx	r3
 80041b2:	e074      	b.n	800429e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	4a59      	ldr	r2, [pc, #356]	; (8004320 <I2C_ITError+0x25c>)
 80041ba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fc ffd4 	bl	800116e <HAL_DMA_Abort_IT>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d068      	beq.n	800429e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d10b      	bne.n	80041f2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004214:	4610      	mov	r0, r2
 8004216:	4798      	blx	r3
 8004218:	e041      	b.n	800429e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b60      	cmp	r3, #96	; 0x60
 8004224:	d125      	bne.n	8004272 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d10b      	bne.n	800425a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fe ff5b 	bl	8003126 <HAL_I2C_AbortCpltCallback>
 8004270:	e015      	b.n	800429e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d10b      	bne.n	8004298 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fe ff3a 	bl	8003112 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10e      	bne.n	80042cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d109      	bne.n	80042cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d104      	bne.n	80042cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d113      	bne.n	8004318 <I2C_ITError+0x254>
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b28      	cmp	r3, #40	; 0x28
 80042f4:	d110      	bne.n	8004318 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <I2C_ITError+0x260>)
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fe fedf 	bl	80030d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004318:	bf00      	nop
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	08004455 	.word	0x08004455
 8004324:	ffff0000 	.word	0xffff0000

08004328 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	4608      	mov	r0, r1
 8004332:	4611      	mov	r1, r2
 8004334:	461a      	mov	r2, r3
 8004336:	4603      	mov	r3, r0
 8004338:	817b      	strh	r3, [r7, #10]
 800433a:	460b      	mov	r3, r1
 800433c:	813b      	strh	r3, [r7, #8]
 800433e:	4613      	mov	r3, r2
 8004340:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	2200      	movs	r2, #0
 800435a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f920 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004378:	d103      	bne.n	8004382 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e05f      	b.n	8004446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004386:	897b      	ldrh	r3, [r7, #10]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004394:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	492d      	ldr	r1, [pc, #180]	; (8004450 <I2C_RequestMemoryWrite+0x128>)
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f958 	bl	8004652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e04c      	b.n	8004446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	6a39      	ldr	r1, [r7, #32]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f9c2 	bl	8004750 <I2C_WaitOnTXEFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d107      	bne.n	80043ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e02b      	b.n	8004446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d105      	bne.n	8004400 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043f4:	893b      	ldrh	r3, [r7, #8]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	611a      	str	r2, [r3, #16]
 80043fe:	e021      	b.n	8004444 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004400:	893b      	ldrh	r3, [r7, #8]
 8004402:	0a1b      	lsrs	r3, r3, #8
 8004404:	b29b      	uxth	r3, r3
 8004406:	b2da      	uxtb	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800440e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004410:	6a39      	ldr	r1, [r7, #32]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f99c 	bl	8004750 <I2C_WaitOnTXEFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00d      	beq.n	800443a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2b04      	cmp	r3, #4
 8004424:	d107      	bne.n	8004436 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004434:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e005      	b.n	8004446 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800443a:	893b      	ldrh	r3, [r7, #8]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	00010002 	.word	0x00010002

08004454 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800446e:	4b4b      	ldr	r3, [pc, #300]	; (800459c <I2C_DMAAbort+0x148>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	08db      	lsrs	r3, r3, #3
 8004474:	4a4a      	ldr	r2, [pc, #296]	; (80045a0 <I2C_DMAAbort+0x14c>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	0a1a      	lsrs	r2, r3, #8
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	00da      	lsls	r2, r3, #3
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800449a:	e00a      	b.n	80044b2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3b01      	subs	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b0:	d0ea      	beq.n	8004488 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044be:	2200      	movs	r2, #0
 80044c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	2200      	movs	r2, #0
 80044d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2200      	movs	r2, #0
 80044e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f4:	2200      	movs	r2, #0
 80044f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	2200      	movs	r2, #0
 8004506:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b60      	cmp	r3, #96	; 0x60
 8004522:	d10e      	bne.n	8004542 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2200      	movs	r2, #0
 8004538:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800453a:	6978      	ldr	r0, [r7, #20]
 800453c:	f7fe fdf3 	bl	8003126 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004540:	e027      	b.n	8004592 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004542:	7cfb      	ldrb	r3, [r7, #19]
 8004544:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004548:	2b28      	cmp	r3, #40	; 0x28
 800454a:	d117      	bne.n	800457c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800456a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2200      	movs	r2, #0
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2228      	movs	r2, #40	; 0x28
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800457a:	e007      	b.n	800458c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800458c:	6978      	ldr	r0, [r7, #20]
 800458e:	f7fe fdc0 	bl	8003112 <HAL_I2C_ErrorCallback>
}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000004 	.word	0x20000004
 80045a0:	14f8b589 	.word	0x14f8b589

080045a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b4:	e025      	b.n	8004602 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d021      	beq.n	8004602 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fc fc95 	bl	8000eec <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d116      	bne.n	8004602 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f043 0220 	orr.w	r2, r3, #32
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e023      	b.n	800464a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d10d      	bne.n	8004628 <I2C_WaitOnFlagUntilTimeout+0x84>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	43da      	mvns	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4013      	ands	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	bf0c      	ite	eq
 800461e:	2301      	moveq	r3, #1
 8004620:	2300      	movne	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	e00c      	b.n	8004642 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	43da      	mvns	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4013      	ands	r3, r2
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	429a      	cmp	r2, r3
 8004646:	d0b6      	beq.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004660:	e051      	b.n	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004670:	d123      	bne.n	80046ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004680:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800468a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f043 0204 	orr.w	r2, r3, #4
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e046      	b.n	8004748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d021      	beq.n	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7fc fc13 	bl	8000eec <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d116      	bne.n	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e020      	b.n	8004748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d10c      	bne.n	800472a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	43da      	mvns	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4013      	ands	r3, r2
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf14      	ite	ne
 8004722:	2301      	movne	r3, #1
 8004724:	2300      	moveq	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	e00b      	b.n	8004742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	43da      	mvns	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4013      	ands	r3, r2
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d18d      	bne.n	8004662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800475c:	e02d      	b.n	80047ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f8aa 	bl	80048b8 <I2C_IsAcknowledgeFailed>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e02d      	b.n	80047ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d021      	beq.n	80047ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004776:	f7fc fbb9 	bl	8000eec <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d116      	bne.n	80047ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e007      	b.n	80047ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c4:	2b80      	cmp	r3, #128	; 0x80
 80047c6:	d1ca      	bne.n	800475e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047de:	e02d      	b.n	800483c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f869 	bl	80048b8 <I2C_IsAcknowledgeFailed>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e02d      	b.n	800484c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f6:	d021      	beq.n	800483c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f8:	f7fc fb78 	bl	8000eec <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d116      	bne.n	800483c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e007      	b.n	800484c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d1ca      	bne.n	80047e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004860:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	0a1a      	lsrs	r2, r3, #8
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3b01      	subs	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d107      	bne.n	8004892 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f043 0220 	orr.w	r2, r3, #32
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e008      	b.n	80048a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800489c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a0:	d0e9      	beq.n	8004876 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	20000004 	.word	0x20000004
 80048b4:	14f8b589 	.word	0x14f8b589

080048b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ce:	d11b      	bne.n	8004908 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f043 0204 	orr.w	r2, r3, #4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004926:	d103      	bne.n	8004930 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800492e:	e007      	b.n	8004940 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004938:	d102      	bne.n	8004940 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2208      	movs	r2, #8
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e128      	b.n	8004bb0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a90      	ldr	r2, [pc, #576]	; (8004bb8 <HAL_I2S_Init+0x26c>)
 8004976:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7fc f90f 	bl	8000b9c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004994:	f023 030f 	bic.w	r3, r3, #15
 8004998:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2202      	movs	r2, #2
 80049a0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d060      	beq.n	8004a6c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80049b2:	2310      	movs	r3, #16
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e001      	b.n	80049bc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80049b8:	2320      	movs	r3, #32
 80049ba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d802      	bhi.n	80049ca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80049ca:	2001      	movs	r0, #1
 80049cc:	f001 f9c4 	bl	8005d58 <HAL_RCCEx_GetPeriphCLKFreq>
 80049d0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049da:	d125      	bne.n	8004a28 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d010      	beq.n	8004a06 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	461a      	mov	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	3305      	adds	r3, #5
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	e01f      	b.n	8004a46 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	461a      	mov	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a22:	3305      	adds	r3, #5
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	e00e      	b.n	8004a46 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	461a      	mov	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	3305      	adds	r3, #5
 8004a44:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4a5c      	ldr	r2, [pc, #368]	; (8004bbc <HAL_I2S_Init+0x270>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	08db      	lsrs	r3, r3, #3
 8004a50:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e003      	b.n	8004a74 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d902      	bls.n	8004a80 <HAL_I2S_Init+0x134>
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	2bff      	cmp	r3, #255	; 0xff
 8004a7e:	d907      	bls.n	8004a90 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a84:	f043 0210 	orr.w	r2, r3, #16
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e08f      	b.n	8004bb0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	ea42 0103 	orr.w	r1, r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004aae:	f023 030f 	bic.w	r3, r3, #15
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6851      	ldr	r1, [r2, #4]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6892      	ldr	r2, [r2, #8]
 8004aba:	4311      	orrs	r1, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68d2      	ldr	r2, [r2, #12]
 8004ac0:	4311      	orrs	r1, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6992      	ldr	r2, [r2, #24]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d161      	bne.n	8004ba0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a38      	ldr	r2, [pc, #224]	; (8004bc0 <HAL_I2S_Init+0x274>)
 8004ae0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a37      	ldr	r2, [pc, #220]	; (8004bc4 <HAL_I2S_Init+0x278>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <HAL_I2S_Init+0x1a4>
 8004aec:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <HAL_I2S_Init+0x27c>)
 8004aee:	e001      	b.n	8004af4 <HAL_I2S_Init+0x1a8>
 8004af0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	4932      	ldr	r1, [pc, #200]	; (8004bc4 <HAL_I2S_Init+0x278>)
 8004afc:	428a      	cmp	r2, r1
 8004afe:	d101      	bne.n	8004b04 <HAL_I2S_Init+0x1b8>
 8004b00:	4a31      	ldr	r2, [pc, #196]	; (8004bc8 <HAL_I2S_Init+0x27c>)
 8004b02:	e001      	b.n	8004b08 <HAL_I2S_Init+0x1bc>
 8004b04:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004b08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b0c:	f023 030f 	bic.w	r3, r3, #15
 8004b10:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2b      	ldr	r2, [pc, #172]	; (8004bc4 <HAL_I2S_Init+0x278>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <HAL_I2S_Init+0x1d4>
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <HAL_I2S_Init+0x27c>)
 8004b1e:	e001      	b.n	8004b24 <HAL_I2S_Init+0x1d8>
 8004b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b24:	2202      	movs	r2, #2
 8004b26:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a25      	ldr	r2, [pc, #148]	; (8004bc4 <HAL_I2S_Init+0x278>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d101      	bne.n	8004b36 <HAL_I2S_Init+0x1ea>
 8004b32:	4b25      	ldr	r3, [pc, #148]	; (8004bc8 <HAL_I2S_Init+0x27c>)
 8004b34:	e001      	b.n	8004b3a <HAL_I2S_Init+0x1ee>
 8004b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b46:	d003      	beq.n	8004b50 <HAL_I2S_Init+0x204>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e001      	b.n	8004b5c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b66:	4313      	orrs	r3, r2
 8004b68:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b70:	4313      	orrs	r3, r2
 8004b72:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	897b      	ldrh	r3, [r7, #10]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b88:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a0d      	ldr	r2, [pc, #52]	; (8004bc4 <HAL_I2S_Init+0x278>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d101      	bne.n	8004b98 <HAL_I2S_Init+0x24c>
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <HAL_I2S_Init+0x27c>)
 8004b96:	e001      	b.n	8004b9c <HAL_I2S_Init+0x250>
 8004b98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b9c:	897a      	ldrh	r2, [r7, #10]
 8004b9e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	08004cc3 	.word	0x08004cc3
 8004bbc:	cccccccd 	.word	0xcccccccd
 8004bc0:	08004dd9 	.word	0x08004dd9
 8004bc4:	40003800 	.word	0x40003800
 8004bc8:	40003400 	.word	0x40003400

08004bcc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	881a      	ldrh	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	1c9a      	adds	r2, r3, #2
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10e      	bne.n	8004c5c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c4c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff ffb8 	bl	8004bcc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	b292      	uxth	r2, r2
 8004c78:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	1c9a      	adds	r2, r3, #2
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10e      	bne.n	8004cba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004caa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff ff93 	bl	8004be0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b086      	sub	sp, #24
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d13a      	bne.n	8004d54 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d109      	bne.n	8004cfc <I2S_IRQHandler+0x3a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d102      	bne.n	8004cfc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ffb4 	bl	8004c64 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b40      	cmp	r3, #64	; 0x40
 8004d04:	d126      	bne.n	8004d54 <I2S_IRQHandler+0x92>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d11f      	bne.n	8004d54 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d24:	2300      	movs	r3, #0
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d46:	f043 0202 	orr.w	r2, r3, #2
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff ff50 	bl	8004bf4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d136      	bne.n	8004dce <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d109      	bne.n	8004d7e <I2S_IRQHandler+0xbc>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d74:	2b80      	cmp	r3, #128	; 0x80
 8004d76:	d102      	bne.n	8004d7e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff45 	bl	8004c08 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d122      	bne.n	8004dce <I2S_IRQHandler+0x10c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d11b      	bne.n	8004dce <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004da4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	f043 0204 	orr.w	r2, r3, #4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff ff13 	bl	8004bf4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dce:	bf00      	nop
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a92      	ldr	r2, [pc, #584]	; (8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004df2:	4b92      	ldr	r3, [pc, #584]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004df4:	e001      	b.n	8004dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004df6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a8b      	ldr	r2, [pc, #556]	; (8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004e10:	4b8a      	ldr	r3, [pc, #552]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e12:	e001      	b.n	8004e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004e14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e24:	d004      	beq.n	8004e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 8099 	bne.w	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d107      	bne.n	8004e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f925 	bl	8005094 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f9c8 	bl	80051f4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d13a      	bne.n	8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d035      	beq.n	8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a6e      	ldr	r2, [pc, #440]	; (8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d101      	bne.n	8004e86 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004e82:	4b6e      	ldr	r3, [pc, #440]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e84:	e001      	b.n	8004e8a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004e86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4969      	ldr	r1, [pc, #420]	; (8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e92:	428b      	cmp	r3, r1
 8004e94:	d101      	bne.n	8004e9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004e96:	4b69      	ldr	r3, [pc, #420]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e98:	e001      	b.n	8004e9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004e9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ea2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eb2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	f043 0202 	orr.w	r2, r3, #2
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff fe88 	bl	8004bf4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	f040 80c3 	bne.w	8005076 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 80bd 	beq.w	8005076 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f0a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a49      	ldr	r2, [pc, #292]	; (8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d101      	bne.n	8004f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004f16:	4b49      	ldr	r3, [pc, #292]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f18:	e001      	b.n	8004f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004f1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4944      	ldr	r1, [pc, #272]	; (8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f26:	428b      	cmp	r3, r1
 8004f28:	d101      	bne.n	8004f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f2a:	4b44      	ldr	r3, [pc, #272]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f2c:	e001      	b.n	8004f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f36:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]
 8004f44:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	f043 0204 	orr.w	r2, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff fe4a 	bl	8004bf4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f60:	e089      	b.n	8005076 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d107      	bne.n	8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f8be 	bl	80050f8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d107      	bne.n	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f8fd 	bl	8005190 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d12f      	bne.n	8005000 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d02a      	beq.n	8005000 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fb8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d101      	bne.n	8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fc6:	e001      	b.n	8004fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004fc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4919      	ldr	r1, [pc, #100]	; (8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fd4:	428b      	cmp	r3, r1
 8004fd6:	d101      	bne.n	8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004fd8:	4b18      	ldr	r3, [pc, #96]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fda:	e001      	b.n	8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004fdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fe4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff2:	f043 0202 	orr.w	r2, r3, #2
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff fdfa 	bl	8004bf4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b08      	cmp	r3, #8
 8005008:	d136      	bne.n	8005078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b00      	cmp	r3, #0
 8005012:	d031      	beq.n	8005078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a07      	ldr	r2, [pc, #28]	; (8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d101      	bne.n	8005022 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800501e:	4b07      	ldr	r3, [pc, #28]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005020:	e001      	b.n	8005026 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005022:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4902      	ldr	r1, [pc, #8]	; (8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800502e:	428b      	cmp	r3, r1
 8005030:	d106      	bne.n	8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005032:	4b02      	ldr	r3, [pc, #8]	; (800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005034:	e006      	b.n	8005044 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005036:	bf00      	nop
 8005038:	40003800 	.word	0x40003800
 800503c:	40003400 	.word	0x40003400
 8005040:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005044:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005048:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005058:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	f043 0204 	orr.w	r2, r3, #4
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff fdc0 	bl	8004bf4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005074:	e000      	b.n	8005078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005076:	bf00      	nop
}
 8005078:	bf00      	nop
 800507a:	3720      	adds	r7, #32
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	1c99      	adds	r1, r3, #2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6251      	str	r1, [r2, #36]	; 0x24
 80050a6:	881a      	ldrh	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d113      	bne.n	80050ee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d106      	bne.n	80050ee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffc9 	bl	8005080 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	1c99      	adds	r1, r3, #2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6251      	str	r1, [r2, #36]	; 0x24
 800510a:	8819      	ldrh	r1, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1d      	ldr	r2, [pc, #116]	; (8005188 <I2SEx_TxISR_I2SExt+0x90>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d101      	bne.n	800511a <I2SEx_TxISR_I2SExt+0x22>
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <I2SEx_TxISR_I2SExt+0x94>)
 8005118:	e001      	b.n	800511e <I2SEx_TxISR_I2SExt+0x26>
 800511a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800511e:	460a      	mov	r2, r1
 8005120:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d121      	bne.n	800517e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a12      	ldr	r2, [pc, #72]	; (8005188 <I2SEx_TxISR_I2SExt+0x90>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d101      	bne.n	8005148 <I2SEx_TxISR_I2SExt+0x50>
 8005144:	4b11      	ldr	r3, [pc, #68]	; (800518c <I2SEx_TxISR_I2SExt+0x94>)
 8005146:	e001      	b.n	800514c <I2SEx_TxISR_I2SExt+0x54>
 8005148:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	490d      	ldr	r1, [pc, #52]	; (8005188 <I2SEx_TxISR_I2SExt+0x90>)
 8005154:	428b      	cmp	r3, r1
 8005156:	d101      	bne.n	800515c <I2SEx_TxISR_I2SExt+0x64>
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <I2SEx_TxISR_I2SExt+0x94>)
 800515a:	e001      	b.n	8005160 <I2SEx_TxISR_I2SExt+0x68>
 800515c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005160:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005164:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff ff81 	bl	8005080 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800517e:	bf00      	nop
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40003800 	.word	0x40003800
 800518c:	40003400 	.word	0x40003400

08005190 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68d8      	ldr	r0, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	1c99      	adds	r1, r3, #2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051a8:	b282      	uxth	r2, r0
 80051aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d113      	bne.n	80051ec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051d2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff ff4a 	bl	8005080 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a20      	ldr	r2, [pc, #128]	; (8005284 <I2SEx_RxISR_I2SExt+0x90>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <I2SEx_RxISR_I2SExt+0x16>
 8005206:	4b20      	ldr	r3, [pc, #128]	; (8005288 <I2SEx_RxISR_I2SExt+0x94>)
 8005208:	e001      	b.n	800520e <I2SEx_RxISR_I2SExt+0x1a>
 800520a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800520e:	68d8      	ldr	r0, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	1c99      	adds	r1, r3, #2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	62d1      	str	r1, [r2, #44]	; 0x2c
 800521a:	b282      	uxth	r2, r0
 800521c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d121      	bne.n	800527a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a12      	ldr	r2, [pc, #72]	; (8005284 <I2SEx_RxISR_I2SExt+0x90>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d101      	bne.n	8005244 <I2SEx_RxISR_I2SExt+0x50>
 8005240:	4b11      	ldr	r3, [pc, #68]	; (8005288 <I2SEx_RxISR_I2SExt+0x94>)
 8005242:	e001      	b.n	8005248 <I2SEx_RxISR_I2SExt+0x54>
 8005244:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	490d      	ldr	r1, [pc, #52]	; (8005284 <I2SEx_RxISR_I2SExt+0x90>)
 8005250:	428b      	cmp	r3, r1
 8005252:	d101      	bne.n	8005258 <I2SEx_RxISR_I2SExt+0x64>
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <I2SEx_RxISR_I2SExt+0x94>)
 8005256:	e001      	b.n	800525c <I2SEx_RxISR_I2SExt+0x68>
 8005258:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800525c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005260:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff ff03 	bl	8005080 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40003800 	.word	0x40003800
 8005288:	40003400 	.word	0x40003400

0800528c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e267      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d075      	beq.n	8005396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052aa:	4b88      	ldr	r3, [pc, #544]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d00c      	beq.n	80052d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052b6:	4b85      	ldr	r3, [pc, #532]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d112      	bne.n	80052e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c2:	4b82      	ldr	r3, [pc, #520]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ce:	d10b      	bne.n	80052e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	4b7e      	ldr	r3, [pc, #504]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05b      	beq.n	8005394 <HAL_RCC_OscConfig+0x108>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d157      	bne.n	8005394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e242      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f0:	d106      	bne.n	8005300 <HAL_RCC_OscConfig+0x74>
 80052f2:	4b76      	ldr	r3, [pc, #472]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a75      	ldr	r2, [pc, #468]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e01d      	b.n	800533c <HAL_RCC_OscConfig+0xb0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0x98>
 800530a:	4b70      	ldr	r3, [pc, #448]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a6f      	ldr	r2, [pc, #444]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 8005310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	4b6d      	ldr	r3, [pc, #436]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a6c      	ldr	r2, [pc, #432]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0xb0>
 8005324:	4b69      	ldr	r3, [pc, #420]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a68      	ldr	r2, [pc, #416]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 800532a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	4b66      	ldr	r3, [pc, #408]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a65      	ldr	r2, [pc, #404]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 8005336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d013      	beq.n	800536c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fb fdd2 	bl	8000eec <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800534c:	f7fb fdce 	bl	8000eec <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e207      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535e:	4b5b      	ldr	r3, [pc, #364]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0xc0>
 800536a:	e014      	b.n	8005396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536c:	f7fb fdbe 	bl	8000eec <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005374:	f7fb fdba 	bl	8000eec <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	; 0x64
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e1f3      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005386:	4b51      	ldr	r3, [pc, #324]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0xe8>
 8005392:	e000      	b.n	8005396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d063      	beq.n	800546a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a2:	4b4a      	ldr	r3, [pc, #296]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ae:	4b47      	ldr	r3, [pc, #284]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d11c      	bne.n	80053f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ba:	4b44      	ldr	r3, [pc, #272]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d116      	bne.n	80053f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c6:	4b41      	ldr	r3, [pc, #260]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_RCC_OscConfig+0x152>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d001      	beq.n	80053de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e1c7      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053de:	4b3b      	ldr	r3, [pc, #236]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4937      	ldr	r1, [pc, #220]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f2:	e03a      	b.n	800546a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d020      	beq.n	800543e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053fc:	4b34      	ldr	r3, [pc, #208]	; (80054d0 <HAL_RCC_OscConfig+0x244>)
 80053fe:	2201      	movs	r2, #1
 8005400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fb fd73 	bl	8000eec <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800540a:	f7fb fd6f 	bl	8000eec <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e1a8      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005428:	4b28      	ldr	r3, [pc, #160]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4925      	ldr	r1, [pc, #148]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]
 800543c:	e015      	b.n	800546a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800543e:	4b24      	ldr	r3, [pc, #144]	; (80054d0 <HAL_RCC_OscConfig+0x244>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fb fd52 	bl	8000eec <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800544c:	f7fb fd4e 	bl	8000eec <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e187      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545e:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d036      	beq.n	80054e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d016      	beq.n	80054ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800547e:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <HAL_RCC_OscConfig+0x248>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005484:	f7fb fd32 	bl	8000eec <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800548c:	f7fb fd2e 	bl	8000eec <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e167      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800549e:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_RCC_OscConfig+0x240>)
 80054a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0x200>
 80054aa:	e01b      	b.n	80054e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ac:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_RCC_OscConfig+0x248>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b2:	f7fb fd1b 	bl	8000eec <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b8:	e00e      	b.n	80054d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ba:	f7fb fd17 	bl	8000eec <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d907      	bls.n	80054d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e150      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
 80054cc:	40023800 	.word	0x40023800
 80054d0:	42470000 	.word	0x42470000
 80054d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d8:	4b88      	ldr	r3, [pc, #544]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 80054da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1ea      	bne.n	80054ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8097 	beq.w	8005620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f2:	2300      	movs	r3, #0
 80054f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f6:	4b81      	ldr	r3, [pc, #516]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10f      	bne.n	8005522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005502:	2300      	movs	r3, #0
 8005504:	60bb      	str	r3, [r7, #8]
 8005506:	4b7d      	ldr	r3, [pc, #500]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	4a7c      	ldr	r2, [pc, #496]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 800550c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005510:	6413      	str	r3, [r2, #64]	; 0x40
 8005512:	4b7a      	ldr	r3, [pc, #488]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551e:	2301      	movs	r3, #1
 8005520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005522:	4b77      	ldr	r3, [pc, #476]	; (8005700 <HAL_RCC_OscConfig+0x474>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	2b00      	cmp	r3, #0
 800552c:	d118      	bne.n	8005560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800552e:	4b74      	ldr	r3, [pc, #464]	; (8005700 <HAL_RCC_OscConfig+0x474>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a73      	ldr	r2, [pc, #460]	; (8005700 <HAL_RCC_OscConfig+0x474>)
 8005534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553a:	f7fb fcd7 	bl	8000eec <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005542:	f7fb fcd3 	bl	8000eec <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e10c      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005554:	4b6a      	ldr	r3, [pc, #424]	; (8005700 <HAL_RCC_OscConfig+0x474>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0f0      	beq.n	8005542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d106      	bne.n	8005576 <HAL_RCC_OscConfig+0x2ea>
 8005568:	4b64      	ldr	r3, [pc, #400]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	4a63      	ldr	r2, [pc, #396]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 800556e:	f043 0301 	orr.w	r3, r3, #1
 8005572:	6713      	str	r3, [r2, #112]	; 0x70
 8005574:	e01c      	b.n	80055b0 <HAL_RCC_OscConfig+0x324>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b05      	cmp	r3, #5
 800557c:	d10c      	bne.n	8005598 <HAL_RCC_OscConfig+0x30c>
 800557e:	4b5f      	ldr	r3, [pc, #380]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	4a5e      	ldr	r2, [pc, #376]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 8005584:	f043 0304 	orr.w	r3, r3, #4
 8005588:	6713      	str	r3, [r2, #112]	; 0x70
 800558a:	4b5c      	ldr	r3, [pc, #368]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	4a5b      	ldr	r2, [pc, #364]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	6713      	str	r3, [r2, #112]	; 0x70
 8005596:	e00b      	b.n	80055b0 <HAL_RCC_OscConfig+0x324>
 8005598:	4b58      	ldr	r3, [pc, #352]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	4a57      	ldr	r2, [pc, #348]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	6713      	str	r3, [r2, #112]	; 0x70
 80055a4:	4b55      	ldr	r3, [pc, #340]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a8:	4a54      	ldr	r2, [pc, #336]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 80055aa:	f023 0304 	bic.w	r3, r3, #4
 80055ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d015      	beq.n	80055e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fb fc98 	bl	8000eec <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055be:	e00a      	b.n	80055d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c0:	f7fb fc94 	bl	8000eec <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e0cb      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d6:	4b49      	ldr	r3, [pc, #292]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 80055d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0ee      	beq.n	80055c0 <HAL_RCC_OscConfig+0x334>
 80055e2:	e014      	b.n	800560e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e4:	f7fb fc82 	bl	8000eec <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ea:	e00a      	b.n	8005602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ec:	f7fb fc7e 	bl	8000eec <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0b5      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005602:	4b3e      	ldr	r3, [pc, #248]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ee      	bne.n	80055ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d105      	bne.n	8005620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005614:	4b39      	ldr	r3, [pc, #228]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	4a38      	ldr	r2, [pc, #224]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 800561a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80a1 	beq.w	800576c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800562a:	4b34      	ldr	r3, [pc, #208]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	2b08      	cmp	r3, #8
 8005634:	d05c      	beq.n	80056f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d141      	bne.n	80056c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563e:	4b31      	ldr	r3, [pc, #196]	; (8005704 <HAL_RCC_OscConfig+0x478>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005644:	f7fb fc52 	bl	8000eec <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800564c:	f7fb fc4e 	bl	8000eec <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e087      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565e:	4b27      	ldr	r3, [pc, #156]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	019b      	lsls	r3, r3, #6
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	3b01      	subs	r3, #1
 8005684:	041b      	lsls	r3, r3, #16
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	061b      	lsls	r3, r3, #24
 800568e:	491b      	ldr	r1, [pc, #108]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 8005690:	4313      	orrs	r3, r2
 8005692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005694:	4b1b      	ldr	r3, [pc, #108]	; (8005704 <HAL_RCC_OscConfig+0x478>)
 8005696:	2201      	movs	r2, #1
 8005698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569a:	f7fb fc27 	bl	8000eec <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a2:	f7fb fc23 	bl	8000eec <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e05c      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b4:	4b11      	ldr	r3, [pc, #68]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f0      	beq.n	80056a2 <HAL_RCC_OscConfig+0x416>
 80056c0:	e054      	b.n	800576c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c2:	4b10      	ldr	r3, [pc, #64]	; (8005704 <HAL_RCC_OscConfig+0x478>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c8:	f7fb fc10 	bl	8000eec <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d0:	f7fb fc0c 	bl	8000eec <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e045      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_RCC_OscConfig+0x470>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x444>
 80056ee:	e03d      	b.n	800576c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d107      	bne.n	8005708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e038      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
 80056fc:	40023800 	.word	0x40023800
 8005700:	40007000 	.word	0x40007000
 8005704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005708:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <HAL_RCC_OscConfig+0x4ec>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d028      	beq.n	8005768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005720:	429a      	cmp	r2, r3
 8005722:	d121      	bne.n	8005768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572e:	429a      	cmp	r2, r3
 8005730:	d11a      	bne.n	8005768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005738:	4013      	ands	r3, r2
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800573e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005740:	4293      	cmp	r3, r2
 8005742:	d111      	bne.n	8005768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	085b      	lsrs	r3, r3, #1
 8005750:	3b01      	subs	r3, #1
 8005752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005754:	429a      	cmp	r2, r3
 8005756:	d107      	bne.n	8005768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005764:	429a      	cmp	r2, r3
 8005766:	d001      	beq.n	800576c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	40023800 	.word	0x40023800

0800577c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0cc      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005790:	4b68      	ldr	r3, [pc, #416]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d90c      	bls.n	80057b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b65      	ldr	r3, [pc, #404]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b63      	ldr	r3, [pc, #396]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0b8      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d020      	beq.n	8005806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d005      	beq.n	80057dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057d0:	4b59      	ldr	r3, [pc, #356]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	4a58      	ldr	r2, [pc, #352]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057e8:	4b53      	ldr	r3, [pc, #332]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	4a52      	ldr	r2, [pc, #328]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057f4:	4b50      	ldr	r3, [pc, #320]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	494d      	ldr	r1, [pc, #308]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	4313      	orrs	r3, r2
 8005804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d044      	beq.n	800589c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d107      	bne.n	800582a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800581a:	4b47      	ldr	r3, [pc, #284]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d119      	bne.n	800585a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e07f      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d003      	beq.n	800583a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005836:	2b03      	cmp	r3, #3
 8005838:	d107      	bne.n	800584a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583a:	4b3f      	ldr	r3, [pc, #252]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e06f      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584a:	4b3b      	ldr	r3, [pc, #236]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e067      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800585a:	4b37      	ldr	r3, [pc, #220]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f023 0203 	bic.w	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4934      	ldr	r1, [pc, #208]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	4313      	orrs	r3, r2
 800586a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800586c:	f7fb fb3e 	bl	8000eec <HAL_GetTick>
 8005870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005872:	e00a      	b.n	800588a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005874:	f7fb fb3a 	bl	8000eec <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e04f      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	4b2b      	ldr	r3, [pc, #172]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 020c 	and.w	r2, r3, #12
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	429a      	cmp	r2, r3
 800589a:	d1eb      	bne.n	8005874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800589c:	4b25      	ldr	r3, [pc, #148]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d20c      	bcs.n	80058c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b22      	ldr	r3, [pc, #136]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	4b20      	ldr	r3, [pc, #128]	; (8005934 <HAL_RCC_ClockConfig+0x1b8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e032      	b.n	800592a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058d0:	4b19      	ldr	r3, [pc, #100]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	4916      	ldr	r1, [pc, #88]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	490e      	ldr	r1, [pc, #56]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005902:	f000 f821 	bl	8005948 <HAL_RCC_GetSysClockFreq>
 8005906:	4602      	mov	r2, r0
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	490a      	ldr	r1, [pc, #40]	; (800593c <HAL_RCC_ClockConfig+0x1c0>)
 8005914:	5ccb      	ldrb	r3, [r1, r3]
 8005916:	fa22 f303 	lsr.w	r3, r2, r3
 800591a:	4a09      	ldr	r2, [pc, #36]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 800591c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800591e:	4b09      	ldr	r3, [pc, #36]	; (8005944 <HAL_RCC_ClockConfig+0x1c8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f7fb fa9e 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40023c00 	.word	0x40023c00
 8005938:	40023800 	.word	0x40023800
 800593c:	080067bc 	.word	0x080067bc
 8005940:	20000004 	.word	0x20000004
 8005944:	20000008 	.word	0x20000008

08005948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800594c:	b094      	sub	sp, #80	; 0x50
 800594e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	647b      	str	r3, [r7, #68]	; 0x44
 8005954:	2300      	movs	r3, #0
 8005956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005958:	2300      	movs	r3, #0
 800595a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005960:	4b79      	ldr	r3, [pc, #484]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 030c 	and.w	r3, r3, #12
 8005968:	2b08      	cmp	r3, #8
 800596a:	d00d      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0x40>
 800596c:	2b08      	cmp	r3, #8
 800596e:	f200 80e1 	bhi.w	8005b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_RCC_GetSysClockFreq+0x34>
 8005976:	2b04      	cmp	r3, #4
 8005978:	d003      	beq.n	8005982 <HAL_RCC_GetSysClockFreq+0x3a>
 800597a:	e0db      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800597c:	4b73      	ldr	r3, [pc, #460]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800597e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005980:	e0db      	b.n	8005b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005982:	4b73      	ldr	r3, [pc, #460]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8005984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005986:	e0d8      	b.n	8005b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005988:	4b6f      	ldr	r3, [pc, #444]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005990:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005992:	4b6d      	ldr	r3, [pc, #436]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d063      	beq.n	8005a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800599e:	4b6a      	ldr	r3, [pc, #424]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	099b      	lsrs	r3, r3, #6
 80059a4:	2200      	movs	r2, #0
 80059a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b0:	633b      	str	r3, [r7, #48]	; 0x30
 80059b2:	2300      	movs	r3, #0
 80059b4:	637b      	str	r3, [r7, #52]	; 0x34
 80059b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059ba:	4622      	mov	r2, r4
 80059bc:	462b      	mov	r3, r5
 80059be:	f04f 0000 	mov.w	r0, #0
 80059c2:	f04f 0100 	mov.w	r1, #0
 80059c6:	0159      	lsls	r1, r3, #5
 80059c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059cc:	0150      	lsls	r0, r2, #5
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4621      	mov	r1, r4
 80059d4:	1a51      	subs	r1, r2, r1
 80059d6:	6139      	str	r1, [r7, #16]
 80059d8:	4629      	mov	r1, r5
 80059da:	eb63 0301 	sbc.w	r3, r3, r1
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059ec:	4659      	mov	r1, fp
 80059ee:	018b      	lsls	r3, r1, #6
 80059f0:	4651      	mov	r1, sl
 80059f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059f6:	4651      	mov	r1, sl
 80059f8:	018a      	lsls	r2, r1, #6
 80059fa:	4651      	mov	r1, sl
 80059fc:	ebb2 0801 	subs.w	r8, r2, r1
 8005a00:	4659      	mov	r1, fp
 8005a02:	eb63 0901 	sbc.w	r9, r3, r1
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	f04f 0300 	mov.w	r3, #0
 8005a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a1a:	4690      	mov	r8, r2
 8005a1c:	4699      	mov	r9, r3
 8005a1e:	4623      	mov	r3, r4
 8005a20:	eb18 0303 	adds.w	r3, r8, r3
 8005a24:	60bb      	str	r3, [r7, #8]
 8005a26:	462b      	mov	r3, r5
 8005a28:	eb49 0303 	adc.w	r3, r9, r3
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	024b      	lsls	r3, r1, #9
 8005a3e:	4621      	mov	r1, r4
 8005a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a44:	4621      	mov	r1, r4
 8005a46:	024a      	lsls	r2, r1, #9
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4e:	2200      	movs	r2, #0
 8005a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a58:	f7fa fbb6 	bl	80001c8 <__aeabi_uldivmod>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4613      	mov	r3, r2
 8005a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a64:	e058      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a66:	4b38      	ldr	r3, [pc, #224]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	099b      	lsrs	r3, r3, #6
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	4611      	mov	r1, r2
 8005a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a76:	623b      	str	r3, [r7, #32]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	f04f 0000 	mov.w	r0, #0
 8005a88:	f04f 0100 	mov.w	r1, #0
 8005a8c:	0159      	lsls	r1, r3, #5
 8005a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a92:	0150      	lsls	r0, r2, #5
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4641      	mov	r1, r8
 8005a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8005abc:	eb63 050b 	sbc.w	r5, r3, fp
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	00eb      	lsls	r3, r5, #3
 8005aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ace:	00e2      	lsls	r2, r4, #3
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	461d      	mov	r5, r3
 8005ad4:	4643      	mov	r3, r8
 8005ad6:	18e3      	adds	r3, r4, r3
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	464b      	mov	r3, r9
 8005adc:	eb45 0303 	adc.w	r3, r5, r3
 8005ae0:	607b      	str	r3, [r7, #4]
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aee:	4629      	mov	r1, r5
 8005af0:	028b      	lsls	r3, r1, #10
 8005af2:	4621      	mov	r1, r4
 8005af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005af8:	4621      	mov	r1, r4
 8005afa:	028a      	lsls	r2, r1, #10
 8005afc:	4610      	mov	r0, r2
 8005afe:	4619      	mov	r1, r3
 8005b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b02:	2200      	movs	r2, #0
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	61fa      	str	r2, [r7, #28]
 8005b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b0c:	f7fa fb5c 	bl	80001c8 <__aeabi_uldivmod>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4613      	mov	r3, r2
 8005b16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b18:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	0c1b      	lsrs	r3, r3, #16
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	3301      	adds	r3, #1
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b32:	e002      	b.n	8005b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3750      	adds	r7, #80	; 0x50
 8005b40:	46bd      	mov	sp, r7
 8005b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b46:	bf00      	nop
 8005b48:	40023800 	.word	0x40023800
 8005b4c:	00f42400 	.word	0x00f42400
 8005b50:	007a1200 	.word	0x007a1200

08005b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20000004 	.word	0x20000004

08005b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b70:	f7ff fff0 	bl	8005b54 <HAL_RCC_GetHCLKFreq>
 8005b74:	4602      	mov	r2, r0
 8005b76:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	0a9b      	lsrs	r3, r3, #10
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	4903      	ldr	r1, [pc, #12]	; (8005b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b82:	5ccb      	ldrb	r3, [r1, r3]
 8005b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	080067cc 	.word	0x080067cc

08005b94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d105      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d035      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bbc:	4b62      	ldr	r3, [pc, #392]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bc2:	f7fb f993 	bl	8000eec <HAL_GetTick>
 8005bc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bca:	f7fb f98f 	bl	8000eec <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e0b0      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bdc:	4b5b      	ldr	r3, [pc, #364]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f0      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	019a      	lsls	r2, r3, #6
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	071b      	lsls	r3, r3, #28
 8005bf4:	4955      	ldr	r1, [pc, #340]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bfc:	4b52      	ldr	r3, [pc, #328]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c02:	f7fb f973 	bl	8000eec <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c0a:	f7fb f96f 	bl	8000eec <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e090      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c1c:	4b4b      	ldr	r3, [pc, #300]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8083 	beq.w	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	4b44      	ldr	r3, [pc, #272]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	4a43      	ldr	r2, [pc, #268]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c44:	6413      	str	r3, [r2, #64]	; 0x40
 8005c46:	4b41      	ldr	r3, [pc, #260]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c52:	4b3f      	ldr	r3, [pc, #252]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a3e      	ldr	r2, [pc, #248]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c5e:	f7fb f945 	bl	8000eec <HAL_GetTick>
 8005c62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c64:	e008      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c66:	f7fb f941 	bl	8000eec <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e062      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c78:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0f0      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c84:	4b31      	ldr	r3, [pc, #196]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02f      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d028      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ca2:	4b2a      	ldr	r3, [pc, #168]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005caa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cac:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cb2:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005cb8:	4a24      	ldr	r2, [pc, #144]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cbe:	4b23      	ldr	r3, [pc, #140]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d114      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cca:	f7fb f90f 	bl	8000eec <HAL_GetTick>
 8005cce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd0:	e00a      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cd2:	f7fb f90b 	bl	8000eec <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e02a      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce8:	4b18      	ldr	r3, [pc, #96]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0ee      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d00:	d10d      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005d02:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d16:	490d      	ldr	r1, [pc, #52]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	608b      	str	r3, [r1, #8]
 8005d1c:	e005      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d24:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d28:	6093      	str	r3, [r2, #8]
 8005d2a:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d36:	4905      	ldr	r1, [pc, #20]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	42470068 	.word	0x42470068
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	40007000 	.word	0x40007000
 8005d54:	42470e40 	.word	0x42470e40

08005d58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d13e      	bne.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005d76:	4b23      	ldr	r3, [pc, #140]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d12f      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d8c:	4b1e      	ldr	r3, [pc, #120]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d8e:	617b      	str	r3, [r7, #20]
          break;
 8005d90:	e02f      	b.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d92:	4b1c      	ldr	r3, [pc, #112]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d9e:	d108      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005da0:	4b18      	ldr	r3, [pc, #96]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005da8:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	e007      	b.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005db2:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dba:	4a15      	ldr	r2, [pc, #84]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005dc2:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc8:	099b      	lsrs	r3, r3, #6
 8005dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
 8005dd4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ddc:	0f1b      	lsrs	r3, r3, #28
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]
          break;
 8005dea:	e002      	b.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
          break;
 8005df0:	bf00      	nop
        }
      }
      break;
 8005df2:	bf00      	nop
    }
  }
  return frequency;
 8005df4:	697b      	ldr	r3, [r7, #20]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40023800 	.word	0x40023800
 8005e08:	00bb8000 	.word	0x00bb8000
 8005e0c:	007a1200 	.word	0x007a1200
 8005e10:	00f42400 	.word	0x00f42400

08005e14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e07b      	b.n	8005f1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d108      	bne.n	8005e40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e36:	d009      	beq.n	8005e4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	61da      	str	r2, [r3, #28]
 8005e3e:	e005      	b.n	8005e4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fa ff18 	bl	8000c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed0:	ea42 0103 	orr.w	r1, r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	0c1b      	lsrs	r3, r3, #16
 8005eea:	f003 0104 	and.w	r1, r3, #4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	f003 0210 	and.w	r2, r3, #16
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f043 0201 	orr.w	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f023 0201 	bic.w	r2, r3, #1
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a13      	ldr	r2, [pc, #76]	; (8005fd0 <USB_FlushTxFifo+0x64>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d901      	bls.n	8005f8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e01b      	b.n	8005fc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	daf2      	bge.n	8005f7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	019b      	lsls	r3, r3, #6
 8005f9c:	f043 0220 	orr.w	r2, r3, #32
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4a08      	ldr	r2, [pc, #32]	; (8005fd0 <USB_FlushTxFifo+0x64>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d901      	bls.n	8005fb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e006      	b.n	8005fc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d0f0      	beq.n	8005fa4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	00030d40 	.word	0x00030d40

08005fd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a11      	ldr	r2, [pc, #68]	; (8006030 <USB_FlushRxFifo+0x5c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d901      	bls.n	8005ff2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e018      	b.n	8006024 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	daf2      	bge.n	8005fe0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2210      	movs	r2, #16
 8006002:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	3301      	adds	r3, #1
 8006008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4a08      	ldr	r2, [pc, #32]	; (8006030 <USB_FlushRxFifo+0x5c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d901      	bls.n	8006016 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e006      	b.n	8006024 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b10      	cmp	r3, #16
 8006020:	d0f0      	beq.n	8006004 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	00030d40 	.word	0x00030d40

08006034 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006034:	b480      	push	{r7}
 8006036:	b08b      	sub	sp, #44	; 0x2c
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	4613      	mov	r3, r2
 8006040:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	089b      	lsrs	r3, r3, #2
 800604e:	b29b      	uxth	r3, r3
 8006050:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006052:	88fb      	ldrh	r3, [r7, #6]
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800605a:	2300      	movs	r3, #0
 800605c:	623b      	str	r3, [r7, #32]
 800605e:	e014      	b.n	800608a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	601a      	str	r2, [r3, #0]
    pDest++;
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	3301      	adds	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	3301      	adds	r3, #1
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	3301      	adds	r3, #1
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	3301      	adds	r3, #1
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	3301      	adds	r3, #1
 8006088:	623b      	str	r3, [r7, #32]
 800608a:	6a3a      	ldr	r2, [r7, #32]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	429a      	cmp	r2, r3
 8006090:	d3e6      	bcc.n	8006060 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006092:	8bfb      	ldrh	r3, [r7, #30]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01e      	beq.n	80060d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a2:	461a      	mov	r2, r3
 80060a4:	f107 0310 	add.w	r3, r7, #16
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	fa22 f303 	lsr.w	r3, r2, r3
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	701a      	strb	r2, [r3, #0]
      i++;
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	3301      	adds	r3, #1
 80060c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	3301      	adds	r3, #1
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060ca:	8bfb      	ldrh	r3, [r7, #30]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060d0:	8bfb      	ldrh	r3, [r7, #30]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1ea      	bne.n	80060ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060d8:	4618      	mov	r0, r3
 80060da:	372c      	adds	r7, #44	; 0x2c
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4013      	ands	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060fc:	68fb      	ldr	r3, [r7, #12]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f003 0301 	and.w	r3, r3, #1
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	460b      	mov	r3, r1
 8006130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006144:	f023 0303 	bic.w	r3, r3, #3
 8006148:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	f003 0303 	and.w	r3, r3, #3
 8006158:	68f9      	ldr	r1, [r7, #12]
 800615a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800615e:	4313      	orrs	r3, r2
 8006160:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d107      	bne.n	8006178 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616e:	461a      	mov	r2, r3
 8006170:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006174:	6053      	str	r3, [r2, #4]
 8006176:	e009      	b.n	800618c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d106      	bne.n	800618c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006184:	461a      	mov	r2, r3
 8006186:	f241 7370 	movw	r3, #6000	; 0x1770
 800618a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	b29b      	uxth	r3, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80061bc:	b480      	push	{r7}
 80061be:	b089      	sub	sp, #36	; 0x24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	0c9b      	lsrs	r3, r3, #18
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	0fdb      	lsrs	r3, r3, #31
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b20      	cmp	r3, #32
 800620a:	d104      	bne.n	8006216 <USB_HC_Halt+0x5a>
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e0c8      	b.n	80063a8 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <USB_HC_Halt+0x66>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b02      	cmp	r3, #2
 8006220:	d163      	bne.n	80062ea <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	440a      	add	r2, r1
 8006238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006240:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	f040 80ab 	bne.w	80063a6 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d133      	bne.n	80062c4 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	440a      	add	r2, r1
 8006272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006276:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800627a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	4413      	add	r3, r2
 8006284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	440a      	add	r2, r1
 8006292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006296:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800629a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3301      	adds	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062a8:	d81d      	bhi.n	80062e6 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c0:	d0ec      	beq.n	800629c <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062c2:	e070      	b.n	80063a6 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062e2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062e4:	e05f      	b.n	80063a6 <USB_HC_Halt+0x1ea>
            break;
 80062e6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062e8:	e05d      	b.n	80063a6 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006308:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d133      	bne.n	8006382 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	440a      	add	r2, r1
 8006330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006338:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	440a      	add	r2, r1
 8006350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006354:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006358:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3301      	adds	r3, #1
 800635e:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006366:	d81d      	bhi.n	80063a4 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800637a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800637e:	d0ec      	beq.n	800635a <USB_HC_Halt+0x19e>
 8006380:	e011      	b.n	80063a6 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	440a      	add	r2, r1
 8006398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e000      	b.n	80063a6 <USB_HC_Halt+0x1ea>
          break;
 80063a4:	bf00      	nop
    }
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3724      	adds	r7, #36	; 0x24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff fdbd 	bl	8005f48 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063ce:	2110      	movs	r1, #16
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff fdcb 	bl	8005f6c <USB_FlushTxFifo>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff fdf7 	bl	8005fd4 <USB_FlushRxFifo>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80063f0:	2300      	movs	r3, #0
 80063f2:	61bb      	str	r3, [r7, #24]
 80063f4:	e01f      	b.n	8006436 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800640c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006414:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800641c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642a:	461a      	mov	r2, r3
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	3301      	adds	r3, #1
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2b0f      	cmp	r3, #15
 800643a:	d9dc      	bls.n	80063f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800643c:	2300      	movs	r3, #0
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	e034      	b.n	80064ac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	4413      	add	r3, r2
 800644a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006458:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006460:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006468:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	4413      	add	r3, r2
 8006472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006476:	461a      	mov	r2, r3
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3301      	adds	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006488:	d80c      	bhi.n	80064a4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800649c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a0:	d0ec      	beq.n	800647c <USB_StopHost+0xc8>
 80064a2:	e000      	b.n	80064a6 <USB_StopHost+0xf2>
        break;
 80064a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	3301      	adds	r3, #1
 80064aa:	61bb      	str	r3, [r7, #24]
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b0f      	cmp	r3, #15
 80064b0:	d9c7      	bls.n	8006442 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064b8:	461a      	mov	r2, r3
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
 80064be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f04f 32ff 	mov.w	r2, #4294967295
 80064c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff fd2c 	bl	8005f26 <USB_EnableGlobalInt>

  return ret;
 80064ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f804 	bl	80064fc <USBH_HandleSof>
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b0b      	cmp	r3, #11
 800650c:	d10a      	bne.n	8006524 <USBH_HandleSof+0x28>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
  }
}
 8006524:	bf00      	nop
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800653c:	bf00      	nop
}
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006558:	bf00      	nop
}
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b082      	sub	sp, #8
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f883 	bl	80066be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	791b      	ldrb	r3, [r3, #4]
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f80b 	bl	80065da <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	795b      	ldrb	r3, [r3, #5]
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f805 	bl	80065da <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	460b      	mov	r3, r1
 80065e4:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	2b0f      	cmp	r3, #15
 80065ea:	d80d      	bhi.n	8006608 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	33e0      	adds	r3, #224	; 0xe0
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	33e0      	adds	r3, #224	; 0xe0
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff ff57 	bl	80064d8 <USBH_LL_IncTimer>
}
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b082      	sub	sp, #8
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ff8f 	bl	8006564 <USBH_LL_Connect>
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff ff98 	bl	8006592 <USBH_LL_Disconnect>
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
 8006676:	4613      	mov	r3, r2
 8006678:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff ff49 	bl	800652c <USBH_LL_PortEnabled>
}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b082      	sub	sp, #8
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff ff49 	bl	8006548 <USBH_LL_PortDisabled>
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fb f83b 	bl	8001750 <HAL_HCD_Stop>
 80066da:	4603      	mov	r3, r0
 80066dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 f807 	bl	80066f4 <USBH_Get_USB_Status>
 80066e6:	4603      	mov	r3, r0
 80066e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	2b03      	cmp	r3, #3
 8006706:	d817      	bhi.n	8006738 <USBH_Get_USB_Status+0x44>
 8006708:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <USBH_Get_USB_Status+0x1c>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	08006721 	.word	0x08006721
 8006714:	08006727 	.word	0x08006727
 8006718:	0800672d 	.word	0x0800672d
 800671c:	08006733 	.word	0x08006733
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]
    break;
 8006724:	e00b      	b.n	800673e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006726:	2302      	movs	r3, #2
 8006728:	73fb      	strb	r3, [r7, #15]
    break;
 800672a:	e008      	b.n	800673e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
    break;
 8006730:	e005      	b.n	800673e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006732:	2302      	movs	r3, #2
 8006734:	73fb      	strb	r3, [r7, #15]
    break;
 8006736:	e002      	b.n	800673e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006738:	2302      	movs	r3, #2
 800673a:	73fb      	strb	r3, [r7, #15]
    break;
 800673c:	bf00      	nop
  }
  return usb_status;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <__libc_init_array>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	4d0d      	ldr	r5, [pc, #52]	; (8006784 <__libc_init_array+0x38>)
 8006750:	4c0d      	ldr	r4, [pc, #52]	; (8006788 <__libc_init_array+0x3c>)
 8006752:	1b64      	subs	r4, r4, r5
 8006754:	10a4      	asrs	r4, r4, #2
 8006756:	2600      	movs	r6, #0
 8006758:	42a6      	cmp	r6, r4
 800675a:	d109      	bne.n	8006770 <__libc_init_array+0x24>
 800675c:	4d0b      	ldr	r5, [pc, #44]	; (800678c <__libc_init_array+0x40>)
 800675e:	4c0c      	ldr	r4, [pc, #48]	; (8006790 <__libc_init_array+0x44>)
 8006760:	f000 f820 	bl	80067a4 <_init>
 8006764:	1b64      	subs	r4, r4, r5
 8006766:	10a4      	asrs	r4, r4, #2
 8006768:	2600      	movs	r6, #0
 800676a:	42a6      	cmp	r6, r4
 800676c:	d105      	bne.n	800677a <__libc_init_array+0x2e>
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	f855 3b04 	ldr.w	r3, [r5], #4
 8006774:	4798      	blx	r3
 8006776:	3601      	adds	r6, #1
 8006778:	e7ee      	b.n	8006758 <__libc_init_array+0xc>
 800677a:	f855 3b04 	ldr.w	r3, [r5], #4
 800677e:	4798      	blx	r3
 8006780:	3601      	adds	r6, #1
 8006782:	e7f2      	b.n	800676a <__libc_init_array+0x1e>
 8006784:	080067dc 	.word	0x080067dc
 8006788:	080067dc 	.word	0x080067dc
 800678c:	080067dc 	.word	0x080067dc
 8006790:	080067e0 	.word	0x080067e0

08006794 <memset>:
 8006794:	4402      	add	r2, r0
 8006796:	4603      	mov	r3, r0
 8006798:	4293      	cmp	r3, r2
 800679a:	d100      	bne.n	800679e <memset+0xa>
 800679c:	4770      	bx	lr
 800679e:	f803 1b01 	strb.w	r1, [r3], #1
 80067a2:	e7f9      	b.n	8006798 <memset+0x4>

080067a4 <_init>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr

080067b0 <_fini>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	bf00      	nop
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr
