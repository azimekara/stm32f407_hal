
gun23_canuartdeneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d54  08002d54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d54  08002d54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d54  08002d54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002d68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002d68  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c460  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b47  00000000  00000000  0002c494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  0002ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001889e  00000000  00000000  0002f518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d192  00000000  00000000  00047db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902da  00000000  00000000  00054f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5222  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e4  00000000  00000000  000e5274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d04 	.word	0x08002d04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d04 	.word	0x08002d04

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_UART_RxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_TIM14_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(huart, rxData, 25);
 8000228:	4907      	ldr	r1, [pc, #28]	; (8000248 <HAL_UART_RxCpltCallback+0x28>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2219      	movs	r2, #25
 800022e:	0018      	movs	r0, r3
 8000230:	f001 fc22 	bl	8001a78 <HAL_UART_Receive_IT>

    memset(rxData,0,25);
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_UART_RxCpltCallback+0x28>)
 8000236:	2219      	movs	r2, #25
 8000238:	2100      	movs	r1, #0
 800023a:	0018      	movs	r0, r3
 800023c:	f002 fd5a 	bl	8002cf4 <memset>
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200000f4 	.word	0x200000f4

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000250:	f000 f9e2 	bl	8000618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000254:	f000 f812 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000258:	f000 f8ba 	bl	80003d0 <MX_GPIO_Init>
  MX_TIM14_Init();
 800025c:	f000 f862 	bl	8000324 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8000260:	f000 f886 	bl	8000370 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

HAL_UART_Receive_IT(&huart1, rxData, 25);
 8000264:	4903      	ldr	r1, [pc, #12]	; (8000274 <main+0x28>)
 8000266:	4b04      	ldr	r3, [pc, #16]	; (8000278 <main+0x2c>)
 8000268:	2219      	movs	r2, #25
 800026a:	0018      	movs	r0, r3
 800026c:	f001 fc04 	bl	8001a78 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000270:	e7fe      	b.n	8000270 <main+0x24>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	200000f4 	.word	0x200000f4
 8000278:	20000070 	.word	0x20000070

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b099      	sub	sp, #100	; 0x64
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	242c      	movs	r4, #44	; 0x2c
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2334      	movs	r3, #52	; 0x34
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f002 fd31 	bl	8002cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	231c      	movs	r3, #28
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	0018      	movs	r0, r3
 8000298:	2310      	movs	r3, #16
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f002 fd29 	bl	8002cf4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	0018      	movs	r0, r3
 80002a6:	2318      	movs	r3, #24
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f002 fd22 	bl	8002cf4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2220      	movs	r2, #32
 80002b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	2201      	movs	r2, #1
 80002ba:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2200      	movs	r2, #0
 80002c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 fccf 	bl	8000c68 <HAL_RCC_OscConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002ce:	f000 f897 	bl	8000400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	211c      	movs	r1, #28
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2207      	movs	r2, #7
 80002d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2203      	movs	r2, #3
 80002de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2101      	movs	r1, #1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 f83f 	bl	8001374 <HAL_RCC_ClockConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fa:	f000 f881 	bl	8000400 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2201      	movs	r2, #1
 8000302:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	0018      	movs	r0, r3
 800030e:	f001 f9ab 	bl	8001668 <HAL_RCCEx_PeriphCLKConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000316:	f000 f873 	bl	8000400 <Error_Handler>
  }
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b019      	add	sp, #100	; 0x64
 8000320:	bd90      	pop	{r4, r7, pc}
	...

08000324 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000328:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_TIM14_Init+0x40>)
 800032a:	4a0f      	ldr	r2, [pc, #60]	; (8000368 <MX_TIM14_Init+0x44>)
 800032c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 800032e:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <MX_TIM14_Init+0x40>)
 8000330:	2204      	movs	r2, #4
 8000332:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000334:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_TIM14_Init+0x40>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <MX_TIM14_Init+0x40>)
 800033c:	4a0b      	ldr	r2, [pc, #44]	; (800036c <MX_TIM14_Init+0x48>)
 800033e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_TIM14_Init+0x40>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000346:	4b07      	ldr	r3, [pc, #28]	; (8000364 <MX_TIM14_Init+0x40>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <MX_TIM14_Init+0x40>)
 800034e:	0018      	movs	r0, r3
 8000350:	f001 fa78 	bl	8001844 <HAL_TIM_Base_Init>
 8000354:	1e03      	subs	r3, r0, #0
 8000356:	d001      	beq.n	800035c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000358:	f000 f852 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	20000028 	.word	0x20000028
 8000368:	40002000 	.word	0x40002000
 800036c:	000003e7 	.word	0x000003e7

08000370 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 8000376:	4a15      	ldr	r2, [pc, #84]	; (80003cc <MX_USART1_UART_Init+0x5c>)
 8000378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800037a:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 800037c:	22e1      	movs	r2, #225	; 0xe1
 800037e:	0312      	lsls	r2, r2, #12
 8000380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 8000396:	220c      	movs	r2, #12
 8000398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fb0b 	bl	80019d0 <HAL_UART_Init>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003be:	f000 f81f 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000070 	.word	0x20000070
 80003cc:	40013800 	.word	0x40013800

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_GPIO_Init+0x2c>)
 80003d8:	695a      	ldr	r2, [r3, #20]
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_GPIO_Init+0x2c>)
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0289      	lsls	r1, r1, #10
 80003e0:	430a      	orrs	r2, r1
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <MX_GPIO_Init+0x2c>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	029b      	lsls	r3, r3, #10
 80003ec:	4013      	ands	r3, r2
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	40021000 	.word	0x40021000

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000408:	e7fe      	b.n	8000408 <Error_Handler+0x8>
	...

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x44>)
 8000414:	699a      	ldr	r2, [r3, #24]
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <HAL_MspInit+0x44>)
 8000418:	2101      	movs	r1, #1
 800041a:	430a      	orrs	r2, r1
 800041c:	619a      	str	r2, [r3, #24]
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x44>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	2201      	movs	r2, #1
 8000424:	4013      	ands	r3, r2
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <HAL_MspInit+0x44>)
 800042c:	69da      	ldr	r2, [r3, #28]
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <HAL_MspInit+0x44>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	0549      	lsls	r1, r1, #21
 8000434:	430a      	orrs	r2, r1
 8000436:	61da      	str	r2, [r3, #28]
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <HAL_MspInit+0x44>)
 800043a:	69da      	ldr	r2, [r3, #28]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	055b      	lsls	r3, r3, #21
 8000440:	4013      	ands	r3, r2
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	40021000 	.word	0x40021000

08000454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a0a      	ldr	r2, [pc, #40]	; (800048c <HAL_TIM_Base_MspInit+0x38>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d10d      	bne.n	8000482 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <HAL_TIM_Base_MspInit+0x3c>)
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <HAL_TIM_Base_MspInit+0x3c>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0049      	lsls	r1, r1, #1
 8000470:	430a      	orrs	r2, r1
 8000472:	61da      	str	r2, [r3, #28]
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <HAL_TIM_Base_MspInit+0x3c>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b004      	add	sp, #16
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	40002000 	.word	0x40002000
 8000490:	40021000 	.word	0x40021000

08000494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b08b      	sub	sp, #44	; 0x2c
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	2414      	movs	r4, #20
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	0018      	movs	r0, r3
 80004a2:	2314      	movs	r3, #20
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f002 fc24 	bl	8002cf4 <memset>
  if(huart->Instance==USART1)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a21      	ldr	r2, [pc, #132]	; (8000538 <HAL_UART_MspInit+0xa4>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d13b      	bne.n	800052e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004b6:	4b21      	ldr	r3, [pc, #132]	; (800053c <HAL_UART_MspInit+0xa8>)
 80004b8:	699a      	ldr	r2, [r3, #24]
 80004ba:	4b20      	ldr	r3, [pc, #128]	; (800053c <HAL_UART_MspInit+0xa8>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	01c9      	lsls	r1, r1, #7
 80004c0:	430a      	orrs	r2, r1
 80004c2:	619a      	str	r2, [r3, #24]
 80004c4:	4b1d      	ldr	r3, [pc, #116]	; (800053c <HAL_UART_MspInit+0xa8>)
 80004c6:	699a      	ldr	r2, [r3, #24]
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	01db      	lsls	r3, r3, #7
 80004cc:	4013      	ands	r3, r2
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <HAL_UART_MspInit+0xa8>)
 80004d4:	695a      	ldr	r2, [r3, #20]
 80004d6:	4b19      	ldr	r3, [pc, #100]	; (800053c <HAL_UART_MspInit+0xa8>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	0289      	lsls	r1, r1, #10
 80004dc:	430a      	orrs	r2, r1
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <HAL_UART_MspInit+0xa8>)
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	029b      	lsls	r3, r3, #10
 80004e8:	4013      	ands	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	22c0      	movs	r2, #192	; 0xc0
 80004f2:	00d2      	lsls	r2, r2, #3
 80004f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f6:	0021      	movs	r1, r4
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2202      	movs	r2, #2
 80004fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2203      	movs	r2, #3
 8000508:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2201      	movs	r2, #1
 800050e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	187a      	adds	r2, r7, r1
 8000512:	2390      	movs	r3, #144	; 0x90
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	0011      	movs	r1, r2
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fa3d 	bl	8000998 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	201b      	movs	r0, #27
 8000524:	f000 f988 	bl	8000838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000528:	201b      	movs	r0, #27
 800052a:	f000 f99a 	bl	8000862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b00b      	add	sp, #44	; 0x2c
 8000534:	bd90      	pop	{r4, r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40013800 	.word	0x40013800
 800053c:	40021000 	.word	0x40021000

08000540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <NMI_Handler+0x4>

08000546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <HardFault_Handler+0x4>

0800054c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000564:	f000 f8a0 	bl	80006a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <USART1_IRQHandler+0x14>)
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fae0 	bl	8001b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	20000070 	.word	0x20000070

08000588 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000594:	4813      	ldr	r0, [pc, #76]	; (80005e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000596:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000598:	4813      	ldr	r0, [pc, #76]	; (80005e8 <LoopForever+0x6>)
    LDR R1, [R0]
 800059a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800059c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <LoopForever+0xa>)
    CMP R1, R2
 80005a0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80005a2:	d105      	bne.n	80005b0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80005a4:	4812      	ldr	r0, [pc, #72]	; (80005f0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80005a6:	4913      	ldr	r1, [pc, #76]	; (80005f4 <LoopForever+0x12>)
    STR R1, [R0]
 80005a8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80005aa:	4813      	ldr	r0, [pc, #76]	; (80005f8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80005ac:	4913      	ldr	r1, [pc, #76]	; (80005fc <LoopForever+0x1a>)
    STR R1, [R0]
 80005ae:	6001      	str	r1, [r0, #0]

080005b0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	4813      	ldr	r0, [pc, #76]	; (8000600 <LoopForever+0x1e>)
  ldr r1, =_edata
 80005b2:	4914      	ldr	r1, [pc, #80]	; (8000604 <LoopForever+0x22>)
  ldr r2, =_sidata
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <LoopForever+0x26>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <LoopForever+0x2a>)
  ldr r4, =_ebss
 80005c8:	4c11      	ldr	r4, [pc, #68]	; (8000610 <LoopForever+0x2e>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005d6:	f7ff ffd7 	bl	8000588 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005da:	f002 fb67 	bl	8002cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005de:	f7ff fe35 	bl	800024c <main>

080005e2 <LoopForever>:

LoopForever:
    b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   r0, =_estack
 80005e4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80005e8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80005ec:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80005f0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80005f4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80005f8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80005fc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000608:	08002d5c 	.word	0x08002d5c
  ldr r2, =_sbss
 800060c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000610:	20000114 	.word	0x20000114

08000614 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC1_IRQHandler>
	...

08000618 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <HAL_Init+0x24>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_Init+0x24>)
 8000622:	2110      	movs	r1, #16
 8000624:	430a      	orrs	r2, r1
 8000626:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 f809 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f7ff feed 	bl	800040c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	0018      	movs	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <HAL_InitTick+0x5c>)
 800064a:	681c      	ldr	r4, [r3, #0]
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_InitTick+0x60>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	0019      	movs	r1, r3
 8000652:	23fa      	movs	r3, #250	; 0xfa
 8000654:	0098      	lsls	r0, r3, #2
 8000656:	f7ff fd57 	bl	8000108 <__udivsi3>
 800065a:	0003      	movs	r3, r0
 800065c:	0019      	movs	r1, r3
 800065e:	0020      	movs	r0, r4
 8000660:	f7ff fd52 	bl	8000108 <__udivsi3>
 8000664:	0003      	movs	r3, r0
 8000666:	0018      	movs	r0, r3
 8000668:	f000 f90b 	bl	8000882 <HAL_SYSTICK_Config>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	e00f      	b.n	8000694 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d80b      	bhi.n	8000692 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	2301      	movs	r3, #1
 800067e:	425b      	negs	r3, r3
 8000680:	2200      	movs	r2, #0
 8000682:	0018      	movs	r0, r3
 8000684:	f000 f8d8 	bl	8000838 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_InitTick+0x64>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	e000      	b.n	8000694 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
}
 8000694:	0018      	movs	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	b003      	add	sp, #12
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_IncTick+0x1c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	001a      	movs	r2, r3
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_IncTick+0x20>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	18d2      	adds	r2, r2, r3
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <HAL_IncTick+0x20>)
 80006ba:	601a      	str	r2, [r3, #0]
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	20000008 	.word	0x20000008
 80006c8:	20000110 	.word	0x20000110

080006cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  return uwTick;
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <HAL_GetTick+0x10>)
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	20000110 	.word	0x20000110

080006e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	0002      	movs	r2, r0
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b7f      	cmp	r3, #127	; 0x7f
 80006f2:	d809      	bhi.n	8000708 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	231f      	movs	r3, #31
 80006fc:	401a      	ands	r2, r3
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_EnableIRQ+0x30>)
 8000700:	2101      	movs	r1, #1
 8000702:	4091      	lsls	r1, r2
 8000704:	000a      	movs	r2, r1
 8000706:	601a      	str	r2, [r3, #0]
  }
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b002      	add	sp, #8
 800070e:	bd80      	pop	{r7, pc}
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	0002      	movs	r2, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b7f      	cmp	r3, #127	; 0x7f
 8000728:	d828      	bhi.n	800077c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800072a:	4a2f      	ldr	r2, [pc, #188]	; (80007e8 <__NVIC_SetPriority+0xd4>)
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b25b      	sxtb	r3, r3
 8000732:	089b      	lsrs	r3, r3, #2
 8000734:	33c0      	adds	r3, #192	; 0xc0
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	589b      	ldr	r3, [r3, r2]
 800073a:	1dfa      	adds	r2, r7, #7
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	0011      	movs	r1, r2
 8000740:	2203      	movs	r2, #3
 8000742:	400a      	ands	r2, r1
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	21ff      	movs	r1, #255	; 0xff
 8000748:	4091      	lsls	r1, r2
 800074a:	000a      	movs	r2, r1
 800074c:	43d2      	mvns	r2, r2
 800074e:	401a      	ands	r2, r3
 8000750:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	019b      	lsls	r3, r3, #6
 8000756:	22ff      	movs	r2, #255	; 0xff
 8000758:	401a      	ands	r2, r3
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	0018      	movs	r0, r3
 8000760:	2303      	movs	r3, #3
 8000762:	4003      	ands	r3, r0
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000768:	481f      	ldr	r0, [pc, #124]	; (80007e8 <__NVIC_SetPriority+0xd4>)
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b25b      	sxtb	r3, r3
 8000770:	089b      	lsrs	r3, r3, #2
 8000772:	430a      	orrs	r2, r1
 8000774:	33c0      	adds	r3, #192	; 0xc0
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800077a:	e031      	b.n	80007e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <__NVIC_SetPriority+0xd8>)
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	0019      	movs	r1, r3
 8000784:	230f      	movs	r3, #15
 8000786:	400b      	ands	r3, r1
 8000788:	3b08      	subs	r3, #8
 800078a:	089b      	lsrs	r3, r3, #2
 800078c:	3306      	adds	r3, #6
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	18d3      	adds	r3, r2, r3
 8000792:	3304      	adds	r3, #4
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	1dfa      	adds	r2, r7, #7
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	0011      	movs	r1, r2
 800079c:	2203      	movs	r2, #3
 800079e:	400a      	ands	r2, r1
 80007a0:	00d2      	lsls	r2, r2, #3
 80007a2:	21ff      	movs	r1, #255	; 0xff
 80007a4:	4091      	lsls	r1, r2
 80007a6:	000a      	movs	r2, r1
 80007a8:	43d2      	mvns	r2, r2
 80007aa:	401a      	ands	r2, r3
 80007ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	22ff      	movs	r2, #255	; 0xff
 80007b4:	401a      	ands	r2, r3
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	0018      	movs	r0, r3
 80007bc:	2303      	movs	r3, #3
 80007be:	4003      	ands	r3, r0
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <__NVIC_SetPriority+0xd8>)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	001c      	movs	r4, r3
 80007cc:	230f      	movs	r3, #15
 80007ce:	4023      	ands	r3, r4
 80007d0:	3b08      	subs	r3, #8
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	430a      	orrs	r2, r1
 80007d6:	3306      	adds	r3, #6
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	18c3      	adds	r3, r0, r3
 80007dc:	3304      	adds	r3, #4
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b003      	add	sp, #12
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1e5a      	subs	r2, r3, #1
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	045b      	lsls	r3, r3, #17
 8000800:	429a      	cmp	r2, r3
 8000802:	d301      	bcc.n	8000808 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000804:	2301      	movs	r3, #1
 8000806:	e010      	b.n	800082a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <SysTick_Config+0x44>)
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	3a01      	subs	r2, #1
 800080e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000810:	2301      	movs	r3, #1
 8000812:	425b      	negs	r3, r3
 8000814:	2103      	movs	r1, #3
 8000816:	0018      	movs	r0, r3
 8000818:	f7ff ff7c 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x44>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	0018      	movs	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	210f      	movs	r1, #15
 8000844:	187b      	adds	r3, r7, r1
 8000846:	1c02      	adds	r2, r0, #0
 8000848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	187b      	adds	r3, r7, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff ff5d 	bl	8000714 <__NVIC_SetPriority>
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b004      	add	sp, #16
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	0002      	movs	r2, r0
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b25b      	sxtb	r3, r3
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff ff33 	bl	80006e0 <__NVIC_EnableIRQ>
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff ffaf 	bl	80007f0 <SysTick_Config>
 8000892:	0003      	movs	r3, r0
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	b002      	add	sp, #8
 800089a:	bd80      	pop	{r7, pc}

0800089c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2221      	movs	r2, #33	; 0x21
 80008a8:	5c9b      	ldrb	r3, [r3, r2]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d008      	beq.n	80008c2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2204      	movs	r2, #4
 80008b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2220      	movs	r2, #32
 80008ba:	2100      	movs	r1, #0
 80008bc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e020      	b.n	8000904 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	210e      	movs	r1, #14
 80008ce:	438a      	bics	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2101      	movs	r1, #1
 80008de:	438a      	bics	r2, r1
 80008e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ea:	2101      	movs	r1, #1
 80008ec:	4091      	lsls	r1, r2
 80008ee:	000a      	movs	r2, r1
 80008f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2221      	movs	r2, #33	; 0x21
 80008f6:	2101      	movs	r1, #1
 80008f8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2220      	movs	r2, #32
 80008fe:	2100      	movs	r1, #0
 8000900:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}

0800090c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000914:	210f      	movs	r1, #15
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2221      	movs	r2, #33	; 0x21
 8000920:	5c9b      	ldrb	r3, [r3, r2]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b02      	cmp	r3, #2
 8000926:	d006      	beq.n	8000936 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2204      	movs	r2, #4
 800092c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e028      	b.n	8000988 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	210e      	movs	r1, #14
 8000942:	438a      	bics	r2, r1
 8000944:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	438a      	bics	r2, r1
 8000954:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800095e:	2101      	movs	r1, #1
 8000960:	4091      	lsls	r1, r2
 8000962:	000a      	movs	r2, r1
 8000964:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2221      	movs	r2, #33	; 0x21
 800096a:	2101      	movs	r1, #1
 800096c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2220      	movs	r2, #32
 8000972:	2100      	movs	r1, #0
 8000974:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800097a:	2b00      	cmp	r3, #0
 800097c:	d004      	beq.n	8000988 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	0010      	movs	r0, r2
 8000986:	4798      	blx	r3
    } 
  }
  return status;
 8000988:	230f      	movs	r3, #15
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	781b      	ldrb	r3, [r3, #0]
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b004      	add	sp, #16
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a6:	e149      	b.n	8000c3c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2101      	movs	r1, #1
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	4091      	lsls	r1, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d100      	bne.n	80009c0 <HAL_GPIO_Init+0x28>
 80009be:	e13a      	b.n	8000c36 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2203      	movs	r2, #3
 80009c6:	4013      	ands	r3, r2
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d005      	beq.n	80009d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2203      	movs	r2, #3
 80009d2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d130      	bne.n	8000a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2203      	movs	r2, #3
 80009e4:	409a      	lsls	r2, r3
 80009e6:	0013      	movs	r3, r2
 80009e8:	43da      	mvns	r2, r3
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68da      	ldr	r2, [r3, #12]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	409a      	lsls	r2, r3
 80009fa:	0013      	movs	r3, r2
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a0e:	2201      	movs	r2, #1
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
 8000a14:	0013      	movs	r3, r2
 8000a16:	43da      	mvns	r2, r3
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	091b      	lsrs	r3, r3, #4
 8000a24:	2201      	movs	r2, #1
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	0013      	movs	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	2203      	movs	r2, #3
 8000a40:	4013      	ands	r3, r2
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d017      	beq.n	8000a76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	2203      	movs	r2, #3
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	43da      	mvns	r2, r3
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	409a      	lsls	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d123      	bne.n	8000aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	08da      	lsrs	r2, r3, #3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3208      	adds	r2, #8
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	58d3      	ldr	r3, [r2, r3]
 8000a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	2207      	movs	r2, #7
 8000a94:	4013      	ands	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	220f      	movs	r2, #15
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	691a      	ldr	r2, [r3, #16]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	2107      	movs	r1, #7
 8000aae:	400b      	ands	r3, r1
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	08da      	lsrs	r2, r3, #3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3208      	adds	r2, #8
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	6939      	ldr	r1, [r7, #16]
 8000ac8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	0013      	movs	r3, r2
 8000ada:	43da      	mvns	r2, r3
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	401a      	ands	r2, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	23c0      	movs	r3, #192	; 0xc0
 8000b04:	029b      	lsls	r3, r3, #10
 8000b06:	4013      	ands	r3, r2
 8000b08:	d100      	bne.n	8000b0c <HAL_GPIO_Init+0x174>
 8000b0a:	e094      	b.n	8000c36 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0c:	4b51      	ldr	r3, [pc, #324]	; (8000c54 <HAL_GPIO_Init+0x2bc>)
 8000b0e:	699a      	ldr	r2, [r3, #24]
 8000b10:	4b50      	ldr	r3, [pc, #320]	; (8000c54 <HAL_GPIO_Init+0x2bc>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	430a      	orrs	r2, r1
 8000b16:	619a      	str	r2, [r3, #24]
 8000b18:	4b4e      	ldr	r3, [pc, #312]	; (8000c54 <HAL_GPIO_Init+0x2bc>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4013      	ands	r3, r2
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b24:	4a4c      	ldr	r2, [pc, #304]	; (8000c58 <HAL_GPIO_Init+0x2c0>)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	589b      	ldr	r3, [r3, r2]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	2203      	movs	r2, #3
 8000b36:	4013      	ands	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	0013      	movs	r3, r2
 8000b40:	43da      	mvns	r2, r3
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	2390      	movs	r3, #144	; 0x90
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d00d      	beq.n	8000b6e <HAL_GPIO_Init+0x1d6>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a41      	ldr	r2, [pc, #260]	; (8000c5c <HAL_GPIO_Init+0x2c4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d007      	beq.n	8000b6a <HAL_GPIO_Init+0x1d2>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a40      	ldr	r2, [pc, #256]	; (8000c60 <HAL_GPIO_Init+0x2c8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_GPIO_Init+0x1ce>
 8000b62:	2302      	movs	r3, #2
 8000b64:	e004      	b.n	8000b70 <HAL_GPIO_Init+0x1d8>
 8000b66:	2305      	movs	r3, #5
 8000b68:	e002      	b.n	8000b70 <HAL_GPIO_Init+0x1d8>
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e000      	b.n	8000b70 <HAL_GPIO_Init+0x1d8>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	2103      	movs	r1, #3
 8000b74:	400a      	ands	r2, r1
 8000b76:	0092      	lsls	r2, r2, #2
 8000b78:	4093      	lsls	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b80:	4935      	ldr	r1, [pc, #212]	; (8000c58 <HAL_GPIO_Init+0x2c0>)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	3302      	adds	r3, #2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b8e:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <HAL_GPIO_Init+0x2cc>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	43da      	mvns	r2, r3
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	025b      	lsls	r3, r3, #9
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <HAL_GPIO_Init+0x2cc>)
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <HAL_GPIO_Init+0x2cc>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	029b      	lsls	r3, r3, #10
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	d003      	beq.n	8000bdc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <HAL_GPIO_Init+0x2cc>)
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <HAL_GPIO_Init+0x2cc>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	035b      	lsls	r3, r3, #13
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_GPIO_Init+0x2cc>)
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_GPIO_Init+0x2cc>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43da      	mvns	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	039b      	lsls	r3, r3, #14
 8000c24:	4013      	ands	r3, r2
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_GPIO_Init+0x2cc>)
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	40da      	lsrs	r2, r3
 8000c44:	1e13      	subs	r3, r2, #0
 8000c46:	d000      	beq.n	8000c4a <HAL_GPIO_Init+0x2b2>
 8000c48:	e6ae      	b.n	80009a8 <HAL_GPIO_Init+0x10>
  } 
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b006      	add	sp, #24
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	48000400 	.word	0x48000400
 8000c60:	48000800 	.word	0x48000800
 8000c64:	40010400 	.word	0x40010400

08000c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	f000 fb76 	bl	8001368 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2201      	movs	r2, #1
 8000c82:	4013      	ands	r3, r2
 8000c84:	d100      	bne.n	8000c88 <HAL_RCC_OscConfig+0x20>
 8000c86:	e08e      	b.n	8000da6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c88:	4bc5      	ldr	r3, [pc, #788]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	220c      	movs	r2, #12
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d00e      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c94:	4bc2      	ldr	r3, [pc, #776]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	220c      	movs	r2, #12
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d117      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x68>
 8000ca0:	4bbf      	ldr	r3, [pc, #764]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	23c0      	movs	r3, #192	; 0xc0
 8000ca6:	025b      	lsls	r3, r3, #9
 8000ca8:	401a      	ands	r2, r3
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	025b      	lsls	r3, r3, #9
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d10e      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb2:	4bbb      	ldr	r3, [pc, #748]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	029b      	lsls	r3, r3, #10
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d100      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x58>
 8000cbe:	e071      	b.n	8000da4 <HAL_RCC_OscConfig+0x13c>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d000      	beq.n	8000cca <HAL_RCC_OscConfig+0x62>
 8000cc8:	e06c      	b.n	8000da4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f000 fb4c 	bl	8001368 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d107      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x80>
 8000cd8:	4bb1      	ldr	r3, [pc, #708]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4bb0      	ldr	r3, [pc, #704]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e02f      	b.n	8000d48 <HAL_RCC_OscConfig+0xe0>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10c      	bne.n	8000d0a <HAL_RCC_OscConfig+0xa2>
 8000cf0:	4bab      	ldr	r3, [pc, #684]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4baa      	ldr	r3, [pc, #680]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000cf6:	49ab      	ldr	r1, [pc, #684]	; (8000fa4 <HAL_RCC_OscConfig+0x33c>)
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	4ba8      	ldr	r3, [pc, #672]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4ba7      	ldr	r3, [pc, #668]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000d02:	49a9      	ldr	r1, [pc, #676]	; (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000d04:	400a      	ands	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	e01e      	b.n	8000d48 <HAL_RCC_OscConfig+0xe0>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b05      	cmp	r3, #5
 8000d10:	d10e      	bne.n	8000d30 <HAL_RCC_OscConfig+0xc8>
 8000d12:	4ba3      	ldr	r3, [pc, #652]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4ba2      	ldr	r3, [pc, #648]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	02c9      	lsls	r1, r1, #11
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	4b9f      	ldr	r3, [pc, #636]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b9e      	ldr	r3, [pc, #632]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	0249      	lsls	r1, r1, #9
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e00b      	b.n	8000d48 <HAL_RCC_OscConfig+0xe0>
 8000d30:	4b9b      	ldr	r3, [pc, #620]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b9a      	ldr	r3, [pc, #616]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000d36:	499b      	ldr	r1, [pc, #620]	; (8000fa4 <HAL_RCC_OscConfig+0x33c>)
 8000d38:	400a      	ands	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	4b98      	ldr	r3, [pc, #608]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b97      	ldr	r3, [pc, #604]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000d42:	4999      	ldr	r1, [pc, #612]	; (8000fa8 <HAL_RCC_OscConfig+0x340>)
 8000d44:	400a      	ands	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d014      	beq.n	8000d7a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d50:	f7ff fcbc 	bl	80006cc <HAL_GetTick>
 8000d54:	0003      	movs	r3, r0
 8000d56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d5a:	f7ff fcb7 	bl	80006cc <HAL_GetTick>
 8000d5e:	0002      	movs	r2, r0
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b64      	cmp	r3, #100	; 0x64
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e2fd      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6c:	4b8c      	ldr	r3, [pc, #560]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	029b      	lsls	r3, r3, #10
 8000d74:	4013      	ands	r3, r2
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0xf2>
 8000d78:	e015      	b.n	8000da6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7a:	f7ff fca7 	bl	80006cc <HAL_GetTick>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d84:	f7ff fca2 	bl	80006cc <HAL_GetTick>
 8000d88:	0002      	movs	r2, r0
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b64      	cmp	r3, #100	; 0x64
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e2e8      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d96:	4b82      	ldr	r3, [pc, #520]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	029b      	lsls	r3, r3, #10
 8000d9e:	4013      	ands	r3, r2
 8000da0:	d1f0      	bne.n	8000d84 <HAL_RCC_OscConfig+0x11c>
 8000da2:	e000      	b.n	8000da6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2202      	movs	r2, #2
 8000dac:	4013      	ands	r3, r2
 8000dae:	d100      	bne.n	8000db2 <HAL_RCC_OscConfig+0x14a>
 8000db0:	e06c      	b.n	8000e8c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000db2:	4b7b      	ldr	r3, [pc, #492]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	220c      	movs	r2, #12
 8000db8:	4013      	ands	r3, r2
 8000dba:	d00e      	beq.n	8000dda <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dbc:	4b78      	ldr	r3, [pc, #480]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d11f      	bne.n	8000e08 <HAL_RCC_OscConfig+0x1a0>
 8000dc8:	4b75      	ldr	r3, [pc, #468]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	23c0      	movs	r3, #192	; 0xc0
 8000dce:	025b      	lsls	r3, r3, #9
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d116      	bne.n	8000e08 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dda:	4b71      	ldr	r3, [pc, #452]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2202      	movs	r2, #2
 8000de0:	4013      	ands	r3, r2
 8000de2:	d005      	beq.n	8000df0 <HAL_RCC_OscConfig+0x188>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d001      	beq.n	8000df0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e2bb      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df0:	4b6b      	ldr	r3, [pc, #428]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	22f8      	movs	r2, #248	; 0xf8
 8000df6:	4393      	bics	r3, r2
 8000df8:	0019      	movs	r1, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	00da      	lsls	r2, r3, #3
 8000e00:	4b67      	ldr	r3, [pc, #412]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e06:	e041      	b.n	8000e8c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d024      	beq.n	8000e5a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e10:	4b63      	ldr	r3, [pc, #396]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b62      	ldr	r3, [pc, #392]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fc56 	bl	80006cc <HAL_GetTick>
 8000e20:	0003      	movs	r3, r0
 8000e22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	e008      	b.n	8000e38 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e26:	f7ff fc51 	bl	80006cc <HAL_GetTick>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e297      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e38:	4b59      	ldr	r3, [pc, #356]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d0f1      	beq.n	8000e26 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e42:	4b57      	ldr	r3, [pc, #348]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	22f8      	movs	r2, #248	; 0xf8
 8000e48:	4393      	bics	r3, r2
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	00da      	lsls	r2, r3, #3
 8000e52:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	e018      	b.n	8000e8c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e5a:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b50      	ldr	r3, [pc, #320]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	438a      	bics	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e66:	f7ff fc31 	bl	80006cc <HAL_GetTick>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e70:	f7ff fc2c 	bl	80006cc <HAL_GetTick>
 8000e74:	0002      	movs	r2, r0
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e272      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e82:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d1f1      	bne.n	8000e70 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2208      	movs	r2, #8
 8000e92:	4013      	ands	r3, r2
 8000e94:	d036      	beq.n	8000f04 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d019      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e9e:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fc0f 	bl	80006cc <HAL_GetTick>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fc0a 	bl	80006cc <HAL_GetTick>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e250      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	2202      	movs	r2, #2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d0f1      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x24c>
 8000ed0:	e018      	b.n	8000f04 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	438a      	bics	r2, r1
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fbf5 	bl	80006cc <HAL_GetTick>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee8:	f7ff fbf0 	bl	80006cc <HAL_GetTick>
 8000eec:	0002      	movs	r2, r0
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e236      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	2202      	movs	r2, #2
 8000f00:	4013      	ands	r3, r2
 8000f02:	d1f1      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2204      	movs	r2, #4
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d100      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2a8>
 8000f0e:	e0b5      	b.n	800107c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f10:	201f      	movs	r0, #31
 8000f12:	183b      	adds	r3, r7, r0
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f18:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000f1a:	69da      	ldr	r2, [r3, #28]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	055b      	lsls	r3, r3, #21
 8000f20:	4013      	ands	r3, r2
 8000f22:	d110      	bne.n	8000f46 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000f26:	69da      	ldr	r2, [r3, #28]
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	0549      	lsls	r1, r1, #21
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	61da      	str	r2, [r3, #28]
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000f34:	69da      	ldr	r2, [r3, #28]
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	055b      	lsls	r3, r3, #21
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f40:	183b      	adds	r3, r7, r0
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_RCC_OscConfig+0x344>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d11a      	bne.n	8000f88 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_RCC_OscConfig+0x344>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_RCC_OscConfig+0x344>)
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	0049      	lsls	r1, r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f60:	f7ff fbb4 	bl	80006cc <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f6a:	f7ff fbaf 	bl	80006cc <HAL_GetTick>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b64      	cmp	r3, #100	; 0x64
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e1f5      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_RCC_OscConfig+0x344>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4013      	ands	r3, r2
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d10f      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x348>
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000f92:	6a1a      	ldr	r2, [r3, #32]
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_RCC_OscConfig+0x338>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	621a      	str	r2, [r3, #32]
 8000f9c:	e036      	b.n	800100c <HAL_RCC_OscConfig+0x3a4>
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	fffeffff 	.word	0xfffeffff
 8000fa8:	fffbffff 	.word	0xfffbffff
 8000fac:	40007000 	.word	0x40007000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10c      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x36a>
 8000fb8:	4bca      	ldr	r3, [pc, #808]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	4bc9      	ldr	r3, [pc, #804]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	438a      	bics	r2, r1
 8000fc2:	621a      	str	r2, [r3, #32]
 8000fc4:	4bc7      	ldr	r3, [pc, #796]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8000fc6:	6a1a      	ldr	r2, [r3, #32]
 8000fc8:	4bc6      	ldr	r3, [pc, #792]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8000fca:	2104      	movs	r1, #4
 8000fcc:	438a      	bics	r2, r1
 8000fce:	621a      	str	r2, [r3, #32]
 8000fd0:	e01c      	b.n	800100c <HAL_RCC_OscConfig+0x3a4>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x38c>
 8000fda:	4bc2      	ldr	r3, [pc, #776]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8000fdc:	6a1a      	ldr	r2, [r3, #32]
 8000fde:	4bc1      	ldr	r3, [pc, #772]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	621a      	str	r2, [r3, #32]
 8000fe6:	4bbf      	ldr	r3, [pc, #764]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8000fe8:	6a1a      	ldr	r2, [r3, #32]
 8000fea:	4bbe      	ldr	r3, [pc, #760]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	621a      	str	r2, [r3, #32]
 8000ff2:	e00b      	b.n	800100c <HAL_RCC_OscConfig+0x3a4>
 8000ff4:	4bbb      	ldr	r3, [pc, #748]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8000ff6:	6a1a      	ldr	r2, [r3, #32]
 8000ff8:	4bba      	ldr	r3, [pc, #744]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	621a      	str	r2, [r3, #32]
 8001000:	4bb8      	ldr	r3, [pc, #736]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001002:	6a1a      	ldr	r2, [r3, #32]
 8001004:	4bb7      	ldr	r3, [pc, #732]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001006:	2104      	movs	r1, #4
 8001008:	438a      	bics	r2, r1
 800100a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d014      	beq.n	800103e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001014:	f7ff fb5a 	bl	80006cc <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101c:	e009      	b.n	8001032 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800101e:	f7ff fb55 	bl	80006cc <HAL_GetTick>
 8001022:	0002      	movs	r2, r0
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	4aaf      	ldr	r2, [pc, #700]	; (80012e8 <HAL_RCC_OscConfig+0x680>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e19a      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001032:	4bac      	ldr	r3, [pc, #688]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	2202      	movs	r2, #2
 8001038:	4013      	ands	r3, r2
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x3b6>
 800103c:	e013      	b.n	8001066 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103e:	f7ff fb45 	bl	80006cc <HAL_GetTick>
 8001042:	0003      	movs	r3, r0
 8001044:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001046:	e009      	b.n	800105c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001048:	f7ff fb40 	bl	80006cc <HAL_GetTick>
 800104c:	0002      	movs	r2, r0
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	4aa5      	ldr	r2, [pc, #660]	; (80012e8 <HAL_RCC_OscConfig+0x680>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e185      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800105c:	4ba1      	ldr	r3, [pc, #644]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	2202      	movs	r2, #2
 8001062:	4013      	ands	r3, r2
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001066:	231f      	movs	r3, #31
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d105      	bne.n	800107c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001070:	4b9c      	ldr	r3, [pc, #624]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001072:	69da      	ldr	r2, [r3, #28]
 8001074:	4b9b      	ldr	r3, [pc, #620]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001076:	499d      	ldr	r1, [pc, #628]	; (80012ec <HAL_RCC_OscConfig+0x684>)
 8001078:	400a      	ands	r2, r1
 800107a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2210      	movs	r2, #16
 8001082:	4013      	ands	r3, r2
 8001084:	d063      	beq.n	800114e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d12a      	bne.n	80010e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800108e:	4b95      	ldr	r3, [pc, #596]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001092:	4b94      	ldr	r3, [pc, #592]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001094:	2104      	movs	r1, #4
 8001096:	430a      	orrs	r2, r1
 8001098:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800109a:	4b92      	ldr	r3, [pc, #584]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 800109c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109e:	4b91      	ldr	r3, [pc, #580]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	430a      	orrs	r2, r1
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a6:	f7ff fb11 	bl	80006cc <HAL_GetTick>
 80010aa:	0003      	movs	r3, r0
 80010ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010b0:	f7ff fb0c 	bl	80006cc <HAL_GetTick>
 80010b4:	0002      	movs	r2, r0
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e152      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010c2:	4b88      	ldr	r3, [pc, #544]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80010c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c6:	2202      	movs	r2, #2
 80010c8:	4013      	ands	r3, r2
 80010ca:	d0f1      	beq.n	80010b0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010cc:	4b85      	ldr	r3, [pc, #532]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	22f8      	movs	r2, #248	; 0xf8
 80010d2:	4393      	bics	r3, r2
 80010d4:	0019      	movs	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	00da      	lsls	r2, r3, #3
 80010dc:	4b81      	ldr	r3, [pc, #516]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80010de:	430a      	orrs	r2, r1
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34
 80010e2:	e034      	b.n	800114e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	3305      	adds	r3, #5
 80010ea:	d111      	bne.n	8001110 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010ec:	4b7d      	ldr	r3, [pc, #500]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80010ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f0:	4b7c      	ldr	r3, [pc, #496]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80010f2:	2104      	movs	r1, #4
 80010f4:	438a      	bics	r2, r1
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010f8:	4b7a      	ldr	r3, [pc, #488]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	22f8      	movs	r2, #248	; 0xf8
 80010fe:	4393      	bics	r3, r2
 8001100:	0019      	movs	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	00da      	lsls	r2, r3, #3
 8001108:	4b76      	ldr	r3, [pc, #472]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 800110a:	430a      	orrs	r2, r1
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
 800110e:	e01e      	b.n	800114e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001110:	4b74      	ldr	r3, [pc, #464]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001114:	4b73      	ldr	r3, [pc, #460]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001116:	2104      	movs	r1, #4
 8001118:	430a      	orrs	r2, r1
 800111a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800111c:	4b71      	ldr	r3, [pc, #452]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 800111e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001120:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001122:	2101      	movs	r1, #1
 8001124:	438a      	bics	r2, r1
 8001126:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001128:	f7ff fad0 	bl	80006cc <HAL_GetTick>
 800112c:	0003      	movs	r3, r0
 800112e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001132:	f7ff facb 	bl	80006cc <HAL_GetTick>
 8001136:	0002      	movs	r2, r0
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e111      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001144:	4b67      	ldr	r3, [pc, #412]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001148:	2202      	movs	r2, #2
 800114a:	4013      	ands	r3, r2
 800114c:	d1f1      	bne.n	8001132 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2220      	movs	r2, #32
 8001154:	4013      	ands	r3, r2
 8001156:	d05c      	beq.n	8001212 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001158:	4b62      	ldr	r3, [pc, #392]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	220c      	movs	r2, #12
 800115e:	4013      	ands	r3, r2
 8001160:	2b0c      	cmp	r3, #12
 8001162:	d00e      	beq.n	8001182 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001164:	4b5f      	ldr	r3, [pc, #380]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	220c      	movs	r2, #12
 800116a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800116c:	2b08      	cmp	r3, #8
 800116e:	d114      	bne.n	800119a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001170:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	23c0      	movs	r3, #192	; 0xc0
 8001176:	025b      	lsls	r3, r3, #9
 8001178:	401a      	ands	r2, r3
 800117a:	23c0      	movs	r3, #192	; 0xc0
 800117c:	025b      	lsls	r3, r3, #9
 800117e:	429a      	cmp	r2, r3
 8001180:	d10b      	bne.n	800119a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001182:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	025b      	lsls	r3, r3, #9
 800118a:	4013      	ands	r3, r2
 800118c:	d040      	beq.n	8001210 <HAL_RCC_OscConfig+0x5a8>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d03c      	beq.n	8001210 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0e6      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d01b      	beq.n	80011da <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011a2:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80011a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a6:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	0249      	lsls	r1, r1, #9
 80011ac:	430a      	orrs	r2, r1
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fa8c 	bl	80006cc <HAL_GetTick>
 80011b4:	0003      	movs	r3, r0
 80011b6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011ba:	f7ff fa87 	bl	80006cc <HAL_GetTick>
 80011be:	0002      	movs	r2, r0
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e0cd      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011cc:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80011ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	025b      	lsls	r3, r3, #9
 80011d4:	4013      	ands	r3, r2
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x552>
 80011d8:	e01b      	b.n	8001212 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80011da:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80011dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011de:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80011e0:	4943      	ldr	r1, [pc, #268]	; (80012f0 <HAL_RCC_OscConfig+0x688>)
 80011e2:	400a      	ands	r2, r1
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fa71 	bl	80006cc <HAL_GetTick>
 80011ea:	0003      	movs	r3, r0
 80011ec:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f0:	f7ff fa6c 	bl	80006cc <HAL_GetTick>
 80011f4:	0002      	movs	r2, r0
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e0b2      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	025b      	lsls	r3, r3, #9
 800120a:	4013      	ands	r3, r2
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x588>
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001210:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	2b00      	cmp	r3, #0
 8001218:	d100      	bne.n	800121c <HAL_RCC_OscConfig+0x5b4>
 800121a:	e0a4      	b.n	8001366 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800121c:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	220c      	movs	r2, #12
 8001222:	4013      	ands	r3, r2
 8001224:	2b08      	cmp	r3, #8
 8001226:	d100      	bne.n	800122a <HAL_RCC_OscConfig+0x5c2>
 8001228:	e078      	b.n	800131c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	2b02      	cmp	r3, #2
 8001230:	d14c      	bne.n	80012cc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001238:	492e      	ldr	r1, [pc, #184]	; (80012f4 <HAL_RCC_OscConfig+0x68c>)
 800123a:	400a      	ands	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fa45 	bl	80006cc <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001248:	f7ff fa40 	bl	80006cc <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e086      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	049b      	lsls	r3, r3, #18
 8001262:	4013      	ands	r3, r2
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	220f      	movs	r2, #15
 800126c:	4393      	bics	r3, r2
 800126e:	0019      	movs	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001276:	430a      	orrs	r2, r1
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <HAL_RCC_OscConfig+0x690>)
 8001280:	4013      	ands	r3, r2
 8001282:	0019      	movs	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	431a      	orrs	r2, r3
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001290:	430a      	orrs	r2, r1
 8001292:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	0449      	lsls	r1, r1, #17
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fa13 	bl	80006cc <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ac:	f7ff fa0e 	bl	80006cc <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e054      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	049b      	lsls	r3, r3, #18
 80012c6:	4013      	ands	r3, r2
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x644>
 80012ca:	e04c      	b.n	8001366 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <HAL_RCC_OscConfig+0x67c>)
 80012d2:	4908      	ldr	r1, [pc, #32]	; (80012f4 <HAL_RCC_OscConfig+0x68c>)
 80012d4:	400a      	ands	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff f9f8 	bl	80006cc <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x6a6>
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	40021000 	.word	0x40021000
 80012e8:	00001388 	.word	0x00001388
 80012ec:	efffffff 	.word	0xefffffff
 80012f0:	fffeffff 	.word	0xfffeffff
 80012f4:	feffffff 	.word	0xfeffffff
 80012f8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff f9e6 	bl	80006cc <HAL_GetTick>
 8001300:	0002      	movs	r2, r0
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e02c      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_RCC_OscConfig+0x708>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	049b      	lsls	r3, r3, #18
 8001316:	4013      	ands	r3, r2
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x694>
 800131a:	e024      	b.n	8001366 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e01f      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_RCC_OscConfig+0x708>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_RCC_OscConfig+0x708>)
 8001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001332:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	23c0      	movs	r3, #192	; 0xc0
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	401a      	ands	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	429a      	cmp	r2, r3
 8001342:	d10e      	bne.n	8001362 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	220f      	movs	r2, #15
 8001348:	401a      	ands	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	429a      	cmp	r2, r3
 8001350:	d107      	bne.n	8001362 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	23f0      	movs	r3, #240	; 0xf0
 8001356:	039b      	lsls	r3, r3, #14
 8001358:	401a      	ands	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b008      	add	sp, #32
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0bf      	b.n	8001508 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001388:	4b61      	ldr	r3, [pc, #388]	; (8001510 <HAL_RCC_ClockConfig+0x19c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2201      	movs	r2, #1
 800138e:	4013      	ands	r3, r2
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d911      	bls.n	80013ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b5e      	ldr	r3, [pc, #376]	; (8001510 <HAL_RCC_ClockConfig+0x19c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2201      	movs	r2, #1
 800139c:	4393      	bics	r3, r2
 800139e:	0019      	movs	r1, r3
 80013a0:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <HAL_RCC_ClockConfig+0x19c>)
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a8:	4b59      	ldr	r3, [pc, #356]	; (8001510 <HAL_RCC_ClockConfig+0x19c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0a6      	b.n	8001508 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d015      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2204      	movs	r2, #4
 80013ca:	4013      	ands	r3, r2
 80013cc:	d006      	beq.n	80013dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013ce:	4b51      	ldr	r3, [pc, #324]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4b50      	ldr	r3, [pc, #320]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 80013d4:	21e0      	movs	r1, #224	; 0xe0
 80013d6:	00c9      	lsls	r1, r1, #3
 80013d8:	430a      	orrs	r2, r1
 80013da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013dc:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	22f0      	movs	r2, #240	; 0xf0
 80013e2:	4393      	bics	r3, r2
 80013e4:	0019      	movs	r1, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 80013ec:	430a      	orrs	r2, r1
 80013ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4013      	ands	r3, r2
 80013f8:	d04c      	beq.n	8001494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d107      	bne.n	8001412 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	029b      	lsls	r3, r3, #10
 800140a:	4013      	ands	r3, r2
 800140c:	d120      	bne.n	8001450 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e07a      	b.n	8001508 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	049b      	lsls	r3, r3, #18
 8001422:	4013      	ands	r3, r2
 8001424:	d114      	bne.n	8001450 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e06e      	b.n	8001508 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001432:	4b38      	ldr	r3, [pc, #224]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 8001434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	025b      	lsls	r3, r3, #9
 800143a:	4013      	ands	r3, r2
 800143c:	d108      	bne.n	8001450 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e062      	b.n	8001508 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	d101      	bne.n	8001450 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e05b      	b.n	8001508 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001450:	4b30      	ldr	r3, [pc, #192]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2203      	movs	r2, #3
 8001456:	4393      	bics	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001464:	f7ff f932 	bl	80006cc <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146c:	e009      	b.n	8001482 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146e:	f7ff f92d 	bl	80006cc <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	4a27      	ldr	r2, [pc, #156]	; (8001518 <HAL_RCC_ClockConfig+0x1a4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e042      	b.n	8001508 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	220c      	movs	r2, #12
 8001488:	401a      	ands	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	429a      	cmp	r2, r3
 8001492:	d1ec      	bne.n	800146e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_RCC_ClockConfig+0x19c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2201      	movs	r2, #1
 800149a:	4013      	ands	r3, r2
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d211      	bcs.n	80014c6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_RCC_ClockConfig+0x19c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2201      	movs	r2, #1
 80014a8:	4393      	bics	r3, r2
 80014aa:	0019      	movs	r1, r3
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_RCC_ClockConfig+0x19c>)
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_RCC_ClockConfig+0x19c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	4013      	ands	r3, r2
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d001      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e020      	b.n	8001508 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2204      	movs	r2, #4
 80014cc:	4013      	ands	r3, r2
 80014ce:	d009      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_RCC_ClockConfig+0x1a8>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	0019      	movs	r1, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 80014e0:	430a      	orrs	r2, r1
 80014e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014e4:	f000 f820 	bl	8001528 <HAL_RCC_GetSysClockFreq>
 80014e8:	0001      	movs	r1, r0
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_RCC_ClockConfig+0x1a0>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	220f      	movs	r2, #15
 80014f2:	4013      	ands	r3, r2
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_RCC_ClockConfig+0x1ac>)
 80014f6:	5cd3      	ldrb	r3, [r2, r3]
 80014f8:	000a      	movs	r2, r1
 80014fa:	40da      	lsrs	r2, r3
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_ClockConfig+0x1b0>)
 80014fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001500:	2003      	movs	r0, #3
 8001502:	f7ff f89d 	bl	8000640 <HAL_InitTick>
  
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b004      	add	sp, #16
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40022000 	.word	0x40022000
 8001514:	40021000 	.word	0x40021000
 8001518:	00001388 	.word	0x00001388
 800151c:	fffff8ff 	.word	0xfffff8ff
 8001520:	08002d3c 	.word	0x08002d3c
 8001524:	20000000 	.word	0x20000000

08001528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b08f      	sub	sp, #60	; 0x3c
 800152c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800152e:	2314      	movs	r3, #20
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	4a38      	ldr	r2, [pc, #224]	; (8001614 <HAL_RCC_GetSysClockFreq+0xec>)
 8001534:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001536:	c313      	stmia	r3!, {r0, r1, r4}
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4a36      	ldr	r2, [pc, #216]	; (8001618 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001540:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001542:	c313      	stmia	r3!, {r0, r1, r4}
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001550:	2300      	movs	r3, #0
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800155c:	4b2f      	ldr	r3, [pc, #188]	; (800161c <HAL_RCC_GetSysClockFreq+0xf4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001564:	220c      	movs	r2, #12
 8001566:	4013      	ands	r3, r2
 8001568:	2b0c      	cmp	r3, #12
 800156a:	d047      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0xd4>
 800156c:	d849      	bhi.n	8001602 <HAL_RCC_GetSysClockFreq+0xda>
 800156e:	2b04      	cmp	r3, #4
 8001570:	d002      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x50>
 8001572:	2b08      	cmp	r3, #8
 8001574:	d003      	beq.n	800157e <HAL_RCC_GetSysClockFreq+0x56>
 8001576:	e044      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <HAL_RCC_GetSysClockFreq+0xf8>)
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800157c:	e044      	b.n	8001608 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001580:	0c9b      	lsrs	r3, r3, #18
 8001582:	220f      	movs	r2, #15
 8001584:	4013      	ands	r3, r2
 8001586:	2214      	movs	r2, #20
 8001588:	18ba      	adds	r2, r7, r2
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	220f      	movs	r2, #15
 8001594:	4013      	ands	r3, r2
 8001596:	1d3a      	adds	r2, r7, #4
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800159c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800159e:	23c0      	movs	r3, #192	; 0xc0
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	401a      	ands	r2, r3
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	025b      	lsls	r3, r3, #9
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d109      	bne.n	80015c0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ae:	481c      	ldr	r0, [pc, #112]	; (8001620 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015b0:	f7fe fdaa 	bl	8000108 <__udivsi3>
 80015b4:	0003      	movs	r3, r0
 80015b6:	001a      	movs	r2, r3
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	4353      	muls	r3, r2
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
 80015be:	e01a      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80015c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c2:	23c0      	movs	r3, #192	; 0xc0
 80015c4:	025b      	lsls	r3, r3, #9
 80015c6:	401a      	ands	r2, r3
 80015c8:	23c0      	movs	r3, #192	; 0xc0
 80015ca:	025b      	lsls	r3, r3, #9
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d109      	bne.n	80015e4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015d2:	4814      	ldr	r0, [pc, #80]	; (8001624 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015d4:	f7fe fd98 	bl	8000108 <__udivsi3>
 80015d8:	0003      	movs	r3, r0
 80015da:	001a      	movs	r2, r3
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	4353      	muls	r3, r2
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015e8:	f7fe fd8e 	bl	8000108 <__udivsi3>
 80015ec:	0003      	movs	r3, r0
 80015ee:	001a      	movs	r2, r3
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	4353      	muls	r3, r2
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80015f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015fa:	e005      	b.n	8001608 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001600:	e002      	b.n	8001608 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001606:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b00f      	add	sp, #60	; 0x3c
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	08002d1c 	.word	0x08002d1c
 8001618:	08002d2c 	.word	0x08002d2c
 800161c:	40021000 	.word	0x40021000
 8001620:	007a1200 	.word	0x007a1200
 8001624:	02dc6c00 	.word	0x02dc6c00

08001628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <HAL_RCC_GetHCLKFreq+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	20000000 	.word	0x20000000

0800163c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001640:	f7ff fff2 	bl	8001628 <HAL_RCC_GetHCLKFreq>
 8001644:	0001      	movs	r1, r0
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	2207      	movs	r2, #7
 800164e:	4013      	ands	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	40d9      	lsrs	r1, r3
 8001656:	000b      	movs	r3, r1
}    
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	40021000 	.word	0x40021000
 8001664:	08002d4c 	.word	0x08002d4c

08001668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	025b      	lsls	r3, r3, #9
 8001680:	4013      	ands	r3, r2
 8001682:	d100      	bne.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001684:	e08e      	b.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001686:	2017      	movs	r0, #23
 8001688:	183b      	adds	r3, r7, r0
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b67      	ldr	r3, [pc, #412]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001690:	69da      	ldr	r2, [r3, #28]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	055b      	lsls	r3, r3, #21
 8001696:	4013      	ands	r3, r2
 8001698:	d110      	bne.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b64      	ldr	r3, [pc, #400]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0549      	lsls	r1, r1, #21
 80016a4:	430a      	orrs	r2, r1
 80016a6:	61da      	str	r2, [r3, #28]
 80016a8:	4b60      	ldr	r3, [pc, #384]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	055b      	lsls	r3, r3, #21
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	183b      	adds	r3, r7, r0
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	4b5c      	ldr	r3, [pc, #368]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4013      	ands	r3, r2
 80016c6:	d11a      	bne.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c8:	4b59      	ldr	r3, [pc, #356]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b58      	ldr	r3, [pc, #352]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	0049      	lsls	r1, r1, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7fe fff9 	bl	80006cc <HAL_GetTick>
 80016da:	0003      	movs	r3, r0
 80016dc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016de:	e008      	b.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e0:	f7fe fff4 	bl	80006cc <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e097      	b.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016fe:	4b4b      	ldr	r3, [pc, #300]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001700:	6a1a      	ldr	r2, [r3, #32]
 8001702:	23c0      	movs	r3, #192	; 0xc0
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4013      	ands	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d034      	beq.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	23c0      	movs	r3, #192	; 0xc0
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4013      	ands	r3, r2
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d02c      	beq.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a43      	ldr	r2, [pc, #268]	; (8001834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001726:	4013      	ands	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800172a:	4b40      	ldr	r3, [pc, #256]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800172c:	6a1a      	ldr	r2, [r3, #32]
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0249      	lsls	r1, r1, #9
 8001734:	430a      	orrs	r2, r1
 8001736:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001738:	4b3c      	ldr	r3, [pc, #240]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	4b3b      	ldr	r3, [pc, #236]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800173e:	493e      	ldr	r1, [pc, #248]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001740:	400a      	ands	r2, r1
 8001742:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001744:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2201      	movs	r2, #1
 800174e:	4013      	ands	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7fe ffbb 	bl	80006cc <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175a:	e009      	b.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7fe ffb6 	bl	80006cc <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a35      	ldr	r2, [pc, #212]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e058      	b.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	2202      	movs	r2, #2
 8001776:	4013      	ands	r3, r2
 8001778:	d0f0      	beq.n	800175c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001780:	4013      	ands	r3, r2
 8001782:	0019      	movs	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800178a:	430a      	orrs	r2, r1
 800178c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800178e:	2317      	movs	r3, #23
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800179a:	69da      	ldr	r2, [r3, #28]
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800179e:	4928      	ldr	r1, [pc, #160]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4013      	ands	r3, r2
 80017ac:	d009      	beq.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	2203      	movs	r2, #3
 80017b4:	4393      	bics	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017be:	430a      	orrs	r2, r1
 80017c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2220      	movs	r2, #32
 80017c8:	4013      	ands	r3, r2
 80017ca:	d009      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	2210      	movs	r2, #16
 80017d2:	4393      	bics	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017dc:	430a      	orrs	r2, r1
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	029b      	lsls	r3, r3, #10
 80017e8:	4013      	ands	r3, r2
 80017ea:	d009      	beq.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	4393      	bics	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4013      	ands	r3, r2
 800180a:	d009      	beq.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	2240      	movs	r2, #64	; 0x40
 8001812:	4393      	bics	r3, r2
 8001814:	0019      	movs	r1, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800181c:	430a      	orrs	r2, r1
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b006      	add	sp, #24
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	40021000 	.word	0x40021000
 8001830:	40007000 	.word	0x40007000
 8001834:	fffffcff 	.word	0xfffffcff
 8001838:	fffeffff 	.word	0xfffeffff
 800183c:	00001388 	.word	0x00001388
 8001840:	efffffff 	.word	0xefffffff

08001844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e042      	b.n	80018dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	223d      	movs	r2, #61	; 0x3d
 800185a:	5c9b      	ldrb	r3, [r3, r2]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d107      	bne.n	8001872 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	223c      	movs	r2, #60	; 0x3c
 8001866:	2100      	movs	r1, #0
 8001868:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	0018      	movs	r0, r3
 800186e:	f7fe fdf1 	bl	8000454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	223d      	movs	r2, #61	; 0x3d
 8001876:	2102      	movs	r1, #2
 8001878:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3304      	adds	r3, #4
 8001882:	0019      	movs	r1, r3
 8001884:	0010      	movs	r0, r2
 8001886:	f000 f82d 	bl	80018e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2246      	movs	r2, #70	; 0x46
 800188e:	2101      	movs	r1, #1
 8001890:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	223e      	movs	r2, #62	; 0x3e
 8001896:	2101      	movs	r1, #1
 8001898:	5499      	strb	r1, [r3, r2]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	223f      	movs	r2, #63	; 0x3f
 800189e:	2101      	movs	r1, #1
 80018a0:	5499      	strb	r1, [r3, r2]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2240      	movs	r2, #64	; 0x40
 80018a6:	2101      	movs	r1, #1
 80018a8:	5499      	strb	r1, [r3, r2]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2241      	movs	r2, #65	; 0x41
 80018ae:	2101      	movs	r1, #1
 80018b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2242      	movs	r2, #66	; 0x42
 80018b6:	2101      	movs	r1, #1
 80018b8:	5499      	strb	r1, [r3, r2]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2243      	movs	r2, #67	; 0x43
 80018be:	2101      	movs	r1, #1
 80018c0:	5499      	strb	r1, [r3, r2]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2244      	movs	r2, #68	; 0x44
 80018c6:	2101      	movs	r1, #1
 80018c8:	5499      	strb	r1, [r3, r2]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2245      	movs	r2, #69	; 0x45
 80018ce:	2101      	movs	r1, #1
 80018d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	223d      	movs	r2, #61	; 0x3d
 80018d6:	2101      	movs	r1, #1
 80018d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a30      	ldr	r2, [pc, #192]	; (80019b8 <TIM_Base_SetConfig+0xd4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d008      	beq.n	800190e <TIM_Base_SetConfig+0x2a>
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	05db      	lsls	r3, r3, #23
 8001902:	429a      	cmp	r2, r3
 8001904:	d003      	beq.n	800190e <TIM_Base_SetConfig+0x2a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a2c      	ldr	r2, [pc, #176]	; (80019bc <TIM_Base_SetConfig+0xd8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d108      	bne.n	8001920 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2270      	movs	r2, #112	; 0x70
 8001912:	4393      	bics	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <TIM_Base_SetConfig+0xd4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d014      	beq.n	8001952 <TIM_Base_SetConfig+0x6e>
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	05db      	lsls	r3, r3, #23
 800192e:	429a      	cmp	r2, r3
 8001930:	d00f      	beq.n	8001952 <TIM_Base_SetConfig+0x6e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a21      	ldr	r2, [pc, #132]	; (80019bc <TIM_Base_SetConfig+0xd8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00b      	beq.n	8001952 <TIM_Base_SetConfig+0x6e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a20      	ldr	r2, [pc, #128]	; (80019c0 <TIM_Base_SetConfig+0xdc>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d007      	beq.n	8001952 <TIM_Base_SetConfig+0x6e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <TIM_Base_SetConfig+0xe0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d003      	beq.n	8001952 <TIM_Base_SetConfig+0x6e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <TIM_Base_SetConfig+0xe4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d108      	bne.n	8001964 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <TIM_Base_SetConfig+0xe8>)
 8001956:	4013      	ands	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	4393      	bics	r3, r2
 800196a:	001a      	movs	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <TIM_Base_SetConfig+0xd4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <TIM_Base_SetConfig+0xbe>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <TIM_Base_SetConfig+0xe0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d003      	beq.n	80019a2 <TIM_Base_SetConfig+0xbe>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <TIM_Base_SetConfig+0xe4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d103      	bne.n	80019aa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	615a      	str	r2, [r3, #20]
}
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b004      	add	sp, #16
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40002000 	.word	0x40002000
 80019c4:	40014400 	.word	0x40014400
 80019c8:	40014800 	.word	0x40014800
 80019cc:	fffffcff 	.word	0xfffffcff

080019d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e044      	b.n	8001a6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2274      	movs	r2, #116	; 0x74
 80019ee:	2100      	movs	r1, #0
 80019f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7fe fd4d 	bl	8000494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2224      	movs	r2, #36	; 0x24
 80019fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	438a      	bics	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 fb86 	bl	8002124 <UART_SetConfig>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e024      	b.n	8001a6c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f000 fcb9 	bl	80023a4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	490d      	ldr	r1, [pc, #52]	; (8001a74 <HAL_UART_Init+0xa4>)
 8001a3e:	400a      	ands	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	212a      	movs	r1, #42	; 0x2a
 8001a4e:	438a      	bics	r2, r1
 8001a50:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 fd51 	bl	800250c <UART_CheckIdleState>
 8001a6a:	0003      	movs	r3, r0
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b002      	add	sp, #8
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	ffffb7ff 	.word	0xffffb7ff

08001a78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	1dbb      	adds	r3, r7, #6
 8001a84:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d150      	bne.n	8001b30 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_UART_Receive_IT+0x24>
 8001a94:	1dbb      	adds	r3, r7, #6
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e048      	b.n	8001b32 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	015b      	lsls	r3, r3, #5
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d109      	bne.n	8001ac0 <HAL_UART_Receive_IT+0x48>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d001      	beq.n	8001ac0 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e038      	b.n	8001b32 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2274      	movs	r2, #116	; 0x74
 8001ac4:	5c9b      	ldrb	r3, [r3, r2]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_UART_Receive_IT+0x56>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e031      	b.n	8001b32 <HAL_UART_Receive_IT+0xba>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2274      	movs	r2, #116	; 0x74
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	041b      	lsls	r3, r3, #16
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d019      	beq.n	8001b1e <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aea:	f3ef 8310 	mrs	r3, PRIMASK
 8001aee:	613b      	str	r3, [r7, #16]
  return(result);
 8001af0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	2301      	movs	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f383 8810 	msr	PRIMASK, r3
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2180      	movs	r1, #128	; 0x80
 8001b0c:	04c9      	lsls	r1, r1, #19
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f383 8810 	msr	PRIMASK, r3
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001b1e:	1dbb      	adds	r3, r7, #6
 8001b20:	881a      	ldrh	r2, [r3, #0]
 8001b22:	68b9      	ldr	r1, [r7, #8]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	0018      	movs	r0, r3
 8001b28:	f000 fdfc 	bl	8002724 <UART_Start_Receive_IT>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	e000      	b.n	8001b32 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
  }
}
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b008      	add	sp, #32
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b0ab      	sub	sp, #172	; 0xac
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	22a4      	movs	r2, #164	; 0xa4
 8001b4c:	18b9      	adds	r1, r7, r2
 8001b4e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	20a0      	movs	r0, #160	; 0xa0
 8001b58:	1839      	adds	r1, r7, r0
 8001b5a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	219c      	movs	r1, #156	; 0x9c
 8001b64:	1879      	adds	r1, r7, r1
 8001b66:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001b68:	0011      	movs	r1, r2
 8001b6a:	18bb      	adds	r3, r7, r2
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a99      	ldr	r2, [pc, #612]	; (8001dd4 <HAL_UART_IRQHandler+0x298>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	2298      	movs	r2, #152	; 0x98
 8001b74:	18bc      	adds	r4, r7, r2
 8001b76:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001b78:	18bb      	adds	r3, r7, r2
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d114      	bne.n	8001baa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2220      	movs	r2, #32
 8001b86:	4013      	ands	r3, r2
 8001b88:	d00f      	beq.n	8001baa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b8a:	183b      	adds	r3, r7, r0
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	4013      	ands	r3, r2
 8001b92:	d00a      	beq.n	8001baa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d100      	bne.n	8001b9e <HAL_UART_IRQHandler+0x62>
 8001b9c:	e296      	b.n	80020cc <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	0010      	movs	r0, r2
 8001ba6:	4798      	blx	r3
      }
      return;
 8001ba8:	e290      	b.n	80020cc <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001baa:	2398      	movs	r3, #152	; 0x98
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d100      	bne.n	8001bb6 <HAL_UART_IRQHandler+0x7a>
 8001bb4:	e114      	b.n	8001de0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001bb6:	239c      	movs	r3, #156	; 0x9c
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d106      	bne.n	8001bd0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001bc2:	23a0      	movs	r3, #160	; 0xa0
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a83      	ldr	r2, [pc, #524]	; (8001dd8 <HAL_UART_IRQHandler+0x29c>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d100      	bne.n	8001bd0 <HAL_UART_IRQHandler+0x94>
 8001bce:	e107      	b.n	8001de0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001bd0:	23a4      	movs	r3, #164	; 0xa4
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d012      	beq.n	8001c02 <HAL_UART_IRQHandler+0xc6>
 8001bdc:	23a0      	movs	r3, #160	; 0xa0
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	d00b      	beq.n	8001c02 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	589b      	ldr	r3, [r3, r2]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c02:	23a4      	movs	r3, #164	; 0xa4
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d011      	beq.n	8001c32 <HAL_UART_IRQHandler+0xf6>
 8001c0e:	239c      	movs	r3, #156	; 0x9c
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4013      	ands	r3, r2
 8001c18:	d00b      	beq.n	8001c32 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	589b      	ldr	r3, [r3, r2]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c32:	23a4      	movs	r3, #164	; 0xa4
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d011      	beq.n	8001c62 <HAL_UART_IRQHandler+0x126>
 8001c3e:	239c      	movs	r3, #156	; 0x9c
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	d00b      	beq.n	8001c62 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	589b      	ldr	r3, [r3, r2]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2180      	movs	r1, #128	; 0x80
 8001c60:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001c62:	23a4      	movs	r3, #164	; 0xa4
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2208      	movs	r2, #8
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d017      	beq.n	8001c9e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001c6e:	23a0      	movs	r3, #160	; 0xa0
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2220      	movs	r2, #32
 8001c76:	4013      	ands	r3, r2
 8001c78:	d105      	bne.n	8001c86 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001c7a:	239c      	movs	r3, #156	; 0x9c
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001c84:	d00b      	beq.n	8001c9e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	589b      	ldr	r3, [r3, r2]
 8001c94:	2208      	movs	r2, #8
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001c9e:	23a4      	movs	r3, #164	; 0xa4
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <HAL_UART_IRQHandler+0x198>
 8001cac:	23a0      	movs	r3, #160	; 0xa0
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	04db      	lsls	r3, r3, #19
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	589b      	ldr	r3, [r3, r2]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2180      	movs	r1, #128	; 0x80
 8001cd2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	589b      	ldr	r3, [r3, r2]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d100      	bne.n	8001ce0 <HAL_UART_IRQHandler+0x1a4>
 8001cde:	e1f7      	b.n	80020d0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ce0:	23a4      	movs	r3, #164	; 0xa4
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d00e      	beq.n	8001d0a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001cec:	23a0      	movs	r3, #160	; 0xa0
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d008      	beq.n	8001d0a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	0010      	movs	r0, r2
 8001d08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	589b      	ldr	r3, [r3, r2]
 8001d10:	2194      	movs	r1, #148	; 0x94
 8001d12:	187a      	adds	r2, r7, r1
 8001d14:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2240      	movs	r2, #64	; 0x40
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b40      	cmp	r3, #64	; 0x40
 8001d22:	d004      	beq.n	8001d2e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2228      	movs	r2, #40	; 0x28
 8001d2a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d2c:	d047      	beq.n	8001dbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f000 fda7 	bl	8002884 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2240      	movs	r2, #64	; 0x40
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b40      	cmp	r3, #64	; 0x40
 8001d42:	d137      	bne.n	8001db4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d44:	f3ef 8310 	mrs	r3, PRIMASK
 8001d48:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d4c:	2090      	movs	r0, #144	; 0x90
 8001d4e:	183a      	adds	r2, r7, r0
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d58:	f383 8810 	msr	PRIMASK, r3
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2140      	movs	r1, #64	; 0x40
 8001d6a:	438a      	bics	r2, r1
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	183b      	adds	r3, r7, r0
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d76:	f383 8810 	msr	PRIMASK, r3
}
 8001d7a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d012      	beq.n	8001daa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_UART_IRQHandler+0x2a0>)
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7fe fdbb 	bl	800090c <HAL_DMA_Abort_IT>
 8001d96:	1e03      	subs	r3, r0, #0
 8001d98:	d01a      	beq.n	8001dd0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	0018      	movs	r0, r3
 8001da6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da8:	e012      	b.n	8001dd0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f000 f9a5 	bl	80020fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db2:	e00d      	b.n	8001dd0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	0018      	movs	r0, r3
 8001db8:	f000 f9a0 	bl	80020fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dbc:	e008      	b.n	8001dd0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 f99b 	bl	80020fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2280      	movs	r2, #128	; 0x80
 8001dca:	2100      	movs	r1, #0
 8001dcc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001dce:	e17f      	b.n	80020d0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dd0:	46c0      	nop			; (mov r8, r8)
    return;
 8001dd2:	e17d      	b.n	80020d0 <HAL_UART_IRQHandler+0x594>
 8001dd4:	0000080f 	.word	0x0000080f
 8001dd8:	04000120 	.word	0x04000120
 8001ddc:	08002949 	.word	0x08002949

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d000      	beq.n	8001dea <HAL_UART_IRQHandler+0x2ae>
 8001de8:	e131      	b.n	800204e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001dea:	23a4      	movs	r3, #164	; 0xa4
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2210      	movs	r2, #16
 8001df2:	4013      	ands	r3, r2
 8001df4:	d100      	bne.n	8001df8 <HAL_UART_IRQHandler+0x2bc>
 8001df6:	e12a      	b.n	800204e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001df8:	23a0      	movs	r3, #160	; 0xa0
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2210      	movs	r2, #16
 8001e00:	4013      	ands	r3, r2
 8001e02:	d100      	bne.n	8001e06 <HAL_UART_IRQHandler+0x2ca>
 8001e04:	e123      	b.n	800204e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b40      	cmp	r3, #64	; 0x40
 8001e1a:	d000      	beq.n	8001e1e <HAL_UART_IRQHandler+0x2e2>
 8001e1c:	e09b      	b.n	8001f56 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	217e      	movs	r1, #126	; 0x7e
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d100      	bne.n	8001e36 <HAL_UART_IRQHandler+0x2fa>
 8001e34:	e14e      	b.n	80020d4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2258      	movs	r2, #88	; 0x58
 8001e3a:	5a9b      	ldrh	r3, [r3, r2]
 8001e3c:	187a      	adds	r2, r7, r1
 8001e3e:	8812      	ldrh	r2, [r2, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d300      	bcc.n	8001e46 <HAL_UART_IRQHandler+0x30a>
 8001e44:	e146      	b.n	80020d4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	187a      	adds	r2, r7, r1
 8001e4a:	215a      	movs	r1, #90	; 0x5a
 8001e4c:	8812      	ldrh	r2, [r2, #0]
 8001e4e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d06e      	beq.n	8001f38 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e62:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e64:	2301      	movs	r3, #1
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	f383 8810 	msr	PRIMASK, r3
}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	499a      	ldr	r1, [pc, #616]	; (80020e4 <HAL_UART_IRQHandler+0x5a8>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e86:	f383 8810 	msr	PRIMASK, r3
}
 8001e8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e94:	677b      	str	r3, [r7, #116]	; 0x74
 8001e96:	2301      	movs	r3, #1
 8001e98:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e9c:	f383 8810 	msr	PRIMASK, r3
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	438a      	bics	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb8:	f383 8810 	msr	PRIMASK, r3
}
 8001ebc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8001ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8001ec8:	2301      	movs	r3, #1
 8001eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ece:	f383 8810 	msr	PRIMASK, r3
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2140      	movs	r1, #64	; 0x40
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eea:	f383 8810 	msr	PRIMASK, r3
}
 8001eee:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001efc:	f3ef 8310 	mrs	r3, PRIMASK
 8001f00:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f06:	2301      	movs	r3, #1
 8001f08:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f0c:	f383 8810 	msr	PRIMASK, r3
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2110      	movs	r1, #16
 8001f1e:	438a      	bics	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f24:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f28:	f383 8810 	msr	PRIMASK, r3
}
 8001f2c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7fe fcb2 	bl	800089c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2258      	movs	r2, #88	; 0x58
 8001f3c:	5a9a      	ldrh	r2, [r3, r2]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	215a      	movs	r1, #90	; 0x5a
 8001f42:	5a5b      	ldrh	r3, [r3, r1]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	0011      	movs	r1, r2
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f8dc 	bl	800210c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001f54:	e0be      	b.n	80020d4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2258      	movs	r2, #88	; 0x58
 8001f5a:	5a99      	ldrh	r1, [r3, r2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	225a      	movs	r2, #90	; 0x5a
 8001f60:	5a9b      	ldrh	r3, [r3, r2]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	208e      	movs	r0, #142	; 0x8e
 8001f66:	183b      	adds	r3, r7, r0
 8001f68:	1a8a      	subs	r2, r1, r2
 8001f6a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	225a      	movs	r2, #90	; 0x5a
 8001f70:	5a9b      	ldrh	r3, [r3, r2]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d100      	bne.n	8001f7a <HAL_UART_IRQHandler+0x43e>
 8001f78:	e0ae      	b.n	80020d8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8001f7a:	183b      	adds	r3, r7, r0
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d100      	bne.n	8001f84 <HAL_UART_IRQHandler+0x448>
 8001f82:	e0a9      	b.n	80020d8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f84:	f3ef 8310 	mrs	r3, PRIMASK
 8001f88:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f8c:	2488      	movs	r4, #136	; 0x88
 8001f8e:	193a      	adds	r2, r7, r4
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	2301      	movs	r3, #1
 8001f94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f383 8810 	msr	PRIMASK, r3
}
 8001f9c:	46c0      	nop			; (mov r8, r8)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	494f      	ldr	r1, [pc, #316]	; (80020e8 <HAL_UART_IRQHandler+0x5ac>)
 8001faa:	400a      	ands	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f383 8810 	msr	PRIMASK, r3
}
 8001fba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8001fc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8001fc2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fc4:	2484      	movs	r4, #132	; 0x84
 8001fc6:	193a      	adds	r2, r7, r4
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f383 8810 	msr	PRIMASK, r3
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	438a      	bics	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	193b      	adds	r3, r7, r4
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f383 8810 	msr	PRIMASK, r3
}
 8001ff2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002006:	f3ef 8310 	mrs	r3, PRIMASK
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800200e:	2480      	movs	r4, #128	; 0x80
 8002010:	193a      	adds	r2, r7, r4
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	2301      	movs	r3, #1
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201a:	f383 8810 	msr	PRIMASK, r3
}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2110      	movs	r1, #16
 800202c:	438a      	bics	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	193b      	adds	r3, r7, r4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002038:	f383 8810 	msr	PRIMASK, r3
}
 800203c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800203e:	183b      	adds	r3, r7, r0
 8002040:	881a      	ldrh	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	0011      	movs	r1, r2
 8002046:	0018      	movs	r0, r3
 8002048:	f000 f860 	bl	800210c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800204c:	e044      	b.n	80020d8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800204e:	23a4      	movs	r3, #164	; 0xa4
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	035b      	lsls	r3, r3, #13
 8002058:	4013      	ands	r3, r2
 800205a:	d010      	beq.n	800207e <HAL_UART_IRQHandler+0x542>
 800205c:	239c      	movs	r3, #156	; 0x9c
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	03db      	lsls	r3, r3, #15
 8002066:	4013      	ands	r3, r2
 8002068:	d009      	beq.n	800207e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	0352      	lsls	r2, r2, #13
 8002072:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	0018      	movs	r0, r3
 8002078:	f000 fe10 	bl	8002c9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800207c:	e02f      	b.n	80020de <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800207e:	23a4      	movs	r3, #164	; 0xa4
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	4013      	ands	r3, r2
 8002088:	d00f      	beq.n	80020aa <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800208a:	23a0      	movs	r3, #160	; 0xa0
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	4013      	ands	r3, r2
 8002094:	d009      	beq.n	80020aa <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01e      	beq.n	80020dc <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	0010      	movs	r0, r2
 80020a6:	4798      	blx	r3
    }
    return;
 80020a8:	e018      	b.n	80020dc <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80020aa:	23a4      	movs	r3, #164	; 0xa4
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2240      	movs	r2, #64	; 0x40
 80020b2:	4013      	ands	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_UART_IRQHandler+0x5a2>
 80020b6:	23a0      	movs	r3, #160	; 0xa0
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	4013      	ands	r3, r2
 80020c0:	d00d      	beq.n	80020de <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fc56 	bl	8002976 <UART_EndTransmit_IT>
    return;
 80020ca:	e008      	b.n	80020de <HAL_UART_IRQHandler+0x5a2>
      return;
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	e006      	b.n	80020de <HAL_UART_IRQHandler+0x5a2>
    return;
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	e004      	b.n	80020de <HAL_UART_IRQHandler+0x5a2>
      return;
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	e002      	b.n	80020de <HAL_UART_IRQHandler+0x5a2>
      return;
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	e000      	b.n	80020de <HAL_UART_IRQHandler+0x5a2>
    return;
 80020dc:	46c0      	nop			; (mov r8, r8)
  }

}
 80020de:	46bd      	mov	sp, r7
 80020e0:	b02b      	add	sp, #172	; 0xac
 80020e2:	bd90      	pop	{r4, r7, pc}
 80020e4:	fffffeff 	.word	0xfffffeff
 80020e8:	fffffedf 	.word	0xfffffedf

080020ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	000a      	movs	r2, r1
 8002116:	1cbb      	adds	r3, r7, #2
 8002118:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800212c:	231e      	movs	r3, #30
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a8d      	ldr	r2, [pc, #564]	; (8002388 <UART_SetConfig+0x264>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a88      	ldr	r2, [pc, #544]	; (800238c <UART_SetConfig+0x268>)
 800216a:	4013      	ands	r3, r2
 800216c:	0019      	movs	r1, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a7f      	ldr	r2, [pc, #508]	; (8002390 <UART_SetConfig+0x26c>)
 8002192:	4013      	ands	r3, r2
 8002194:	0019      	movs	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	430a      	orrs	r2, r1
 800219e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a7b      	ldr	r2, [pc, #492]	; (8002394 <UART_SetConfig+0x270>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d127      	bne.n	80021fa <UART_SetConfig+0xd6>
 80021aa:	4b7b      	ldr	r3, [pc, #492]	; (8002398 <UART_SetConfig+0x274>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	2203      	movs	r2, #3
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d00d      	beq.n	80021d2 <UART_SetConfig+0xae>
 80021b6:	d81b      	bhi.n	80021f0 <UART_SetConfig+0xcc>
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d014      	beq.n	80021e6 <UART_SetConfig+0xc2>
 80021bc:	d818      	bhi.n	80021f0 <UART_SetConfig+0xcc>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <UART_SetConfig+0xa4>
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d00a      	beq.n	80021dc <UART_SetConfig+0xb8>
 80021c6:	e013      	b.n	80021f0 <UART_SetConfig+0xcc>
 80021c8:	231f      	movs	r3, #31
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e021      	b.n	8002216 <UART_SetConfig+0xf2>
 80021d2:	231f      	movs	r3, #31
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	2202      	movs	r2, #2
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	e01c      	b.n	8002216 <UART_SetConfig+0xf2>
 80021dc:	231f      	movs	r3, #31
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2204      	movs	r2, #4
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e017      	b.n	8002216 <UART_SetConfig+0xf2>
 80021e6:	231f      	movs	r3, #31
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	2208      	movs	r2, #8
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e012      	b.n	8002216 <UART_SetConfig+0xf2>
 80021f0:	231f      	movs	r3, #31
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	2210      	movs	r2, #16
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e00d      	b.n	8002216 <UART_SetConfig+0xf2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a67      	ldr	r2, [pc, #412]	; (800239c <UART_SetConfig+0x278>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d104      	bne.n	800220e <UART_SetConfig+0xea>
 8002204:	231f      	movs	r3, #31
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e003      	b.n	8002216 <UART_SetConfig+0xf2>
 800220e:	231f      	movs	r3, #31
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	2210      	movs	r2, #16
 8002214:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	429a      	cmp	r2, r3
 8002220:	d15d      	bne.n	80022de <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002222:	231f      	movs	r3, #31
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b08      	cmp	r3, #8
 800222a:	d015      	beq.n	8002258 <UART_SetConfig+0x134>
 800222c:	dc18      	bgt.n	8002260 <UART_SetConfig+0x13c>
 800222e:	2b04      	cmp	r3, #4
 8002230:	d00d      	beq.n	800224e <UART_SetConfig+0x12a>
 8002232:	dc15      	bgt.n	8002260 <UART_SetConfig+0x13c>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <UART_SetConfig+0x11a>
 8002238:	2b02      	cmp	r3, #2
 800223a:	d005      	beq.n	8002248 <UART_SetConfig+0x124>
 800223c:	e010      	b.n	8002260 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800223e:	f7ff f9fd 	bl	800163c <HAL_RCC_GetPCLK1Freq>
 8002242:	0003      	movs	r3, r0
 8002244:	61bb      	str	r3, [r7, #24]
        break;
 8002246:	e012      	b.n	800226e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002248:	4b55      	ldr	r3, [pc, #340]	; (80023a0 <UART_SetConfig+0x27c>)
 800224a:	61bb      	str	r3, [r7, #24]
        break;
 800224c:	e00f      	b.n	800226e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800224e:	f7ff f96b 	bl	8001528 <HAL_RCC_GetSysClockFreq>
 8002252:	0003      	movs	r3, r0
 8002254:	61bb      	str	r3, [r7, #24]
        break;
 8002256:	e00a      	b.n	800226e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	61bb      	str	r3, [r7, #24]
        break;
 800225e:	e006      	b.n	800226e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002264:	231e      	movs	r3, #30
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
        break;
 800226c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d100      	bne.n	8002276 <UART_SetConfig+0x152>
 8002274:	e07b      	b.n	800236e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	005a      	lsls	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	18d2      	adds	r2, r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0019      	movs	r1, r3
 8002288:	0010      	movs	r0, r2
 800228a:	f7fd ff3d 	bl	8000108 <__udivsi3>
 800228e:	0003      	movs	r3, r0
 8002290:	b29b      	uxth	r3, r3
 8002292:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	d91c      	bls.n	80022d4 <UART_SetConfig+0x1b0>
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	025b      	lsls	r3, r3, #9
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d217      	bcs.n	80022d4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	200e      	movs	r0, #14
 80022aa:	183b      	adds	r3, r7, r0
 80022ac:	210f      	movs	r1, #15
 80022ae:	438a      	bics	r2, r1
 80022b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2207      	movs	r2, #7
 80022ba:	4013      	ands	r3, r2
 80022bc:	b299      	uxth	r1, r3
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	183a      	adds	r2, r7, r0
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	183a      	adds	r2, r7, r0
 80022ce:	8812      	ldrh	r2, [r2, #0]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	e04c      	b.n	800236e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80022d4:	231e      	movs	r3, #30
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e047      	b.n	800236e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022de:	231f      	movs	r3, #31
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d015      	beq.n	8002314 <UART_SetConfig+0x1f0>
 80022e8:	dc18      	bgt.n	800231c <UART_SetConfig+0x1f8>
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d00d      	beq.n	800230a <UART_SetConfig+0x1e6>
 80022ee:	dc15      	bgt.n	800231c <UART_SetConfig+0x1f8>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <UART_SetConfig+0x1d6>
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d005      	beq.n	8002304 <UART_SetConfig+0x1e0>
 80022f8:	e010      	b.n	800231c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022fa:	f7ff f99f 	bl	800163c <HAL_RCC_GetPCLK1Freq>
 80022fe:	0003      	movs	r3, r0
 8002300:	61bb      	str	r3, [r7, #24]
        break;
 8002302:	e012      	b.n	800232a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002304:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <UART_SetConfig+0x27c>)
 8002306:	61bb      	str	r3, [r7, #24]
        break;
 8002308:	e00f      	b.n	800232a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800230a:	f7ff f90d 	bl	8001528 <HAL_RCC_GetSysClockFreq>
 800230e:	0003      	movs	r3, r0
 8002310:	61bb      	str	r3, [r7, #24]
        break;
 8002312:	e00a      	b.n	800232a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	61bb      	str	r3, [r7, #24]
        break;
 800231a:	e006      	b.n	800232a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002320:	231e      	movs	r3, #30
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
        break;
 8002328:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01e      	beq.n	800236e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	085a      	lsrs	r2, r3, #1
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	18d2      	adds	r2, r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0019      	movs	r1, r3
 8002340:	0010      	movs	r0, r2
 8002342:	f7fd fee1 	bl	8000108 <__udivsi3>
 8002346:	0003      	movs	r3, r0
 8002348:	b29b      	uxth	r3, r3
 800234a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b0f      	cmp	r3, #15
 8002350:	d909      	bls.n	8002366 <UART_SetConfig+0x242>
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	429a      	cmp	r2, r3
 800235a:	d204      	bcs.n	8002366 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	e003      	b.n	800236e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002366:	231e      	movs	r3, #30
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800237a:	231e      	movs	r3, #30
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	781b      	ldrb	r3, [r3, #0]
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b008      	add	sp, #32
 8002386:	bd80      	pop	{r7, pc}
 8002388:	efff69f3 	.word	0xefff69f3
 800238c:	ffffcfff 	.word	0xffffcfff
 8002390:	fffff4ff 	.word	0xfffff4ff
 8002394:	40013800 	.word	0x40013800
 8002398:	40021000 	.word	0x40021000
 800239c:	40004400 	.word	0x40004400
 80023a0:	007a1200 	.word	0x007a1200

080023a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	d00b      	beq.n	80023ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a4a      	ldr	r2, [pc, #296]	; (80024e8 <UART_AdvFeatureConfig+0x144>)
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d00b      	beq.n	80023f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a43      	ldr	r2, [pc, #268]	; (80024ec <UART_AdvFeatureConfig+0x148>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2204      	movs	r2, #4
 80023f6:	4013      	ands	r3, r2
 80023f8:	d00b      	beq.n	8002412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a3b      	ldr	r2, [pc, #236]	; (80024f0 <UART_AdvFeatureConfig+0x14c>)
 8002402:	4013      	ands	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	2208      	movs	r2, #8
 8002418:	4013      	ands	r3, r2
 800241a:	d00b      	beq.n	8002434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4a34      	ldr	r2, [pc, #208]	; (80024f4 <UART_AdvFeatureConfig+0x150>)
 8002424:	4013      	ands	r3, r2
 8002426:	0019      	movs	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2210      	movs	r2, #16
 800243a:	4013      	ands	r3, r2
 800243c:	d00b      	beq.n	8002456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a2c      	ldr	r2, [pc, #176]	; (80024f8 <UART_AdvFeatureConfig+0x154>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	2220      	movs	r2, #32
 800245c:	4013      	ands	r3, r2
 800245e:	d00b      	beq.n	8002478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4a25      	ldr	r2, [pc, #148]	; (80024fc <UART_AdvFeatureConfig+0x158>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	2240      	movs	r2, #64	; 0x40
 800247e:	4013      	ands	r3, r2
 8002480:	d01d      	beq.n	80024be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <UART_AdvFeatureConfig+0x15c>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	035b      	lsls	r3, r3, #13
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d10b      	bne.n	80024be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a15      	ldr	r2, [pc, #84]	; (8002504 <UART_AdvFeatureConfig+0x160>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	4013      	ands	r3, r2
 80024c6:	d00b      	beq.n	80024e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <UART_AdvFeatureConfig+0x164>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	605a      	str	r2, [r3, #4]
  }
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	fffdffff 	.word	0xfffdffff
 80024ec:	fffeffff 	.word	0xfffeffff
 80024f0:	fffbffff 	.word	0xfffbffff
 80024f4:	ffff7fff 	.word	0xffff7fff
 80024f8:	ffffefff 	.word	0xffffefff
 80024fc:	ffffdfff 	.word	0xffffdfff
 8002500:	ffefffff 	.word	0xffefffff
 8002504:	ff9fffff 	.word	0xff9fffff
 8002508:	fff7ffff 	.word	0xfff7ffff

0800250c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af02      	add	r7, sp, #8
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	2100      	movs	r1, #0
 800251a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800251c:	f7fe f8d6 	bl	80006cc <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2208      	movs	r2, #8
 800252c:	4013      	ands	r3, r2
 800252e:	2b08      	cmp	r3, #8
 8002530:	d10c      	bne.n	800254c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	0391      	lsls	r1, r2, #14
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4a17      	ldr	r2, [pc, #92]	; (8002598 <UART_CheckIdleState+0x8c>)
 800253c:	9200      	str	r2, [sp, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	f000 f82c 	bl	800259c <UART_WaitOnFlagUntilTimeout>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d001      	beq.n	800254c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e021      	b.n	8002590 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2204      	movs	r2, #4
 8002554:	4013      	ands	r3, r2
 8002556:	2b04      	cmp	r3, #4
 8002558:	d10c      	bne.n	8002574 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	03d1      	lsls	r1, r2, #15
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4a0d      	ldr	r2, [pc, #52]	; (8002598 <UART_CheckIdleState+0x8c>)
 8002564:	9200      	str	r2, [sp, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	f000 f818 	bl	800259c <UART_WaitOnFlagUntilTimeout>
 800256c:	1e03      	subs	r3, r0, #0
 800256e:	d001      	beq.n	8002574 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e00d      	b.n	8002590 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2274      	movs	r2, #116	; 0x74
 800258a:	2100      	movs	r1, #0
 800258c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	b004      	add	sp, #16
 8002596:	bd80      	pop	{r7, pc}
 8002598:	01ffffff 	.word	0x01ffffff

0800259c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b094      	sub	sp, #80	; 0x50
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	1dfb      	adds	r3, r7, #7
 80025aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ac:	e0a3      	b.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b0:	3301      	adds	r3, #1
 80025b2:	d100      	bne.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80025b4:	e09f      	b.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b6:	f7fe f889 	bl	80006cc <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d302      	bcc.n	80025cc <UART_WaitOnFlagUntilTimeout+0x30>
 80025c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d13d      	bne.n	8002648 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025cc:	f3ef 8310 	mrs	r3, PRIMASK
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025d4:	647b      	str	r3, [r7, #68]	; 0x44
 80025d6:	2301      	movs	r3, #1
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	f383 8810 	msr	PRIMASK, r3
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	494c      	ldr	r1, [pc, #304]	; (8002720 <UART_WaitOnFlagUntilTimeout+0x184>)
 80025ee:	400a      	ands	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	f383 8810 	msr	PRIMASK, r3
}
 80025fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002606:	643b      	str	r3, [r7, #64]	; 0x40
 8002608:	2301      	movs	r3, #1
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260e:	f383 8810 	msr	PRIMASK, r3
}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2101      	movs	r1, #1
 8002620:	438a      	bics	r2, r1
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800262a:	f383 8810 	msr	PRIMASK, r3
}
 800262e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2274      	movs	r2, #116	; 0x74
 8002640:	2100      	movs	r1, #0
 8002642:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e067      	b.n	8002718 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2204      	movs	r2, #4
 8002650:	4013      	ands	r3, r2
 8002652:	d050      	beq.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	401a      	ands	r2, r3
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	429a      	cmp	r2, r3
 8002666:	d146      	bne.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	0112      	lsls	r2, r2, #4
 8002670:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002672:	f3ef 8310 	mrs	r3, PRIMASK
 8002676:	613b      	str	r3, [r7, #16]
  return(result);
 8002678:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800267a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800267c:	2301      	movs	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f383 8810 	msr	PRIMASK, r3
}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4923      	ldr	r1, [pc, #140]	; (8002720 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f383 8810 	msr	PRIMASK, r3
}
 80026a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a4:	f3ef 8310 	mrs	r3, PRIMASK
 80026a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80026aa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ae:	2301      	movs	r3, #1
 80026b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f383 8810 	msr	PRIMASK, r3
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	438a      	bics	r2, r1
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	f383 8810 	msr	PRIMASK, r3
}
 80026d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2280      	movs	r2, #128	; 0x80
 80026e6:	2120      	movs	r1, #32
 80026e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2274      	movs	r2, #116	; 0x74
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e010      	b.n	8002718 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	4013      	ands	r3, r2
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	425a      	negs	r2, r3
 8002706:	4153      	adcs	r3, r2
 8002708:	b2db      	uxtb	r3, r3
 800270a:	001a      	movs	r2, r3
 800270c:	1dfb      	adds	r3, r7, #7
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d100      	bne.n	8002716 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002714:	e74b      	b.n	80025ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b014      	add	sp, #80	; 0x50
 800271e:	bd80      	pop	{r7, pc}
 8002720:	fffffe5f 	.word	0xfffffe5f

08002724 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	1dbb      	adds	r3, r7, #6
 8002730:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1dba      	adds	r2, r7, #6
 800273c:	2158      	movs	r1, #88	; 0x58
 800273e:	8812      	ldrh	r2, [r2, #0]
 8002740:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1dba      	adds	r2, r7, #6
 8002746:	215a      	movs	r1, #90	; 0x5a
 8002748:	8812      	ldrh	r2, [r2, #0]
 800274a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	015b      	lsls	r3, r3, #5
 800275a:	429a      	cmp	r2, r3
 800275c:	d10d      	bne.n	800277a <UART_Start_Receive_IT+0x56>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d104      	bne.n	8002770 <UART_Start_Receive_IT+0x4c>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	225c      	movs	r2, #92	; 0x5c
 800276a:	4943      	ldr	r1, [pc, #268]	; (8002878 <UART_Start_Receive_IT+0x154>)
 800276c:	5299      	strh	r1, [r3, r2]
 800276e:	e02e      	b.n	80027ce <UART_Start_Receive_IT+0xaa>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	225c      	movs	r2, #92	; 0x5c
 8002774:	21ff      	movs	r1, #255	; 0xff
 8002776:	5299      	strh	r1, [r3, r2]
 8002778:	e029      	b.n	80027ce <UART_Start_Receive_IT+0xaa>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <UART_Start_Receive_IT+0x7a>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d104      	bne.n	8002794 <UART_Start_Receive_IT+0x70>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	225c      	movs	r2, #92	; 0x5c
 800278e:	21ff      	movs	r1, #255	; 0xff
 8002790:	5299      	strh	r1, [r3, r2]
 8002792:	e01c      	b.n	80027ce <UART_Start_Receive_IT+0xaa>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	225c      	movs	r2, #92	; 0x5c
 8002798:	217f      	movs	r1, #127	; 0x7f
 800279a:	5299      	strh	r1, [r3, r2]
 800279c:	e017      	b.n	80027ce <UART_Start_Receive_IT+0xaa>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	055b      	lsls	r3, r3, #21
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d10d      	bne.n	80027c6 <UART_Start_Receive_IT+0xa2>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <UART_Start_Receive_IT+0x98>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	225c      	movs	r2, #92	; 0x5c
 80027b6:	217f      	movs	r1, #127	; 0x7f
 80027b8:	5299      	strh	r1, [r3, r2]
 80027ba:	e008      	b.n	80027ce <UART_Start_Receive_IT+0xaa>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	225c      	movs	r2, #92	; 0x5c
 80027c0:	213f      	movs	r1, #63	; 0x3f
 80027c2:	5299      	strh	r1, [r3, r2]
 80027c4:	e003      	b.n	80027ce <UART_Start_Receive_IT+0xaa>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	225c      	movs	r2, #92	; 0x5c
 80027ca:	2100      	movs	r1, #0
 80027cc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2280      	movs	r2, #128	; 0x80
 80027d2:	2100      	movs	r1, #0
 80027d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2222      	movs	r2, #34	; 0x22
 80027da:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027dc:	f3ef 8310 	mrs	r3, PRIMASK
 80027e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80027e2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e6:	2301      	movs	r3, #1
 80027e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f383 8810 	msr	PRIMASK, r3
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	f383 8810 	msr	PRIMASK, r3
}
 800280c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	015b      	lsls	r3, r3, #5
 8002816:	429a      	cmp	r2, r3
 8002818:	d107      	bne.n	800282a <UART_Start_Receive_IT+0x106>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d103      	bne.n	800282a <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a15      	ldr	r2, [pc, #84]	; (800287c <UART_Start_Receive_IT+0x158>)
 8002826:	665a      	str	r2, [r3, #100]	; 0x64
 8002828:	e002      	b.n	8002830 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <UART_Start_Receive_IT+0x15c>)
 800282e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2274      	movs	r2, #116	; 0x74
 8002834:	2100      	movs	r1, #0
 8002836:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002838:	f3ef 8310 	mrs	r3, PRIMASK
 800283c:	613b      	str	r3, [r7, #16]
  return(result);
 800283e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
 8002842:	2301      	movs	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f383 8810 	msr	PRIMASK, r3
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2190      	movs	r1, #144	; 0x90
 800285a:	0049      	lsls	r1, r1, #1
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f383 8810 	msr	PRIMASK, r3
}
 800286a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b00c      	add	sp, #48	; 0x30
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	000001ff 	.word	0x000001ff
 800287c:	08002b35 	.word	0x08002b35
 8002880:	080029cd 	.word	0x080029cd

08002884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288c:	f3ef 8310 	mrs	r3, PRIMASK
 8002890:	617b      	str	r3, [r7, #20]
  return(result);
 8002892:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
 8002896:	2301      	movs	r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f383 8810 	msr	PRIMASK, r3
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4925      	ldr	r1, [pc, #148]	; (8002944 <UART_EndRxTransfer+0xc0>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f383 8810 	msr	PRIMASK, r3
}
 80028bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028be:	f3ef 8310 	mrs	r3, PRIMASK
 80028c2:	623b      	str	r3, [r7, #32]
  return(result);
 80028c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
 80028c8:	2301      	movs	r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	f383 8810 	msr	PRIMASK, r3
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2101      	movs	r1, #1
 80028e0:	438a      	bics	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	f383 8810 	msr	PRIMASK, r3
}
 80028ee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d118      	bne.n	800292a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f8:	f3ef 8310 	mrs	r3, PRIMASK
 80028fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80028fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002902:	2301      	movs	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f383 8810 	msr	PRIMASK, r3
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2110      	movs	r1, #16
 800291a:	438a      	bics	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002920:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f383 8810 	msr	PRIMASK, r3
}
 8002928:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2220      	movs	r2, #32
 800292e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b00e      	add	sp, #56	; 0x38
 8002942:	bd80      	pop	{r7, pc}
 8002944:	fffffedf 	.word	0xfffffedf

08002948 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	225a      	movs	r2, #90	; 0x5a
 800295a:	2100      	movs	r1, #0
 800295c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2252      	movs	r2, #82	; 0x52
 8002962:	2100      	movs	r1, #0
 8002964:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	0018      	movs	r0, r3
 800296a:	f7ff fbc7 	bl	80020fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b004      	add	sp, #16
 8002974:	bd80      	pop	{r7, pc}

08002976 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800297e:	f3ef 8310 	mrs	r3, PRIMASK
 8002982:	60bb      	str	r3, [r7, #8]
  return(result);
 8002984:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	2301      	movs	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f383 8810 	msr	PRIMASK, r3
}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2140      	movs	r1, #64	; 0x40
 80029a0:	438a      	bics	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f383 8810 	msr	PRIMASK, r3
}
 80029ae:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0018      	movs	r0, r3
 80029c0:	f7ff fb94 	bl	80020ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b006      	add	sp, #24
 80029ca:	bd80      	pop	{r7, pc}

080029cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b090      	sub	sp, #64	; 0x40
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80029d4:	203e      	movs	r0, #62	; 0x3e
 80029d6:	183b      	adds	r3, r7, r0
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	215c      	movs	r1, #92	; 0x5c
 80029dc:	5a52      	ldrh	r2, [r2, r1]
 80029de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e4:	2b22      	cmp	r3, #34	; 0x22
 80029e6:	d000      	beq.n	80029ea <UART_RxISR_8BIT+0x1e>
 80029e8:	e095      	b.n	8002b16 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	213c      	movs	r1, #60	; 0x3c
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80029f4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	183b      	adds	r3, r7, r0
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b2d9      	uxtb	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a06:	400a      	ands	r2, r1
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	225a      	movs	r2, #90	; 0x5a
 8002a1a:	5a9b      	ldrh	r3, [r3, r2]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b299      	uxth	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	225a      	movs	r2, #90	; 0x5a
 8002a26:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	225a      	movs	r2, #90	; 0x5a
 8002a2c:	5a9b      	ldrh	r3, [r3, r2]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d178      	bne.n	8002b26 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a34:	f3ef 8310 	mrs	r3, PRIMASK
 8002a38:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a3a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f383 8810 	msr	PRIMASK, r3
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4936      	ldr	r1, [pc, #216]	; (8002b30 <UART_RxISR_8BIT+0x164>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	f383 8810 	msr	PRIMASK, r3
}
 8002a64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a66:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a70:	2301      	movs	r3, #1
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2101      	movs	r1, #1
 8002a88:	438a      	bics	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d12f      	bne.n	8002b0c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ab8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
 8002abc:	2301      	movs	r3, #1
 8002abe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f383 8810 	msr	PRIMASK, r3
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2110      	movs	r1, #16
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f383 8810 	msr	PRIMASK, r3
}
 8002ae2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	2210      	movs	r2, #16
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d103      	bne.n	8002afa <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2210      	movs	r2, #16
 8002af8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2258      	movs	r2, #88	; 0x58
 8002afe:	5a9a      	ldrh	r2, [r3, r2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0011      	movs	r1, r2
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7ff fb01 	bl	800210c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002b0a:	e00c      	b.n	8002b26 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7fd fb86 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8002b14:	e007      	b.n	8002b26 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699a      	ldr	r2, [r3, #24]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2108      	movs	r1, #8
 8002b22:	430a      	orrs	r2, r1
 8002b24:	619a      	str	r2, [r3, #24]
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b010      	add	sp, #64	; 0x40
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	fffffedf 	.word	0xfffffedf

08002b34 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b090      	sub	sp, #64	; 0x40
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002b3c:	203e      	movs	r0, #62	; 0x3e
 8002b3e:	183b      	adds	r3, r7, r0
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	215c      	movs	r1, #92	; 0x5c
 8002b44:	5a52      	ldrh	r2, [r2, r1]
 8002b46:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4c:	2b22      	cmp	r3, #34	; 0x22
 8002b4e:	d000      	beq.n	8002b52 <UART_RxISR_16BIT+0x1e>
 8002b50:	e095      	b.n	8002c7e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	213c      	movs	r1, #60	; 0x3c
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002b5c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	183a      	adds	r2, r7, r0
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	8812      	ldrh	r2, [r2, #0]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	1c9a      	adds	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	225a      	movs	r2, #90	; 0x5a
 8002b82:	5a9b      	ldrh	r3, [r3, r2]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b299      	uxth	r1, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	225a      	movs	r2, #90	; 0x5a
 8002b8e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	225a      	movs	r2, #90	; 0x5a
 8002b94:	5a9b      	ldrh	r3, [r3, r2]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d178      	bne.n	8002c8e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba0:	617b      	str	r3, [r7, #20]
  return(result);
 8002ba2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f383 8810 	msr	PRIMASK, r3
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4936      	ldr	r1, [pc, #216]	; (8002c98 <UART_RxISR_16BIT+0x164>)
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f383 8810 	msr	PRIMASK, r3
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bce:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd2:	623b      	str	r3, [r7, #32]
  return(result);
 8002bd4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8002bd8:	2301      	movs	r3, #1
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f383 8810 	msr	PRIMASK, r3
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2101      	movs	r1, #1
 8002bf0:	438a      	bics	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfa:	f383 8810 	msr	PRIMASK, r3
}
 8002bfe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d12f      	bne.n	8002c74 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c20:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c24:	2301      	movs	r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f383 8810 	msr	PRIMASK, r3
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2110      	movs	r1, #16
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f383 8810 	msr	PRIMASK, r3
}
 8002c4a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	2210      	movs	r2, #16
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d103      	bne.n	8002c62 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2210      	movs	r2, #16
 8002c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2258      	movs	r2, #88	; 0x58
 8002c66:	5a9a      	ldrh	r2, [r3, r2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7ff fa4d 	bl	800210c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c72:	e00c      	b.n	8002c8e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	0018      	movs	r0, r3
 8002c78:	f7fd fad2 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8002c7c:	e007      	b.n	8002c8e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2108      	movs	r1, #8
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b010      	add	sp, #64	; 0x40
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	fffffedf 	.word	0xfffffedf

08002c9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}

08002cac <__libc_init_array>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	2600      	movs	r6, #0
 8002cb0:	4d0c      	ldr	r5, [pc, #48]	; (8002ce4 <__libc_init_array+0x38>)
 8002cb2:	4c0d      	ldr	r4, [pc, #52]	; (8002ce8 <__libc_init_array+0x3c>)
 8002cb4:	1b64      	subs	r4, r4, r5
 8002cb6:	10a4      	asrs	r4, r4, #2
 8002cb8:	42a6      	cmp	r6, r4
 8002cba:	d109      	bne.n	8002cd0 <__libc_init_array+0x24>
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	f000 f821 	bl	8002d04 <_init>
 8002cc2:	4d0a      	ldr	r5, [pc, #40]	; (8002cec <__libc_init_array+0x40>)
 8002cc4:	4c0a      	ldr	r4, [pc, #40]	; (8002cf0 <__libc_init_array+0x44>)
 8002cc6:	1b64      	subs	r4, r4, r5
 8002cc8:	10a4      	asrs	r4, r4, #2
 8002cca:	42a6      	cmp	r6, r4
 8002ccc:	d105      	bne.n	8002cda <__libc_init_array+0x2e>
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	00b3      	lsls	r3, r6, #2
 8002cd2:	58eb      	ldr	r3, [r5, r3]
 8002cd4:	4798      	blx	r3
 8002cd6:	3601      	adds	r6, #1
 8002cd8:	e7ee      	b.n	8002cb8 <__libc_init_array+0xc>
 8002cda:	00b3      	lsls	r3, r6, #2
 8002cdc:	58eb      	ldr	r3, [r5, r3]
 8002cde:	4798      	blx	r3
 8002ce0:	3601      	adds	r6, #1
 8002ce2:	e7f2      	b.n	8002cca <__libc_init_array+0x1e>
 8002ce4:	08002d54 	.word	0x08002d54
 8002ce8:	08002d54 	.word	0x08002d54
 8002cec:	08002d54 	.word	0x08002d54
 8002cf0:	08002d58 	.word	0x08002d58

08002cf4 <memset>:
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	1882      	adds	r2, r0, r2
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d100      	bne.n	8002cfe <memset+0xa>
 8002cfc:	4770      	bx	lr
 8002cfe:	7019      	strb	r1, [r3, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	e7f9      	b.n	8002cf8 <memset+0x4>

08002d04 <_init>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr

08002d10 <_fini>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr
