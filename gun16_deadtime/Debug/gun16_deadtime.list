
gun16_deadtime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005398  08005398  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a0  080053a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000460  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000046c  2000046c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001626d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f76  00000000  00000000  000362a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  00039220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001320  00000000  00000000  0003a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022535  00000000  00000000  0003b990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001853b  00000000  00000000  0005dec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2667  00000000  00000000  00076400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00148a67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057a0  00000000  00000000  00148ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005368 	.word	0x08005368

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005368 	.word	0x08005368

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fca6 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f81a 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f99a 	bl	8000810 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f880 	bl	80005e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8ac 	bl	800063c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8da 	bl	800069c <MX_SPI1_Init>
  MX_TIM1_Init();
 80004e8:	f000 f90e 	bl	8000708 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004ec:	2100      	movs	r1, #0
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <main+0x3c>)
 80004f0:	f003 fd4e 	bl	8003f90 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80004f4:	2100      	movs	r1, #0
 80004f6:	4804      	ldr	r0, [pc, #16]	; (8000508 <main+0x3c>)
 80004f8:	f004 f94a 	bl	8004790 <HAL_TIMEx_PWMN_Start>

    /* USER CODE BEGIN 3 */

	  //%60 duty

	  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,630);
 80004fc:	4b02      	ldr	r3, [pc, #8]	; (8000508 <main+0x3c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f240 2276 	movw	r2, #630	; 0x276
 8000504:	635a      	str	r2, [r3, #52]	; 0x34
 8000506:	e7f9      	b.n	80004fc <main+0x30>
 8000508:	2000011c 	.word	0x2000011c

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 ff1c 	bl	8005358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <SystemClock_Config+0xcc>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xd0>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000580:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fe60 	bl	8003258 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059e:	f000 fa35 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2105      	movs	r1, #5
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 f8c1 	bl	8003748 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005cc:	f000 fa1e 	bl	8000a0c <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C1_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C1_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C1_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C1_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C1_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C1_Init+0x50>)
 800061e:	f002 f837 	bl	8002690 <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 f9f0 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000028 	.word	0x20000028
 8000634:	40005400 	.word	0x40005400
 8000638:	000186a0 	.word	0x000186a0

0800063c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_I2S3_Init+0x54>)
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <MX_I2S3_Init+0x58>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2S3_Init+0x54>)
 8000648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_I2S3_Init+0x54>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2S3_Init+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_I2S3_Init+0x54>)
 800065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000660:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_I2S3_Init+0x54>)
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <MX_I2S3_Init+0x5c>)
 8000666:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_I2S3_Init+0x54>)
 800067c:	f002 f94c 	bl	8002918 <HAL_I2S_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000686:	f000 f9c1 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000007c 	.word	0x2000007c
 8000694:	40003c00 	.word	0x40003c00
 8000698:	00017700 	.word	0x00017700

0800069c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_SPI1_Init+0x64>)
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <MX_SPI1_Init+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_SPI1_Init+0x64>)
 80006a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_SPI1_Init+0x64>)
 80006e8:	220a      	movs	r2, #10
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_SPI1_Init+0x64>)
 80006ee:	f003 fb77 	bl	8003de0 <HAL_SPI_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f8:	f000 f988 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000c4 	.word	0x200000c4
 8000704:	40013000 	.word	0x40013000

08000708 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b092      	sub	sp, #72	; 0x48
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fe10 	bl	8005358 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000738:	4b33      	ldr	r3, [pc, #204]	; (8000808 <MX_TIM1_Init+0x100>)
 800073a:	4a34      	ldr	r2, [pc, #208]	; (800080c <MX_TIM1_Init+0x104>)
 800073c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <MX_TIM1_Init+0x100>)
 8000740:	2203      	movs	r2, #3
 8000742:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <MX_TIM1_Init+0x100>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 800074a:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <MX_TIM1_Init+0x100>)
 800074c:	f240 4219 	movw	r2, #1049	; 0x419
 8000750:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <MX_TIM1_Init+0x100>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000758:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_TIM1_Init+0x100>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <MX_TIM1_Init+0x100>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000764:	4828      	ldr	r0, [pc, #160]	; (8000808 <MX_TIM1_Init+0x100>)
 8000766:	f003 fbc4 	bl	8003ef2 <HAL_TIM_PWM_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000770:	f000 f94c 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800077c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000780:	4619      	mov	r1, r3
 8000782:	4821      	ldr	r0, [pc, #132]	; (8000808 <MX_TIM1_Init+0x100>)
 8000784:	f004 f8be 	bl	8004904 <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800078e:	f000 f93d 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000792:	2360      	movs	r3, #96	; 0x60
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	2200      	movs	r2, #0
 80007b4:	4619      	mov	r1, r3
 80007b6:	4814      	ldr	r0, [pc, #80]	; (8000808 <MX_TIM1_Init+0x100>)
 80007b8:	f003 fcb2 	bl	8004120 <HAL_TIM_PWM_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80007c2:	f000 f923 	bl	8000a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 250;
 80007d2:	23fa      	movs	r3, #250	; 0xfa
 80007d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4807      	ldr	r0, [pc, #28]	; (8000808 <MX_TIM1_Init+0x100>)
 80007ea:	f004 f907 	bl	80049fc <HAL_TIMEx_ConfigBreakDeadTime>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80007f4:	f000 f90a 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007f8:	4803      	ldr	r0, [pc, #12]	; (8000808 <MX_TIM1_Init+0x100>)
 80007fa:	f000 fa67 	bl	8000ccc <HAL_TIM_MspPostInit>

}
 80007fe:	bf00      	nop
 8000800:	3748      	adds	r7, #72	; 0x48
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000011c 	.word	0x2000011c
 800080c:	40010000 	.word	0x40010000

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	4b72      	ldr	r3, [pc, #456]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a71      	ldr	r2, [pc, #452]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b6f      	ldr	r3, [pc, #444]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a6a      	ldr	r2, [pc, #424]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b64      	ldr	r3, [pc, #400]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a63      	ldr	r2, [pc, #396]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b61      	ldr	r3, [pc, #388]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b5d      	ldr	r3, [pc, #372]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a5c      	ldr	r2, [pc, #368]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b5a      	ldr	r3, [pc, #360]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b56      	ldr	r3, [pc, #344]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a55      	ldr	r2, [pc, #340]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a4e      	ldr	r2, [pc, #312]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b4c      	ldr	r3, [pc, #304]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	4849      	ldr	r0, [pc, #292]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 80008d4:	f000 fd98 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2101      	movs	r1, #1
 80008dc:	4847      	ldr	r0, [pc, #284]	; (80009fc <MX_GPIO_Init+0x1ec>)
 80008de:	f000 fd93 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	2200      	movs	r2, #0
 80008e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e8:	4845      	ldr	r0, [pc, #276]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80008ea:	f000 fd8d 	bl	8001408 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ee:	2308      	movs	r3, #8
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	483c      	ldr	r0, [pc, #240]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 8000906:	f000 fbe3 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800090a:	2301      	movs	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4836      	ldr	r0, [pc, #216]	; (80009fc <MX_GPIO_Init+0x1ec>)
 8000922:	f000 fbd5 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000926:	2308      	movs	r3, #8
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000936:	2305      	movs	r3, #5
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	482e      	ldr	r0, [pc, #184]	; (80009fc <MX_GPIO_Init+0x1ec>)
 8000942:	f000 fbc5 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	482a      	ldr	r0, [pc, #168]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 800095c:	f000 fbb8 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000960:	2304      	movs	r3, #4
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4825      	ldr	r0, [pc, #148]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 8000974:	f000 fbac 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098a:	2305      	movs	r3, #5
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	481c      	ldr	r0, [pc, #112]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 8000996:	f000 fb9b 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800099a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800099e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80009b4:	f000 fb8c 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b8:	2320      	movs	r3, #32
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80009cc:	f000 fb80 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 80009e6:	f000 fb73 	bl	80010d0 <HAL_GPIO_Init>

}
 80009ea:	bf00      	nop
 80009ec:	3730      	adds	r7, #48	; 0x30
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020400 	.word	0x40020400

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a56:	2007      	movs	r0, #7
 8000a58:	f000 fb06 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <HAL_I2C_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12c      	bne.n	8000ae4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aa6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aac:	2312      	movs	r3, #18
 8000aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480c      	ldr	r0, [pc, #48]	; (8000af4 <HAL_I2C_MspInit+0x8c>)
 8000ac4:	f000 fb04 	bl	80010d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40005400 	.word	0x40005400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400

08000af8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a31      	ldr	r2, [pc, #196]	; (8000be8 <HAL_I2S_MspInit+0xf0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d15a      	bne.n	8000bde <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b2c:	23c0      	movs	r3, #192	; 0xc0
 8000b2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 f811 	bl	8003b60 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b44:	f7ff ff62 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <HAL_I2S_MspInit+0xf4>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_I2S_MspInit+0xf4>)
 8000b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <HAL_I2S_MspInit+0xf4>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_I2S_MspInit+0xf4>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_I2S_MspInit+0xf4>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_I2S_MspInit+0xf4>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_I2S_MspInit+0xf4>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a18      	ldr	r2, [pc, #96]	; (8000bec <HAL_I2S_MspInit+0xf4>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_I2S_MspInit+0xf4>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bac:	2306      	movs	r3, #6
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <HAL_I2S_MspInit+0xf8>)
 8000bb8:	f000 fa8a 	bl	80010d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bbc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <HAL_I2S_MspInit+0xfc>)
 8000bda:	f000 fa79 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3738      	adds	r7, #56	; 0x38
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40003c00 	.word	0x40003c00
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020800 	.word	0x40020800

08000bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_SPI_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12b      	bne.n	8000c72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c52:	23e0      	movs	r3, #224	; 0xe0
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c62:	2305      	movs	r3, #5
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_SPI_MspInit+0x8c>)
 8000c6e:	f000 fa2f 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40013000 	.word	0x40013000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d10d      	bne.n	8000cb6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x40>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x40>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x40>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40010000 	.word	0x40010000
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <HAL_TIM_MspPostInit+0x68>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d11e      	bne.n	8000d2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_TIM_MspPostInit+0x6c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <HAL_TIM_MspPostInit+0x6c>)
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_TIM_MspPostInit+0x6c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <HAL_TIM_MspPostInit+0x70>)
 8000d28:	f000 f9d2 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40021000 	.word	0x40021000

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f89a 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <OTG_FS_IRQHandler+0x10>)
 8000d9a:	f000 fb4e 	bl	800143a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000168 	.word	0x20000168

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd2:	490e      	ldr	r1, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de8:	4c0b      	ldr	r4, [pc, #44]	; (8000e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df6:	f7ff ffd7 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f004 fa89 	bl	8005310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fb65 	bl	80004cc <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e10:	080053a8 	.word	0x080053a8
  ldr r2, =_sbss
 8000e14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e18:	2000046c 	.word	0x2000046c

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f90d 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fde0 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f917 	bl	80010b6 <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f8ed 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000164 	.word	0x20000164

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000164 	.word	0x20000164

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff47 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff5c 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff8e 	bl	8000fbc <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffb0 	bl	8001024 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e16b      	b.n	80013c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 815a 	bne.w	80013be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b01      	cmp	r3, #1
 8001114:	d005      	beq.n	8001122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	2b02      	cmp	r3, #2
 8001120:	d130      	bne.n	8001184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0201 	and.w	r2, r3, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b03      	cmp	r3, #3
 800118e:	d017      	beq.n	80011c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d123      	bne.n	8001214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80b4 	beq.w	80013be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b60      	ldr	r3, [pc, #384]	; (80013dc <HAL_GPIO_Init+0x30c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a5f      	ldr	r2, [pc, #380]	; (80013dc <HAL_GPIO_Init+0x30c>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <HAL_GPIO_Init+0x30c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	4a5b      	ldr	r2, [pc, #364]	; (80013e0 <HAL_GPIO_Init+0x310>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a52      	ldr	r2, [pc, #328]	; (80013e4 <HAL_GPIO_Init+0x314>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d02b      	beq.n	80012f6 <HAL_GPIO_Init+0x226>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a51      	ldr	r2, [pc, #324]	; (80013e8 <HAL_GPIO_Init+0x318>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d025      	beq.n	80012f2 <HAL_GPIO_Init+0x222>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a50      	ldr	r2, [pc, #320]	; (80013ec <HAL_GPIO_Init+0x31c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d01f      	beq.n	80012ee <HAL_GPIO_Init+0x21e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4f      	ldr	r2, [pc, #316]	; (80013f0 <HAL_GPIO_Init+0x320>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d019      	beq.n	80012ea <HAL_GPIO_Init+0x21a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4e      	ldr	r2, [pc, #312]	; (80013f4 <HAL_GPIO_Init+0x324>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0x216>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4d      	ldr	r2, [pc, #308]	; (80013f8 <HAL_GPIO_Init+0x328>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x212>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4c      	ldr	r2, [pc, #304]	; (80013fc <HAL_GPIO_Init+0x32c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x20e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <HAL_GPIO_Init+0x330>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x20a>
 80012d6:	2307      	movs	r3, #7
 80012d8:	e00e      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012da:	2308      	movs	r3, #8
 80012dc:	e00c      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012de:	2306      	movs	r3, #6
 80012e0:	e00a      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012f6:	2300      	movs	r3, #0
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001308:	4935      	ldr	r1, [pc, #212]	; (80013e0 <HAL_GPIO_Init+0x310>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <HAL_GPIO_Init+0x334>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a32      	ldr	r2, [pc, #200]	; (8001404 <HAL_GPIO_Init+0x334>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_GPIO_Init+0x334>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <HAL_GPIO_Init+0x334>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_GPIO_Init+0x334>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138e:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_GPIO_Init+0x334>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_GPIO_Init+0x334>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b8:	4a12      	ldr	r2, [pc, #72]	; (8001404 <HAL_GPIO_Init+0x334>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	f67f ae90 	bls.w	80010ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40021400 	.word	0x40021400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40021c00 	.word	0x40021c00
 8001404:	40013c00 	.word	0x40013c00

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001424:	e003      	b.n	800142e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	041a      	lsls	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f003 fc3c 	bl	8004cce <USB_GetMode>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	f040 80f6 	bne.w	800164a <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fc20 	bl	8004ca8 <USB_ReadInterrupts>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80ec 	beq.w	8001648 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f003 fc17 	bl	8004ca8 <USB_ReadInterrupts>
 800147a:	4603      	mov	r3, r0
 800147c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001480:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001484:	d104      	bne.n	8001490 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800148e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fc07 	bl	8004ca8 <USB_ReadInterrupts>
 800149a:	4603      	mov	r3, r0
 800149c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014a4:	d104      	bne.n	80014b0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014ae:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 fbf7 	bl	8004ca8 <USB_ReadInterrupts>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014c4:	d104      	bne.n	80014d0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014ce:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fbe7 	bl	8004ca8 <USB_ReadInterrupts>
 80014da:	4603      	mov	r3, r0
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d103      	bne.n	80014ec <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2202      	movs	r2, #2
 80014ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 fbd9 	bl	8004ca8 <USB_ReadInterrupts>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001500:	d11c      	bne.n	800153c <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800150a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10f      	bne.n	800153c <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800151c:	2110      	movs	r1, #16
 800151e:	6938      	ldr	r0, [r7, #16]
 8001520:	f003 fb06 	bl	8004b30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001524:	6938      	ldr	r0, [r7, #16]
 8001526:	f003 fb37 	bl	8004b98 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2101      	movs	r1, #1
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fbda 	bl	8004cea <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f003 fe6b 	bl	8005212 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f003 fbb1 	bl	8004ca8 <USB_ReadInterrupts>
 8001546:	4603      	mov	r3, r0
 8001548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001550:	d102      	bne.n	8001558 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f001 f829 	bl	80025aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f003 fba3 	bl	8004ca8 <USB_ReadInterrupts>
 8001562:	4603      	mov	r3, r0
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b08      	cmp	r3, #8
 800156a:	d106      	bne.n	800157a <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f003 fe34 	bl	80051da <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2208      	movs	r2, #8
 8001578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fb92 	bl	8004ca8 <USB_ReadInterrupts>
 8001584:	4603      	mov	r3, r0
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	2b10      	cmp	r3, #16
 800158c:	d101      	bne.n	8001592 <HAL_HCD_IRQHandler+0x158>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_HCD_IRQHandler+0x15a>
 8001592:	2300      	movs	r3, #0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d012      	beq.n	80015be <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699a      	ldr	r2, [r3, #24]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0210 	bic.w	r2, r2, #16
 80015a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 ff2c 	bl	8002406 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0210 	orr.w	r2, r2, #16
 80015bc:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fb70 	bl	8004ca8 <USB_ReadInterrupts>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015d2:	d13a      	bne.n	800164a <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 fbc0 	bl	8004d5e <USB_HC_ReadInterrupt>
 80015de:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	e025      	b.n	8001632 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d018      	beq.n	800162c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	015a      	lsls	r2, r3, #5
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4413      	add	r3, r2
 8001602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800160c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001610:	d106      	bne.n	8001620 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f836 	bl	800168a <HCD_HC_IN_IRQHandler>
 800161e:	e005      	b.n	800162c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	4619      	mov	r1, r3
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fb84 	bl	8001d34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3d4      	bcc.n	80015e6 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001644:	615a      	str	r2, [r3, #20]
 8001646:	e000      	b.n	800164a <HAL_HCD_IRQHandler+0x210>
      return;
 8001648:	bf00      	nop
    }
  }
}
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_HCD_Stop+0x16>
 8001662:	2302      	movs	r3, #2
 8001664:	e00d      	b.n	8001682 <HAL_HCD_Stop+0x32>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f003 fc80 	bl	8004f78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	015a      	lsls	r2, r3, #5
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d11a      	bne.n	80016f0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	015a      	lsls	r2, r3, #5
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016c6:	461a      	mov	r2, r3
 80016c8:	2304      	movs	r3, #4
 80016ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	212c      	movs	r1, #44	; 0x2c
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	3361      	adds	r3, #97	; 0x61
 80016da:	2206      	movs	r2, #6
 80016dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 fb49 	bl	8004d80 <USB_HC_Halt>
 80016ee:	e0af      	b.n	8001850 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001706:	d11b      	bne.n	8001740 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4413      	add	r3, r2
 8001710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001714:	461a      	mov	r2, r3
 8001716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	212c      	movs	r1, #44	; 0x2c
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	3361      	adds	r3, #97	; 0x61
 800172a:	2207      	movs	r2, #7
 800172c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fb21 	bl	8004d80 <USB_HC_Halt>
 800173e:	e087      	b.n	8001850 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	015a      	lsls	r2, r3, #5
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4413      	add	r3, r2
 8001748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b20      	cmp	r3, #32
 8001754:	d109      	bne.n	800176a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4413      	add	r3, r2
 800175e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001762:	461a      	mov	r2, r3
 8001764:	2320      	movs	r3, #32
 8001766:	6093      	str	r3, [r2, #8]
 8001768:	e072      	b.n	8001850 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4413      	add	r3, r2
 8001772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b08      	cmp	r3, #8
 800177e:	d11a      	bne.n	80017b6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	015a      	lsls	r2, r3, #5
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4413      	add	r3, r2
 8001788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178c:	461a      	mov	r2, r3
 800178e:	2308      	movs	r3, #8
 8001790:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3361      	adds	r3, #97	; 0x61
 80017a0:	2205      	movs	r2, #5
 80017a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 fae6 	bl	8004d80 <USB_HC_Halt>
 80017b4:	e04c      	b.n	8001850 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017cc:	d11b      	bne.n	8001806 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017da:	461a      	mov	r2, r3
 80017dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	3361      	adds	r3, #97	; 0x61
 80017f0:	2208      	movs	r2, #8
 80017f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fabe 	bl	8004d80 <USB_HC_Halt>
 8001804:	e024      	b.n	8001850 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4413      	add	r3, r2
 800180e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001818:	2b80      	cmp	r3, #128	; 0x80
 800181a:	d119      	bne.n	8001850 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	015a      	lsls	r2, r3, #5
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4413      	add	r3, r2
 8001824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001828:	461a      	mov	r2, r3
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	212c      	movs	r1, #44	; 0x2c
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	3361      	adds	r3, #97	; 0x61
 800183c:	2206      	movs	r2, #6
 800183e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	4611      	mov	r1, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fa98 	bl	8004d80 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	015a      	lsls	r2, r3, #5
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4413      	add	r3, r2
 8001858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001866:	d112      	bne.n	800188e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f003 fa84 	bl	8004d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	015a      	lsls	r2, r3, #5
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4413      	add	r3, r2
 8001880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001884:	461a      	mov	r2, r3
 8001886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800188a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800188c:	e24e      	b.n	8001d2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4413      	add	r3, r2
 8001896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	f040 80df 	bne.w	8001a64 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d019      	beq.n	80018e2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	3348      	adds	r3, #72	; 0x48
 80018bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	0159      	lsls	r1, r3, #5
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	440b      	add	r3, r1
 80018c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80018d0:	1ad2      	subs	r2, r2, r3
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	202c      	movs	r0, #44	; 0x2c
 80018d8:	fb00 f303 	mul.w	r3, r0, r3
 80018dc:	440b      	add	r3, r1
 80018de:	3350      	adds	r3, #80	; 0x50
 80018e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	212c      	movs	r1, #44	; 0x2c
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	3361      	adds	r3, #97	; 0x61
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	212c      	movs	r1, #44	; 0x2c
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	335c      	adds	r3, #92	; 0x5c
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4413      	add	r3, r2
 800190e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001912:	461a      	mov	r2, r3
 8001914:	2301      	movs	r3, #1
 8001916:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	212c      	movs	r1, #44	; 0x2c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	333f      	adds	r3, #63	; 0x3f
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d009      	beq.n	8001940 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	212c      	movs	r1, #44	; 0x2c
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	333f      	adds	r3, #63	; 0x3f
 800193a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800193c:	2b02      	cmp	r3, #2
 800193e:	d111      	bne.n	8001964 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f003 fa18 	bl	8004d80 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4413      	add	r3, r2
 8001958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195c:	461a      	mov	r2, r3
 800195e:	2310      	movs	r3, #16
 8001960:	6093      	str	r3, [r2, #8]
 8001962:	e03a      	b.n	80019da <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	333f      	adds	r3, #63	; 0x3f
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d009      	beq.n	800198c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	212c      	movs	r1, #44	; 0x2c
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	333f      	adds	r3, #63	; 0x3f
 8001986:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001988:	2b01      	cmp	r3, #1
 800198a:	d126      	bne.n	80019da <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4413      	add	r3, r2
 8001994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	0151      	lsls	r1, r2, #5
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	440a      	add	r2, r1
 80019a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	212c      	movs	r1, #44	; 0x2c
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	3360      	adds	r3, #96	; 0x60
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	b2d9      	uxtb	r1, r3
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	202c      	movs	r0, #44	; 0x2c
 80019c8:	fb00 f303 	mul.w	r3, r0, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3360      	adds	r3, #96	; 0x60
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f003 fc2a 	bl	800522e <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d12b      	bne.n	8001a3a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	212c      	movs	r1, #44	; 0x2c
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	3348      	adds	r3, #72	; 0x48
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	202c      	movs	r0, #44	; 0x2c
 80019f8:	fb00 f202 	mul.w	r2, r0, r2
 80019fc:	440a      	add	r2, r1
 80019fe:	3240      	adds	r2, #64	; 0x40
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 818e 	beq.w	8001d2c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	212c      	movs	r1, #44	; 0x2c
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3354      	adds	r3, #84	; 0x54
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2d8      	uxtb	r0, r3
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3354      	adds	r3, #84	; 0x54
 8001a34:	4602      	mov	r2, r0
 8001a36:	701a      	strb	r2, [r3, #0]
}
 8001a38:	e178      	b.n	8001d2c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	212c      	movs	r1, #44	; 0x2c
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	3354      	adds	r3, #84	; 0x54
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	f083 0301 	eor.w	r3, r3, #1
 8001a4e:	b2d8      	uxtb	r0, r3
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3354      	adds	r3, #84	; 0x54
 8001a5e:	4602      	mov	r2, r0
 8001a60:	701a      	strb	r2, [r3, #0]
}
 8001a62:	e163      	b.n	8001d2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	015a      	lsls	r2, r3, #5
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	f040 80f6 	bne.w	8001c68 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	212c      	movs	r1, #44	; 0x2c
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	3361      	adds	r3, #97	; 0x61
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d109      	bne.n	8001aa4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	212c      	movs	r1, #44	; 0x2c
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3360      	adds	r3, #96	; 0x60
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	e0c9      	b.n	8001c38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	212c      	movs	r1, #44	; 0x2c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3361      	adds	r3, #97	; 0x61
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d109      	bne.n	8001acc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3360      	adds	r3, #96	; 0x60
 8001ac6:	2205      	movs	r2, #5
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	e0b5      	b.n	8001c38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	212c      	movs	r1, #44	; 0x2c
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3361      	adds	r3, #97	; 0x61
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b06      	cmp	r3, #6
 8001ade:	d009      	beq.n	8001af4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	212c      	movs	r1, #44	; 0x2c
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	3361      	adds	r3, #97	; 0x61
 8001aee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d150      	bne.n	8001b96 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	212c      	movs	r1, #44	; 0x2c
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	335c      	adds	r3, #92	; 0x5c
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	202c      	movs	r0, #44	; 0x2c
 8001b0c:	fb00 f303 	mul.w	r3, r0, r3
 8001b10:	440b      	add	r3, r1
 8001b12:	335c      	adds	r3, #92	; 0x5c
 8001b14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	212c      	movs	r1, #44	; 0x2c
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	335c      	adds	r3, #92	; 0x5c
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d912      	bls.n	8001b50 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	335c      	adds	r3, #92	; 0x5c
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3360      	adds	r3, #96	; 0x60
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b4e:	e073      	b.n	8001c38 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3360      	adds	r3, #96	; 0x60
 8001b5e:	2202      	movs	r2, #2
 8001b60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	015a      	lsls	r2, r3, #5
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b78:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b80:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	015a      	lsls	r2, r3, #5
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4413      	add	r3, r2
 8001b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b94:	e050      	b.n	8001c38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3361      	adds	r3, #97	; 0x61
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d122      	bne.n	8001bf0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	212c      	movs	r1, #44	; 0x2c
 8001bb0:	fb01 f303 	mul.w	r3, r1, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3360      	adds	r3, #96	; 0x60
 8001bb8:	2202      	movs	r2, #2
 8001bba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	461a      	mov	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e023      	b.n	8001c38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	212c      	movs	r1, #44	; 0x2c
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3361      	adds	r3, #97	; 0x61
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b07      	cmp	r3, #7
 8001c02:	d119      	bne.n	8001c38 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	335c      	adds	r3, #92	; 0x5c
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	202c      	movs	r0, #44	; 0x2c
 8001c1c:	fb00 f303 	mul.w	r3, r0, r3
 8001c20:	440b      	add	r3, r1
 8001c22:	335c      	adds	r3, #92	; 0x5c
 8001c24:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	3360      	adds	r3, #96	; 0x60
 8001c34:	2204      	movs	r2, #4
 8001c36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c44:	461a      	mov	r2, r3
 8001c46:	2302      	movs	r3, #2
 8001c48:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	b2d9      	uxtb	r1, r3
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	202c      	movs	r0, #44	; 0x2c
 8001c54:	fb00 f303 	mul.w	r3, r0, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	3360      	adds	r3, #96	; 0x60
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f003 fae4 	bl	800522e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001c66:	e061      	b.n	8001d2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d156      	bne.n	8001d2c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	212c      	movs	r1, #44	; 0x2c
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	333f      	adds	r3, #63	; 0x3f
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d111      	bne.n	8001cb6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	212c      	movs	r1, #44	; 0x2c
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	335c      	adds	r3, #92	; 0x5c
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 f866 	bl	8004d80 <USB_HC_Halt>
 8001cb4:	e031      	b.n	8001d1a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	212c      	movs	r1, #44	; 0x2c
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	333f      	adds	r3, #63	; 0x3f
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	212c      	movs	r1, #44	; 0x2c
 8001cd0:	fb01 f303 	mul.w	r3, r1, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	333f      	adds	r3, #63	; 0x3f
 8001cd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d11d      	bne.n	8001d1a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	212c      	movs	r1, #44	; 0x2c
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	335c      	adds	r3, #92	; 0x5c
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d110      	bne.n	8001d1a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	3361      	adds	r3, #97	; 0x61
 8001d06:	2203      	movs	r2, #3
 8001d08:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 f833 	bl	8004d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	015a      	lsls	r2, r3, #5
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d26:	461a      	mov	r2, r3
 8001d28:	2310      	movs	r3, #16
 8001d2a:	6093      	str	r3, [r2, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d11a      	bne.n	8001d9a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d70:	461a      	mov	r2, r3
 8001d72:	2304      	movs	r3, #4
 8001d74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	212c      	movs	r1, #44	; 0x2c
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	3361      	adds	r3, #97	; 0x61
 8001d84:	2206      	movs	r2, #6
 8001d86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 fff4 	bl	8004d80 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001d98:	e331      	b.n	80023fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d12e      	bne.n	8001e0e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	212c      	movs	r1, #44	; 0x2c
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	333d      	adds	r3, #61	; 0x3d
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	f040 8313 	bne.w	80023fe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	333d      	adds	r3, #61	; 0x3d
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	212c      	movs	r1, #44	; 0x2c
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	3360      	adds	r3, #96	; 0x60
 8001df8:	2202      	movs	r2, #2
 8001dfa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 ffba 	bl	8004d80 <USB_HC_Halt>
}
 8001e0c:	e2f7      	b.n	80023fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e24:	d112      	bne.n	8001e4c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	461a      	mov	r2, r3
 8001e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f002 ff9b 	bl	8004d80 <USB_HC_Halt>
}
 8001e4a:	e2d8      	b.n	80023fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d140      	bne.n	8001ee4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	335c      	adds	r3, #92	; 0x5c
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d111      	bne.n	8001eae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	212c      	movs	r1, #44	; 0x2c
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	333d      	adds	r3, #61	; 0x3d
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2340      	movs	r3, #64	; 0x40
 8001eac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	212c      	movs	r1, #44	; 0x2c
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	3361      	adds	r3, #97	; 0x61
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 ff4f 	bl	8004d80 <USB_HC_Halt>
}
 8001ee2:	e28c      	b.n	80023fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef6:	2b40      	cmp	r3, #64	; 0x40
 8001ef8:	d12c      	bne.n	8001f54 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3361      	adds	r3, #97	; 0x61
 8001f08:	2204      	movs	r2, #4
 8001f0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	212c      	movs	r1, #44	; 0x2c
 8001f12:	fb01 f303 	mul.w	r3, r1, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	333d      	adds	r3, #61	; 0x3d
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	335c      	adds	r3, #92	; 0x5c
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 ff20 	bl	8004d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2340      	movs	r3, #64	; 0x40
 8001f50:	6093      	str	r3, [r2, #8]
}
 8001f52:	e254      	b.n	80023fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d11a      	bne.n	8001fa0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f76:	461a      	mov	r2, r3
 8001f78:	2308      	movs	r3, #8
 8001f7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	3361      	adds	r3, #97	; 0x61
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 fef1 	bl	8004d80 <USB_HC_Halt>
}
 8001f9e:	e22e      	b.n	80023fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d140      	bne.n	8002038 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	335c      	adds	r3, #92	; 0x5c
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3361      	adds	r3, #97	; 0x61
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	333d      	adds	r3, #61	; 0x3d
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d112      	bne.n	8002014 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	333c      	adds	r3, #60	; 0x3c
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d108      	bne.n	8002014 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	333d      	adds	r3, #61	; 0x3d
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f002 feae 	bl	8004d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	4413      	add	r3, r2
 800202c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002030:	461a      	mov	r2, r3
 8002032:	2310      	movs	r3, #16
 8002034:	6093      	str	r3, [r2, #8]
}
 8002036:	e1e2      	b.n	80023fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b80      	cmp	r3, #128	; 0x80
 800204c:	d164      	bne.n	8002118 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d111      	bne.n	800207a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3361      	adds	r3, #97	; 0x61
 8002064:	2206      	movs	r2, #6
 8002066:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f002 fe84 	bl	8004d80 <USB_HC_Halt>
 8002078:	e044      	b.n	8002104 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	335c      	adds	r3, #92	; 0x5c
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	202c      	movs	r0, #44	; 0x2c
 8002092:	fb00 f303 	mul.w	r3, r0, r3
 8002096:	440b      	add	r3, r1
 8002098:	335c      	adds	r3, #92	; 0x5c
 800209a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	212c      	movs	r1, #44	; 0x2c
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	335c      	adds	r3, #92	; 0x5c
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d920      	bls.n	80020f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	335c      	adds	r3, #92	; 0x5c
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	3360      	adds	r3, #96	; 0x60
 80020d0:	2204      	movs	r2, #4
 80020d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	b2d9      	uxtb	r1, r3
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	202c      	movs	r0, #44	; 0x2c
 80020de:	fb00 f303 	mul.w	r3, r0, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3360      	adds	r3, #96	; 0x60
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f003 f89f 	bl	800522e <HAL_HCD_HC_NotifyURBChange_Callback>
 80020f0:	e008      	b.n	8002104 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3360      	adds	r3, #96	; 0x60
 8002100:	2202      	movs	r2, #2
 8002102:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	461a      	mov	r2, r3
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	6093      	str	r3, [r2, #8]
}
 8002116:	e172      	b.n	80023fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	4413      	add	r3, r2
 8002120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212e:	d11b      	bne.n	8002168 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	212c      	movs	r1, #44	; 0x2c
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	3361      	adds	r3, #97	; 0x61
 800213e:	2208      	movs	r2, #8
 8002140:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f002 fe17 	bl	8004d80 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4413      	add	r3, r2
 800215a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215e:	461a      	mov	r2, r3
 8002160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002164:	6093      	str	r3, [r2, #8]
}
 8002166:	e14a      	b.n	80023fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b02      	cmp	r3, #2
 800217c:	f040 813f 	bne.w	80023fe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3361      	adds	r3, #97	; 0x61
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d17d      	bne.n	8002290 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	3360      	adds	r3, #96	; 0x60
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	333f      	adds	r3, #63	; 0x3f
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d00a      	beq.n	80021d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	333f      	adds	r3, #63	; 0x3f
 80021c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	f040 8100 	bne.w	80023d0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d113      	bne.n	8002200 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3355      	adds	r3, #85	; 0x55
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	f083 0301 	eor.w	r3, r3, #1
 80021ec:	b2d8      	uxtb	r0, r3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	3355      	adds	r3, #85	; 0x55
 80021fc:	4602      	mov	r2, r0
 80021fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	2b01      	cmp	r3, #1
 8002206:	f040 80e3 	bne.w	80023d0 <HCD_HC_OUT_IRQHandler+0x69c>
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	334c      	adds	r3, #76	; 0x4c
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80d8 	beq.w	80023d0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	334c      	adds	r3, #76	; 0x4c
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	202c      	movs	r0, #44	; 0x2c
 8002236:	fb00 f202 	mul.w	r2, r0, r2
 800223a:	440a      	add	r2, r1
 800223c:	3240      	adds	r2, #64	; 0x40
 800223e:	8812      	ldrh	r2, [r2, #0]
 8002240:	4413      	add	r3, r2
 8002242:	3b01      	subs	r3, #1
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	202c      	movs	r0, #44	; 0x2c
 800224a:	fb00 f202 	mul.w	r2, r0, r2
 800224e:	440a      	add	r2, r1
 8002250:	3240      	adds	r2, #64	; 0x40
 8002252:	8812      	ldrh	r2, [r2, #0]
 8002254:	fbb3 f3f2 	udiv	r3, r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80b5 	beq.w	80023d0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	3355      	adds	r3, #85	; 0x55
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f083 0301 	eor.w	r3, r3, #1
 800227a:	b2d8      	uxtb	r0, r3
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3355      	adds	r3, #85	; 0x55
 800228a:	4602      	mov	r2, r0
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	e09f      	b.n	80023d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3361      	adds	r3, #97	; 0x61
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d109      	bne.n	80022b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	212c      	movs	r1, #44	; 0x2c
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	3360      	adds	r3, #96	; 0x60
 80022b2:	2202      	movs	r2, #2
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e08b      	b.n	80023d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3361      	adds	r3, #97	; 0x61
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d109      	bne.n	80022e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	3360      	adds	r3, #96	; 0x60
 80022da:	2202      	movs	r2, #2
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e077      	b.n	80023d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3361      	adds	r3, #97	; 0x61
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d109      	bne.n	8002308 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3360      	adds	r3, #96	; 0x60
 8002302:	2205      	movs	r2, #5
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e063      	b.n	80023d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3361      	adds	r3, #97	; 0x61
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b06      	cmp	r3, #6
 800231a:	d009      	beq.n	8002330 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	3361      	adds	r3, #97	; 0x61
 800232a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800232c:	2b08      	cmp	r3, #8
 800232e:	d14f      	bne.n	80023d0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	335c      	adds	r3, #92	; 0x5c
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	202c      	movs	r0, #44	; 0x2c
 8002348:	fb00 f303 	mul.w	r3, r0, r3
 800234c:	440b      	add	r3, r1
 800234e:	335c      	adds	r3, #92	; 0x5c
 8002350:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	212c      	movs	r1, #44	; 0x2c
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	4413      	add	r3, r2
 800235e:	335c      	adds	r3, #92	; 0x5c
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d912      	bls.n	800238c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	335c      	adds	r3, #92	; 0x5c
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	3360      	adds	r3, #96	; 0x60
 8002386:	2204      	movs	r2, #4
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e021      	b.n	80023d0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3360      	adds	r3, #96	; 0x60
 800239a:	2202      	movs	r2, #2
 800239c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	461a      	mov	r2, r3
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	461a      	mov	r2, r3
 80023de:	2302      	movs	r3, #2
 80023e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	b2d9      	uxtb	r1, r3
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	202c      	movs	r0, #44	; 0x2c
 80023ec:	fb00 f303 	mul.w	r3, r0, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3360      	adds	r3, #96	; 0x60
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f002 ff18 	bl	800522e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023fe:	bf00      	nop
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b08a      	sub	sp, #40	; 0x28
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	0c5b      	lsrs	r3, r3, #17
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800243a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d004      	beq.n	800244c <HCD_RXQLVL_IRQHandler+0x46>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b05      	cmp	r3, #5
 8002446:	f000 80a9 	beq.w	800259c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800244a:	e0aa      	b.n	80025a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80a6 	beq.w	80025a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	3344      	adds	r3, #68	; 0x44
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 809b 	beq.w	80025a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	3350      	adds	r3, #80	; 0x50
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	441a      	add	r2, r3
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	202c      	movs	r0, #44	; 0x2c
 8002484:	fb00 f303 	mul.w	r3, r0, r3
 8002488:	440b      	add	r3, r1
 800248a:	334c      	adds	r3, #76	; 0x4c
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d87a      	bhi.n	8002588 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3344      	adds	r3, #68	; 0x44
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	b292      	uxth	r2, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f002 fba4 	bl	8004bf8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3344      	adds	r3, #68	; 0x44
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	441a      	add	r2, r3
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	202c      	movs	r0, #44	; 0x2c
 80024ca:	fb00 f303 	mul.w	r3, r0, r3
 80024ce:	440b      	add	r3, r1
 80024d0:	3344      	adds	r3, #68	; 0x44
 80024d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3350      	adds	r3, #80	; 0x50
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	441a      	add	r2, r3
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	202c      	movs	r0, #44	; 0x2c
 80024ee:	fb00 f303 	mul.w	r3, r0, r3
 80024f2:	440b      	add	r3, r1
 80024f4:	3350      	adds	r3, #80	; 0x50
 80024f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	0cdb      	lsrs	r3, r3, #19
 8002508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800250c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	3340      	adds	r3, #64	; 0x40
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4293      	cmp	r3, r2
 8002524:	d13c      	bne.n	80025a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d039      	beq.n	80025a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002542:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800254a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	3354      	adds	r3, #84	; 0x54
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	f083 0301 	eor.w	r3, r3, #1
 8002572:	b2d8      	uxtb	r0, r3
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3354      	adds	r3, #84	; 0x54
 8002582:	4602      	mov	r2, r0
 8002584:	701a      	strb	r2, [r3, #0]
      break;
 8002586:	e00b      	b.n	80025a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	2204      	movs	r2, #4
 8002598:	701a      	strb	r2, [r3, #0]
      break;
 800259a:	e001      	b.n	80025a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800259c:	bf00      	nop
 800259e:	e000      	b.n	80025a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80025a0:	bf00      	nop
  }
}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80025d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d10b      	bne.n	80025fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f002 fe02 	bl	80051f6 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b08      	cmp	r3, #8
 8002602:	d132      	bne.n	800266a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f043 0308 	orr.w	r3, r3, #8
 800260a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d126      	bne.n	8002664 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d113      	bne.n	8002646 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002624:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002628:	d106      	bne.n	8002638 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2102      	movs	r1, #2
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fb5a 	bl	8004cea <USB_InitFSLSPClkSel>
 8002636:	e011      	b.n	800265c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	4618      	mov	r0, r3
 8002640:	f002 fb53 	bl	8004cea <USB_InitFSLSPClkSel>
 8002644:	e00a      	b.n	800265c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d106      	bne.n	800265c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002654:	461a      	mov	r2, r3
 8002656:	f64e 2360 	movw	r3, #60000	; 0xea60
 800265a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f002 fdf4 	bl	800524a <HAL_HCD_PortEnabled_Callback>
 8002662:	e002      	b.n	800266a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f002 fdfe 	bl	8005266 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b20      	cmp	r3, #32
 8002672:	d103      	bne.n	800267c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f043 0320 	orr.w	r3, r3, #32
 800267a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e12b      	b.n	80028fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe f9d6 	bl	8000a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	; 0x24
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026f4:	f001 fa20 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 80026f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a81      	ldr	r2, [pc, #516]	; (8002904 <HAL_I2C_Init+0x274>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d807      	bhi.n	8002714 <HAL_I2C_Init+0x84>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4a80      	ldr	r2, [pc, #512]	; (8002908 <HAL_I2C_Init+0x278>)
 8002708:	4293      	cmp	r3, r2
 800270a:	bf94      	ite	ls
 800270c:	2301      	movls	r3, #1
 800270e:	2300      	movhi	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e006      	b.n	8002722 <HAL_I2C_Init+0x92>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4a7d      	ldr	r2, [pc, #500]	; (800290c <HAL_I2C_Init+0x27c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	bf94      	ite	ls
 800271c:	2301      	movls	r3, #1
 800271e:	2300      	movhi	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0e7      	b.n	80028fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a78      	ldr	r2, [pc, #480]	; (8002910 <HAL_I2C_Init+0x280>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0c9b      	lsrs	r3, r3, #18
 8002734:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	430a      	orrs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a6a      	ldr	r2, [pc, #424]	; (8002904 <HAL_I2C_Init+0x274>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d802      	bhi.n	8002764 <HAL_I2C_Init+0xd4>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3301      	adds	r3, #1
 8002762:	e009      	b.n	8002778 <HAL_I2C_Init+0xe8>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	4a69      	ldr	r2, [pc, #420]	; (8002914 <HAL_I2C_Init+0x284>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	099b      	lsrs	r3, r3, #6
 8002776:	3301      	adds	r3, #1
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800278a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	495c      	ldr	r1, [pc, #368]	; (8002904 <HAL_I2C_Init+0x274>)
 8002794:	428b      	cmp	r3, r1
 8002796:	d819      	bhi.n	80027cc <HAL_I2C_Init+0x13c>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e59      	subs	r1, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a6:	1c59      	adds	r1, r3, #1
 80027a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027ac:	400b      	ands	r3, r1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_I2C_Init+0x138>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1e59      	subs	r1, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c6:	e051      	b.n	800286c <HAL_I2C_Init+0x1dc>
 80027c8:	2304      	movs	r3, #4
 80027ca:	e04f      	b.n	800286c <HAL_I2C_Init+0x1dc>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <HAL_I2C_Init+0x168>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	440b      	add	r3, r1
 80027e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e012      	b.n	800281e <HAL_I2C_Init+0x18e>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	0099      	lsls	r1, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	fbb0 f3f3 	udiv	r3, r0, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Init+0x196>
 8002822:	2301      	movs	r3, #1
 8002824:	e022      	b.n	800286c <HAL_I2C_Init+0x1dc>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10e      	bne.n	800284c <HAL_I2C_Init+0x1bc>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1e58      	subs	r0, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	440b      	add	r3, r1
 800283c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284a:	e00f      	b.n	800286c <HAL_I2C_Init+0x1dc>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	0099      	lsls	r1, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	6809      	ldr	r1, [r1, #0]
 8002870:	4313      	orrs	r3, r2
 8002872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800289a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6911      	ldr	r1, [r2, #16]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	430b      	orrs	r3, r1
 80028ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	000186a0 	.word	0x000186a0
 8002908:	001e847f 	.word	0x001e847f
 800290c:	003d08ff 	.word	0x003d08ff
 8002910:	431bde83 	.word	0x431bde83
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e128      	b.n	8002b7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a90      	ldr	r2, [pc, #576]	; (8002b84 <HAL_I2S_Init+0x26c>)
 8002942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fe f8d7 	bl	8000af8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002960:	f023 030f 	bic.w	r3, r3, #15
 8002964:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d060      	beq.n	8002a38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800297e:	2310      	movs	r3, #16
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	e001      	b.n	8002988 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002984:	2320      	movs	r3, #32
 8002986:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b20      	cmp	r3, #32
 800298e:	d802      	bhi.n	8002996 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002996:	2001      	movs	r0, #1
 8002998:	f001 f9c4 	bl	8003d24 <HAL_RCCEx_GetPeriphCLKFreq>
 800299c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a6:	d125      	bne.n	80029f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d010      	beq.n	80029d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	3305      	adds	r3, #5
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	e01f      	b.n	8002a12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	461a      	mov	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ee:	3305      	adds	r3, #5
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	e00e      	b.n	8002a12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	461a      	mov	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	3305      	adds	r3, #5
 8002a10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4a5c      	ldr	r2, [pc, #368]	; (8002b88 <HAL_I2S_Init+0x270>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	08db      	lsrs	r3, r3, #3
 8002a1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	e003      	b.n	8002a40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d902      	bls.n	8002a4c <HAL_I2S_Init+0x134>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	2bff      	cmp	r3, #255	; 0xff
 8002a4a:	d907      	bls.n	8002a5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	f043 0210 	orr.w	r2, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e08f      	b.n	8002b7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	ea42 0103 	orr.w	r1, r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a7a:	f023 030f 	bic.w	r3, r3, #15
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6851      	ldr	r1, [r2, #4]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6892      	ldr	r2, [r2, #8]
 8002a86:	4311      	orrs	r1, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68d2      	ldr	r2, [r2, #12]
 8002a8c:	4311      	orrs	r1, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6992      	ldr	r2, [r2, #24]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d161      	bne.n	8002b6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a38      	ldr	r2, [pc, #224]	; (8002b8c <HAL_I2S_Init+0x274>)
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a37      	ldr	r2, [pc, #220]	; (8002b90 <HAL_I2S_Init+0x278>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d101      	bne.n	8002abc <HAL_I2S_Init+0x1a4>
 8002ab8:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <HAL_I2S_Init+0x27c>)
 8002aba:	e001      	b.n	8002ac0 <HAL_I2S_Init+0x1a8>
 8002abc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	4932      	ldr	r1, [pc, #200]	; (8002b90 <HAL_I2S_Init+0x278>)
 8002ac8:	428a      	cmp	r2, r1
 8002aca:	d101      	bne.n	8002ad0 <HAL_I2S_Init+0x1b8>
 8002acc:	4a31      	ldr	r2, [pc, #196]	; (8002b94 <HAL_I2S_Init+0x27c>)
 8002ace:	e001      	b.n	8002ad4 <HAL_I2S_Init+0x1bc>
 8002ad0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002ad4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ad8:	f023 030f 	bic.w	r3, r3, #15
 8002adc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a2b      	ldr	r2, [pc, #172]	; (8002b90 <HAL_I2S_Init+0x278>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d101      	bne.n	8002aec <HAL_I2S_Init+0x1d4>
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <HAL_I2S_Init+0x27c>)
 8002aea:	e001      	b.n	8002af0 <HAL_I2S_Init+0x1d8>
 8002aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002af0:	2202      	movs	r2, #2
 8002af2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <HAL_I2S_Init+0x278>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <HAL_I2S_Init+0x1ea>
 8002afe:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <HAL_I2S_Init+0x27c>)
 8002b00:	e001      	b.n	8002b06 <HAL_I2S_Init+0x1ee>
 8002b02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b12:	d003      	beq.n	8002b1c <HAL_I2S_Init+0x204>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d103      	bne.n	8002b24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	e001      	b.n	8002b28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b32:	4313      	orrs	r3, r2
 8002b34:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b46:	4313      	orrs	r3, r2
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_I2S_Init+0x278>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_I2S_Init+0x24c>
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <HAL_I2S_Init+0x27c>)
 8002b62:	e001      	b.n	8002b68 <HAL_I2S_Init+0x250>
 8002b64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b68:	897a      	ldrh	r2, [r7, #10]
 8002b6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	08002c8f 	.word	0x08002c8f
 8002b88:	cccccccd 	.word	0xcccccccd
 8002b8c:	08002da5 	.word	0x08002da5
 8002b90:	40003800 	.word	0x40003800
 8002b94:	40003400 	.word	0x40003400

08002b98 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	881a      	ldrh	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	1c9a      	adds	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10e      	bne.n	8002c28 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c18:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ffb8 	bl	8002b98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	b292      	uxth	r2, r2
 8002c44:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	1c9a      	adds	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10e      	bne.n	8002c86 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c76:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff93 	bl	8002bac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d13a      	bne.n	8002d20 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d109      	bne.n	8002cc8 <I2S_IRQHandler+0x3a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d102      	bne.n	8002cc8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ffb4 	bl	8002c30 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d126      	bne.n	8002d20 <I2S_IRQHandler+0x92>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d11f      	bne.n	8002d20 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f043 0202 	orr.w	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ff50 	bl	8002bc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d136      	bne.n	8002d9a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d109      	bne.n	8002d4a <I2S_IRQHandler+0xbc>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d102      	bne.n	8002d4a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ff45 	bl	8002bd4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d122      	bne.n	8002d9a <I2S_IRQHandler+0x10c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d11b      	bne.n	8002d9a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d70:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	f043 0204 	orr.w	r2, r3, #4
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff13 	bl	8002bc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a92      	ldr	r2, [pc, #584]	; (8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002dbe:	4b92      	ldr	r3, [pc, #584]	; (8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dc0:	e001      	b.n	8002dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a8b      	ldr	r2, [pc, #556]	; (8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d101      	bne.n	8002de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ddc:	4b8a      	ldr	r3, [pc, #552]	; (8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dde:	e001      	b.n	8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df0:	d004      	beq.n	8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 8099 	bne.w	8002f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d107      	bne.n	8002e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f925 	bl	8003060 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d107      	bne.n	8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f9c8 	bl	80031c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d13a      	bne.n	8002eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d035      	beq.n	8002eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6e      	ldr	r2, [pc, #440]	; (8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002e4e:	4b6e      	ldr	r3, [pc, #440]	; (8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e50:	e001      	b.n	8002e56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002e52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4969      	ldr	r1, [pc, #420]	; (8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e5e:	428b      	cmp	r3, r1
 8002e60:	d101      	bne.n	8002e66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002e62:	4b69      	ldr	r3, [pc, #420]	; (8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e64:	e001      	b.n	8002e6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e6e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f043 0202 	orr.w	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff fe88 	bl	8002bc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	f040 80c3 	bne.w	8003042 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80bd 	beq.w	8003042 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ed6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a49      	ldr	r2, [pc, #292]	; (8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002ee2:	4b49      	ldr	r3, [pc, #292]	; (8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ee4:	e001      	b.n	8002eea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002ee6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4944      	ldr	r1, [pc, #272]	; (8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ef2:	428b      	cmp	r3, r1
 8002ef4:	d101      	bne.n	8002efa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002ef6:	4b44      	ldr	r3, [pc, #272]	; (8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ef8:	e001      	b.n	8002efe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002efa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002efe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f02:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f04:	2300      	movs	r3, #0
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f043 0204 	orr.w	r2, r3, #4
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff fe4a 	bl	8002bc0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f2c:	e089      	b.n	8003042 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d107      	bne.n	8002f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8be 	bl	80030c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f8fd 	bl	800315c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b40      	cmp	r3, #64	; 0x40
 8002f6a:	d12f      	bne.n	8002fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d02a      	beq.n	8002fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f84:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1e      	ldr	r2, [pc, #120]	; (8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d101      	bne.n	8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f92:	e001      	b.n	8002f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002f94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4919      	ldr	r1, [pc, #100]	; (8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fa0:	428b      	cmp	r3, r1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002fa4:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fa6:	e001      	b.n	8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002fa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f043 0202 	orr.w	r2, r3, #2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fdfa 	bl	8002bc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d136      	bne.n	8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d031      	beq.n	8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a07      	ldr	r2, [pc, #28]	; (8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d101      	bne.n	8002fee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fec:	e001      	b.n	8002ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002fee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4902      	ldr	r1, [pc, #8]	; (8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ffa:	428b      	cmp	r3, r1
 8002ffc:	d106      	bne.n	800300c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002ffe:	4b02      	ldr	r3, [pc, #8]	; (8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003000:	e006      	b.n	8003010 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003002:	bf00      	nop
 8003004:	40003800 	.word	0x40003800
 8003008:	40003400 	.word	0x40003400
 800300c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003010:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003014:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003024:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f043 0204 	orr.w	r2, r3, #4
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fdc0 	bl	8002bc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003040:	e000      	b.n	8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003042:	bf00      	nop
}
 8003044:	bf00      	nop
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	1c99      	adds	r1, r3, #2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6251      	str	r1, [r2, #36]	; 0x24
 8003072:	881a      	ldrh	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d113      	bne.n	80030ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ffc9 	bl	800304c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	1c99      	adds	r1, r3, #2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6251      	str	r1, [r2, #36]	; 0x24
 80030d6:	8819      	ldrh	r1, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1d      	ldr	r2, [pc, #116]	; (8003154 <I2SEx_TxISR_I2SExt+0x90>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <I2SEx_TxISR_I2SExt+0x22>
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <I2SEx_TxISR_I2SExt+0x94>)
 80030e4:	e001      	b.n	80030ea <I2SEx_TxISR_I2SExt+0x26>
 80030e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ea:	460a      	mov	r2, r1
 80030ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d121      	bne.n	800314a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <I2SEx_TxISR_I2SExt+0x90>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <I2SEx_TxISR_I2SExt+0x50>
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <I2SEx_TxISR_I2SExt+0x94>)
 8003112:	e001      	b.n	8003118 <I2SEx_TxISR_I2SExt+0x54>
 8003114:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	490d      	ldr	r1, [pc, #52]	; (8003154 <I2SEx_TxISR_I2SExt+0x90>)
 8003120:	428b      	cmp	r3, r1
 8003122:	d101      	bne.n	8003128 <I2SEx_TxISR_I2SExt+0x64>
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <I2SEx_TxISR_I2SExt+0x94>)
 8003126:	e001      	b.n	800312c <I2SEx_TxISR_I2SExt+0x68>
 8003128:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800312c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003130:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d106      	bne.n	800314a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ff81 	bl	800304c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40003800 	.word	0x40003800
 8003158:	40003400 	.word	0x40003400

0800315c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68d8      	ldr	r0, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	1c99      	adds	r1, r3, #2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003174:	b282      	uxth	r2, r0
 8003176:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d113      	bne.n	80031b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800319e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff ff4a 	bl	800304c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a20      	ldr	r2, [pc, #128]	; (8003250 <I2SEx_RxISR_I2SExt+0x90>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <I2SEx_RxISR_I2SExt+0x16>
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <I2SEx_RxISR_I2SExt+0x94>)
 80031d4:	e001      	b.n	80031da <I2SEx_RxISR_I2SExt+0x1a>
 80031d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031da:	68d8      	ldr	r0, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	1c99      	adds	r1, r3, #2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80031e6:	b282      	uxth	r2, r0
 80031e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d121      	bne.n	8003246 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <I2SEx_RxISR_I2SExt+0x90>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d101      	bne.n	8003210 <I2SEx_RxISR_I2SExt+0x50>
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <I2SEx_RxISR_I2SExt+0x94>)
 800320e:	e001      	b.n	8003214 <I2SEx_RxISR_I2SExt+0x54>
 8003210:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	490d      	ldr	r1, [pc, #52]	; (8003250 <I2SEx_RxISR_I2SExt+0x90>)
 800321c:	428b      	cmp	r3, r1
 800321e:	d101      	bne.n	8003224 <I2SEx_RxISR_I2SExt+0x64>
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <I2SEx_RxISR_I2SExt+0x94>)
 8003222:	e001      	b.n	8003228 <I2SEx_RxISR_I2SExt+0x68>
 8003224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003228:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800322c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff03 	bl	800304c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40003800 	.word	0x40003800
 8003254:	40003400 	.word	0x40003400

08003258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e267      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d075      	beq.n	8003362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003276:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	d00c      	beq.n	800329c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003282:	4b85      	ldr	r3, [pc, #532]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328a:	2b08      	cmp	r3, #8
 800328c:	d112      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329a:	d10b      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	4b7e      	ldr	r3, [pc, #504]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05b      	beq.n	8003360 <HAL_RCC_OscConfig+0x108>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d157      	bne.n	8003360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e242      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x74>
 80032be:	4b76      	ldr	r3, [pc, #472]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a75      	ldr	r2, [pc, #468]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x98>
 80032d6:	4b70      	ldr	r3, [pc, #448]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6f      	ldr	r2, [pc, #444]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6d      	ldr	r3, [pc, #436]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6c      	ldr	r2, [pc, #432]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032f0:	4b69      	ldr	r3, [pc, #420]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a68      	ldr	r2, [pc, #416]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b66      	ldr	r3, [pc, #408]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a65      	ldr	r2, [pc, #404]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fd fdec 	bl	8000eec <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003318:	f7fd fde8 	bl	8000eec <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e207      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xc0>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fd fdd8 	bl	8000eec <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7fd fdd4 	bl	8000eec <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1f3      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0xe8>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800336e:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1c7      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4937      	ldr	r1, [pc, #220]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e03a      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b34      	ldr	r3, [pc, #208]	; (800349c <HAL_RCC_OscConfig+0x244>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fd fd8d 	bl	8000eec <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fd fd89 	bl	8000eec <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1a8      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4925      	ldr	r1, [pc, #148]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <HAL_RCC_OscConfig+0x244>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fd fd6c 	bl	8000eec <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003418:	f7fd fd68 	bl	8000eec <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e187      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d036      	beq.n	80034b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_RCC_OscConfig+0x248>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fd fd4c 	bl	8000eec <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003458:	f7fd fd48 	bl	8000eec <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e167      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x200>
 8003476:	e01b      	b.n	80034b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCC_OscConfig+0x248>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fd fd35 	bl	8000eec <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003484:	e00e      	b.n	80034a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003486:	f7fd fd31 	bl	8000eec <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d907      	bls.n	80034a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e150      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
 8003498:	40023800 	.word	0x40023800
 800349c:	42470000 	.word	0x42470000
 80034a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ea      	bne.n	8003486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8097 	beq.w	80035ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b81      	ldr	r3, [pc, #516]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b7d      	ldr	r3, [pc, #500]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a7c      	ldr	r2, [pc, #496]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b7a      	ldr	r3, [pc, #488]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b77      	ldr	r3, [pc, #476]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b74      	ldr	r3, [pc, #464]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a73      	ldr	r2, [pc, #460]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7fd fcf1 	bl	8000eec <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7fd fced 	bl	8000eec <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e10c      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x2ea>
 8003534:	4b64      	ldr	r3, [pc, #400]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a63      	ldr	r2, [pc, #396]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	e01c      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x30c>
 800354a:	4b5f      	ldr	r3, [pc, #380]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a5e      	ldr	r2, [pc, #376]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	4a5b      	ldr	r2, [pc, #364]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6713      	str	r3, [r2, #112]	; 0x70
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003564:	4b58      	ldr	r3, [pc, #352]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a57      	ldr	r2, [pc, #348]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
 8003570:	4b55      	ldr	r3, [pc, #340]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a54      	ldr	r2, [pc, #336]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d015      	beq.n	80035b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fd fcb2 	bl	8000eec <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fd fcae 	bl	8000eec <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0cb      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	4b49      	ldr	r3, [pc, #292]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ee      	beq.n	800358c <HAL_RCC_OscConfig+0x334>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7fd fc9c 	bl	8000eec <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7fd fc98 	bl	8000eec <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e0b5      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ce:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ee      	bne.n	80035b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a1 	beq.w	8003738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f6:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d05c      	beq.n	80036bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d141      	bne.n	800368e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fd fc6c 	bl	8000eec <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003618:	f7fd fc68 	bl	8000eec <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e087      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	019b      	lsls	r3, r3, #6
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	491b      	ldr	r1, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fd fc41 	bl	8000eec <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fd fc3d 	bl	8000eec <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e05c      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x416>
 800368c:	e054      	b.n	8003738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fd fc2a 	bl	8000eec <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7fd fc26 	bl	8000eec <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e045      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x444>
 80036ba:	e03d      	b.n	8003738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e038      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000
 80036d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x4ec>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d028      	beq.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d121      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d11a      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800370a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800370c:	4293      	cmp	r3, r2
 800370e:	d111      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	3b01      	subs	r3, #1
 800371e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d107      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0cc      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d90c      	bls.n	8003784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b63      	ldr	r3, [pc, #396]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0b8      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800379c:	4b59      	ldr	r3, [pc, #356]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a58      	ldr	r2, [pc, #352]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a52      	ldr	r2, [pc, #328]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c0:	4b50      	ldr	r3, [pc, #320]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	494d      	ldr	r1, [pc, #308]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d044      	beq.n	8003868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d119      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d003      	beq.n	8003806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003802:	2b03      	cmp	r3, #3
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003806:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e067      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003826:	4b37      	ldr	r3, [pc, #220]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 0203 	bic.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4934      	ldr	r1, [pc, #208]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003838:	f7fd fb58 	bl	8000eec <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	e00a      	b.n	8003856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003840:	f7fd fb54 	bl	8000eec <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e04f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 020c 	and.w	r2, r3, #12
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	429a      	cmp	r2, r3
 8003866:	d1eb      	bne.n	8003840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d20c      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e032      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4916      	ldr	r1, [pc, #88]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	490e      	ldr	r1, [pc, #56]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ce:	f000 f821 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 80038d2:	4602      	mov	r2, r0
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	490a      	ldr	r1, [pc, #40]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	5ccb      	ldrb	r3, [r1, r3]
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd fab8 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023c00 	.word	0x40023c00
 8003904:	40023800 	.word	0x40023800
 8003908:	08005380 	.word	0x08005380
 800390c:	20000000 	.word	0x20000000
 8003910:	20000004 	.word	0x20000004

08003914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003918:	b094      	sub	sp, #80	; 0x50
 800391a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	647b      	str	r3, [r7, #68]	; 0x44
 8003920:	2300      	movs	r3, #0
 8003922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003924:	2300      	movs	r3, #0
 8003926:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392c:	4b79      	ldr	r3, [pc, #484]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d00d      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x40>
 8003938:	2b08      	cmp	r3, #8
 800393a:	f200 80e1 	bhi.w	8003b00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x34>
 8003942:	2b04      	cmp	r3, #4
 8003944:	d003      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x3a>
 8003946:	e0db      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003948:	4b73      	ldr	r3, [pc, #460]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x204>)
 800394a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800394c:	e0db      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800394e:	4b73      	ldr	r3, [pc, #460]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003950:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003952:	e0d8      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800395e:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d063      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396a:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	099b      	lsrs	r3, r3, #6
 8003970:	2200      	movs	r2, #0
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
 8003974:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397c:	633b      	str	r3, [r7, #48]	; 0x30
 800397e:	2300      	movs	r3, #0
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
 8003982:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003986:	4622      	mov	r2, r4
 8003988:	462b      	mov	r3, r5
 800398a:	f04f 0000 	mov.w	r0, #0
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	0159      	lsls	r1, r3, #5
 8003994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003998:	0150      	lsls	r0, r2, #5
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4621      	mov	r1, r4
 80039a0:	1a51      	subs	r1, r2, r1
 80039a2:	6139      	str	r1, [r7, #16]
 80039a4:	4629      	mov	r1, r5
 80039a6:	eb63 0301 	sbc.w	r3, r3, r1
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039b8:	4659      	mov	r1, fp
 80039ba:	018b      	lsls	r3, r1, #6
 80039bc:	4651      	mov	r1, sl
 80039be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039c2:	4651      	mov	r1, sl
 80039c4:	018a      	lsls	r2, r1, #6
 80039c6:	4651      	mov	r1, sl
 80039c8:	ebb2 0801 	subs.w	r8, r2, r1
 80039cc:	4659      	mov	r1, fp
 80039ce:	eb63 0901 	sbc.w	r9, r3, r1
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e6:	4690      	mov	r8, r2
 80039e8:	4699      	mov	r9, r3
 80039ea:	4623      	mov	r3, r4
 80039ec:	eb18 0303 	adds.w	r3, r8, r3
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	462b      	mov	r3, r5
 80039f4:	eb49 0303 	adc.w	r3, r9, r3
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a06:	4629      	mov	r1, r5
 8003a08:	024b      	lsls	r3, r1, #9
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a10:	4621      	mov	r1, r4
 8003a12:	024a      	lsls	r2, r1, #9
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a24:	f7fc fbd0 	bl	80001c8 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a30:	e058      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a32:	4b38      	ldr	r3, [pc, #224]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	2200      	movs	r2, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a42:	623b      	str	r3, [r7, #32]
 8003a44:	2300      	movs	r3, #0
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
 8003a48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	f04f 0000 	mov.w	r0, #0
 8003a54:	f04f 0100 	mov.w	r1, #0
 8003a58:	0159      	lsls	r1, r3, #5
 8003a5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a5e:	0150      	lsls	r0, r2, #5
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4641      	mov	r1, r8
 8003a66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a84:	ebb2 040a 	subs.w	r4, r2, sl
 8003a88:	eb63 050b 	sbc.w	r5, r3, fp
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	00eb      	lsls	r3, r5, #3
 8003a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a9a:	00e2      	lsls	r2, r4, #3
 8003a9c:	4614      	mov	r4, r2
 8003a9e:	461d      	mov	r5, r3
 8003aa0:	4643      	mov	r3, r8
 8003aa2:	18e3      	adds	r3, r4, r3
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	eb45 0303 	adc.w	r3, r5, r3
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aba:	4629      	mov	r1, r5
 8003abc:	028b      	lsls	r3, r1, #10
 8003abe:	4621      	mov	r1, r4
 8003ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	028a      	lsls	r2, r1, #10
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ace:	2200      	movs	r2, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	61fa      	str	r2, [r7, #28]
 8003ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad8:	f7fc fb76 	bl	80001c8 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	3301      	adds	r3, #1
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003af4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3750      	adds	r7, #80	; 0x50
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	00f42400 	.word	0x00f42400
 8003b1c:	007a1200 	.word	0x007a1200

08003b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000000 	.word	0x20000000

08003b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b3c:	f7ff fff0 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0a9b      	lsrs	r3, r3, #10
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4903      	ldr	r1, [pc, #12]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	08005390 	.word	0x08005390

08003b60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d035      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b88:	4b62      	ldr	r3, [pc, #392]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b8e:	f7fd f9ad 	bl	8000eec <HAL_GetTick>
 8003b92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b96:	f7fd f9a9 	bl	8000eec <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0b0      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ba8:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f0      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	019a      	lsls	r2, r3, #6
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	071b      	lsls	r3, r3, #28
 8003bc0:	4955      	ldr	r1, [pc, #340]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bc8:	4b52      	ldr	r3, [pc, #328]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bce:	f7fd f98d 	bl	8000eec <HAL_GetTick>
 8003bd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bd6:	f7fd f989 	bl	8000eec <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e090      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8083 	beq.w	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	4b44      	ldr	r3, [pc, #272]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4a43      	ldr	r2, [pc, #268]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c10:	6413      	str	r3, [r2, #64]	; 0x40
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c1e:	4b3f      	ldr	r3, [pc, #252]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a3e      	ldr	r2, [pc, #248]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c2a:	f7fd f95f 	bl	8000eec <HAL_GetTick>
 8003c2e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fd f95b 	bl	8000eec <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e062      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c44:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c50:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c58:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d02f      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d028      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c76:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c78:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c7e:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c84:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c8a:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d114      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fd f929 	bl	8000eec <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9e:	f7fd f925 	bl	8000eec <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e02a      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb4:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ee      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ccc:	d10d      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce2:	490d      	ldr	r1, [pc, #52]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	608b      	str	r3, [r1, #8]
 8003ce8:	e005      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cf0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cf4:	6093      	str	r3, [r2, #8]
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d02:	4905      	ldr	r1, [pc, #20]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	42470068 	.word	0x42470068
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	42470e40 	.word	0x42470e40

08003d24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d13e      	bne.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d12f      	bne.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d58:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d5a:	617b      	str	r3, [r7, #20]
          break;
 8003d5c:	e02f      	b.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6a:	d108      	bne.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d6c:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d74:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	e007      	b.n	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d86:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	fb02 f303 	mul.w	r3, r2, r3
 8003da0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da8:	0f1b      	lsrs	r3, r3, #28
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]
          break;
 8003db6:	e002      	b.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
          break;
 8003dbc:	bf00      	nop
        }
      }
      break;
 8003dbe:	bf00      	nop
    }
  }
  return frequency;
 8003dc0:	697b      	ldr	r3, [r7, #20]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	00bb8000 	.word	0x00bb8000
 8003dd8:	007a1200 	.word	0x007a1200
 8003ddc:	00f42400 	.word	0x00f42400

08003de0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e07b      	b.n	8003eea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e02:	d009      	beq.n	8003e18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	61da      	str	r2, [r3, #28]
 8003e0a:	e005      	b.n	8003e18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fc fee0 	bl	8000bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9c:	ea42 0103 	orr.w	r1, r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 0104 	and.w	r1, r3, #4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	f003 0210 	and.w	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e041      	b.n	8003f88 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fc feb5 	bl	8000c88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f000 f9b7 	bl	80042a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d109      	bne.n	8003fb4 <HAL_TIM_PWM_Start+0x24>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	e022      	b.n	8003ffa <HAL_TIM_PWM_Start+0x6a>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d109      	bne.n	8003fce <HAL_TIM_PWM_Start+0x3e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	bf14      	ite	ne
 8003fc6:	2301      	movne	r3, #1
 8003fc8:	2300      	moveq	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	e015      	b.n	8003ffa <HAL_TIM_PWM_Start+0x6a>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d109      	bne.n	8003fe8 <HAL_TIM_PWM_Start+0x58>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e008      	b.n	8003ffa <HAL_TIM_PWM_Start+0x6a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e07c      	b.n	80040fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <HAL_TIM_PWM_Start+0x82>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004010:	e013      	b.n	800403a <HAL_TIM_PWM_Start+0xaa>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b04      	cmp	r3, #4
 8004016:	d104      	bne.n	8004022 <HAL_TIM_PWM_Start+0x92>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004020:	e00b      	b.n	800403a <HAL_TIM_PWM_Start+0xaa>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d104      	bne.n	8004032 <HAL_TIM_PWM_Start+0xa2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004030:	e003      	b.n	800403a <HAL_TIM_PWM_Start+0xaa>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2201      	movs	r2, #1
 8004040:	6839      	ldr	r1, [r7, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fb7e 	bl	8004744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a2d      	ldr	r2, [pc, #180]	; (8004104 <HAL_TIM_PWM_Start+0x174>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d004      	beq.n	800405c <HAL_TIM_PWM_Start+0xcc>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2c      	ldr	r2, [pc, #176]	; (8004108 <HAL_TIM_PWM_Start+0x178>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d101      	bne.n	8004060 <HAL_TIM_PWM_Start+0xd0>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <HAL_TIM_PWM_Start+0xd2>
 8004060:	2300      	movs	r3, #0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a22      	ldr	r2, [pc, #136]	; (8004104 <HAL_TIM_PWM_Start+0x174>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d022      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x136>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004088:	d01d      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x136>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1f      	ldr	r2, [pc, #124]	; (800410c <HAL_TIM_PWM_Start+0x17c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d018      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x136>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <HAL_TIM_PWM_Start+0x180>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x136>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <HAL_TIM_PWM_Start+0x184>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00e      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x136>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a16      	ldr	r2, [pc, #88]	; (8004108 <HAL_TIM_PWM_Start+0x178>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x136>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a18      	ldr	r2, [pc, #96]	; (8004118 <HAL_TIM_PWM_Start+0x188>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x136>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a16      	ldr	r2, [pc, #88]	; (800411c <HAL_TIM_PWM_Start+0x18c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d111      	bne.n	80040ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d010      	beq.n	80040fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	e007      	b.n	80040fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40010000 	.word	0x40010000
 8004108:	40010400 	.word	0x40010400
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40014000 	.word	0x40014000
 800411c:	40001800 	.word	0x40001800

08004120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800413a:	2302      	movs	r3, #2
 800413c:	e0ae      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b0c      	cmp	r3, #12
 800414a:	f200 809f 	bhi.w	800428c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004189 	.word	0x08004189
 8004158:	0800428d 	.word	0x0800428d
 800415c:	0800428d 	.word	0x0800428d
 8004160:	0800428d 	.word	0x0800428d
 8004164:	080041c9 	.word	0x080041c9
 8004168:	0800428d 	.word	0x0800428d
 800416c:	0800428d 	.word	0x0800428d
 8004170:	0800428d 	.word	0x0800428d
 8004174:	0800420b 	.word	0x0800420b
 8004178:	0800428d 	.word	0x0800428d
 800417c:	0800428d 	.word	0x0800428d
 8004180:	0800428d 	.word	0x0800428d
 8004184:	0800424b 	.word	0x0800424b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f928 	bl	80043e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0208 	orr.w	r2, r2, #8
 80041a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0204 	bic.w	r2, r2, #4
 80041b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6999      	ldr	r1, [r3, #24]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	619a      	str	r2, [r3, #24]
      break;
 80041c6:	e064      	b.n	8004292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f978 	bl	80044c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6999      	ldr	r1, [r3, #24]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	021a      	lsls	r2, r3, #8
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	619a      	str	r2, [r3, #24]
      break;
 8004208:	e043      	b.n	8004292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f9cd 	bl	80045b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0208 	orr.w	r2, r2, #8
 8004224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0204 	bic.w	r2, r2, #4
 8004234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69d9      	ldr	r1, [r3, #28]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	61da      	str	r2, [r3, #28]
      break;
 8004248:	e023      	b.n	8004292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fa21 	bl	8004698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69d9      	ldr	r1, [r3, #28]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	021a      	lsls	r2, r3, #8
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	61da      	str	r2, [r3, #28]
      break;
 800428a:	e002      	b.n	8004292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
      break;
 8004290:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800429a:	7dfb      	ldrb	r3, [r7, #23]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a40      	ldr	r2, [pc, #256]	; (80043b8 <TIM_Base_SetConfig+0x114>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <TIM_Base_SetConfig+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c2:	d00f      	beq.n	80042e4 <TIM_Base_SetConfig+0x40>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a3d      	ldr	r2, [pc, #244]	; (80043bc <TIM_Base_SetConfig+0x118>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00b      	beq.n	80042e4 <TIM_Base_SetConfig+0x40>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a3c      	ldr	r2, [pc, #240]	; (80043c0 <TIM_Base_SetConfig+0x11c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d007      	beq.n	80042e4 <TIM_Base_SetConfig+0x40>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a3b      	ldr	r2, [pc, #236]	; (80043c4 <TIM_Base_SetConfig+0x120>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_Base_SetConfig+0x40>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a3a      	ldr	r2, [pc, #232]	; (80043c8 <TIM_Base_SetConfig+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d108      	bne.n	80042f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a2f      	ldr	r2, [pc, #188]	; (80043b8 <TIM_Base_SetConfig+0x114>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d02b      	beq.n	8004356 <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004304:	d027      	beq.n	8004356 <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a2c      	ldr	r2, [pc, #176]	; (80043bc <TIM_Base_SetConfig+0x118>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d023      	beq.n	8004356 <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a2b      	ldr	r2, [pc, #172]	; (80043c0 <TIM_Base_SetConfig+0x11c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d01f      	beq.n	8004356 <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <TIM_Base_SetConfig+0x120>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d01b      	beq.n	8004356 <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <TIM_Base_SetConfig+0x124>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d017      	beq.n	8004356 <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a28      	ldr	r2, [pc, #160]	; (80043cc <TIM_Base_SetConfig+0x128>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <TIM_Base_SetConfig+0x12c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00f      	beq.n	8004356 <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <TIM_Base_SetConfig+0x130>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00b      	beq.n	8004356 <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a25      	ldr	r2, [pc, #148]	; (80043d8 <TIM_Base_SetConfig+0x134>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a24      	ldr	r2, [pc, #144]	; (80043dc <TIM_Base_SetConfig+0x138>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a23      	ldr	r2, [pc, #140]	; (80043e0 <TIM_Base_SetConfig+0x13c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <TIM_Base_SetConfig+0x114>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_Base_SetConfig+0xf8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a0c      	ldr	r2, [pc, #48]	; (80043c8 <TIM_Base_SetConfig+0x124>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d103      	bne.n	80043a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	615a      	str	r2, [r3, #20]
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40010000 	.word	0x40010000
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800
 80043c4:	40000c00 	.word	0x40000c00
 80043c8:	40010400 	.word	0x40010400
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40014400 	.word	0x40014400
 80043d4:	40014800 	.word	0x40014800
 80043d8:	40001800 	.word	0x40001800
 80043dc:	40001c00 	.word	0x40001c00
 80043e0:	40002000 	.word	0x40002000

080043e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f023 0201 	bic.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0303 	bic.w	r3, r3, #3
 800441a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f023 0302 	bic.w	r3, r3, #2
 800442c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a20      	ldr	r2, [pc, #128]	; (80044bc <TIM_OC1_SetConfig+0xd8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_OC1_SetConfig+0x64>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <TIM_OC1_SetConfig+0xdc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d10c      	bne.n	8004462 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0308 	bic.w	r3, r3, #8
 800444e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 0304 	bic.w	r3, r3, #4
 8004460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <TIM_OC1_SetConfig+0xd8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d003      	beq.n	8004472 <TIM_OC1_SetConfig+0x8e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <TIM_OC1_SetConfig+0xdc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d111      	bne.n	8004496 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	621a      	str	r2, [r3, #32]
}
 80044b0:	bf00      	nop
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	40010000 	.word	0x40010000
 80044c0:	40010400 	.word	0x40010400

080044c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f023 0210 	bic.w	r2, r3, #16
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f023 0320 	bic.w	r3, r3, #32
 800450e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a22      	ldr	r2, [pc, #136]	; (80045a8 <TIM_OC2_SetConfig+0xe4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_OC2_SetConfig+0x68>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a21      	ldr	r2, [pc, #132]	; (80045ac <TIM_OC2_SetConfig+0xe8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d10d      	bne.n	8004548 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <TIM_OC2_SetConfig+0xe4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_OC2_SetConfig+0x94>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a16      	ldr	r2, [pc, #88]	; (80045ac <TIM_OC2_SetConfig+0xe8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d113      	bne.n	8004580 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800455e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	621a      	str	r2, [r3, #32]
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40010400 	.word	0x40010400

080045b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a21      	ldr	r2, [pc, #132]	; (8004690 <TIM_OC3_SetConfig+0xe0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d003      	beq.n	8004616 <TIM_OC3_SetConfig+0x66>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a20      	ldr	r2, [pc, #128]	; (8004694 <TIM_OC3_SetConfig+0xe4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d10d      	bne.n	8004632 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800461c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a16      	ldr	r2, [pc, #88]	; (8004690 <TIM_OC3_SetConfig+0xe0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d003      	beq.n	8004642 <TIM_OC3_SetConfig+0x92>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a15      	ldr	r2, [pc, #84]	; (8004694 <TIM_OC3_SetConfig+0xe4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d113      	bne.n	800466a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	621a      	str	r2, [r3, #32]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	40010000 	.word	0x40010000
 8004694:	40010400 	.word	0x40010400

08004698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	031b      	lsls	r3, r3, #12
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a12      	ldr	r2, [pc, #72]	; (800473c <TIM_OC4_SetConfig+0xa4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_OC4_SetConfig+0x68>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a11      	ldr	r2, [pc, #68]	; (8004740 <TIM_OC4_SetConfig+0xa8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d109      	bne.n	8004714 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40010400 	.word	0x40010400

08004744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 031f 	and.w	r3, r3, #31
 8004756:	2201      	movs	r2, #1
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1a      	ldr	r2, [r3, #32]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	43db      	mvns	r3, r3
 8004766:	401a      	ands	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1a      	ldr	r2, [r3, #32]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	fa01 f303 	lsl.w	r3, r1, r3
 800477c:	431a      	orrs	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_TIMEx_PWMN_Start+0x24>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e022      	b.n	80047fa <HAL_TIMEx_PWMN_Start+0x6a>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d109      	bne.n	80047ce <HAL_TIMEx_PWMN_Start+0x3e>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e015      	b.n	80047fa <HAL_TIMEx_PWMN_Start+0x6a>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d109      	bne.n	80047e8 <HAL_TIMEx_PWMN_Start+0x58>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	bf14      	ite	ne
 80047e0:	2301      	movne	r3, #1
 80047e2:	2300      	moveq	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e008      	b.n	80047fa <HAL_TIMEx_PWMN_Start+0x6a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e06d      	b.n	80048de <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d104      	bne.n	8004812 <HAL_TIMEx_PWMN_Start+0x82>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004810:	e013      	b.n	800483a <HAL_TIMEx_PWMN_Start+0xaa>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b04      	cmp	r3, #4
 8004816:	d104      	bne.n	8004822 <HAL_TIMEx_PWMN_Start+0x92>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004820:	e00b      	b.n	800483a <HAL_TIMEx_PWMN_Start+0xaa>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d104      	bne.n	8004832 <HAL_TIMEx_PWMN_Start+0xa2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004830:	e003      	b.n	800483a <HAL_TIMEx_PWMN_Start+0xaa>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2204      	movs	r2, #4
 8004840:	6839      	ldr	r1, [r7, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f92c 	bl	8004aa0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004856:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a22      	ldr	r2, [pc, #136]	; (80048e8 <HAL_TIMEx_PWMN_Start+0x158>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d022      	beq.n	80048a8 <HAL_TIMEx_PWMN_Start+0x118>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486a:	d01d      	beq.n	80048a8 <HAL_TIMEx_PWMN_Start+0x118>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1e      	ldr	r2, [pc, #120]	; (80048ec <HAL_TIMEx_PWMN_Start+0x15c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <HAL_TIMEx_PWMN_Start+0x118>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1d      	ldr	r2, [pc, #116]	; (80048f0 <HAL_TIMEx_PWMN_Start+0x160>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <HAL_TIMEx_PWMN_Start+0x118>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <HAL_TIMEx_PWMN_Start+0x164>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <HAL_TIMEx_PWMN_Start+0x118>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1a      	ldr	r2, [pc, #104]	; (80048f8 <HAL_TIMEx_PWMN_Start+0x168>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <HAL_TIMEx_PWMN_Start+0x118>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a18      	ldr	r2, [pc, #96]	; (80048fc <HAL_TIMEx_PWMN_Start+0x16c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_TIMEx_PWMN_Start+0x118>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <HAL_TIMEx_PWMN_Start+0x170>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d111      	bne.n	80048cc <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b06      	cmp	r3, #6
 80048b8:	d010      	beq.n	80048dc <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0201 	orr.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ca:	e007      	b.n	80048dc <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40010400 	.word	0x40010400
 80048fc:	40014000 	.word	0x40014000
 8004900:	40001800 	.word	0x40001800

08004904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004918:	2302      	movs	r3, #2
 800491a:	e05a      	b.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a21      	ldr	r2, [pc, #132]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d022      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004968:	d01d      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d018      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1b      	ldr	r2, [pc, #108]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1a      	ldr	r2, [pc, #104]	; (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a18      	ldr	r2, [pc, #96]	; (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d009      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d10c      	bne.n	80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40010400 	.word	0x40010400
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40001800 	.word	0x40001800

080049fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e03d      	b.n	8004a94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1a      	ldr	r2, [r3, #32]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	401a      	ands	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f043 0201 	orr.w	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f023 0201 	bic.w	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3301      	adds	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <USB_FlushTxFifo+0x64>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d901      	bls.n	8004b50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e01b      	b.n	8004b88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	daf2      	bge.n	8004b3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	019b      	lsls	r3, r3, #6
 8004b60:	f043 0220 	orr.w	r2, r3, #32
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a08      	ldr	r2, [pc, #32]	; (8004b94 <USB_FlushTxFifo+0x64>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e006      	b.n	8004b88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d0f0      	beq.n	8004b68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	00030d40 	.word	0x00030d40

08004b98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4a11      	ldr	r2, [pc, #68]	; (8004bf4 <USB_FlushRxFifo+0x5c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e018      	b.n	8004be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	daf2      	bge.n	8004ba4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <USB_FlushRxFifo+0x5c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e006      	b.n	8004be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d0f0      	beq.n	8004bc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	00030d40 	.word	0x00030d40

08004bf8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b08b      	sub	sp, #44	; 0x2c
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	089b      	lsrs	r3, r3, #2
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c1e:	2300      	movs	r3, #0
 8004c20:	623b      	str	r3, [r7, #32]
 8004c22:	e014      	b.n	8004c4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	3301      	adds	r3, #1
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	3301      	adds	r3, #1
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	3301      	adds	r3, #1
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	3301      	adds	r3, #1
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	623b      	str	r3, [r7, #32]
 8004c4e:	6a3a      	ldr	r2, [r7, #32]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d3e6      	bcc.n	8004c24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c56:	8bfb      	ldrh	r3, [r7, #30]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01e      	beq.n	8004c9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c66:	461a      	mov	r2, r3
 8004c68:	f107 0310 	add.w	r3, r7, #16
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	701a      	strb	r2, [r3, #0]
      i++;
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	3301      	adds	r3, #1
 8004c86:	623b      	str	r3, [r7, #32]
      pDest++;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004c8e:	8bfb      	ldrh	r3, [r7, #30]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004c94:	8bfb      	ldrh	r3, [r7, #30]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1ea      	bne.n	8004c70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	372c      	adds	r7, #44	; 0x2c
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f003 0301 	and.w	r3, r3, #1
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b085      	sub	sp, #20
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d08:	f023 0303 	bic.w	r3, r3, #3
 8004d0c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d107      	bne.n	8004d3c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d32:	461a      	mov	r2, r3
 8004d34:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d38:	6053      	str	r3, [r2, #4]
 8004d3a:	e009      	b.n	8004d50 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d106      	bne.n	8004d50 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d4e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	b29b      	uxth	r3, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b089      	sub	sp, #36	; 0x24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	0c9b      	lsrs	r3, r3, #18
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	0fdb      	lsrs	r3, r3, #31
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d104      	bne.n	8004dda <USB_HC_Halt+0x5a>
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e0c8      	b.n	8004f6c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <USB_HC_Halt+0x66>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d163      	bne.n	8004eae <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e04:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 80ab 	bne.w	8004f6a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d133      	bne.n	8004e88 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e3e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e5e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e6c:	d81d      	bhi.n	8004eaa <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e84:	d0ec      	beq.n	8004e60 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e86:	e070      	b.n	8004f6a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ea6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ea8:	e05f      	b.n	8004f6a <USB_HC_Halt+0x1ea>
            break;
 8004eaa:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004eac:	e05d      	b.n	8004f6a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	0151      	lsls	r1, r2, #5
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	440a      	add	r2, r1
 8004ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ecc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d133      	bne.n	8004f46 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	0151      	lsls	r1, r2, #5
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	440a      	add	r2, r1
 8004ef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004efc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f1c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f2a:	d81d      	bhi.n	8004f68 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f42:	d0ec      	beq.n	8004f1e <USB_HC_Halt+0x19e>
 8004f44:	e011      	b.n	8004f6a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e000      	b.n	8004f6a <USB_HC_Halt+0x1ea>
          break;
 8004f68:	bf00      	nop
    }
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3724      	adds	r7, #36	; 0x24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff fdbd 	bl	8004b0c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f92:	2110      	movs	r1, #16
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fdcb 	bl	8004b30 <USB_FlushTxFifo>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff fdf7 	bl	8004b98 <USB_FlushRxFifo>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
 8004fb8:	e01f      	b.n	8004ffa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fe0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fee:	461a      	mov	r2, r3
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b0f      	cmp	r3, #15
 8004ffe:	d9dc      	bls.n	8004fba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005000:	2300      	movs	r3, #0
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	e034      	b.n	8005070 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	4413      	add	r3, r2
 800500e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800501c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005024:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800502c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	461a      	mov	r2, r3
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3301      	adds	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800504c:	d80c      	bhi.n	8005068 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	4413      	add	r3, r2
 8005056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005064:	d0ec      	beq.n	8005040 <USB_StopHost+0xc8>
 8005066:	e000      	b.n	800506a <USB_StopHost+0xf2>
        break;
 8005068:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	3301      	adds	r3, #1
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b0f      	cmp	r3, #15
 8005074:	d9c7      	bls.n	8005006 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507c:	461a      	mov	r2, r3
 800507e:	f04f 33ff 	mov.w	r3, #4294967295
 8005082:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f04f 32ff 	mov.w	r2, #4294967295
 800508a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff fd2c 	bl	8004aea <USB_EnableGlobalInt>

  return ret;
 8005092:	7ffb      	ldrb	r3, [r7, #31]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3720      	adds	r7, #32
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f804 	bl	80050c0 <USBH_HandleSof>
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b0b      	cmp	r3, #11
 80050d0:	d10a      	bne.n	80050e8 <USBH_HandleSof+0x28>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
  }
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005100:	bf00      	nop
}
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800511c:	bf00      	nop
}
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f883 	bl	8005282 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	791b      	ldrb	r3, [r3, #4]
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f80b 	bl	800519e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	795b      	ldrb	r3, [r3, #5]
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f805 	bl	800519e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	460b      	mov	r3, r1
 80051a8:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	2b0f      	cmp	r3, #15
 80051ae:	d80d      	bhi.n	80051cc <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	33e0      	adds	r3, #224	; 0xe0
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	33e0      	adds	r3, #224	; 0xe0
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b082      	sub	sp, #8
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff ff57 	bl	800509c <USBH_LL_IncTimer>
}
 80051ee:	bf00      	nop
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff ff8f 	bl	8005128 <USBH_LL_Connect>
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff ff98 	bl	8005156 <USBH_LL_Disconnect>
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	70fb      	strb	r3, [r7, #3]
 800523a:	4613      	mov	r3, r2
 800523c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff49 	bl	80050f0 <USBH_LL_PortEnabled>
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff ff49 	bl	800510c <USBH_LL_PortDisabled>
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005298:	4618      	mov	r0, r3
 800529a:	f7fc f9d9 	bl	8001650 <HAL_HCD_Stop>
 800529e:	4603      	mov	r3, r0
 80052a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 f807 	bl	80052b8 <USBH_Get_USB_Status>
 80052aa:	4603      	mov	r3, r0
 80052ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80052ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d817      	bhi.n	80052fc <USBH_Get_USB_Status+0x44>
 80052cc:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <USBH_Get_USB_Status+0x1c>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	080052e5 	.word	0x080052e5
 80052d8:	080052eb 	.word	0x080052eb
 80052dc:	080052f1 	.word	0x080052f1
 80052e0:	080052f7 	.word	0x080052f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	73fb      	strb	r3, [r7, #15]
    break;
 80052e8:	e00b      	b.n	8005302 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80052ea:	2302      	movs	r3, #2
 80052ec:	73fb      	strb	r3, [r7, #15]
    break;
 80052ee:	e008      	b.n	8005302 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
    break;
 80052f4:	e005      	b.n	8005302 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80052f6:	2302      	movs	r3, #2
 80052f8:	73fb      	strb	r3, [r7, #15]
    break;
 80052fa:	e002      	b.n	8005302 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80052fc:	2302      	movs	r3, #2
 80052fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005300:	bf00      	nop
  }
  return usb_status;
 8005302:	7bfb      	ldrb	r3, [r7, #15]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <__libc_init_array>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	4d0d      	ldr	r5, [pc, #52]	; (8005348 <__libc_init_array+0x38>)
 8005314:	4c0d      	ldr	r4, [pc, #52]	; (800534c <__libc_init_array+0x3c>)
 8005316:	1b64      	subs	r4, r4, r5
 8005318:	10a4      	asrs	r4, r4, #2
 800531a:	2600      	movs	r6, #0
 800531c:	42a6      	cmp	r6, r4
 800531e:	d109      	bne.n	8005334 <__libc_init_array+0x24>
 8005320:	4d0b      	ldr	r5, [pc, #44]	; (8005350 <__libc_init_array+0x40>)
 8005322:	4c0c      	ldr	r4, [pc, #48]	; (8005354 <__libc_init_array+0x44>)
 8005324:	f000 f820 	bl	8005368 <_init>
 8005328:	1b64      	subs	r4, r4, r5
 800532a:	10a4      	asrs	r4, r4, #2
 800532c:	2600      	movs	r6, #0
 800532e:	42a6      	cmp	r6, r4
 8005330:	d105      	bne.n	800533e <__libc_init_array+0x2e>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	f855 3b04 	ldr.w	r3, [r5], #4
 8005338:	4798      	blx	r3
 800533a:	3601      	adds	r6, #1
 800533c:	e7ee      	b.n	800531c <__libc_init_array+0xc>
 800533e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005342:	4798      	blx	r3
 8005344:	3601      	adds	r6, #1
 8005346:	e7f2      	b.n	800532e <__libc_init_array+0x1e>
 8005348:	080053a0 	.word	0x080053a0
 800534c:	080053a0 	.word	0x080053a0
 8005350:	080053a0 	.word	0x080053a0
 8005354:	080053a4 	.word	0x080053a4

08005358 <memset>:
 8005358:	4402      	add	r2, r0
 800535a:	4603      	mov	r3, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	f803 1b01 	strb.w	r1, [r3], #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <_init>:
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536a:	bf00      	nop
 800536c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536e:	bc08      	pop	{r3}
 8005370:	469e      	mov	lr, r3
 8005372:	4770      	bx	lr

08005374 <_fini>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	bf00      	nop
 8005378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537a:	bc08      	pop	{r3}
 800537c:	469e      	mov	lr, r3
 800537e:	4770      	bx	lr
