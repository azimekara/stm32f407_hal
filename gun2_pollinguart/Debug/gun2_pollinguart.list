
gun2_pollinguart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a9c  08005a9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a9c  08005a9c  00015a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aa4  08005aa4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000508  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000578  20000578  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001578a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd0  00000000  00000000  0003582a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00038800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001048  00000000  00000000  00039958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e99  00000000  00000000  0003a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c79  00000000  00000000  0005d839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cca8f  00000000  00000000  000744b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140f41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d2c  00000000  00000000  00140f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a30 	.word	0x08005a30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005a30 	.word	0x08005a30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fca4 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f810 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f936 	bl	80007f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000584:	f000 f876 	bl	8000674 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000588:	f000 f8a2 	bl	80006d0 <MX_I2S3_Init>
  MX_SPI1_Init();
 800058c:	f000 f8d0 	bl	8000730 <MX_SPI1_Init>

  MX_USART2_UART_Init();
 8000590:	f000 f904 	bl	800079c <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  uartt();
 8000594:	f000 fa30 	bl	80009f8 <uartt>
	  uartr();
 8000598:	f000 fa44 	bl	8000a24 <uartr>
	  uartt();
 800059c:	e7fa      	b.n	8000594 <main+0x20>
	...

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fdc8 	bl	8005144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	; (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000610:	2308      	movs	r3, #8
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000614:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061e:	2307      	movs	r3, #7
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fe8c 	bl	8003344 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000632:	f000 f9db 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000642:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	2105      	movs	r1, #5
 8000654:	4618      	mov	r0, r3
 8000656:	f003 f8ed 	bl	8003834 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000660:	f000 f9c4 	bl	80009ec <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	; 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <MX_I2C1_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000680:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_I2C1_Init+0x58>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006b2:	f002 f863 	bl	800277c <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 f996 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000008c 	.word	0x2000008c
 80006c8:	40005400 	.word	0x40005400
 80006cc:	000186a0 	.word	0x000186a0

080006d0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_I2S3_Init+0x54>)
 80006d6:	4a14      	ldr	r2, [pc, #80]	; (8000728 <MX_I2S3_Init+0x58>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_I2S3_Init+0x54>)
 80006dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_I2S3_Init+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_I2S3_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_I2S3_Init+0x54>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_I2S3_Init+0x54>)
 80006f8:	4a0c      	ldr	r2, [pc, #48]	; (800072c <MX_I2S3_Init+0x5c>)
 80006fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_I2S3_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_I2S3_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_I2S3_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_I2S3_Init+0x54>)
 8000710:	f002 f978 	bl	8002a04 <HAL_I2S_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800071a:	f000 f967 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200000e0 	.word	0x200000e0
 8000728:	40003c00 	.word	0x40003c00
 800072c:	00017700 	.word	0x00017700

08000730 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_SPI1_Init+0x64>)
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_SPI1_Init+0x68>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_SPI1_Init+0x64>)
 800073c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000740:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_SPI1_Init+0x64>)
 800075c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000760:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_SPI1_Init+0x64>)
 800077c:	220a      	movs	r2, #10
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_SPI1_Init+0x64>)
 8000782:	f003 fbb7 	bl	8003ef4 <HAL_SPI_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800078c:	f000 f92e 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000128 	.word	0x20000128
 8000798:	40013000 	.word	0x40013000

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_USART2_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007d2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007d6:	f003 fc16 	bl	8004006 <HAL_UART_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80007e0:	f000 f904 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000180 	.word	0x20000180
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b72      	ldr	r3, [pc, #456]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a71      	ldr	r2, [pc, #452]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b6f      	ldr	r3, [pc, #444]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b6b      	ldr	r3, [pc, #428]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a6a      	ldr	r2, [pc, #424]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b68      	ldr	r3, [pc, #416]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b64      	ldr	r3, [pc, #400]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a63      	ldr	r2, [pc, #396]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b61      	ldr	r3, [pc, #388]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b5d      	ldr	r3, [pc, #372]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a5c      	ldr	r2, [pc, #368]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b5a      	ldr	r3, [pc, #360]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b56      	ldr	r3, [pc, #344]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a55      	ldr	r2, [pc, #340]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b53      	ldr	r3, [pc, #332]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a4e      	ldr	r2, [pc, #312]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b4c      	ldr	r3, [pc, #304]	; (80009d4 <MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2108      	movs	r1, #8
 80008b2:	4849      	ldr	r0, [pc, #292]	; (80009d8 <MX_GPIO_Init+0x1e8>)
 80008b4:	f000 fe1e 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2101      	movs	r1, #1
 80008bc:	4847      	ldr	r0, [pc, #284]	; (80009dc <MX_GPIO_Init+0x1ec>)
 80008be:	f000 fe19 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c2:	2200      	movs	r2, #0
 80008c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008c8:	4845      	ldr	r0, [pc, #276]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 80008ca:	f000 fe13 	bl	80014f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ce:	2308      	movs	r3, #8
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	483c      	ldr	r0, [pc, #240]	; (80009d8 <MX_GPIO_Init+0x1e8>)
 80008e6:	f000 fc69 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4836      	ldr	r0, [pc, #216]	; (80009dc <MX_GPIO_Init+0x1ec>)
 8000902:	f000 fc5b 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000916:	2305      	movs	r3, #5
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	482e      	ldr	r0, [pc, #184]	; (80009dc <MX_GPIO_Init+0x1ec>)
 8000922:	f000 fc4b 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	482a      	ldr	r0, [pc, #168]	; (80009e4 <MX_GPIO_Init+0x1f4>)
 800093c:	f000 fc3e 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000940:	2304      	movs	r3, #4
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4825      	ldr	r0, [pc, #148]	; (80009e8 <MX_GPIO_Init+0x1f8>)
 8000954:	f000 fc32 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096a:	2305      	movs	r3, #5
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <MX_GPIO_Init+0x1f8>)
 8000976:	f000 fc21 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800097a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800097e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4813      	ldr	r0, [pc, #76]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 8000994:	f000 fc12 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000998:	2320      	movs	r3, #32
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_GPIO_Init+0x1f0>)
 80009ac:	f000 fc06 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0x1e8>)
 80009c6:	f000 fbf9 	bl	80011bc <HAL_GPIO_Init>

}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	; 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40020800 	.word	0x40020800
 80009e0:	40020c00 	.word	0x40020c00
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <uartt>:
char buffer[100];
char rbuffer[50];
extern UART_HandleTypeDef huart2;

void uartt(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	 HAL_UART_Transmit(&huart2,(uint8_t*)buffer,sprintf(buffer,"Hello\n"),1000);
 80009fc:	4906      	ldr	r1, [pc, #24]	; (8000a18 <uartt+0x20>)
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <uartt+0x24>)
 8000a00:	f004 fc98 	bl	8005334 <siprintf>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0c:	4903      	ldr	r1, [pc, #12]	; (8000a1c <uartt+0x24>)
 8000a0e:	4804      	ldr	r0, [pc, #16]	; (8000a20 <uartt+0x28>)
 8000a10:	f003 fb46 	bl	80040a0 <HAL_UART_Transmit>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	08005a48 	.word	0x08005a48
 8000a1c:	200001c4 	.word	0x200001c4
 8000a20:	20000180 	.word	0x20000180

08000a24 <uartr>:

void uartr(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart2, (uint8_t*)rbuffer, 50, 1000);
 8000a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2c:	2232      	movs	r2, #50	; 0x32
 8000a2e:	490f      	ldr	r1, [pc, #60]	; (8000a6c <uartr+0x48>)
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <uartr+0x4c>)
 8000a32:	f003 fbc7 	bl	80041c4 <HAL_UART_Receive>
	if (rbuffer[0] == 'a')
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <uartr+0x48>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b61      	cmp	r3, #97	; 0x61
 8000a3c:	d10a      	bne.n	8000a54 <uartr+0x30>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <uartr+0x50>)
 8000a46:	f000 fd55 	bl	80014f4 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4e:	f000 faab 	bl	8000fa8 <HAL_Delay>
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_Delay(1000);
	}
}
 8000a52:	e009      	b.n	8000a68 <uartr+0x44>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <uartr+0x50>)
 8000a5c:	f000 fd4a 	bl	80014f4 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a64:	f000 faa0 	bl	8000fa8 <HAL_Delay>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000228 	.word	0x20000228
 8000a70:	20000180 	.word	0x20000180
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab6:	2007      	movs	r0, #7
 8000ab8:	f000 fb4c 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_I2C_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12c      	bne.n	8000b44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0c:	2312      	movs	r3, #18
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	480c      	ldr	r0, [pc, #48]	; (8000b54 <HAL_I2C_MspInit+0x8c>)
 8000b24:	f000 fb4a 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400

08000b58 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	; 0x38
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <HAL_I2S_MspInit+0xf0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d15a      	bne.n	8000c3e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b8c:	23c0      	movs	r3, #192	; 0xc0
 8000b8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 f86b 	bl	8003c74 <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ba4:	f7ff ff22 	bl	80009ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c0c:	2306      	movs	r3, #6
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	480e      	ldr	r0, [pc, #56]	; (8000c50 <HAL_I2S_MspInit+0xf8>)
 8000c18:	f000 fad0 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c1c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c2e:	2306      	movs	r3, #6
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <HAL_I2S_MspInit+0xfc>)
 8000c3a:	f000 fabf 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	; 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40003c00 	.word	0x40003c00
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020800 	.word	0x40020800

08000c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_SPI_MspInit+0x84>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12b      	bne.n	8000cd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cb2:	23e0      	movs	r3, #224	; 0xe0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_SPI_MspInit+0x8c>)
 8000cce:	f000 fa75 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40013000 	.word	0x40013000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_UART_MspInit+0x84>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12b      	bne.n	8000d62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d42:	230c      	movs	r3, #12
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d52:	2307      	movs	r3, #7
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d5e:	f000 fa2d 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40004400 	.word	0x40004400
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f8d0 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <OTG_FS_IRQHandler+0x10>)
 8000dd2:	f000 fba8 	bl	8001526 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000264 	.word	0x20000264

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f004 f96e 	bl	80050f0 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	2000025c 	.word	0x2000025c
 8000e48:	20000578 	.word	0x20000578

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd7 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f004 f92d 	bl	80050fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fb67 	bl	8000574 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eb4:	08005aac 	.word	0x08005aac
  ldr r2, =_sbss
 8000eb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ebc:	20000578 	.word	0x20000578

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f931 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fdbe 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f93b 	bl	80011a2 <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f911 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000260 	.word	0x20000260

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000260 	.word	0x20000260

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff47 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff5c 	bl	8001038 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffb0 	bl	8001110 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e16b      	b.n	80014b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 815a 	bne.w	80014aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d005      	beq.n	800120e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	2b02      	cmp	r3, #2
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b03      	cmp	r3, #3
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d123      	bne.n	8001300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	69b9      	ldr	r1, [r7, #24]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80b4 	beq.w	80014aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b60      	ldr	r3, [pc, #384]	; (80014c8 <HAL_GPIO_Init+0x30c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a5f      	ldr	r2, [pc, #380]	; (80014c8 <HAL_GPIO_Init+0x30c>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <HAL_GPIO_Init+0x30c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135e:	4a5b      	ldr	r2, [pc, #364]	; (80014cc <HAL_GPIO_Init+0x310>)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a52      	ldr	r2, [pc, #328]	; (80014d0 <HAL_GPIO_Init+0x314>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d02b      	beq.n	80013e2 <HAL_GPIO_Init+0x226>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a51      	ldr	r2, [pc, #324]	; (80014d4 <HAL_GPIO_Init+0x318>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x222>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a50      	ldr	r2, [pc, #320]	; (80014d8 <HAL_GPIO_Init+0x31c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x21e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4f      	ldr	r2, [pc, #316]	; (80014dc <HAL_GPIO_Init+0x320>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x21a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4e      	ldr	r2, [pc, #312]	; (80014e0 <HAL_GPIO_Init+0x324>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x216>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4d      	ldr	r2, [pc, #308]	; (80014e4 <HAL_GPIO_Init+0x328>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x212>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4c      	ldr	r2, [pc, #304]	; (80014e8 <HAL_GPIO_Init+0x32c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4b      	ldr	r2, [pc, #300]	; (80014ec <HAL_GPIO_Init+0x330>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x20a>
 80013c2:	2307      	movs	r3, #7
 80013c4:	e00e      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013c6:	2308      	movs	r3, #8
 80013c8:	e00c      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013ca:	2306      	movs	r3, #6
 80013cc:	e00a      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013ce:	2305      	movs	r3, #5
 80013d0:	e008      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013d2:	2304      	movs	r3, #4
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013e2:	2300      	movs	r3, #0
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f4:	4935      	ldr	r1, [pc, #212]	; (80014cc <HAL_GPIO_Init+0x310>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001426:	4a32      	ldr	r2, [pc, #200]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <HAL_GPIO_Init+0x334>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800147a:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_GPIO_Init+0x334>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <HAL_GPIO_Init+0x334>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	f67f ae90 	bls.w	80011d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40013800 	.word	0x40013800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40021400 	.word	0x40021400
 80014e8:	40021800 	.word	0x40021800
 80014ec:	40021c00 	.word	0x40021c00
 80014f0:	40013c00 	.word	0x40013c00

080014f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
 8001500:	4613      	mov	r3, r2
 8001502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001510:	e003      	b.n	800151a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	041a      	lsls	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fab6 	bl	8004aae <USB_GetMode>
 8001542:	4603      	mov	r3, r0
 8001544:	2b01      	cmp	r3, #1
 8001546:	f040 80f6 	bne.w	8001736 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fa9a 	bl	8004a88 <USB_ReadInterrupts>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80ec 	beq.w	8001734 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fa91 	bl	8004a88 <USB_ReadInterrupts>
 8001566:	4603      	mov	r3, r0
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001570:	d104      	bne.n	800157c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800157a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f003 fa81 	bl	8004a88 <USB_ReadInterrupts>
 8001586:	4603      	mov	r3, r0
 8001588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001590:	d104      	bne.n	800159c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800159a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fa71 	bl	8004a88 <USB_ReadInterrupts>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015b0:	d104      	bne.n	80015bc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015ba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fa61 	bl	8004a88 <USB_ReadInterrupts>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d103      	bne.n	80015d8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2202      	movs	r2, #2
 80015d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 fa53 	bl	8004a88 <USB_ReadInterrupts>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015ec:	d11c      	bne.n	8001628 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015f6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10f      	bne.n	8001628 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001608:	2110      	movs	r1, #16
 800160a:	6938      	ldr	r0, [r7, #16]
 800160c:	f003 f980 	bl	8004910 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001610:	6938      	ldr	r0, [r7, #16]
 8001612:	f003 f9b1 	bl	8004978 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2101      	movs	r1, #1
 800161c:	4618      	mov	r0, r3
 800161e:	f003 fa54 	bl	8004aca <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f003 fce5 	bl	8004ff2 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fa2b 	bl	8004a88 <USB_ReadInterrupts>
 8001632:	4603      	mov	r3, r0
 8001634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800163c:	d102      	bne.n	8001644 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f001 f829 	bl	8002696 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f003 fa1d 	bl	8004a88 <USB_ReadInterrupts>
 800164e:	4603      	mov	r3, r0
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b08      	cmp	r3, #8
 8001656:	d106      	bne.n	8001666 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f003 fcae 	bl	8004fba <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2208      	movs	r2, #8
 8001664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fa0c 	bl	8004a88 <USB_ReadInterrupts>
 8001670:	4603      	mov	r3, r0
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b10      	cmp	r3, #16
 8001678:	d101      	bne.n	800167e <HAL_HCD_IRQHandler+0x158>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_HCD_IRQHandler+0x15a>
 800167e:	2300      	movs	r3, #0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d012      	beq.n	80016aa <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699a      	ldr	r2, [r3, #24]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0210 	bic.w	r2, r2, #16
 8001692:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 ff2c 	bl	80024f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0210 	orr.w	r2, r2, #16
 80016a8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 f9ea 	bl	8004a88 <USB_ReadInterrupts>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016be:	d13a      	bne.n	8001736 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fa3a 	bl	8004b3e <USB_HC_ReadInterrupt>
 80016ca:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e025      	b.n	800171e <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d018      	beq.n	8001718 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	015a      	lsls	r2, r3, #5
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016fc:	d106      	bne.n	800170c <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4619      	mov	r1, r3
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f836 	bl	8001776 <HCD_HC_IN_IRQHandler>
 800170a:	e005      	b.n	8001718 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4619      	mov	r1, r3
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fb84 	bl	8001e20 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	429a      	cmp	r2, r3
 8001726:	d3d4      	bcc.n	80016d2 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001730:	615a      	str	r2, [r3, #20]
 8001732:	e000      	b.n	8001736 <HAL_HCD_IRQHandler+0x210>
      return;
 8001734:	bf00      	nop
    }
  }
}
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_HCD_Stop+0x16>
 800174e:	2302      	movs	r3, #2
 8001750:	e00d      	b.n	800176e <HAL_HCD_Stop+0x32>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fafa 	bl	8004d58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	015a      	lsls	r2, r3, #5
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4413      	add	r3, r2
 8001798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d11a      	bne.n	80017dc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b2:	461a      	mov	r2, r3
 80017b4:	2304      	movs	r3, #4
 80017b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	3361      	adds	r3, #97	; 0x61
 80017c6:	2206      	movs	r2, #6
 80017c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 f9c3 	bl	8004b60 <USB_HC_Halt>
 80017da:	e0af      	b.n	800193c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	015a      	lsls	r2, r3, #5
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f2:	d11b      	bne.n	800182c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	015a      	lsls	r2, r3, #5
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001800:	461a      	mov	r2, r3
 8001802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001806:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	212c      	movs	r1, #44	; 0x2c
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	3361      	adds	r3, #97	; 0x61
 8001816:	2207      	movs	r2, #7
 8001818:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f003 f99b 	bl	8004b60 <USB_HC_Halt>
 800182a:	e087      	b.n	800193c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	015a      	lsls	r2, r3, #5
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4413      	add	r3, r2
 8001834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	2b20      	cmp	r3, #32
 8001840:	d109      	bne.n	8001856 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4413      	add	r3, r2
 800184a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184e:	461a      	mov	r2, r3
 8001850:	2320      	movs	r3, #32
 8001852:	6093      	str	r3, [r2, #8]
 8001854:	e072      	b.n	800193c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	015a      	lsls	r2, r3, #5
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4413      	add	r3, r2
 800185e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b08      	cmp	r3, #8
 800186a:	d11a      	bne.n	80018a2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	015a      	lsls	r2, r3, #5
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4413      	add	r3, r2
 8001874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001878:	461a      	mov	r2, r3
 800187a:	2308      	movs	r3, #8
 800187c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3361      	adds	r3, #97	; 0x61
 800188c:	2205      	movs	r2, #5
 800188e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f003 f960 	bl	8004b60 <USB_HC_Halt>
 80018a0:	e04c      	b.n	800193c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	015a      	lsls	r2, r3, #5
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4413      	add	r3, r2
 80018aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b8:	d11b      	bne.n	80018f2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	015a      	lsls	r2, r3, #5
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c6:	461a      	mov	r2, r3
 80018c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	212c      	movs	r1, #44	; 0x2c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	3361      	adds	r3, #97	; 0x61
 80018dc:	2208      	movs	r2, #8
 80018de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 f938 	bl	8004b60 <USB_HC_Halt>
 80018f0:	e024      	b.n	800193c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	015a      	lsls	r2, r3, #5
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001904:	2b80      	cmp	r3, #128	; 0x80
 8001906:	d119      	bne.n	800193c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4413      	add	r3, r2
 8001910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001914:	461a      	mov	r2, r3
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	212c      	movs	r1, #44	; 0x2c
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
 8001926:	3361      	adds	r3, #97	; 0x61
 8001928:	2206      	movs	r2, #6
 800192a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f003 f912 	bl	8004b60 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	015a      	lsls	r2, r3, #5
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4413      	add	r3, r2
 8001944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800194e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001952:	d112      	bne.n	800197a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f003 f8fe 	bl	8004b60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4413      	add	r3, r2
 800196c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001970:	461a      	mov	r2, r3
 8001972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001976:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001978:	e24e      	b.n	8001e18 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4413      	add	r3, r2
 8001982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	f040 80df 	bne.w	8001b50 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d019      	beq.n	80019ce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	212c      	movs	r1, #44	; 0x2c
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	3348      	adds	r3, #72	; 0x48
 80019a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	0159      	lsls	r1, r3, #5
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	440b      	add	r3, r1
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80019bc:	1ad2      	subs	r2, r2, r3
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	202c      	movs	r0, #44	; 0x2c
 80019c4:	fb00 f303 	mul.w	r3, r0, r3
 80019c8:	440b      	add	r3, r1
 80019ca:	3350      	adds	r3, #80	; 0x50
 80019cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	3361      	adds	r3, #97	; 0x61
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	335c      	adds	r3, #92	; 0x5c
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fe:	461a      	mov	r2, r3
 8001a00:	2301      	movs	r3, #1
 8001a02:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	212c      	movs	r1, #44	; 0x2c
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	333f      	adds	r3, #63	; 0x3f
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d009      	beq.n	8001a2c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	333f      	adds	r3, #63	; 0x3f
 8001a26:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d111      	bne.n	8001a50 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f892 	bl	8004b60 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	015a      	lsls	r2, r3, #5
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2310      	movs	r3, #16
 8001a4c:	6093      	str	r3, [r2, #8]
 8001a4e:	e03a      	b.n	8001ac6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	333f      	adds	r3, #63	; 0x3f
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d009      	beq.n	8001a78 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	333f      	adds	r3, #63	; 0x3f
 8001a72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d126      	bne.n	8001ac6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	0151      	lsls	r1, r2, #5
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	440a      	add	r2, r1
 8001a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a96:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	212c      	movs	r1, #44	; 0x2c
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3360      	adds	r3, #96	; 0x60
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	b2d9      	uxtb	r1, r3
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	202c      	movs	r0, #44	; 0x2c
 8001ab4:	fb00 f303 	mul.w	r3, r0, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3360      	adds	r3, #96	; 0x60
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f003 faa4 	bl	800500e <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d12b      	bne.n	8001b26 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3348      	adds	r3, #72	; 0x48
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	202c      	movs	r0, #44	; 0x2c
 8001ae4:	fb00 f202 	mul.w	r2, r0, r2
 8001ae8:	440a      	add	r2, r1
 8001aea:	3240      	adds	r2, #64	; 0x40
 8001aec:	8812      	ldrh	r2, [r2, #0]
 8001aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 818e 	beq.w	8001e18 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	3354      	adds	r3, #84	; 0x54
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	f083 0301 	eor.w	r3, r3, #1
 8001b10:	b2d8      	uxtb	r0, r3
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	212c      	movs	r1, #44	; 0x2c
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3354      	adds	r3, #84	; 0x54
 8001b20:	4602      	mov	r2, r0
 8001b22:	701a      	strb	r2, [r3, #0]
}
 8001b24:	e178      	b.n	8001e18 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	3354      	adds	r3, #84	; 0x54
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	f083 0301 	eor.w	r3, r3, #1
 8001b3a:	b2d8      	uxtb	r0, r3
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3354      	adds	r3, #84	; 0x54
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	701a      	strb	r2, [r3, #0]
}
 8001b4e:	e163      	b.n	8001e18 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	f040 80f6 	bne.w	8001d54 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	212c      	movs	r1, #44	; 0x2c
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	3361      	adds	r3, #97	; 0x61
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d109      	bne.n	8001b90 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	212c      	movs	r1, #44	; 0x2c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	3360      	adds	r3, #96	; 0x60
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e0c9      	b.n	8001d24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	212c      	movs	r1, #44	; 0x2c
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3361      	adds	r3, #97	; 0x61
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d109      	bne.n	8001bb8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	3360      	adds	r3, #96	; 0x60
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e0b5      	b.n	8001d24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3361      	adds	r3, #97	; 0x61
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b06      	cmp	r3, #6
 8001bca:	d009      	beq.n	8001be0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	212c      	movs	r1, #44	; 0x2c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3361      	adds	r3, #97	; 0x61
 8001bda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d150      	bne.n	8001c82 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	212c      	movs	r1, #44	; 0x2c
 8001be6:	fb01 f303 	mul.w	r3, r1, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	335c      	adds	r3, #92	; 0x5c
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	202c      	movs	r0, #44	; 0x2c
 8001bf8:	fb00 f303 	mul.w	r3, r0, r3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	335c      	adds	r3, #92	; 0x5c
 8001c00:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	212c      	movs	r1, #44	; 0x2c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	335c      	adds	r3, #92	; 0x5c
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d912      	bls.n	8001c3c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	335c      	adds	r3, #92	; 0x5c
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	212c      	movs	r1, #44	; 0x2c
 8001c2e:	fb01 f303 	mul.w	r3, r1, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	3360      	adds	r3, #96	; 0x60
 8001c36:	2204      	movs	r2, #4
 8001c38:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c3a:	e073      	b.n	8001d24 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	212c      	movs	r1, #44	; 0x2c
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	3360      	adds	r3, #96	; 0x60
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c64:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c6c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c80:	e050      	b.n	8001d24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	212c      	movs	r1, #44	; 0x2c
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3361      	adds	r3, #97	; 0x61
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d122      	bne.n	8001cdc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	212c      	movs	r1, #44	; 0x2c
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3360      	adds	r3, #96	; 0x60
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cbe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cc6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e023      	b.n	8001d24 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3361      	adds	r3, #97	; 0x61
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b07      	cmp	r3, #7
 8001cee:	d119      	bne.n	8001d24 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	335c      	adds	r3, #92	; 0x5c
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	202c      	movs	r0, #44	; 0x2c
 8001d08:	fb00 f303 	mul.w	r3, r0, r3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	335c      	adds	r3, #92	; 0x5c
 8001d10:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	212c      	movs	r1, #44	; 0x2c
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3360      	adds	r3, #96	; 0x60
 8001d20:	2204      	movs	r2, #4
 8001d22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d30:	461a      	mov	r2, r3
 8001d32:	2302      	movs	r3, #2
 8001d34:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	b2d9      	uxtb	r1, r3
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	202c      	movs	r0, #44	; 0x2c
 8001d40:	fb00 f303 	mul.w	r3, r0, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	3360      	adds	r3, #96	; 0x60
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f003 f95e 	bl	800500e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001d52:	e061      	b.n	8001e18 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d156      	bne.n	8001e18 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	212c      	movs	r1, #44	; 0x2c
 8001d70:	fb01 f303 	mul.w	r3, r1, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	333f      	adds	r3, #63	; 0x3f
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d111      	bne.n	8001da2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	335c      	adds	r3, #92	; 0x5c
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fee0 	bl	8004b60 <USB_HC_Halt>
 8001da0:	e031      	b.n	8001e06 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	333f      	adds	r3, #63	; 0x3f
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	333f      	adds	r3, #63	; 0x3f
 8001dc4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d11d      	bne.n	8001e06 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	335c      	adds	r3, #92	; 0x5c
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d110      	bne.n	8001e06 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	212c      	movs	r1, #44	; 0x2c
 8001dea:	fb01 f303 	mul.w	r3, r1, r3
 8001dee:	4413      	add	r3, r2
 8001df0:	3361      	adds	r3, #97	; 0x61
 8001df2:	2203      	movs	r2, #3
 8001df4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 fead 	bl	8004b60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	461a      	mov	r2, r3
 8001e14:	2310      	movs	r3, #16
 8001e16:	6093      	str	r3, [r2, #8]
}
 8001e18:	bf00      	nop
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d11a      	bne.n	8001e86 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2304      	movs	r3, #4
 8001e60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3361      	adds	r3, #97	; 0x61
 8001e70:	2206      	movs	r2, #6
 8001e72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 fe6e 	bl	8004b60 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001e84:	e331      	b.n	80024ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d12e      	bne.n	8001efa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2320      	movs	r3, #32
 8001eac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	212c      	movs	r1, #44	; 0x2c
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	333d      	adds	r3, #61	; 0x3d
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	f040 8313 	bne.w	80024ea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	333d      	adds	r3, #61	; 0x3d
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	212c      	movs	r1, #44	; 0x2c
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3360      	adds	r3, #96	; 0x60
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 fe34 	bl	8004b60 <USB_HC_Halt>
}
 8001ef8:	e2f7      	b.n	80024ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f10:	d112      	bne.n	8001f38 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f24:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f002 fe15 	bl	8004b60 <USB_HC_Halt>
}
 8001f36:	e2d8      	b.n	80024ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d140      	bne.n	8001fd0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	212c      	movs	r1, #44	; 0x2c
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	335c      	adds	r3, #92	; 0x5c
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b40      	cmp	r3, #64	; 0x40
 8001f74:	d111      	bne.n	8001f9a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	333d      	adds	r3, #61	; 0x3d
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	2340      	movs	r3, #64	; 0x40
 8001f98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2301      	movs	r3, #1
 8001faa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3361      	adds	r3, #97	; 0x61
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 fdc9 	bl	8004b60 <USB_HC_Halt>
}
 8001fce:	e28c      	b.n	80024ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	2b40      	cmp	r3, #64	; 0x40
 8001fe4:	d12c      	bne.n	8002040 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	212c      	movs	r1, #44	; 0x2c
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3361      	adds	r3, #97	; 0x61
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	333d      	adds	r3, #61	; 0x3d
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	335c      	adds	r3, #92	; 0x5c
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fd9a 	bl	8004b60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	461a      	mov	r2, r3
 800203a:	2340      	movs	r3, #64	; 0x40
 800203c:	6093      	str	r3, [r2, #8]
}
 800203e:	e254      	b.n	80024ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b08      	cmp	r3, #8
 8002054:	d11a      	bne.n	800208c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	461a      	mov	r2, r3
 8002064:	2308      	movs	r3, #8
 8002066:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	212c      	movs	r1, #44	; 0x2c
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	4413      	add	r3, r2
 8002074:	3361      	adds	r3, #97	; 0x61
 8002076:	2205      	movs	r2, #5
 8002078:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f002 fd6b 	bl	8004b60 <USB_HC_Halt>
}
 800208a:	e22e      	b.n	80024ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d140      	bne.n	8002124 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	335c      	adds	r3, #92	; 0x5c
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3361      	adds	r3, #97	; 0x61
 80020c2:	2203      	movs	r2, #3
 80020c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	333d      	adds	r3, #61	; 0x3d
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d112      	bne.n	8002100 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	333c      	adds	r3, #60	; 0x3c
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d108      	bne.n	8002100 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	333d      	adds	r3, #61	; 0x3d
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f002 fd28 	bl	8004b60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211c:	461a      	mov	r2, r3
 800211e:	2310      	movs	r3, #16
 8002120:	6093      	str	r3, [r2, #8]
}
 8002122:	e1e2      	b.n	80024ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	2b80      	cmp	r3, #128	; 0x80
 8002138:	d164      	bne.n	8002204 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d111      	bne.n	8002166 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	212c      	movs	r1, #44	; 0x2c
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3361      	adds	r3, #97	; 0x61
 8002150:	2206      	movs	r2, #6
 8002152:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f002 fcfe 	bl	8004b60 <USB_HC_Halt>
 8002164:	e044      	b.n	80021f0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	335c      	adds	r3, #92	; 0x5c
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	202c      	movs	r0, #44	; 0x2c
 800217e:	fb00 f303 	mul.w	r3, r0, r3
 8002182:	440b      	add	r3, r1
 8002184:	335c      	adds	r3, #92	; 0x5c
 8002186:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	335c      	adds	r3, #92	; 0x5c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d920      	bls.n	80021de <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	335c      	adds	r3, #92	; 0x5c
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3360      	adds	r3, #96	; 0x60
 80021bc:	2204      	movs	r2, #4
 80021be:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	b2d9      	uxtb	r1, r3
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	202c      	movs	r0, #44	; 0x2c
 80021ca:	fb00 f303 	mul.w	r3, r0, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3360      	adds	r3, #96	; 0x60
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f002 ff19 	bl	800500e <HAL_HCD_HC_NotifyURBChange_Callback>
 80021dc:	e008      	b.n	80021f0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3360      	adds	r3, #96	; 0x60
 80021ec:	2202      	movs	r2, #2
 80021ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	461a      	mov	r2, r3
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	6093      	str	r3, [r2, #8]
}
 8002202:	e172      	b.n	80024ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d11b      	bne.n	8002254 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3361      	adds	r3, #97	; 0x61
 800222a:	2208      	movs	r2, #8
 800222c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f002 fc91 	bl	8004b60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	461a      	mov	r2, r3
 800224c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002250:	6093      	str	r3, [r2, #8]
}
 8002252:	e14a      	b.n	80024ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b02      	cmp	r3, #2
 8002268:	f040 813f 	bne.w	80024ea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3361      	adds	r3, #97	; 0x61
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d17d      	bne.n	800237c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3360      	adds	r3, #96	; 0x60
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	333f      	adds	r3, #63	; 0x3f
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d00a      	beq.n	80022bc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	333f      	adds	r3, #63	; 0x3f
 80022b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	f040 8100 	bne.w	80024bc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d113      	bne.n	80022ec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3355      	adds	r3, #85	; 0x55
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	f083 0301 	eor.w	r3, r3, #1
 80022d8:	b2d8      	uxtb	r0, r3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3355      	adds	r3, #85	; 0x55
 80022e8:	4602      	mov	r2, r0
 80022ea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	f040 80e3 	bne.w	80024bc <HCD_HC_OUT_IRQHandler+0x69c>
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	334c      	adds	r3, #76	; 0x4c
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80d8 	beq.w	80024bc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	334c      	adds	r3, #76	; 0x4c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	202c      	movs	r0, #44	; 0x2c
 8002322:	fb00 f202 	mul.w	r2, r0, r2
 8002326:	440a      	add	r2, r1
 8002328:	3240      	adds	r2, #64	; 0x40
 800232a:	8812      	ldrh	r2, [r2, #0]
 800232c:	4413      	add	r3, r2
 800232e:	3b01      	subs	r3, #1
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	202c      	movs	r0, #44	; 0x2c
 8002336:	fb00 f202 	mul.w	r2, r0, r2
 800233a:	440a      	add	r2, r1
 800233c:	3240      	adds	r2, #64	; 0x40
 800233e:	8812      	ldrh	r2, [r2, #0]
 8002340:	fbb3 f3f2 	udiv	r3, r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80b5 	beq.w	80024bc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	212c      	movs	r1, #44	; 0x2c
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	4413      	add	r3, r2
 800235e:	3355      	adds	r3, #85	; 0x55
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	f083 0301 	eor.w	r3, r3, #1
 8002366:	b2d8      	uxtb	r0, r3
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3355      	adds	r3, #85	; 0x55
 8002376:	4602      	mov	r2, r0
 8002378:	701a      	strb	r2, [r3, #0]
 800237a:	e09f      	b.n	80024bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3361      	adds	r3, #97	; 0x61
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d109      	bne.n	80023a4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3360      	adds	r3, #96	; 0x60
 800239e:	2202      	movs	r2, #2
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	e08b      	b.n	80024bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3361      	adds	r3, #97	; 0x61
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d109      	bne.n	80023cc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3360      	adds	r3, #96	; 0x60
 80023c6:	2202      	movs	r2, #2
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e077      	b.n	80024bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3361      	adds	r3, #97	; 0x61
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d109      	bne.n	80023f4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	3360      	adds	r3, #96	; 0x60
 80023ee:	2205      	movs	r2, #5
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e063      	b.n	80024bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3361      	adds	r3, #97	; 0x61
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b06      	cmp	r3, #6
 8002406:	d009      	beq.n	800241c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	3361      	adds	r3, #97	; 0x61
 8002416:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002418:	2b08      	cmp	r3, #8
 800241a:	d14f      	bne.n	80024bc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	335c      	adds	r3, #92	; 0x5c
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	202c      	movs	r0, #44	; 0x2c
 8002434:	fb00 f303 	mul.w	r3, r0, r3
 8002438:	440b      	add	r3, r1
 800243a:	335c      	adds	r3, #92	; 0x5c
 800243c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	335c      	adds	r3, #92	; 0x5c
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d912      	bls.n	8002478 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	335c      	adds	r3, #92	; 0x5c
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3360      	adds	r3, #96	; 0x60
 8002472:	2204      	movs	r2, #4
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	e021      	b.n	80024bc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3360      	adds	r3, #96	; 0x60
 8002486:	2202      	movs	r2, #2
 8002488:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024a0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024a8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	461a      	mov	r2, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	461a      	mov	r2, r3
 80024ca:	2302      	movs	r3, #2
 80024cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	b2d9      	uxtb	r1, r3
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	202c      	movs	r0, #44	; 0x2c
 80024d8:	fb00 f303 	mul.w	r3, r0, r3
 80024dc:	4413      	add	r3, r2
 80024de:	3360      	adds	r3, #96	; 0x60
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f002 fd92 	bl	800500e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024ea:	bf00      	nop
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b08a      	sub	sp, #40	; 0x28
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	0c5b      	lsrs	r3, r3, #17
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002526:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d004      	beq.n	8002538 <HCD_RXQLVL_IRQHandler+0x46>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b05      	cmp	r3, #5
 8002532:	f000 80a9 	beq.w	8002688 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002536:	e0aa      	b.n	800268e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80a6 	beq.w	800268c <HCD_RXQLVL_IRQHandler+0x19a>
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	3344      	adds	r3, #68	; 0x44
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 809b 	beq.w	800268c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	3350      	adds	r3, #80	; 0x50
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	441a      	add	r2, r3
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	202c      	movs	r0, #44	; 0x2c
 8002570:	fb00 f303 	mul.w	r3, r0, r3
 8002574:	440b      	add	r3, r1
 8002576:	334c      	adds	r3, #76	; 0x4c
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d87a      	bhi.n	8002674 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3344      	adds	r3, #68	; 0x44
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	b292      	uxth	r2, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f002 fa1e 	bl	80049d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	212c      	movs	r1, #44	; 0x2c
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	3344      	adds	r3, #68	; 0x44
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	441a      	add	r2, r3
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	202c      	movs	r0, #44	; 0x2c
 80025b6:	fb00 f303 	mul.w	r3, r0, r3
 80025ba:	440b      	add	r3, r1
 80025bc:	3344      	adds	r3, #68	; 0x44
 80025be:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3350      	adds	r3, #80	; 0x50
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	441a      	add	r2, r3
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	202c      	movs	r0, #44	; 0x2c
 80025da:	fb00 f303 	mul.w	r3, r0, r3
 80025de:	440b      	add	r3, r1
 80025e0:	3350      	adds	r3, #80	; 0x50
 80025e2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	0cdb      	lsrs	r3, r3, #19
 80025f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3340      	adds	r3, #64	; 0x40
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4293      	cmp	r3, r2
 8002610:	d13c      	bne.n	800268c <HCD_RXQLVL_IRQHandler+0x19a>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d039      	beq.n	800268c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800262e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002636:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	3354      	adds	r3, #84	; 0x54
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	f083 0301 	eor.w	r3, r3, #1
 800265e:	b2d8      	uxtb	r0, r3
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3354      	adds	r3, #84	; 0x54
 800266e:	4602      	mov	r2, r0
 8002670:	701a      	strb	r2, [r3, #0]
      break;
 8002672:	e00b      	b.n	800268c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	3360      	adds	r3, #96	; 0x60
 8002682:	2204      	movs	r2, #4
 8002684:	701a      	strb	r2, [r3, #0]
      break;
 8002686:	e001      	b.n	800268c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002688:	bf00      	nop
 800268a:	e000      	b.n	800268e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800268c:	bf00      	nop
  }
}
 800268e:	bf00      	nop
 8002690:	3728      	adds	r7, #40	; 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026c2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d10b      	bne.n	80026e6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d102      	bne.n	80026de <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f002 fc7c 	bl	8004fd6 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d132      	bne.n	8002756 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f043 0308 	orr.w	r3, r3, #8
 80026f6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d126      	bne.n	8002750 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d113      	bne.n	8002732 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002710:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002714:	d106      	bne.n	8002724 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2102      	movs	r1, #2
 800271c:	4618      	mov	r0, r3
 800271e:	f002 f9d4 	bl	8004aca <USB_InitFSLSPClkSel>
 8002722:	e011      	b.n	8002748 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	4618      	mov	r0, r3
 800272c:	f002 f9cd 	bl	8004aca <USB_InitFSLSPClkSel>
 8002730:	e00a      	b.n	8002748 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d106      	bne.n	8002748 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002740:	461a      	mov	r2, r3
 8002742:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002746:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f002 fc6e 	bl	800502a <HAL_HCD_PortEnabled_Callback>
 800274e:	e002      	b.n	8002756 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f002 fc78 	bl	8005046 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b20      	cmp	r3, #32
 800275e:	d103      	bne.n	8002768 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f043 0320 	orr.w	r3, r3, #32
 8002766:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800276e:	461a      	mov	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e12b      	b.n	80029e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe f990 	bl	8000ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2224      	movs	r2, #36	; 0x24
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027e0:	f001 fa20 	bl	8003c24 <HAL_RCC_GetPCLK1Freq>
 80027e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4a81      	ldr	r2, [pc, #516]	; (80029f0 <HAL_I2C_Init+0x274>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d807      	bhi.n	8002800 <HAL_I2C_Init+0x84>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4a80      	ldr	r2, [pc, #512]	; (80029f4 <HAL_I2C_Init+0x278>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	bf94      	ite	ls
 80027f8:	2301      	movls	r3, #1
 80027fa:	2300      	movhi	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e006      	b.n	800280e <HAL_I2C_Init+0x92>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4a7d      	ldr	r2, [pc, #500]	; (80029f8 <HAL_I2C_Init+0x27c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	bf94      	ite	ls
 8002808:	2301      	movls	r3, #1
 800280a:	2300      	movhi	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0e7      	b.n	80029e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4a78      	ldr	r2, [pc, #480]	; (80029fc <HAL_I2C_Init+0x280>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0c9b      	lsrs	r3, r3, #18
 8002820:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	430a      	orrs	r2, r1
 8002834:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a6a      	ldr	r2, [pc, #424]	; (80029f0 <HAL_I2C_Init+0x274>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d802      	bhi.n	8002850 <HAL_I2C_Init+0xd4>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3301      	adds	r3, #1
 800284e:	e009      	b.n	8002864 <HAL_I2C_Init+0xe8>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	4a69      	ldr	r2, [pc, #420]	; (8002a00 <HAL_I2C_Init+0x284>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	3301      	adds	r3, #1
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	430b      	orrs	r3, r1
 800286a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002876:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	495c      	ldr	r1, [pc, #368]	; (80029f0 <HAL_I2C_Init+0x274>)
 8002880:	428b      	cmp	r3, r1
 8002882:	d819      	bhi.n	80028b8 <HAL_I2C_Init+0x13c>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e59      	subs	r1, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002892:	1c59      	adds	r1, r3, #1
 8002894:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002898:	400b      	ands	r3, r1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_I2C_Init+0x138>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1e59      	subs	r1, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b2:	e051      	b.n	8002958 <HAL_I2C_Init+0x1dc>
 80028b4:	2304      	movs	r3, #4
 80028b6:	e04f      	b.n	8002958 <HAL_I2C_Init+0x1dc>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d111      	bne.n	80028e4 <HAL_I2C_Init+0x168>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e58      	subs	r0, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	440b      	add	r3, r1
 80028ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d2:	3301      	adds	r3, #1
 80028d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e012      	b.n	800290a <HAL_I2C_Init+0x18e>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e58      	subs	r0, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	0099      	lsls	r1, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_I2C_Init+0x196>
 800290e:	2301      	movs	r3, #1
 8002910:	e022      	b.n	8002958 <HAL_I2C_Init+0x1dc>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10e      	bne.n	8002938 <HAL_I2C_Init+0x1bc>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1e58      	subs	r0, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6859      	ldr	r1, [r3, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	440b      	add	r3, r1
 8002928:	fbb0 f3f3 	udiv	r3, r0, r3
 800292c:	3301      	adds	r3, #1
 800292e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002936:	e00f      	b.n	8002958 <HAL_I2C_Init+0x1dc>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e58      	subs	r0, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	0099      	lsls	r1, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	fbb0 f3f3 	udiv	r3, r0, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	6809      	ldr	r1, [r1, #0]
 800295c:	4313      	orrs	r3, r2
 800295e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002986:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6911      	ldr	r1, [r2, #16]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68d2      	ldr	r2, [r2, #12]
 8002992:	4311      	orrs	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	430b      	orrs	r3, r1
 800299a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	000186a0 	.word	0x000186a0
 80029f4:	001e847f 	.word	0x001e847f
 80029f8:	003d08ff 	.word	0x003d08ff
 80029fc:	431bde83 	.word	0x431bde83
 8002a00:	10624dd3 	.word	0x10624dd3

08002a04 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e128      	b.n	8002c68 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a90      	ldr	r2, [pc, #576]	; (8002c70 <HAL_I2S_Init+0x26c>)
 8002a2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fe f891 	bl	8000b58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a4c:	f023 030f 	bic.w	r3, r3, #15
 8002a50:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2202      	movs	r2, #2
 8002a58:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d060      	beq.n	8002b24 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e001      	b.n	8002a74 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d802      	bhi.n	8002a82 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002a82:	2001      	movs	r0, #1
 8002a84:	f001 f9d8 	bl	8003e38 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a88:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a92:	d125      	bne.n	8002ae0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	461a      	mov	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	3305      	adds	r3, #5
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e01f      	b.n	8002afe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	3305      	adds	r3, #5
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	e00e      	b.n	8002afe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	461a      	mov	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	3305      	adds	r3, #5
 8002afc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4a5c      	ldr	r2, [pc, #368]	; (8002c74 <HAL_I2S_Init+0x270>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	08db      	lsrs	r3, r3, #3
 8002b08:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e003      	b.n	8002b2c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b24:	2302      	movs	r3, #2
 8002b26:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d902      	bls.n	8002b38 <HAL_I2S_Init+0x134>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2bff      	cmp	r3, #255	; 0xff
 8002b36:	d907      	bls.n	8002b48 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f043 0210 	orr.w	r2, r3, #16
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e08f      	b.n	8002c68 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	ea42 0103 	orr.w	r1, r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b66:	f023 030f 	bic.w	r3, r3, #15
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6851      	ldr	r1, [r2, #4]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6892      	ldr	r2, [r2, #8]
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68d2      	ldr	r2, [r2, #12]
 8002b78:	4311      	orrs	r1, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6992      	ldr	r2, [r2, #24]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d161      	bne.n	8002c58 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a38      	ldr	r2, [pc, #224]	; (8002c78 <HAL_I2S_Init+0x274>)
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a37      	ldr	r2, [pc, #220]	; (8002c7c <HAL_I2S_Init+0x278>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_I2S_Init+0x1a4>
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_I2S_Init+0x27c>)
 8002ba6:	e001      	b.n	8002bac <HAL_I2S_Init+0x1a8>
 8002ba8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4932      	ldr	r1, [pc, #200]	; (8002c7c <HAL_I2S_Init+0x278>)
 8002bb4:	428a      	cmp	r2, r1
 8002bb6:	d101      	bne.n	8002bbc <HAL_I2S_Init+0x1b8>
 8002bb8:	4a31      	ldr	r2, [pc, #196]	; (8002c80 <HAL_I2S_Init+0x27c>)
 8002bba:	e001      	b.n	8002bc0 <HAL_I2S_Init+0x1bc>
 8002bbc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002bc0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002bc4:	f023 030f 	bic.w	r3, r3, #15
 8002bc8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2b      	ldr	r2, [pc, #172]	; (8002c7c <HAL_I2S_Init+0x278>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_I2S_Init+0x1d4>
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <HAL_I2S_Init+0x27c>)
 8002bd6:	e001      	b.n	8002bdc <HAL_I2S_Init+0x1d8>
 8002bd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bdc:	2202      	movs	r2, #2
 8002bde:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <HAL_I2S_Init+0x278>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_I2S_Init+0x1ea>
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_I2S_Init+0x27c>)
 8002bec:	e001      	b.n	8002bf2 <HAL_I2S_Init+0x1ee>
 8002bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfe:	d003      	beq.n	8002c08 <HAL_I2S_Init+0x204>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d103      	bne.n	8002c10 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	e001      	b.n	8002c14 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c32:	4313      	orrs	r3, r2
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	897b      	ldrh	r3, [r7, #10]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c40:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_I2S_Init+0x278>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_I2S_Init+0x24c>
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_I2S_Init+0x27c>)
 8002c4e:	e001      	b.n	8002c54 <HAL_I2S_Init+0x250>
 8002c50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c54:	897a      	ldrh	r2, [r7, #10]
 8002c56:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	08002d7b 	.word	0x08002d7b
 8002c74:	cccccccd 	.word	0xcccccccd
 8002c78:	08002e91 	.word	0x08002e91
 8002c7c:	40003800 	.word	0x40003800
 8002c80:	40003400 	.word	0x40003400

08002c84 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	881a      	ldrh	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c9a      	adds	r2, r3, #2
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10e      	bne.n	8002d14 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d04:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ffb8 	bl	8002c84 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	b292      	uxth	r2, r2
 8002d30:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	1c9a      	adds	r2, r3, #2
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10e      	bne.n	8002d72 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d62:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff93 	bl	8002c98 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d13a      	bne.n	8002e0c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d109      	bne.n	8002db4 <I2S_IRQHandler+0x3a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d102      	bne.n	8002db4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ffb4 	bl	8002d1c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d126      	bne.n	8002e0c <I2S_IRQHandler+0x92>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d11f      	bne.n	8002e0c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dda:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f043 0202 	orr.w	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ff50 	bl	8002cac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d136      	bne.n	8002e86 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d109      	bne.n	8002e36 <I2S_IRQHandler+0xbc>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d102      	bne.n	8002e36 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ff45 	bl	8002cc0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d122      	bne.n	8002e86 <I2S_IRQHandler+0x10c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d11b      	bne.n	8002e86 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e5c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff13 	bl	8002cac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a92      	ldr	r2, [pc, #584]	; (80030f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002eaa:	4b92      	ldr	r3, [pc, #584]	; (80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eac:	e001      	b.n	8002eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002eae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a8b      	ldr	r2, [pc, #556]	; (80030f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ec8:	4b8a      	ldr	r3, [pc, #552]	; (80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eca:	e001      	b.n	8002ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ecc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002edc:	d004      	beq.n	8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 8099 	bne.w	800301a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d107      	bne.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f925 	bl	800314c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f9c8 	bl	80032ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d13a      	bne.n	8002f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d035      	beq.n	8002f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6e      	ldr	r2, [pc, #440]	; (80030f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002f3a:	4b6e      	ldr	r3, [pc, #440]	; (80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f3c:	e001      	b.n	8002f42 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002f3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4969      	ldr	r1, [pc, #420]	; (80030f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f4a:	428b      	cmp	r3, r1
 8002f4c:	d101      	bne.n	8002f52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002f4e:	4b69      	ldr	r3, [pc, #420]	; (80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f50:	e001      	b.n	8002f56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f5a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f043 0202 	orr.w	r2, r3, #2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fe88 	bl	8002cac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	f040 80c3 	bne.w	800312e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80bd 	beq.w	800312e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fc2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a49      	ldr	r2, [pc, #292]	; (80030f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002fce:	4b49      	ldr	r3, [pc, #292]	; (80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fd0:	e001      	b.n	8002fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002fd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4944      	ldr	r1, [pc, #272]	; (80030f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fde:	428b      	cmp	r3, r1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002fe2:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fe4:	e001      	b.n	8002fea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f043 0204 	orr.w	r2, r3, #4
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fe4a 	bl	8002cac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003018:	e089      	b.n	800312e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b02      	cmp	r3, #2
 8003022:	d107      	bne.n	8003034 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f8be 	bl	80031b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8fd 	bl	8003248 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d12f      	bne.n	80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02a      	beq.n	80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003070:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d101      	bne.n	8003080 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800307e:	e001      	b.n	8003084 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003080:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4919      	ldr	r1, [pc, #100]	; (80030f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800308c:	428b      	cmp	r3, r1
 800308e:	d101      	bne.n	8003094 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003090:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003092:	e001      	b.n	8003098 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003098:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800309c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0202 	orr.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fdfa 	bl	8002cac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d136      	bne.n	8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d031      	beq.n	8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030d8:	e001      	b.n	80030de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80030da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4902      	ldr	r1, [pc, #8]	; (80030f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030e6:	428b      	cmp	r3, r1
 80030e8:	d106      	bne.n	80030f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80030ea:	4b02      	ldr	r3, [pc, #8]	; (80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030ec:	e006      	b.n	80030fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80030ee:	bf00      	nop
 80030f0:	40003800 	.word	0x40003800
 80030f4:	40003400 	.word	0x40003400
 80030f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003100:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003110:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f043 0204 	orr.w	r2, r3, #4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fdc0 	bl	8002cac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800312c:	e000      	b.n	8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800312e:	bf00      	nop
}
 8003130:	bf00      	nop
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	1c99      	adds	r1, r3, #2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6251      	str	r1, [r2, #36]	; 0x24
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d113      	bne.n	80031a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800318c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d106      	bne.n	80031a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff ffc9 	bl	8003138 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	1c99      	adds	r1, r3, #2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6251      	str	r1, [r2, #36]	; 0x24
 80031c2:	8819      	ldrh	r1, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <I2SEx_TxISR_I2SExt+0x90>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <I2SEx_TxISR_I2SExt+0x22>
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <I2SEx_TxISR_I2SExt+0x94>)
 80031d0:	e001      	b.n	80031d6 <I2SEx_TxISR_I2SExt+0x26>
 80031d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031d6:	460a      	mov	r2, r1
 80031d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d121      	bne.n	8003236 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a12      	ldr	r2, [pc, #72]	; (8003240 <I2SEx_TxISR_I2SExt+0x90>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <I2SEx_TxISR_I2SExt+0x50>
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <I2SEx_TxISR_I2SExt+0x94>)
 80031fe:	e001      	b.n	8003204 <I2SEx_TxISR_I2SExt+0x54>
 8003200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	490d      	ldr	r1, [pc, #52]	; (8003240 <I2SEx_TxISR_I2SExt+0x90>)
 800320c:	428b      	cmp	r3, r1
 800320e:	d101      	bne.n	8003214 <I2SEx_TxISR_I2SExt+0x64>
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <I2SEx_TxISR_I2SExt+0x94>)
 8003212:	e001      	b.n	8003218 <I2SEx_TxISR_I2SExt+0x68>
 8003214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003218:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800321c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d106      	bne.n	8003236 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ff81 	bl	8003138 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40003800 	.word	0x40003800
 8003244:	40003400 	.word	0x40003400

08003248 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68d8      	ldr	r0, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	1c99      	adds	r1, r3, #2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003260:	b282      	uxth	r2, r0
 8003262:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d113      	bne.n	80032a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800328a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ff4a 	bl	8003138 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a20      	ldr	r2, [pc, #128]	; (800333c <I2SEx_RxISR_I2SExt+0x90>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <I2SEx_RxISR_I2SExt+0x16>
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <I2SEx_RxISR_I2SExt+0x94>)
 80032c0:	e001      	b.n	80032c6 <I2SEx_RxISR_I2SExt+0x1a>
 80032c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c6:	68d8      	ldr	r0, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	1c99      	adds	r1, r3, #2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80032d2:	b282      	uxth	r2, r0
 80032d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d121      	bne.n	8003332 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a12      	ldr	r2, [pc, #72]	; (800333c <I2SEx_RxISR_I2SExt+0x90>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <I2SEx_RxISR_I2SExt+0x50>
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <I2SEx_RxISR_I2SExt+0x94>)
 80032fa:	e001      	b.n	8003300 <I2SEx_RxISR_I2SExt+0x54>
 80032fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	490d      	ldr	r1, [pc, #52]	; (800333c <I2SEx_RxISR_I2SExt+0x90>)
 8003308:	428b      	cmp	r3, r1
 800330a:	d101      	bne.n	8003310 <I2SEx_RxISR_I2SExt+0x64>
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <I2SEx_RxISR_I2SExt+0x94>)
 800330e:	e001      	b.n	8003314 <I2SEx_RxISR_I2SExt+0x68>
 8003310:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003314:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003318:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff03 	bl	8003138 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40003800 	.word	0x40003800
 8003340:	40003400 	.word	0x40003400

08003344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e267      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d075      	beq.n	800344e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003362:	4b88      	ldr	r3, [pc, #544]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b04      	cmp	r3, #4
 800336c:	d00c      	beq.n	8003388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336e:	4b85      	ldr	r3, [pc, #532]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003376:	2b08      	cmp	r3, #8
 8003378:	d112      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b82      	ldr	r3, [pc, #520]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003386:	d10b      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	4b7e      	ldr	r3, [pc, #504]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d05b      	beq.n	800344c <HAL_RCC_OscConfig+0x108>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d157      	bne.n	800344c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e242      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x74>
 80033aa:	4b76      	ldr	r3, [pc, #472]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a75      	ldr	r2, [pc, #468]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <HAL_RCC_OscConfig+0xb0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x98>
 80033c2:	4b70      	ldr	r3, [pc, #448]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a6f      	ldr	r2, [pc, #444]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6c      	ldr	r2, [pc, #432]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0xb0>
 80033dc:	4b69      	ldr	r3, [pc, #420]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a68      	ldr	r2, [pc, #416]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b66      	ldr	r3, [pc, #408]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a65      	ldr	r2, [pc, #404]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fd fdc8 	bl	8000f90 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003404:	f7fd fdc4 	bl	8000f90 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e207      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b5b      	ldr	r3, [pc, #364]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0xc0>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fd fdb4 	bl	8000f90 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342c:	f7fd fdb0 	bl	8000f90 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1f3      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	4b51      	ldr	r3, [pc, #324]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0xe8>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d063      	beq.n	8003522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345a:	4b4a      	ldr	r3, [pc, #296]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003466:	4b47      	ldr	r3, [pc, #284]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800346e:	2b08      	cmp	r3, #8
 8003470:	d11c      	bne.n	80034ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b44      	ldr	r3, [pc, #272]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	4b41      	ldr	r3, [pc, #260]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x152>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1c7      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003496:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4937      	ldr	r1, [pc, #220]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	e03a      	b.n	8003522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b4:	4b34      	ldr	r3, [pc, #208]	; (8003588 <HAL_RCC_OscConfig+0x244>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fd fd69 	bl	8000f90 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c2:	f7fd fd65 	bl	8000f90 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e1a8      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b28      	ldr	r3, [pc, #160]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4925      	ldr	r1, [pc, #148]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]
 80034f4:	e015      	b.n	8003522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCC_OscConfig+0x244>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fd fd48 	bl	8000f90 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003504:	f7fd fd44 	bl	8000f90 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e187      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d036      	beq.n	800359c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003536:	4b15      	ldr	r3, [pc, #84]	; (800358c <HAL_RCC_OscConfig+0x248>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fd fd28 	bl	8000f90 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003544:	f7fd fd24 	bl	8000f90 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e167      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_OscConfig+0x240>)
 8003558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x200>
 8003562:	e01b      	b.n	800359c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_RCC_OscConfig+0x248>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7fd fd11 	bl	8000f90 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	e00e      	b.n	8003590 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003572:	f7fd fd0d 	bl	8000f90 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d907      	bls.n	8003590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e150      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
 8003584:	40023800 	.word	0x40023800
 8003588:	42470000 	.word	0x42470000
 800358c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	4b88      	ldr	r3, [pc, #544]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ea      	bne.n	8003572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8097 	beq.w	80036d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ae:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	4b7d      	ldr	r3, [pc, #500]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a7c      	ldr	r2, [pc, #496]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b7a      	ldr	r3, [pc, #488]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4b77      	ldr	r3, [pc, #476]	; (80037b8 <HAL_RCC_OscConfig+0x474>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e6:	4b74      	ldr	r3, [pc, #464]	; (80037b8 <HAL_RCC_OscConfig+0x474>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a73      	ldr	r2, [pc, #460]	; (80037b8 <HAL_RCC_OscConfig+0x474>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fd fccd 	bl	8000f90 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fd fcc9 	bl	8000f90 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e10c      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	4b6a      	ldr	r3, [pc, #424]	; (80037b8 <HAL_RCC_OscConfig+0x474>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x2ea>
 8003620:	4b64      	ldr	r3, [pc, #400]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a63      	ldr	r2, [pc, #396]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
 800362c:	e01c      	b.n	8003668 <HAL_RCC_OscConfig+0x324>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b05      	cmp	r3, #5
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x30c>
 8003636:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a5e      	ldr	r2, [pc, #376]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
 8003642:	4b5c      	ldr	r3, [pc, #368]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a5b      	ldr	r2, [pc, #364]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
 800364e:	e00b      	b.n	8003668 <HAL_RCC_OscConfig+0x324>
 8003650:	4b58      	ldr	r3, [pc, #352]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4a57      	ldr	r2, [pc, #348]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
 800365c:	4b55      	ldr	r3, [pc, #340]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a54      	ldr	r2, [pc, #336]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003662:	f023 0304 	bic.w	r3, r3, #4
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d015      	beq.n	800369c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fd fc8e 	bl	8000f90 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003676:	e00a      	b.n	800368e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003678:	f7fd fc8a 	bl	8000f90 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0cb      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368e:	4b49      	ldr	r3, [pc, #292]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0ee      	beq.n	8003678 <HAL_RCC_OscConfig+0x334>
 800369a:	e014      	b.n	80036c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369c:	f7fd fc78 	bl	8000f90 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fd fc74 	bl	8000f90 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0b5      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ba:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1ee      	bne.n	80036a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d105      	bne.n	80036d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036cc:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	4a38      	ldr	r2, [pc, #224]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 80036d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80a1 	beq.w	8003824 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e2:	4b34      	ldr	r3, [pc, #208]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d05c      	beq.n	80037a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d141      	bne.n	800377a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCC_OscConfig+0x478>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fd fc48 	bl	8000f90 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003704:	f7fd fc44 	bl	8000f90 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e087      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	4b27      	ldr	r3, [pc, #156]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	019b      	lsls	r3, r3, #6
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	3b01      	subs	r3, #1
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	491b      	ldr	r1, [pc, #108]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x478>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fd fc1d 	bl	8000f90 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375a:	f7fd fc19 	bl	8000f90 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e05c      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376c:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x416>
 8003778:	e054      	b.n	8003824 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_RCC_OscConfig+0x478>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fd fc06 	bl	8000f90 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003788:	f7fd fc02 	bl	8000f90 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e045      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_RCC_OscConfig+0x470>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x444>
 80037a6:	e03d      	b.n	8003824 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e038      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40007000 	.word	0x40007000
 80037bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_RCC_OscConfig+0x4ec>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d028      	beq.n	8003820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d121      	bne.n	8003820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d11a      	bne.n	8003820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d111      	bne.n	8003820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	3b01      	subs	r3, #1
 800380a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d107      	bne.n	8003820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800

08003834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0cc      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b68      	ldr	r3, [pc, #416]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d90c      	bls.n	8003870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b65      	ldr	r3, [pc, #404]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b63      	ldr	r3, [pc, #396]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0b8      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003888:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a58      	ldr	r2, [pc, #352]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a0:	4b53      	ldr	r3, [pc, #332]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4a52      	ldr	r2, [pc, #328]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	4b50      	ldr	r3, [pc, #320]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	494d      	ldr	r1, [pc, #308]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d044      	beq.n	8003954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	4b47      	ldr	r3, [pc, #284]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d119      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e07f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e067      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4934      	ldr	r1, [pc, #208]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	4313      	orrs	r3, r2
 8003922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003924:	f7fd fb34 	bl	8000f90 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7fd fb30 	bl	8000f90 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e04f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d20c      	bcs.n	800397c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b22      	ldr	r3, [pc, #136]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e032      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4916      	ldr	r1, [pc, #88]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a6:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	490e      	ldr	r1, [pc, #56]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ba:	f000 f821 	bl	8003a00 <HAL_RCC_GetSysClockFreq>
 80039be:	4602      	mov	r2, r0
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	490a      	ldr	r1, [pc, #40]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	5ccb      	ldrb	r3, [r1, r3]
 80039ce:	fa22 f303 	lsr.w	r3, r2, r3
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039d6:	4b09      	ldr	r3, [pc, #36]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd fa94 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023c00 	.word	0x40023c00
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08005a50 	.word	0x08005a50
 80039f8:	20000000 	.word	0x20000000
 80039fc:	20000004 	.word	0x20000004

08003a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a04:	b094      	sub	sp, #80	; 0x50
 8003a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a10:	2300      	movs	r3, #0
 8003a12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a18:	4b79      	ldr	r3, [pc, #484]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d00d      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x40>
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	f200 80e1 	bhi.w	8003bec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x34>
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d003      	beq.n	8003a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a32:	e0db      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a34:	4b73      	ldr	r3, [pc, #460]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a38:	e0db      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3a:	4b73      	ldr	r3, [pc, #460]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a3e:	e0d8      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a40:	4b6f      	ldr	r3, [pc, #444]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a4a:	4b6d      	ldr	r3, [pc, #436]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d063      	beq.n	8003b1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a56:	4b6a      	ldr	r3, [pc, #424]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	099b      	lsrs	r3, r3, #6
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a68:	633b      	str	r3, [r7, #48]	; 0x30
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a72:	4622      	mov	r2, r4
 8003a74:	462b      	mov	r3, r5
 8003a76:	f04f 0000 	mov.w	r0, #0
 8003a7a:	f04f 0100 	mov.w	r1, #0
 8003a7e:	0159      	lsls	r1, r3, #5
 8003a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a84:	0150      	lsls	r0, r2, #5
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	1a51      	subs	r1, r2, r1
 8003a8e:	6139      	str	r1, [r7, #16]
 8003a90:	4629      	mov	r1, r5
 8003a92:	eb63 0301 	sbc.w	r3, r3, r1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aa4:	4659      	mov	r1, fp
 8003aa6:	018b      	lsls	r3, r1, #6
 8003aa8:	4651      	mov	r1, sl
 8003aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aae:	4651      	mov	r1, sl
 8003ab0:	018a      	lsls	r2, r1, #6
 8003ab2:	4651      	mov	r1, sl
 8003ab4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ab8:	4659      	mov	r1, fp
 8003aba:	eb63 0901 	sbc.w	r9, r3, r1
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ad2:	4690      	mov	r8, r2
 8003ad4:	4699      	mov	r9, r3
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	eb18 0303 	adds.w	r3, r8, r3
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	462b      	mov	r3, r5
 8003ae0:	eb49 0303 	adc.w	r3, r9, r3
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003af2:	4629      	mov	r1, r5
 8003af4:	024b      	lsls	r3, r1, #9
 8003af6:	4621      	mov	r1, r4
 8003af8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003afc:	4621      	mov	r1, r4
 8003afe:	024a      	lsls	r2, r1, #9
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b06:	2200      	movs	r2, #0
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b10:	f7fc fbae 	bl	8000270 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4613      	mov	r3, r2
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1c:	e058      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1e:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	2200      	movs	r2, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	4611      	mov	r1, r2
 8003b2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b2e:	623b      	str	r3, [r7, #32]
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
 8003b34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	f04f 0000 	mov.w	r0, #0
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	0159      	lsls	r1, r3, #5
 8003b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b4a:	0150      	lsls	r0, r2, #5
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4641      	mov	r1, r8
 8003b52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b56:	4649      	mov	r1, r9
 8003b58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b70:	ebb2 040a 	subs.w	r4, r2, sl
 8003b74:	eb63 050b 	sbc.w	r5, r3, fp
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	00eb      	lsls	r3, r5, #3
 8003b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b86:	00e2      	lsls	r2, r4, #3
 8003b88:	4614      	mov	r4, r2
 8003b8a:	461d      	mov	r5, r3
 8003b8c:	4643      	mov	r3, r8
 8003b8e:	18e3      	adds	r3, r4, r3
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	464b      	mov	r3, r9
 8003b94:	eb45 0303 	adc.w	r3, r5, r3
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	028b      	lsls	r3, r1, #10
 8003baa:	4621      	mov	r1, r4
 8003bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	028a      	lsls	r2, r1, #10
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bba:	2200      	movs	r2, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	61fa      	str	r2, [r7, #28]
 8003bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc4:	f7fc fb54 	bl	8000270 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4613      	mov	r3, r2
 8003bce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bea:	e002      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3750      	adds	r7, #80	; 0x50
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	00f42400 	.word	0x00f42400
 8003c08:	007a1200 	.word	0x007a1200

08003c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000000 	.word	0x20000000

08003c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c28:	f7ff fff0 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	0a9b      	lsrs	r3, r3, #10
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4903      	ldr	r1, [pc, #12]	; (8003c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	08005a60 	.word	0x08005a60

08003c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c50:	f7ff ffdc 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0b5b      	lsrs	r3, r3, #13
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4903      	ldr	r1, [pc, #12]	; (8003c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	08005a60 	.word	0x08005a60

08003c74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d035      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c9c:	4b62      	ldr	r3, [pc, #392]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ca2:	f7fd f975 	bl	8000f90 <HAL_GetTick>
 8003ca6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003caa:	f7fd f971 	bl	8000f90 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e0b0      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cbc:	4b5b      	ldr	r3, [pc, #364]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f0      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	019a      	lsls	r2, r3, #6
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	071b      	lsls	r3, r3, #28
 8003cd4:	4955      	ldr	r1, [pc, #340]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cdc:	4b52      	ldr	r3, [pc, #328]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ce2:	f7fd f955 	bl	8000f90 <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cea:	f7fd f951 	bl	8000f90 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e090      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cfc:	4b4b      	ldr	r3, [pc, #300]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8083 	beq.w	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	4b44      	ldr	r3, [pc, #272]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	4a43      	ldr	r2, [pc, #268]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6413      	str	r3, [r2, #64]	; 0x40
 8003d26:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d32:	4b3f      	ldr	r3, [pc, #252]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a3e      	ldr	r2, [pc, #248]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d3e:	f7fd f927 	bl	8000f90 <HAL_GetTick>
 8003d42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fd f923 	bl	8000f90 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e062      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d58:	4b35      	ldr	r3, [pc, #212]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d64:	4b31      	ldr	r3, [pc, #196]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d02f      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d028      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d82:	4b2a      	ldr	r3, [pc, #168]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d8c:	4b29      	ldr	r3, [pc, #164]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d98:	4a24      	ldr	r2, [pc, #144]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d9e:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d114      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fd f8f1 	bl	8000f90 <HAL_GetTick>
 8003dae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fd f8ed 	bl	8000f90 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e02a      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ee      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de0:	d10d      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df6:	490d      	ldr	r1, [pc, #52]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	608b      	str	r3, [r1, #8]
 8003dfc:	e005      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e08:	6093      	str	r3, [r2, #8]
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e16:	4905      	ldr	r1, [pc, #20]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	42470068 	.word	0x42470068
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40007000 	.word	0x40007000
 8003e34:	42470e40 	.word	0x42470e40

08003e38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d13e      	bne.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e56:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d005      	beq.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d12f      	bne.n	8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e6e:	617b      	str	r3, [r7, #20]
          break;
 8003e70:	e02f      	b.n	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e72:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e7e:	d108      	bne.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e88:	4a18      	ldr	r2, [pc, #96]	; (8003eec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	e007      	b.n	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e92:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e9a:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea8:	099b      	lsrs	r3, r3, #6
 8003eaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebc:	0f1b      	lsrs	r3, r3, #28
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	617b      	str	r3, [r7, #20]
          break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
          break;
 8003ed0:	bf00      	nop
        }
      }
      break;
 8003ed2:	bf00      	nop
    }
  }
  return frequency;
 8003ed4:	697b      	ldr	r3, [r7, #20]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	00bb8000 	.word	0x00bb8000
 8003eec:	007a1200 	.word	0x007a1200
 8003ef0:	00f42400 	.word	0x00f42400

08003ef4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e07b      	b.n	8003ffe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d108      	bne.n	8003f20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f16:	d009      	beq.n	8003f2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61da      	str	r2, [r3, #28]
 8003f1e:	e005      	b.n	8003f2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fc fe86 	bl	8000c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb0:	ea42 0103 	orr.w	r1, r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	f003 0104 	and.w	r1, r3, #4
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	f003 0210 	and.w	r2, r3, #16
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e03f      	b.n	8004098 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d106      	bne.n	8004032 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fc fe5b 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2224      	movs	r2, #36	; 0x24
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004048:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9ca 	bl	80043e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800405e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800406e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800407e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d17c      	bne.n	80041ba <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_UART_Transmit+0x2c>
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e075      	b.n	80041bc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_UART_Transmit+0x3e>
 80040da:	2302      	movs	r3, #2
 80040dc:	e06e      	b.n	80041bc <HAL_UART_Transmit+0x11c>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2221      	movs	r2, #33	; 0x21
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040f4:	f7fc ff4c 	bl	8000f90 <HAL_GetTick>
 80040f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	88fa      	ldrh	r2, [r7, #6]
 8004104:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410e:	d108      	bne.n	8004122 <HAL_UART_Transmit+0x82>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d104      	bne.n	8004122 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004118:	2300      	movs	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	e003      	b.n	800412a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004126:	2300      	movs	r3, #0
 8004128:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004132:	e02a      	b.n	800418a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	2180      	movs	r1, #128	; 0x80
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f8e2 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e036      	b.n	80041bc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004162:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	3302      	adds	r3, #2
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	e007      	b.n	800417c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3301      	adds	r3, #1
 800417a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1cf      	bne.n	8004134 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2200      	movs	r2, #0
 800419c:	2140      	movs	r1, #64	; 0x40
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f8b2 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e006      	b.n	80041bc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	f040 808c 	bne.w	80042fe <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <HAL_UART_Receive+0x2e>
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e084      	b.n	8004300 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_UART_Receive+0x40>
 8004200:	2302      	movs	r3, #2
 8004202:	e07d      	b.n	8004300 <HAL_UART_Receive+0x13c>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2222      	movs	r2, #34	; 0x22
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004220:	f7fc feb6 	bl	8000f90 <HAL_GetTick>
 8004224:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	88fa      	ldrh	r2, [r7, #6]
 800422a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423a:	d108      	bne.n	800424e <HAL_UART_Receive+0x8a>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	e003      	b.n	8004256 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800425e:	e043      	b.n	80042e8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2200      	movs	r2, #0
 8004268:	2120      	movs	r1, #32
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f84c 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e042      	b.n	8004300 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10c      	bne.n	800429a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428c:	b29a      	uxth	r2, r3
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	3302      	adds	r3, #2
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e01f      	b.n	80042da <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a2:	d007      	beq.n	80042b4 <HAL_UART_Receive+0xf0>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <HAL_UART_Receive+0xfe>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d106      	bne.n	80042c2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	701a      	strb	r2, [r3, #0]
 80042c0:	e008      	b.n	80042d4 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	3301      	adds	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1b6      	bne.n	8004260 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b090      	sub	sp, #64	; 0x40
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004318:	e050      	b.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d04c      	beq.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
 8004328:	f7fc fe32 	bl	8000f90 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004334:	429a      	cmp	r2, r3
 8004336:	d241      	bcs.n	80043bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004358:	637a      	str	r2, [r7, #52]	; 0x34
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438c:	623a      	str	r2, [r7, #32]
 800438e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	69f9      	ldr	r1, [r7, #28]
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	61bb      	str	r3, [r7, #24]
   return(result);
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e00f      	b.n	80043dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d09f      	beq.n	800431a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3740      	adds	r7, #64	; 0x40
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e8:	b0c0      	sub	sp, #256	; 0x100
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	68d9      	ldr	r1, [r3, #12]
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	ea40 0301 	orr.w	r3, r0, r1
 800440c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	431a      	orrs	r2, r3
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	431a      	orrs	r2, r3
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800443c:	f021 010c 	bic.w	r1, r1, #12
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800444a:	430b      	orrs	r3, r1
 800444c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445e:	6999      	ldr	r1, [r3, #24]
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	ea40 0301 	orr.w	r3, r0, r1
 800446a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b8f      	ldr	r3, [pc, #572]	; (80046b0 <UART_SetConfig+0x2cc>)
 8004474:	429a      	cmp	r2, r3
 8004476:	d005      	beq.n	8004484 <UART_SetConfig+0xa0>
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b8d      	ldr	r3, [pc, #564]	; (80046b4 <UART_SetConfig+0x2d0>)
 8004480:	429a      	cmp	r2, r3
 8004482:	d104      	bne.n	800448e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004484:	f7ff fbe2 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8004488:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800448c:	e003      	b.n	8004496 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800448e:	f7ff fbc9 	bl	8003c24 <HAL_RCC_GetPCLK1Freq>
 8004492:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a0:	f040 810c 	bne.w	80046bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044b6:	4622      	mov	r2, r4
 80044b8:	462b      	mov	r3, r5
 80044ba:	1891      	adds	r1, r2, r2
 80044bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80044be:	415b      	adcs	r3, r3
 80044c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044c6:	4621      	mov	r1, r4
 80044c8:	eb12 0801 	adds.w	r8, r2, r1
 80044cc:	4629      	mov	r1, r5
 80044ce:	eb43 0901 	adc.w	r9, r3, r1
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044e6:	4690      	mov	r8, r2
 80044e8:	4699      	mov	r9, r3
 80044ea:	4623      	mov	r3, r4
 80044ec:	eb18 0303 	adds.w	r3, r8, r3
 80044f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044f4:	462b      	mov	r3, r5
 80044f6:	eb49 0303 	adc.w	r3, r9, r3
 80044fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800450a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800450e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004512:	460b      	mov	r3, r1
 8004514:	18db      	adds	r3, r3, r3
 8004516:	653b      	str	r3, [r7, #80]	; 0x50
 8004518:	4613      	mov	r3, r2
 800451a:	eb42 0303 	adc.w	r3, r2, r3
 800451e:	657b      	str	r3, [r7, #84]	; 0x54
 8004520:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004524:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004528:	f7fb fea2 	bl	8000270 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4b61      	ldr	r3, [pc, #388]	; (80046b8 <UART_SetConfig+0x2d4>)
 8004532:	fba3 2302 	umull	r2, r3, r3, r2
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	011c      	lsls	r4, r3, #4
 800453a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004544:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004548:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800454c:	4642      	mov	r2, r8
 800454e:	464b      	mov	r3, r9
 8004550:	1891      	adds	r1, r2, r2
 8004552:	64b9      	str	r1, [r7, #72]	; 0x48
 8004554:	415b      	adcs	r3, r3
 8004556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004558:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800455c:	4641      	mov	r1, r8
 800455e:	eb12 0a01 	adds.w	sl, r2, r1
 8004562:	4649      	mov	r1, r9
 8004564:	eb43 0b01 	adc.w	fp, r3, r1
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004574:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800457c:	4692      	mov	sl, r2
 800457e:	469b      	mov	fp, r3
 8004580:	4643      	mov	r3, r8
 8004582:	eb1a 0303 	adds.w	r3, sl, r3
 8004586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800458a:	464b      	mov	r3, r9
 800458c:	eb4b 0303 	adc.w	r3, fp, r3
 8004590:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045a8:	460b      	mov	r3, r1
 80045aa:	18db      	adds	r3, r3, r3
 80045ac:	643b      	str	r3, [r7, #64]	; 0x40
 80045ae:	4613      	mov	r3, r2
 80045b0:	eb42 0303 	adc.w	r3, r2, r3
 80045b4:	647b      	str	r3, [r7, #68]	; 0x44
 80045b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045be:	f7fb fe57 	bl	8000270 <__aeabi_uldivmod>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	4b3b      	ldr	r3, [pc, #236]	; (80046b8 <UART_SetConfig+0x2d4>)
 80045ca:	fba3 2301 	umull	r2, r3, r3, r1
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2264      	movs	r2, #100	; 0x64
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	1acb      	subs	r3, r1, r3
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045de:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <UART_SetConfig+0x2d4>)
 80045e0:	fba3 2302 	umull	r2, r3, r3, r2
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045ec:	441c      	add	r4, r3
 80045ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	1891      	adds	r1, r2, r2
 8004606:	63b9      	str	r1, [r7, #56]	; 0x38
 8004608:	415b      	adcs	r3, r3
 800460a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800460c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004610:	4641      	mov	r1, r8
 8004612:	1851      	adds	r1, r2, r1
 8004614:	6339      	str	r1, [r7, #48]	; 0x30
 8004616:	4649      	mov	r1, r9
 8004618:	414b      	adcs	r3, r1
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004628:	4659      	mov	r1, fp
 800462a:	00cb      	lsls	r3, r1, #3
 800462c:	4651      	mov	r1, sl
 800462e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004632:	4651      	mov	r1, sl
 8004634:	00ca      	lsls	r2, r1, #3
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	4603      	mov	r3, r0
 800463c:	4642      	mov	r2, r8
 800463e:	189b      	adds	r3, r3, r2
 8004640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004644:	464b      	mov	r3, r9
 8004646:	460a      	mov	r2, r1
 8004648:	eb42 0303 	adc.w	r3, r2, r3
 800464c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800465c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004660:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004664:	460b      	mov	r3, r1
 8004666:	18db      	adds	r3, r3, r3
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
 800466a:	4613      	mov	r3, r2
 800466c:	eb42 0303 	adc.w	r3, r2, r3
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004676:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800467a:	f7fb fdf9 	bl	8000270 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <UART_SetConfig+0x2d4>)
 8004684:	fba3 1302 	umull	r1, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2164      	movs	r1, #100	; 0x64
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <UART_SetConfig+0x2d4>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	f003 0207 	and.w	r2, r3, #7
 80046a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4422      	add	r2, r4
 80046aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046ac:	e105      	b.n	80048ba <UART_SetConfig+0x4d6>
 80046ae:	bf00      	nop
 80046b0:	40011000 	.word	0x40011000
 80046b4:	40011400 	.word	0x40011400
 80046b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046ce:	4642      	mov	r2, r8
 80046d0:	464b      	mov	r3, r9
 80046d2:	1891      	adds	r1, r2, r2
 80046d4:	6239      	str	r1, [r7, #32]
 80046d6:	415b      	adcs	r3, r3
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
 80046da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046de:	4641      	mov	r1, r8
 80046e0:	1854      	adds	r4, r2, r1
 80046e2:	4649      	mov	r1, r9
 80046e4:	eb43 0501 	adc.w	r5, r3, r1
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	00eb      	lsls	r3, r5, #3
 80046f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046f6:	00e2      	lsls	r2, r4, #3
 80046f8:	4614      	mov	r4, r2
 80046fa:	461d      	mov	r5, r3
 80046fc:	4643      	mov	r3, r8
 80046fe:	18e3      	adds	r3, r4, r3
 8004700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004704:	464b      	mov	r3, r9
 8004706:	eb45 0303 	adc.w	r3, r5, r3
 800470a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800471a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800472a:	4629      	mov	r1, r5
 800472c:	008b      	lsls	r3, r1, #2
 800472e:	4621      	mov	r1, r4
 8004730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004734:	4621      	mov	r1, r4
 8004736:	008a      	lsls	r2, r1, #2
 8004738:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800473c:	f7fb fd98 	bl	8000270 <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4b60      	ldr	r3, [pc, #384]	; (80048c8 <UART_SetConfig+0x4e4>)
 8004746:	fba3 2302 	umull	r2, r3, r3, r2
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	011c      	lsls	r4, r3, #4
 800474e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004758:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800475c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004760:	4642      	mov	r2, r8
 8004762:	464b      	mov	r3, r9
 8004764:	1891      	adds	r1, r2, r2
 8004766:	61b9      	str	r1, [r7, #24]
 8004768:	415b      	adcs	r3, r3
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004770:	4641      	mov	r1, r8
 8004772:	1851      	adds	r1, r2, r1
 8004774:	6139      	str	r1, [r7, #16]
 8004776:	4649      	mov	r1, r9
 8004778:	414b      	adcs	r3, r1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004788:	4659      	mov	r1, fp
 800478a:	00cb      	lsls	r3, r1, #3
 800478c:	4651      	mov	r1, sl
 800478e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004792:	4651      	mov	r1, sl
 8004794:	00ca      	lsls	r2, r1, #3
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	4603      	mov	r3, r0
 800479c:	4642      	mov	r2, r8
 800479e:	189b      	adds	r3, r3, r2
 80047a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047a4:	464b      	mov	r3, r9
 80047a6:	460a      	mov	r2, r1
 80047a8:	eb42 0303 	adc.w	r3, r2, r3
 80047ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047c8:	4649      	mov	r1, r9
 80047ca:	008b      	lsls	r3, r1, #2
 80047cc:	4641      	mov	r1, r8
 80047ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d2:	4641      	mov	r1, r8
 80047d4:	008a      	lsls	r2, r1, #2
 80047d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047da:	f7fb fd49 	bl	8000270 <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4b39      	ldr	r3, [pc, #228]	; (80048c8 <UART_SetConfig+0x4e4>)
 80047e4:	fba3 1302 	umull	r1, r3, r3, r2
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	2164      	movs	r1, #100	; 0x64
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	3332      	adds	r3, #50	; 0x32
 80047f6:	4a34      	ldr	r2, [pc, #208]	; (80048c8 <UART_SetConfig+0x4e4>)
 80047f8:	fba2 2303 	umull	r2, r3, r2, r3
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004802:	441c      	add	r4, r3
 8004804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004808:	2200      	movs	r2, #0
 800480a:	673b      	str	r3, [r7, #112]	; 0x70
 800480c:	677a      	str	r2, [r7, #116]	; 0x74
 800480e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004812:	4642      	mov	r2, r8
 8004814:	464b      	mov	r3, r9
 8004816:	1891      	adds	r1, r2, r2
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	415b      	adcs	r3, r3
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004822:	4641      	mov	r1, r8
 8004824:	1851      	adds	r1, r2, r1
 8004826:	6039      	str	r1, [r7, #0]
 8004828:	4649      	mov	r1, r9
 800482a:	414b      	adcs	r3, r1
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800483a:	4659      	mov	r1, fp
 800483c:	00cb      	lsls	r3, r1, #3
 800483e:	4651      	mov	r1, sl
 8004840:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004844:	4651      	mov	r1, sl
 8004846:	00ca      	lsls	r2, r1, #3
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	4603      	mov	r3, r0
 800484e:	4642      	mov	r2, r8
 8004850:	189b      	adds	r3, r3, r2
 8004852:	66bb      	str	r3, [r7, #104]	; 0x68
 8004854:	464b      	mov	r3, r9
 8004856:	460a      	mov	r2, r1
 8004858:	eb42 0303 	adc.w	r3, r2, r3
 800485c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	663b      	str	r3, [r7, #96]	; 0x60
 8004868:	667a      	str	r2, [r7, #100]	; 0x64
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004876:	4649      	mov	r1, r9
 8004878:	008b      	lsls	r3, r1, #2
 800487a:	4641      	mov	r1, r8
 800487c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004880:	4641      	mov	r1, r8
 8004882:	008a      	lsls	r2, r1, #2
 8004884:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004888:	f7fb fcf2 	bl	8000270 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <UART_SetConfig+0x4e4>)
 8004892:	fba3 1302 	umull	r1, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	2164      	movs	r1, #100	; 0x64
 800489a:	fb01 f303 	mul.w	r3, r1, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	3332      	adds	r3, #50	; 0x32
 80048a4:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <UART_SetConfig+0x4e4>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	f003 020f 	and.w	r2, r3, #15
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4422      	add	r2, r4
 80048b8:	609a      	str	r2, [r3, #8]
}
 80048ba:	bf00      	nop
 80048bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048c0:	46bd      	mov	sp, r7
 80048c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c6:	bf00      	nop
 80048c8:	51eb851f 	.word	0x51eb851f

080048cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f043 0201 	orr.w	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f023 0201 	bic.w	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a13      	ldr	r2, [pc, #76]	; (8004974 <USB_FlushTxFifo+0x64>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e01b      	b.n	8004968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	daf2      	bge.n	800491e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	019b      	lsls	r3, r3, #6
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3301      	adds	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a08      	ldr	r2, [pc, #32]	; (8004974 <USB_FlushTxFifo+0x64>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e006      	b.n	8004968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b20      	cmp	r3, #32
 8004964:	d0f0      	beq.n	8004948 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	00030d40 	.word	0x00030d40

08004978 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <USB_FlushRxFifo+0x5c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e018      	b.n	80049c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	daf2      	bge.n	8004984 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2210      	movs	r2, #16
 80049a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <USB_FlushRxFifo+0x5c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e006      	b.n	80049c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d0f0      	beq.n	80049a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	00030d40 	.word	0x00030d40

080049d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049d8:	b480      	push	{r7}
 80049da:	b08b      	sub	sp, #44	; 0x2c
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	089b      	lsrs	r3, r3, #2
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	623b      	str	r3, [r7, #32]
 8004a02:	e014      	b.n	8004a2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	3301      	adds	r3, #1
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	3301      	adds	r3, #1
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	3301      	adds	r3, #1
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	3301      	adds	r3, #1
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	623b      	str	r3, [r7, #32]
 8004a2e:	6a3a      	ldr	r2, [r7, #32]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d3e6      	bcc.n	8004a04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a36:	8bfb      	ldrh	r3, [r7, #30]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01e      	beq.n	8004a7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a46:	461a      	mov	r2, r3
 8004a48:	f107 0310 	add.w	r3, r7, #16
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	701a      	strb	r2, [r3, #0]
      i++;
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	3301      	adds	r3, #1
 8004a66:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a6e:	8bfb      	ldrh	r3, [r7, #30]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a74:	8bfb      	ldrh	r3, [r7, #30]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1ea      	bne.n	8004a50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	372c      	adds	r7, #44	; 0x2c
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0301 	and.w	r3, r3, #1
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ae8:	f023 0303 	bic.w	r3, r3, #3
 8004aec:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b12:	461a      	mov	r2, r3
 8004b14:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b18:	6053      	str	r3, [r2, #4]
 8004b1a:	e009      	b.n	8004b30 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d106      	bne.n	8004b30 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f241 7370 	movw	r3, #6000	; 0x1770
 8004b2e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b085      	sub	sp, #20
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	b29b      	uxth	r3, r3
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	; 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	0c9b      	lsrs	r3, r3, #18
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	0fdb      	lsrs	r3, r3, #31
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d104      	bne.n	8004bba <USB_HC_Halt+0x5a>
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e0c8      	b.n	8004d4c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <USB_HC_Halt+0x66>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d163      	bne.n	8004c8e <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004be4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f040 80ab 	bne.w	8004d4a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d133      	bne.n	8004c68 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c1e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c3e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3301      	adds	r3, #1
 8004c44:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c4c:	d81d      	bhi.n	8004c8a <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c64:	d0ec      	beq.n	8004c40 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c66:	e070      	b.n	8004d4a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c86:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c88:	e05f      	b.n	8004d4a <USB_HC_Halt+0x1ea>
            break;
 8004c8a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c8c:	e05d      	b.n	8004d4a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	0151      	lsls	r1, r2, #5
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	440a      	add	r2, r1
 8004ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cac:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d133      	bne.n	8004d26 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cdc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cfc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3301      	adds	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d0a:	d81d      	bhi.n	8004d48 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d22:	d0ec      	beq.n	8004cfe <USB_HC_Halt+0x19e>
 8004d24:	e011      	b.n	8004d4a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	e000      	b.n	8004d4a <USB_HC_Halt+0x1ea>
          break;
 8004d48:	bf00      	nop
    }
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3724      	adds	r7, #36	; 0x24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff fdbe 	bl	80048ee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d72:	2110      	movs	r1, #16
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fdcb 	bl	8004910 <USB_FlushTxFifo>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff fdf7 	bl	8004978 <USB_FlushRxFifo>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004d94:	2300      	movs	r3, #0
 8004d96:	61bb      	str	r3, [r7, #24]
 8004d98:	e01f      	b.n	8004dda <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004db0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004db8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dc0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dce:	461a      	mov	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b0f      	cmp	r3, #15
 8004dde:	d9dc      	bls.n	8004d9a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004de0:	2300      	movs	r3, #0
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	e034      	b.n	8004e50 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dfc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e2c:	d80c      	bhi.n	8004e48 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e44:	d0ec      	beq.n	8004e20 <USB_StopHost+0xc8>
 8004e46:	e000      	b.n	8004e4a <USB_StopHost+0xf2>
        break;
 8004e48:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b0f      	cmp	r3, #15
 8004e54:	d9c7      	bls.n	8004de6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e62:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff fd2d 	bl	80048cc <USB_EnableGlobalInt>

  return ret;
 8004e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f804 	bl	8004ea0 <USBH_HandleSof>
}
 8004e98:	bf00      	nop
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b0b      	cmp	r3, #11
 8004eb0:	d10a      	bne.n	8004ec8 <USBH_HandleSof+0x28>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
  }
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8004ee0:	bf00      	nop
}
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004efc:	bf00      	nop
}
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f883 	bl	8005062 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	791b      	ldrb	r3, [r3, #4]
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f80b 	bl	8004f7e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	795b      	ldrb	r3, [r3, #5]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f805 	bl	8004f7e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	460b      	mov	r3, r1
 8004f88:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	2b0f      	cmp	r3, #15
 8004f8e:	d80d      	bhi.n	8004fac <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	33e0      	adds	r3, #224	; 0xe0
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	33e0      	adds	r3, #224	; 0xe0
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff ff57 	bl	8004e7c <USBH_LL_IncTimer>
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff ff8f 	bl	8004f08 <USBH_LL_Connect>
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff ff98 	bl	8004f36 <USBH_LL_Disconnect>
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	460b      	mov	r3, r1
 8005018:	70fb      	strb	r3, [r7, #3]
 800501a:	4613      	mov	r3, r2
 800501c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b082      	sub	sp, #8
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ff49 	bl	8004ed0 <USBH_LL_PortEnabled>
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ff49 	bl	8004eec <USBH_LL_PortDisabled>
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005078:	4618      	mov	r0, r3
 800507a:	f7fc fb5f 	bl	800173c <HAL_HCD_Stop>
 800507e:	4603      	mov	r3, r0
 8005080:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f807 	bl	8005098 <USBH_Get_USB_Status>
 800508a:	4603      	mov	r3, r0
 800508c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800508e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d817      	bhi.n	80050dc <USBH_Get_USB_Status+0x44>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <USBH_Get_USB_Status+0x1c>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050cb 	.word	0x080050cb
 80050bc:	080050d1 	.word	0x080050d1
 80050c0:	080050d7 	.word	0x080050d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]
    break;
 80050c8:	e00b      	b.n	80050e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80050ca:	2302      	movs	r3, #2
 80050cc:	73fb      	strb	r3, [r7, #15]
    break;
 80050ce:	e008      	b.n	80050e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
    break;
 80050d4:	e005      	b.n	80050e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80050d6:	2302      	movs	r3, #2
 80050d8:	73fb      	strb	r3, [r7, #15]
    break;
 80050da:	e002      	b.n	80050e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80050dc:	2302      	movs	r3, #2
 80050de:	73fb      	strb	r3, [r7, #15]
    break;
 80050e0:	bf00      	nop
  }
  return usb_status;
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <__errno>:
 80050f0:	4b01      	ldr	r3, [pc, #4]	; (80050f8 <__errno+0x8>)
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	2000000c 	.word	0x2000000c

080050fc <__libc_init_array>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	4d0d      	ldr	r5, [pc, #52]	; (8005134 <__libc_init_array+0x38>)
 8005100:	4c0d      	ldr	r4, [pc, #52]	; (8005138 <__libc_init_array+0x3c>)
 8005102:	1b64      	subs	r4, r4, r5
 8005104:	10a4      	asrs	r4, r4, #2
 8005106:	2600      	movs	r6, #0
 8005108:	42a6      	cmp	r6, r4
 800510a:	d109      	bne.n	8005120 <__libc_init_array+0x24>
 800510c:	4d0b      	ldr	r5, [pc, #44]	; (800513c <__libc_init_array+0x40>)
 800510e:	4c0c      	ldr	r4, [pc, #48]	; (8005140 <__libc_init_array+0x44>)
 8005110:	f000 fc8e 	bl	8005a30 <_init>
 8005114:	1b64      	subs	r4, r4, r5
 8005116:	10a4      	asrs	r4, r4, #2
 8005118:	2600      	movs	r6, #0
 800511a:	42a6      	cmp	r6, r4
 800511c:	d105      	bne.n	800512a <__libc_init_array+0x2e>
 800511e:	bd70      	pop	{r4, r5, r6, pc}
 8005120:	f855 3b04 	ldr.w	r3, [r5], #4
 8005124:	4798      	blx	r3
 8005126:	3601      	adds	r6, #1
 8005128:	e7ee      	b.n	8005108 <__libc_init_array+0xc>
 800512a:	f855 3b04 	ldr.w	r3, [r5], #4
 800512e:	4798      	blx	r3
 8005130:	3601      	adds	r6, #1
 8005132:	e7f2      	b.n	800511a <__libc_init_array+0x1e>
 8005134:	08005aa4 	.word	0x08005aa4
 8005138:	08005aa4 	.word	0x08005aa4
 800513c:	08005aa4 	.word	0x08005aa4
 8005140:	08005aa8 	.word	0x08005aa8

08005144 <memset>:
 8005144:	4402      	add	r2, r0
 8005146:	4603      	mov	r3, r0
 8005148:	4293      	cmp	r3, r2
 800514a:	d100      	bne.n	800514e <memset+0xa>
 800514c:	4770      	bx	lr
 800514e:	f803 1b01 	strb.w	r1, [r3], #1
 8005152:	e7f9      	b.n	8005148 <memset+0x4>

08005154 <_free_r>:
 8005154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005156:	2900      	cmp	r1, #0
 8005158:	d044      	beq.n	80051e4 <_free_r+0x90>
 800515a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800515e:	9001      	str	r0, [sp, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f1a1 0404 	sub.w	r4, r1, #4
 8005166:	bfb8      	it	lt
 8005168:	18e4      	addlt	r4, r4, r3
 800516a:	f000 f903 	bl	8005374 <__malloc_lock>
 800516e:	4a1e      	ldr	r2, [pc, #120]	; (80051e8 <_free_r+0x94>)
 8005170:	9801      	ldr	r0, [sp, #4]
 8005172:	6813      	ldr	r3, [r2, #0]
 8005174:	b933      	cbnz	r3, 8005184 <_free_r+0x30>
 8005176:	6063      	str	r3, [r4, #4]
 8005178:	6014      	str	r4, [r2, #0]
 800517a:	b003      	add	sp, #12
 800517c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005180:	f000 b8fe 	b.w	8005380 <__malloc_unlock>
 8005184:	42a3      	cmp	r3, r4
 8005186:	d908      	bls.n	800519a <_free_r+0x46>
 8005188:	6825      	ldr	r5, [r4, #0]
 800518a:	1961      	adds	r1, r4, r5
 800518c:	428b      	cmp	r3, r1
 800518e:	bf01      	itttt	eq
 8005190:	6819      	ldreq	r1, [r3, #0]
 8005192:	685b      	ldreq	r3, [r3, #4]
 8005194:	1949      	addeq	r1, r1, r5
 8005196:	6021      	streq	r1, [r4, #0]
 8005198:	e7ed      	b.n	8005176 <_free_r+0x22>
 800519a:	461a      	mov	r2, r3
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	b10b      	cbz	r3, 80051a4 <_free_r+0x50>
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	d9fa      	bls.n	800519a <_free_r+0x46>
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	1855      	adds	r5, r2, r1
 80051a8:	42a5      	cmp	r5, r4
 80051aa:	d10b      	bne.n	80051c4 <_free_r+0x70>
 80051ac:	6824      	ldr	r4, [r4, #0]
 80051ae:	4421      	add	r1, r4
 80051b0:	1854      	adds	r4, r2, r1
 80051b2:	42a3      	cmp	r3, r4
 80051b4:	6011      	str	r1, [r2, #0]
 80051b6:	d1e0      	bne.n	800517a <_free_r+0x26>
 80051b8:	681c      	ldr	r4, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	6053      	str	r3, [r2, #4]
 80051be:	4421      	add	r1, r4
 80051c0:	6011      	str	r1, [r2, #0]
 80051c2:	e7da      	b.n	800517a <_free_r+0x26>
 80051c4:	d902      	bls.n	80051cc <_free_r+0x78>
 80051c6:	230c      	movs	r3, #12
 80051c8:	6003      	str	r3, [r0, #0]
 80051ca:	e7d6      	b.n	800517a <_free_r+0x26>
 80051cc:	6825      	ldr	r5, [r4, #0]
 80051ce:	1961      	adds	r1, r4, r5
 80051d0:	428b      	cmp	r3, r1
 80051d2:	bf04      	itt	eq
 80051d4:	6819      	ldreq	r1, [r3, #0]
 80051d6:	685b      	ldreq	r3, [r3, #4]
 80051d8:	6063      	str	r3, [r4, #4]
 80051da:	bf04      	itt	eq
 80051dc:	1949      	addeq	r1, r1, r5
 80051de:	6021      	streq	r1, [r4, #0]
 80051e0:	6054      	str	r4, [r2, #4]
 80051e2:	e7ca      	b.n	800517a <_free_r+0x26>
 80051e4:	b003      	add	sp, #12
 80051e6:	bd30      	pop	{r4, r5, pc}
 80051e8:	20000568 	.word	0x20000568

080051ec <sbrk_aligned>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	4e0e      	ldr	r6, [pc, #56]	; (8005228 <sbrk_aligned+0x3c>)
 80051f0:	460c      	mov	r4, r1
 80051f2:	6831      	ldr	r1, [r6, #0]
 80051f4:	4605      	mov	r5, r0
 80051f6:	b911      	cbnz	r1, 80051fe <sbrk_aligned+0x12>
 80051f8:	f000 f88c 	bl	8005314 <_sbrk_r>
 80051fc:	6030      	str	r0, [r6, #0]
 80051fe:	4621      	mov	r1, r4
 8005200:	4628      	mov	r0, r5
 8005202:	f000 f887 	bl	8005314 <_sbrk_r>
 8005206:	1c43      	adds	r3, r0, #1
 8005208:	d00a      	beq.n	8005220 <sbrk_aligned+0x34>
 800520a:	1cc4      	adds	r4, r0, #3
 800520c:	f024 0403 	bic.w	r4, r4, #3
 8005210:	42a0      	cmp	r0, r4
 8005212:	d007      	beq.n	8005224 <sbrk_aligned+0x38>
 8005214:	1a21      	subs	r1, r4, r0
 8005216:	4628      	mov	r0, r5
 8005218:	f000 f87c 	bl	8005314 <_sbrk_r>
 800521c:	3001      	adds	r0, #1
 800521e:	d101      	bne.n	8005224 <sbrk_aligned+0x38>
 8005220:	f04f 34ff 	mov.w	r4, #4294967295
 8005224:	4620      	mov	r0, r4
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	2000056c 	.word	0x2000056c

0800522c <_malloc_r>:
 800522c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005230:	1ccd      	adds	r5, r1, #3
 8005232:	f025 0503 	bic.w	r5, r5, #3
 8005236:	3508      	adds	r5, #8
 8005238:	2d0c      	cmp	r5, #12
 800523a:	bf38      	it	cc
 800523c:	250c      	movcc	r5, #12
 800523e:	2d00      	cmp	r5, #0
 8005240:	4607      	mov	r7, r0
 8005242:	db01      	blt.n	8005248 <_malloc_r+0x1c>
 8005244:	42a9      	cmp	r1, r5
 8005246:	d905      	bls.n	8005254 <_malloc_r+0x28>
 8005248:	230c      	movs	r3, #12
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	2600      	movs	r6, #0
 800524e:	4630      	mov	r0, r6
 8005250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005254:	4e2e      	ldr	r6, [pc, #184]	; (8005310 <_malloc_r+0xe4>)
 8005256:	f000 f88d 	bl	8005374 <__malloc_lock>
 800525a:	6833      	ldr	r3, [r6, #0]
 800525c:	461c      	mov	r4, r3
 800525e:	bb34      	cbnz	r4, 80052ae <_malloc_r+0x82>
 8005260:	4629      	mov	r1, r5
 8005262:	4638      	mov	r0, r7
 8005264:	f7ff ffc2 	bl	80051ec <sbrk_aligned>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	4604      	mov	r4, r0
 800526c:	d14d      	bne.n	800530a <_malloc_r+0xde>
 800526e:	6834      	ldr	r4, [r6, #0]
 8005270:	4626      	mov	r6, r4
 8005272:	2e00      	cmp	r6, #0
 8005274:	d140      	bne.n	80052f8 <_malloc_r+0xcc>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	4631      	mov	r1, r6
 800527a:	4638      	mov	r0, r7
 800527c:	eb04 0803 	add.w	r8, r4, r3
 8005280:	f000 f848 	bl	8005314 <_sbrk_r>
 8005284:	4580      	cmp	r8, r0
 8005286:	d13a      	bne.n	80052fe <_malloc_r+0xd2>
 8005288:	6821      	ldr	r1, [r4, #0]
 800528a:	3503      	adds	r5, #3
 800528c:	1a6d      	subs	r5, r5, r1
 800528e:	f025 0503 	bic.w	r5, r5, #3
 8005292:	3508      	adds	r5, #8
 8005294:	2d0c      	cmp	r5, #12
 8005296:	bf38      	it	cc
 8005298:	250c      	movcc	r5, #12
 800529a:	4629      	mov	r1, r5
 800529c:	4638      	mov	r0, r7
 800529e:	f7ff ffa5 	bl	80051ec <sbrk_aligned>
 80052a2:	3001      	adds	r0, #1
 80052a4:	d02b      	beq.n	80052fe <_malloc_r+0xd2>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	442b      	add	r3, r5
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	e00e      	b.n	80052cc <_malloc_r+0xa0>
 80052ae:	6822      	ldr	r2, [r4, #0]
 80052b0:	1b52      	subs	r2, r2, r5
 80052b2:	d41e      	bmi.n	80052f2 <_malloc_r+0xc6>
 80052b4:	2a0b      	cmp	r2, #11
 80052b6:	d916      	bls.n	80052e6 <_malloc_r+0xba>
 80052b8:	1961      	adds	r1, r4, r5
 80052ba:	42a3      	cmp	r3, r4
 80052bc:	6025      	str	r5, [r4, #0]
 80052be:	bf18      	it	ne
 80052c0:	6059      	strne	r1, [r3, #4]
 80052c2:	6863      	ldr	r3, [r4, #4]
 80052c4:	bf08      	it	eq
 80052c6:	6031      	streq	r1, [r6, #0]
 80052c8:	5162      	str	r2, [r4, r5]
 80052ca:	604b      	str	r3, [r1, #4]
 80052cc:	4638      	mov	r0, r7
 80052ce:	f104 060b 	add.w	r6, r4, #11
 80052d2:	f000 f855 	bl	8005380 <__malloc_unlock>
 80052d6:	f026 0607 	bic.w	r6, r6, #7
 80052da:	1d23      	adds	r3, r4, #4
 80052dc:	1af2      	subs	r2, r6, r3
 80052de:	d0b6      	beq.n	800524e <_malloc_r+0x22>
 80052e0:	1b9b      	subs	r3, r3, r6
 80052e2:	50a3      	str	r3, [r4, r2]
 80052e4:	e7b3      	b.n	800524e <_malloc_r+0x22>
 80052e6:	6862      	ldr	r2, [r4, #4]
 80052e8:	42a3      	cmp	r3, r4
 80052ea:	bf0c      	ite	eq
 80052ec:	6032      	streq	r2, [r6, #0]
 80052ee:	605a      	strne	r2, [r3, #4]
 80052f0:	e7ec      	b.n	80052cc <_malloc_r+0xa0>
 80052f2:	4623      	mov	r3, r4
 80052f4:	6864      	ldr	r4, [r4, #4]
 80052f6:	e7b2      	b.n	800525e <_malloc_r+0x32>
 80052f8:	4634      	mov	r4, r6
 80052fa:	6876      	ldr	r6, [r6, #4]
 80052fc:	e7b9      	b.n	8005272 <_malloc_r+0x46>
 80052fe:	230c      	movs	r3, #12
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	4638      	mov	r0, r7
 8005304:	f000 f83c 	bl	8005380 <__malloc_unlock>
 8005308:	e7a1      	b.n	800524e <_malloc_r+0x22>
 800530a:	6025      	str	r5, [r4, #0]
 800530c:	e7de      	b.n	80052cc <_malloc_r+0xa0>
 800530e:	bf00      	nop
 8005310:	20000568 	.word	0x20000568

08005314 <_sbrk_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4d06      	ldr	r5, [pc, #24]	; (8005330 <_sbrk_r+0x1c>)
 8005318:	2300      	movs	r3, #0
 800531a:	4604      	mov	r4, r0
 800531c:	4608      	mov	r0, r1
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	f7fb fd5e 	bl	8000de0 <_sbrk>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d102      	bne.n	800532e <_sbrk_r+0x1a>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	b103      	cbz	r3, 800532e <_sbrk_r+0x1a>
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	20000570 	.word	0x20000570

08005334 <siprintf>:
 8005334:	b40e      	push	{r1, r2, r3}
 8005336:	b500      	push	{lr}
 8005338:	b09c      	sub	sp, #112	; 0x70
 800533a:	ab1d      	add	r3, sp, #116	; 0x74
 800533c:	9002      	str	r0, [sp, #8]
 800533e:	9006      	str	r0, [sp, #24]
 8005340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005344:	4809      	ldr	r0, [pc, #36]	; (800536c <siprintf+0x38>)
 8005346:	9107      	str	r1, [sp, #28]
 8005348:	9104      	str	r1, [sp, #16]
 800534a:	4909      	ldr	r1, [pc, #36]	; (8005370 <siprintf+0x3c>)
 800534c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005350:	9105      	str	r1, [sp, #20]
 8005352:	6800      	ldr	r0, [r0, #0]
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	a902      	add	r1, sp, #8
 8005358:	f000 f874 	bl	8005444 <_svfiprintf_r>
 800535c:	9b02      	ldr	r3, [sp, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	b01c      	add	sp, #112	; 0x70
 8005364:	f85d eb04 	ldr.w	lr, [sp], #4
 8005368:	b003      	add	sp, #12
 800536a:	4770      	bx	lr
 800536c:	2000000c 	.word	0x2000000c
 8005370:	ffff0208 	.word	0xffff0208

08005374 <__malloc_lock>:
 8005374:	4801      	ldr	r0, [pc, #4]	; (800537c <__malloc_lock+0x8>)
 8005376:	f000 baf9 	b.w	800596c <__retarget_lock_acquire_recursive>
 800537a:	bf00      	nop
 800537c:	20000574 	.word	0x20000574

08005380 <__malloc_unlock>:
 8005380:	4801      	ldr	r0, [pc, #4]	; (8005388 <__malloc_unlock+0x8>)
 8005382:	f000 baf4 	b.w	800596e <__retarget_lock_release_recursive>
 8005386:	bf00      	nop
 8005388:	20000574 	.word	0x20000574

0800538c <__ssputs_r>:
 800538c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005390:	688e      	ldr	r6, [r1, #8]
 8005392:	429e      	cmp	r6, r3
 8005394:	4682      	mov	sl, r0
 8005396:	460c      	mov	r4, r1
 8005398:	4690      	mov	r8, r2
 800539a:	461f      	mov	r7, r3
 800539c:	d838      	bhi.n	8005410 <__ssputs_r+0x84>
 800539e:	898a      	ldrh	r2, [r1, #12]
 80053a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053a4:	d032      	beq.n	800540c <__ssputs_r+0x80>
 80053a6:	6825      	ldr	r5, [r4, #0]
 80053a8:	6909      	ldr	r1, [r1, #16]
 80053aa:	eba5 0901 	sub.w	r9, r5, r1
 80053ae:	6965      	ldr	r5, [r4, #20]
 80053b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053b8:	3301      	adds	r3, #1
 80053ba:	444b      	add	r3, r9
 80053bc:	106d      	asrs	r5, r5, #1
 80053be:	429d      	cmp	r5, r3
 80053c0:	bf38      	it	cc
 80053c2:	461d      	movcc	r5, r3
 80053c4:	0553      	lsls	r3, r2, #21
 80053c6:	d531      	bpl.n	800542c <__ssputs_r+0xa0>
 80053c8:	4629      	mov	r1, r5
 80053ca:	f7ff ff2f 	bl	800522c <_malloc_r>
 80053ce:	4606      	mov	r6, r0
 80053d0:	b950      	cbnz	r0, 80053e8 <__ssputs_r+0x5c>
 80053d2:	230c      	movs	r3, #12
 80053d4:	f8ca 3000 	str.w	r3, [sl]
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053de:	81a3      	strh	r3, [r4, #12]
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e8:	6921      	ldr	r1, [r4, #16]
 80053ea:	464a      	mov	r2, r9
 80053ec:	f000 fac0 	bl	8005970 <memcpy>
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fa:	81a3      	strh	r3, [r4, #12]
 80053fc:	6126      	str	r6, [r4, #16]
 80053fe:	6165      	str	r5, [r4, #20]
 8005400:	444e      	add	r6, r9
 8005402:	eba5 0509 	sub.w	r5, r5, r9
 8005406:	6026      	str	r6, [r4, #0]
 8005408:	60a5      	str	r5, [r4, #8]
 800540a:	463e      	mov	r6, r7
 800540c:	42be      	cmp	r6, r7
 800540e:	d900      	bls.n	8005412 <__ssputs_r+0x86>
 8005410:	463e      	mov	r6, r7
 8005412:	6820      	ldr	r0, [r4, #0]
 8005414:	4632      	mov	r2, r6
 8005416:	4641      	mov	r1, r8
 8005418:	f000 fab8 	bl	800598c <memmove>
 800541c:	68a3      	ldr	r3, [r4, #8]
 800541e:	1b9b      	subs	r3, r3, r6
 8005420:	60a3      	str	r3, [r4, #8]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	4433      	add	r3, r6
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	2000      	movs	r0, #0
 800542a:	e7db      	b.n	80053e4 <__ssputs_r+0x58>
 800542c:	462a      	mov	r2, r5
 800542e:	f000 fac7 	bl	80059c0 <_realloc_r>
 8005432:	4606      	mov	r6, r0
 8005434:	2800      	cmp	r0, #0
 8005436:	d1e1      	bne.n	80053fc <__ssputs_r+0x70>
 8005438:	6921      	ldr	r1, [r4, #16]
 800543a:	4650      	mov	r0, sl
 800543c:	f7ff fe8a 	bl	8005154 <_free_r>
 8005440:	e7c7      	b.n	80053d2 <__ssputs_r+0x46>
	...

08005444 <_svfiprintf_r>:
 8005444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005448:	4698      	mov	r8, r3
 800544a:	898b      	ldrh	r3, [r1, #12]
 800544c:	061b      	lsls	r3, r3, #24
 800544e:	b09d      	sub	sp, #116	; 0x74
 8005450:	4607      	mov	r7, r0
 8005452:	460d      	mov	r5, r1
 8005454:	4614      	mov	r4, r2
 8005456:	d50e      	bpl.n	8005476 <_svfiprintf_r+0x32>
 8005458:	690b      	ldr	r3, [r1, #16]
 800545a:	b963      	cbnz	r3, 8005476 <_svfiprintf_r+0x32>
 800545c:	2140      	movs	r1, #64	; 0x40
 800545e:	f7ff fee5 	bl	800522c <_malloc_r>
 8005462:	6028      	str	r0, [r5, #0]
 8005464:	6128      	str	r0, [r5, #16]
 8005466:	b920      	cbnz	r0, 8005472 <_svfiprintf_r+0x2e>
 8005468:	230c      	movs	r3, #12
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	f04f 30ff 	mov.w	r0, #4294967295
 8005470:	e0d1      	b.n	8005616 <_svfiprintf_r+0x1d2>
 8005472:	2340      	movs	r3, #64	; 0x40
 8005474:	616b      	str	r3, [r5, #20]
 8005476:	2300      	movs	r3, #0
 8005478:	9309      	str	r3, [sp, #36]	; 0x24
 800547a:	2320      	movs	r3, #32
 800547c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005480:	f8cd 800c 	str.w	r8, [sp, #12]
 8005484:	2330      	movs	r3, #48	; 0x30
 8005486:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005630 <_svfiprintf_r+0x1ec>
 800548a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800548e:	f04f 0901 	mov.w	r9, #1
 8005492:	4623      	mov	r3, r4
 8005494:	469a      	mov	sl, r3
 8005496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800549a:	b10a      	cbz	r2, 80054a0 <_svfiprintf_r+0x5c>
 800549c:	2a25      	cmp	r2, #37	; 0x25
 800549e:	d1f9      	bne.n	8005494 <_svfiprintf_r+0x50>
 80054a0:	ebba 0b04 	subs.w	fp, sl, r4
 80054a4:	d00b      	beq.n	80054be <_svfiprintf_r+0x7a>
 80054a6:	465b      	mov	r3, fp
 80054a8:	4622      	mov	r2, r4
 80054aa:	4629      	mov	r1, r5
 80054ac:	4638      	mov	r0, r7
 80054ae:	f7ff ff6d 	bl	800538c <__ssputs_r>
 80054b2:	3001      	adds	r0, #1
 80054b4:	f000 80aa 	beq.w	800560c <_svfiprintf_r+0x1c8>
 80054b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ba:	445a      	add	r2, fp
 80054bc:	9209      	str	r2, [sp, #36]	; 0x24
 80054be:	f89a 3000 	ldrb.w	r3, [sl]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80a2 	beq.w	800560c <_svfiprintf_r+0x1c8>
 80054c8:	2300      	movs	r3, #0
 80054ca:	f04f 32ff 	mov.w	r2, #4294967295
 80054ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054d2:	f10a 0a01 	add.w	sl, sl, #1
 80054d6:	9304      	str	r3, [sp, #16]
 80054d8:	9307      	str	r3, [sp, #28]
 80054da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054de:	931a      	str	r3, [sp, #104]	; 0x68
 80054e0:	4654      	mov	r4, sl
 80054e2:	2205      	movs	r2, #5
 80054e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e8:	4851      	ldr	r0, [pc, #324]	; (8005630 <_svfiprintf_r+0x1ec>)
 80054ea:	f7fa fe71 	bl	80001d0 <memchr>
 80054ee:	9a04      	ldr	r2, [sp, #16]
 80054f0:	b9d8      	cbnz	r0, 800552a <_svfiprintf_r+0xe6>
 80054f2:	06d0      	lsls	r0, r2, #27
 80054f4:	bf44      	itt	mi
 80054f6:	2320      	movmi	r3, #32
 80054f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054fc:	0711      	lsls	r1, r2, #28
 80054fe:	bf44      	itt	mi
 8005500:	232b      	movmi	r3, #43	; 0x2b
 8005502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005506:	f89a 3000 	ldrb.w	r3, [sl]
 800550a:	2b2a      	cmp	r3, #42	; 0x2a
 800550c:	d015      	beq.n	800553a <_svfiprintf_r+0xf6>
 800550e:	9a07      	ldr	r2, [sp, #28]
 8005510:	4654      	mov	r4, sl
 8005512:	2000      	movs	r0, #0
 8005514:	f04f 0c0a 	mov.w	ip, #10
 8005518:	4621      	mov	r1, r4
 800551a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800551e:	3b30      	subs	r3, #48	; 0x30
 8005520:	2b09      	cmp	r3, #9
 8005522:	d94e      	bls.n	80055c2 <_svfiprintf_r+0x17e>
 8005524:	b1b0      	cbz	r0, 8005554 <_svfiprintf_r+0x110>
 8005526:	9207      	str	r2, [sp, #28]
 8005528:	e014      	b.n	8005554 <_svfiprintf_r+0x110>
 800552a:	eba0 0308 	sub.w	r3, r0, r8
 800552e:	fa09 f303 	lsl.w	r3, r9, r3
 8005532:	4313      	orrs	r3, r2
 8005534:	9304      	str	r3, [sp, #16]
 8005536:	46a2      	mov	sl, r4
 8005538:	e7d2      	b.n	80054e0 <_svfiprintf_r+0x9c>
 800553a:	9b03      	ldr	r3, [sp, #12]
 800553c:	1d19      	adds	r1, r3, #4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	9103      	str	r1, [sp, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	bfbb      	ittet	lt
 8005546:	425b      	neglt	r3, r3
 8005548:	f042 0202 	orrlt.w	r2, r2, #2
 800554c:	9307      	strge	r3, [sp, #28]
 800554e:	9307      	strlt	r3, [sp, #28]
 8005550:	bfb8      	it	lt
 8005552:	9204      	strlt	r2, [sp, #16]
 8005554:	7823      	ldrb	r3, [r4, #0]
 8005556:	2b2e      	cmp	r3, #46	; 0x2e
 8005558:	d10c      	bne.n	8005574 <_svfiprintf_r+0x130>
 800555a:	7863      	ldrb	r3, [r4, #1]
 800555c:	2b2a      	cmp	r3, #42	; 0x2a
 800555e:	d135      	bne.n	80055cc <_svfiprintf_r+0x188>
 8005560:	9b03      	ldr	r3, [sp, #12]
 8005562:	1d1a      	adds	r2, r3, #4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	9203      	str	r2, [sp, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	bfb8      	it	lt
 800556c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005570:	3402      	adds	r4, #2
 8005572:	9305      	str	r3, [sp, #20]
 8005574:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005640 <_svfiprintf_r+0x1fc>
 8005578:	7821      	ldrb	r1, [r4, #0]
 800557a:	2203      	movs	r2, #3
 800557c:	4650      	mov	r0, sl
 800557e:	f7fa fe27 	bl	80001d0 <memchr>
 8005582:	b140      	cbz	r0, 8005596 <_svfiprintf_r+0x152>
 8005584:	2340      	movs	r3, #64	; 0x40
 8005586:	eba0 000a 	sub.w	r0, r0, sl
 800558a:	fa03 f000 	lsl.w	r0, r3, r0
 800558e:	9b04      	ldr	r3, [sp, #16]
 8005590:	4303      	orrs	r3, r0
 8005592:	3401      	adds	r4, #1
 8005594:	9304      	str	r3, [sp, #16]
 8005596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800559a:	4826      	ldr	r0, [pc, #152]	; (8005634 <_svfiprintf_r+0x1f0>)
 800559c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055a0:	2206      	movs	r2, #6
 80055a2:	f7fa fe15 	bl	80001d0 <memchr>
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d038      	beq.n	800561c <_svfiprintf_r+0x1d8>
 80055aa:	4b23      	ldr	r3, [pc, #140]	; (8005638 <_svfiprintf_r+0x1f4>)
 80055ac:	bb1b      	cbnz	r3, 80055f6 <_svfiprintf_r+0x1b2>
 80055ae:	9b03      	ldr	r3, [sp, #12]
 80055b0:	3307      	adds	r3, #7
 80055b2:	f023 0307 	bic.w	r3, r3, #7
 80055b6:	3308      	adds	r3, #8
 80055b8:	9303      	str	r3, [sp, #12]
 80055ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055bc:	4433      	add	r3, r6
 80055be:	9309      	str	r3, [sp, #36]	; 0x24
 80055c0:	e767      	b.n	8005492 <_svfiprintf_r+0x4e>
 80055c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80055c6:	460c      	mov	r4, r1
 80055c8:	2001      	movs	r0, #1
 80055ca:	e7a5      	b.n	8005518 <_svfiprintf_r+0xd4>
 80055cc:	2300      	movs	r3, #0
 80055ce:	3401      	adds	r4, #1
 80055d0:	9305      	str	r3, [sp, #20]
 80055d2:	4619      	mov	r1, r3
 80055d4:	f04f 0c0a 	mov.w	ip, #10
 80055d8:	4620      	mov	r0, r4
 80055da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055de:	3a30      	subs	r2, #48	; 0x30
 80055e0:	2a09      	cmp	r2, #9
 80055e2:	d903      	bls.n	80055ec <_svfiprintf_r+0x1a8>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0c5      	beq.n	8005574 <_svfiprintf_r+0x130>
 80055e8:	9105      	str	r1, [sp, #20]
 80055ea:	e7c3      	b.n	8005574 <_svfiprintf_r+0x130>
 80055ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80055f0:	4604      	mov	r4, r0
 80055f2:	2301      	movs	r3, #1
 80055f4:	e7f0      	b.n	80055d8 <_svfiprintf_r+0x194>
 80055f6:	ab03      	add	r3, sp, #12
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	462a      	mov	r2, r5
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <_svfiprintf_r+0x1f8>)
 80055fe:	a904      	add	r1, sp, #16
 8005600:	4638      	mov	r0, r7
 8005602:	f3af 8000 	nop.w
 8005606:	1c42      	adds	r2, r0, #1
 8005608:	4606      	mov	r6, r0
 800560a:	d1d6      	bne.n	80055ba <_svfiprintf_r+0x176>
 800560c:	89ab      	ldrh	r3, [r5, #12]
 800560e:	065b      	lsls	r3, r3, #25
 8005610:	f53f af2c 	bmi.w	800546c <_svfiprintf_r+0x28>
 8005614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005616:	b01d      	add	sp, #116	; 0x74
 8005618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561c:	ab03      	add	r3, sp, #12
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	462a      	mov	r2, r5
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <_svfiprintf_r+0x1f8>)
 8005624:	a904      	add	r1, sp, #16
 8005626:	4638      	mov	r0, r7
 8005628:	f000 f87a 	bl	8005720 <_printf_i>
 800562c:	e7eb      	b.n	8005606 <_svfiprintf_r+0x1c2>
 800562e:	bf00      	nop
 8005630:	08005a68 	.word	0x08005a68
 8005634:	08005a72 	.word	0x08005a72
 8005638:	00000000 	.word	0x00000000
 800563c:	0800538d 	.word	0x0800538d
 8005640:	08005a6e 	.word	0x08005a6e

08005644 <_printf_common>:
 8005644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	4616      	mov	r6, r2
 800564a:	4699      	mov	r9, r3
 800564c:	688a      	ldr	r2, [r1, #8]
 800564e:	690b      	ldr	r3, [r1, #16]
 8005650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005654:	4293      	cmp	r3, r2
 8005656:	bfb8      	it	lt
 8005658:	4613      	movlt	r3, r2
 800565a:	6033      	str	r3, [r6, #0]
 800565c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005660:	4607      	mov	r7, r0
 8005662:	460c      	mov	r4, r1
 8005664:	b10a      	cbz	r2, 800566a <_printf_common+0x26>
 8005666:	3301      	adds	r3, #1
 8005668:	6033      	str	r3, [r6, #0]
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	0699      	lsls	r1, r3, #26
 800566e:	bf42      	ittt	mi
 8005670:	6833      	ldrmi	r3, [r6, #0]
 8005672:	3302      	addmi	r3, #2
 8005674:	6033      	strmi	r3, [r6, #0]
 8005676:	6825      	ldr	r5, [r4, #0]
 8005678:	f015 0506 	ands.w	r5, r5, #6
 800567c:	d106      	bne.n	800568c <_printf_common+0x48>
 800567e:	f104 0a19 	add.w	sl, r4, #25
 8005682:	68e3      	ldr	r3, [r4, #12]
 8005684:	6832      	ldr	r2, [r6, #0]
 8005686:	1a9b      	subs	r3, r3, r2
 8005688:	42ab      	cmp	r3, r5
 800568a:	dc26      	bgt.n	80056da <_printf_common+0x96>
 800568c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005690:	1e13      	subs	r3, r2, #0
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	bf18      	it	ne
 8005696:	2301      	movne	r3, #1
 8005698:	0692      	lsls	r2, r2, #26
 800569a:	d42b      	bmi.n	80056f4 <_printf_common+0xb0>
 800569c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056a0:	4649      	mov	r1, r9
 80056a2:	4638      	mov	r0, r7
 80056a4:	47c0      	blx	r8
 80056a6:	3001      	adds	r0, #1
 80056a8:	d01e      	beq.n	80056e8 <_printf_common+0xa4>
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	68e5      	ldr	r5, [r4, #12]
 80056ae:	6832      	ldr	r2, [r6, #0]
 80056b0:	f003 0306 	and.w	r3, r3, #6
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	bf08      	it	eq
 80056b8:	1aad      	subeq	r5, r5, r2
 80056ba:	68a3      	ldr	r3, [r4, #8]
 80056bc:	6922      	ldr	r2, [r4, #16]
 80056be:	bf0c      	ite	eq
 80056c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056c4:	2500      	movne	r5, #0
 80056c6:	4293      	cmp	r3, r2
 80056c8:	bfc4      	itt	gt
 80056ca:	1a9b      	subgt	r3, r3, r2
 80056cc:	18ed      	addgt	r5, r5, r3
 80056ce:	2600      	movs	r6, #0
 80056d0:	341a      	adds	r4, #26
 80056d2:	42b5      	cmp	r5, r6
 80056d4:	d11a      	bne.n	800570c <_printf_common+0xc8>
 80056d6:	2000      	movs	r0, #0
 80056d8:	e008      	b.n	80056ec <_printf_common+0xa8>
 80056da:	2301      	movs	r3, #1
 80056dc:	4652      	mov	r2, sl
 80056de:	4649      	mov	r1, r9
 80056e0:	4638      	mov	r0, r7
 80056e2:	47c0      	blx	r8
 80056e4:	3001      	adds	r0, #1
 80056e6:	d103      	bne.n	80056f0 <_printf_common+0xac>
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f0:	3501      	adds	r5, #1
 80056f2:	e7c6      	b.n	8005682 <_printf_common+0x3e>
 80056f4:	18e1      	adds	r1, r4, r3
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	2030      	movs	r0, #48	; 0x30
 80056fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056fe:	4422      	add	r2, r4
 8005700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005708:	3302      	adds	r3, #2
 800570a:	e7c7      	b.n	800569c <_printf_common+0x58>
 800570c:	2301      	movs	r3, #1
 800570e:	4622      	mov	r2, r4
 8005710:	4649      	mov	r1, r9
 8005712:	4638      	mov	r0, r7
 8005714:	47c0      	blx	r8
 8005716:	3001      	adds	r0, #1
 8005718:	d0e6      	beq.n	80056e8 <_printf_common+0xa4>
 800571a:	3601      	adds	r6, #1
 800571c:	e7d9      	b.n	80056d2 <_printf_common+0x8e>
	...

08005720 <_printf_i>:
 8005720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005724:	7e0f      	ldrb	r7, [r1, #24]
 8005726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005728:	2f78      	cmp	r7, #120	; 0x78
 800572a:	4691      	mov	r9, r2
 800572c:	4680      	mov	r8, r0
 800572e:	460c      	mov	r4, r1
 8005730:	469a      	mov	sl, r3
 8005732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005736:	d807      	bhi.n	8005748 <_printf_i+0x28>
 8005738:	2f62      	cmp	r7, #98	; 0x62
 800573a:	d80a      	bhi.n	8005752 <_printf_i+0x32>
 800573c:	2f00      	cmp	r7, #0
 800573e:	f000 80d8 	beq.w	80058f2 <_printf_i+0x1d2>
 8005742:	2f58      	cmp	r7, #88	; 0x58
 8005744:	f000 80a3 	beq.w	800588e <_printf_i+0x16e>
 8005748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800574c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005750:	e03a      	b.n	80057c8 <_printf_i+0xa8>
 8005752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005756:	2b15      	cmp	r3, #21
 8005758:	d8f6      	bhi.n	8005748 <_printf_i+0x28>
 800575a:	a101      	add	r1, pc, #4	; (adr r1, 8005760 <_printf_i+0x40>)
 800575c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005760:	080057b9 	.word	0x080057b9
 8005764:	080057cd 	.word	0x080057cd
 8005768:	08005749 	.word	0x08005749
 800576c:	08005749 	.word	0x08005749
 8005770:	08005749 	.word	0x08005749
 8005774:	08005749 	.word	0x08005749
 8005778:	080057cd 	.word	0x080057cd
 800577c:	08005749 	.word	0x08005749
 8005780:	08005749 	.word	0x08005749
 8005784:	08005749 	.word	0x08005749
 8005788:	08005749 	.word	0x08005749
 800578c:	080058d9 	.word	0x080058d9
 8005790:	080057fd 	.word	0x080057fd
 8005794:	080058bb 	.word	0x080058bb
 8005798:	08005749 	.word	0x08005749
 800579c:	08005749 	.word	0x08005749
 80057a0:	080058fb 	.word	0x080058fb
 80057a4:	08005749 	.word	0x08005749
 80057a8:	080057fd 	.word	0x080057fd
 80057ac:	08005749 	.word	0x08005749
 80057b0:	08005749 	.word	0x08005749
 80057b4:	080058c3 	.word	0x080058c3
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	1d1a      	adds	r2, r3, #4
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	602a      	str	r2, [r5, #0]
 80057c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0a3      	b.n	8005914 <_printf_i+0x1f4>
 80057cc:	6820      	ldr	r0, [r4, #0]
 80057ce:	6829      	ldr	r1, [r5, #0]
 80057d0:	0606      	lsls	r6, r0, #24
 80057d2:	f101 0304 	add.w	r3, r1, #4
 80057d6:	d50a      	bpl.n	80057ee <_printf_i+0xce>
 80057d8:	680e      	ldr	r6, [r1, #0]
 80057da:	602b      	str	r3, [r5, #0]
 80057dc:	2e00      	cmp	r6, #0
 80057de:	da03      	bge.n	80057e8 <_printf_i+0xc8>
 80057e0:	232d      	movs	r3, #45	; 0x2d
 80057e2:	4276      	negs	r6, r6
 80057e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e8:	485e      	ldr	r0, [pc, #376]	; (8005964 <_printf_i+0x244>)
 80057ea:	230a      	movs	r3, #10
 80057ec:	e019      	b.n	8005822 <_printf_i+0x102>
 80057ee:	680e      	ldr	r6, [r1, #0]
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057f6:	bf18      	it	ne
 80057f8:	b236      	sxthne	r6, r6
 80057fa:	e7ef      	b.n	80057dc <_printf_i+0xbc>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	6820      	ldr	r0, [r4, #0]
 8005800:	1d19      	adds	r1, r3, #4
 8005802:	6029      	str	r1, [r5, #0]
 8005804:	0601      	lsls	r1, r0, #24
 8005806:	d501      	bpl.n	800580c <_printf_i+0xec>
 8005808:	681e      	ldr	r6, [r3, #0]
 800580a:	e002      	b.n	8005812 <_printf_i+0xf2>
 800580c:	0646      	lsls	r6, r0, #25
 800580e:	d5fb      	bpl.n	8005808 <_printf_i+0xe8>
 8005810:	881e      	ldrh	r6, [r3, #0]
 8005812:	4854      	ldr	r0, [pc, #336]	; (8005964 <_printf_i+0x244>)
 8005814:	2f6f      	cmp	r7, #111	; 0x6f
 8005816:	bf0c      	ite	eq
 8005818:	2308      	moveq	r3, #8
 800581a:	230a      	movne	r3, #10
 800581c:	2100      	movs	r1, #0
 800581e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005822:	6865      	ldr	r5, [r4, #4]
 8005824:	60a5      	str	r5, [r4, #8]
 8005826:	2d00      	cmp	r5, #0
 8005828:	bfa2      	ittt	ge
 800582a:	6821      	ldrge	r1, [r4, #0]
 800582c:	f021 0104 	bicge.w	r1, r1, #4
 8005830:	6021      	strge	r1, [r4, #0]
 8005832:	b90e      	cbnz	r6, 8005838 <_printf_i+0x118>
 8005834:	2d00      	cmp	r5, #0
 8005836:	d04d      	beq.n	80058d4 <_printf_i+0x1b4>
 8005838:	4615      	mov	r5, r2
 800583a:	fbb6 f1f3 	udiv	r1, r6, r3
 800583e:	fb03 6711 	mls	r7, r3, r1, r6
 8005842:	5dc7      	ldrb	r7, [r0, r7]
 8005844:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005848:	4637      	mov	r7, r6
 800584a:	42bb      	cmp	r3, r7
 800584c:	460e      	mov	r6, r1
 800584e:	d9f4      	bls.n	800583a <_printf_i+0x11a>
 8005850:	2b08      	cmp	r3, #8
 8005852:	d10b      	bne.n	800586c <_printf_i+0x14c>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	07de      	lsls	r6, r3, #31
 8005858:	d508      	bpl.n	800586c <_printf_i+0x14c>
 800585a:	6923      	ldr	r3, [r4, #16]
 800585c:	6861      	ldr	r1, [r4, #4]
 800585e:	4299      	cmp	r1, r3
 8005860:	bfde      	ittt	le
 8005862:	2330      	movle	r3, #48	; 0x30
 8005864:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005868:	f105 35ff 	addle.w	r5, r5, #4294967295
 800586c:	1b52      	subs	r2, r2, r5
 800586e:	6122      	str	r2, [r4, #16]
 8005870:	f8cd a000 	str.w	sl, [sp]
 8005874:	464b      	mov	r3, r9
 8005876:	aa03      	add	r2, sp, #12
 8005878:	4621      	mov	r1, r4
 800587a:	4640      	mov	r0, r8
 800587c:	f7ff fee2 	bl	8005644 <_printf_common>
 8005880:	3001      	adds	r0, #1
 8005882:	d14c      	bne.n	800591e <_printf_i+0x1fe>
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	b004      	add	sp, #16
 800588a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588e:	4835      	ldr	r0, [pc, #212]	; (8005964 <_printf_i+0x244>)
 8005890:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005894:	6829      	ldr	r1, [r5, #0]
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	f851 6b04 	ldr.w	r6, [r1], #4
 800589c:	6029      	str	r1, [r5, #0]
 800589e:	061d      	lsls	r5, r3, #24
 80058a0:	d514      	bpl.n	80058cc <_printf_i+0x1ac>
 80058a2:	07df      	lsls	r7, r3, #31
 80058a4:	bf44      	itt	mi
 80058a6:	f043 0320 	orrmi.w	r3, r3, #32
 80058aa:	6023      	strmi	r3, [r4, #0]
 80058ac:	b91e      	cbnz	r6, 80058b6 <_printf_i+0x196>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	f023 0320 	bic.w	r3, r3, #32
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	2310      	movs	r3, #16
 80058b8:	e7b0      	b.n	800581c <_printf_i+0xfc>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	f043 0320 	orr.w	r3, r3, #32
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	2378      	movs	r3, #120	; 0x78
 80058c4:	4828      	ldr	r0, [pc, #160]	; (8005968 <_printf_i+0x248>)
 80058c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058ca:	e7e3      	b.n	8005894 <_printf_i+0x174>
 80058cc:	0659      	lsls	r1, r3, #25
 80058ce:	bf48      	it	mi
 80058d0:	b2b6      	uxthmi	r6, r6
 80058d2:	e7e6      	b.n	80058a2 <_printf_i+0x182>
 80058d4:	4615      	mov	r5, r2
 80058d6:	e7bb      	b.n	8005850 <_printf_i+0x130>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	6826      	ldr	r6, [r4, #0]
 80058dc:	6961      	ldr	r1, [r4, #20]
 80058de:	1d18      	adds	r0, r3, #4
 80058e0:	6028      	str	r0, [r5, #0]
 80058e2:	0635      	lsls	r5, r6, #24
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	d501      	bpl.n	80058ec <_printf_i+0x1cc>
 80058e8:	6019      	str	r1, [r3, #0]
 80058ea:	e002      	b.n	80058f2 <_printf_i+0x1d2>
 80058ec:	0670      	lsls	r0, r6, #25
 80058ee:	d5fb      	bpl.n	80058e8 <_printf_i+0x1c8>
 80058f0:	8019      	strh	r1, [r3, #0]
 80058f2:	2300      	movs	r3, #0
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	4615      	mov	r5, r2
 80058f8:	e7ba      	b.n	8005870 <_printf_i+0x150>
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	1d1a      	adds	r2, r3, #4
 80058fe:	602a      	str	r2, [r5, #0]
 8005900:	681d      	ldr	r5, [r3, #0]
 8005902:	6862      	ldr	r2, [r4, #4]
 8005904:	2100      	movs	r1, #0
 8005906:	4628      	mov	r0, r5
 8005908:	f7fa fc62 	bl	80001d0 <memchr>
 800590c:	b108      	cbz	r0, 8005912 <_printf_i+0x1f2>
 800590e:	1b40      	subs	r0, r0, r5
 8005910:	6060      	str	r0, [r4, #4]
 8005912:	6863      	ldr	r3, [r4, #4]
 8005914:	6123      	str	r3, [r4, #16]
 8005916:	2300      	movs	r3, #0
 8005918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800591c:	e7a8      	b.n	8005870 <_printf_i+0x150>
 800591e:	6923      	ldr	r3, [r4, #16]
 8005920:	462a      	mov	r2, r5
 8005922:	4649      	mov	r1, r9
 8005924:	4640      	mov	r0, r8
 8005926:	47d0      	blx	sl
 8005928:	3001      	adds	r0, #1
 800592a:	d0ab      	beq.n	8005884 <_printf_i+0x164>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	079b      	lsls	r3, r3, #30
 8005930:	d413      	bmi.n	800595a <_printf_i+0x23a>
 8005932:	68e0      	ldr	r0, [r4, #12]
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	4298      	cmp	r0, r3
 8005938:	bfb8      	it	lt
 800593a:	4618      	movlt	r0, r3
 800593c:	e7a4      	b.n	8005888 <_printf_i+0x168>
 800593e:	2301      	movs	r3, #1
 8005940:	4632      	mov	r2, r6
 8005942:	4649      	mov	r1, r9
 8005944:	4640      	mov	r0, r8
 8005946:	47d0      	blx	sl
 8005948:	3001      	adds	r0, #1
 800594a:	d09b      	beq.n	8005884 <_printf_i+0x164>
 800594c:	3501      	adds	r5, #1
 800594e:	68e3      	ldr	r3, [r4, #12]
 8005950:	9903      	ldr	r1, [sp, #12]
 8005952:	1a5b      	subs	r3, r3, r1
 8005954:	42ab      	cmp	r3, r5
 8005956:	dcf2      	bgt.n	800593e <_printf_i+0x21e>
 8005958:	e7eb      	b.n	8005932 <_printf_i+0x212>
 800595a:	2500      	movs	r5, #0
 800595c:	f104 0619 	add.w	r6, r4, #25
 8005960:	e7f5      	b.n	800594e <_printf_i+0x22e>
 8005962:	bf00      	nop
 8005964:	08005a79 	.word	0x08005a79
 8005968:	08005a8a 	.word	0x08005a8a

0800596c <__retarget_lock_acquire_recursive>:
 800596c:	4770      	bx	lr

0800596e <__retarget_lock_release_recursive>:
 800596e:	4770      	bx	lr

08005970 <memcpy>:
 8005970:	440a      	add	r2, r1
 8005972:	4291      	cmp	r1, r2
 8005974:	f100 33ff 	add.w	r3, r0, #4294967295
 8005978:	d100      	bne.n	800597c <memcpy+0xc>
 800597a:	4770      	bx	lr
 800597c:	b510      	push	{r4, lr}
 800597e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005986:	4291      	cmp	r1, r2
 8005988:	d1f9      	bne.n	800597e <memcpy+0xe>
 800598a:	bd10      	pop	{r4, pc}

0800598c <memmove>:
 800598c:	4288      	cmp	r0, r1
 800598e:	b510      	push	{r4, lr}
 8005990:	eb01 0402 	add.w	r4, r1, r2
 8005994:	d902      	bls.n	800599c <memmove+0x10>
 8005996:	4284      	cmp	r4, r0
 8005998:	4623      	mov	r3, r4
 800599a:	d807      	bhi.n	80059ac <memmove+0x20>
 800599c:	1e43      	subs	r3, r0, #1
 800599e:	42a1      	cmp	r1, r4
 80059a0:	d008      	beq.n	80059b4 <memmove+0x28>
 80059a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059aa:	e7f8      	b.n	800599e <memmove+0x12>
 80059ac:	4402      	add	r2, r0
 80059ae:	4601      	mov	r1, r0
 80059b0:	428a      	cmp	r2, r1
 80059b2:	d100      	bne.n	80059b6 <memmove+0x2a>
 80059b4:	bd10      	pop	{r4, pc}
 80059b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059be:	e7f7      	b.n	80059b0 <memmove+0x24>

080059c0 <_realloc_r>:
 80059c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c4:	4680      	mov	r8, r0
 80059c6:	4614      	mov	r4, r2
 80059c8:	460e      	mov	r6, r1
 80059ca:	b921      	cbnz	r1, 80059d6 <_realloc_r+0x16>
 80059cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059d0:	4611      	mov	r1, r2
 80059d2:	f7ff bc2b 	b.w	800522c <_malloc_r>
 80059d6:	b92a      	cbnz	r2, 80059e4 <_realloc_r+0x24>
 80059d8:	f7ff fbbc 	bl	8005154 <_free_r>
 80059dc:	4625      	mov	r5, r4
 80059de:	4628      	mov	r0, r5
 80059e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e4:	f000 f81b 	bl	8005a1e <_malloc_usable_size_r>
 80059e8:	4284      	cmp	r4, r0
 80059ea:	4607      	mov	r7, r0
 80059ec:	d802      	bhi.n	80059f4 <_realloc_r+0x34>
 80059ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059f2:	d812      	bhi.n	8005a1a <_realloc_r+0x5a>
 80059f4:	4621      	mov	r1, r4
 80059f6:	4640      	mov	r0, r8
 80059f8:	f7ff fc18 	bl	800522c <_malloc_r>
 80059fc:	4605      	mov	r5, r0
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d0ed      	beq.n	80059de <_realloc_r+0x1e>
 8005a02:	42bc      	cmp	r4, r7
 8005a04:	4622      	mov	r2, r4
 8005a06:	4631      	mov	r1, r6
 8005a08:	bf28      	it	cs
 8005a0a:	463a      	movcs	r2, r7
 8005a0c:	f7ff ffb0 	bl	8005970 <memcpy>
 8005a10:	4631      	mov	r1, r6
 8005a12:	4640      	mov	r0, r8
 8005a14:	f7ff fb9e 	bl	8005154 <_free_r>
 8005a18:	e7e1      	b.n	80059de <_realloc_r+0x1e>
 8005a1a:	4635      	mov	r5, r6
 8005a1c:	e7df      	b.n	80059de <_realloc_r+0x1e>

08005a1e <_malloc_usable_size_r>:
 8005a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a22:	1f18      	subs	r0, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bfbc      	itt	lt
 8005a28:	580b      	ldrlt	r3, [r1, r0]
 8005a2a:	18c0      	addlt	r0, r0, r3
 8005a2c:	4770      	bx	lr
	...

08005a30 <_init>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	bf00      	nop
 8005a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a36:	bc08      	pop	{r3}
 8005a38:	469e      	mov	lr, r3
 8005a3a:	4770      	bx	lr

08005a3c <_fini>:
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	bf00      	nop
 8005a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a42:	bc08      	pop	{r3}
 8005a44:	469e      	mov	lr, r3
 8005a46:	4770      	bx	lr
