
gun4_checksumchar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005000  08005000  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005004  08005004  00015004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000464  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000478  20000478  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015601  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa7  00000000  00000000  00035645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  000385f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001038  00000000  00000000  00039728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a93  00000000  00000000  0003a760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016658  00000000  00000000  0005d1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc5ff  00000000  00000000  0007384b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fe4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048f0  00000000  00000000  0013fe9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004fc8 	.word	0x08004fc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004fc8 	.word	0x08004fc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <status2>:
extern char rbuffer[6];
extern char tbuffer[6];
extern UART_HandleTypeDef huart2;

void status2(int size,char a[size])
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]

	for(i=0;i<5;i++)
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <status2+0x64>)
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	e015      	b.n	800050a <status2+0x3e>
	{
		deger1 = a[i];
 80004de:	4b14      	ldr	r3, [pc, #80]	; (8000530 <status2+0x64>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	461a      	mov	r2, r3
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <status2+0x68>)
 80004ec:	701a      	strb	r2, [r3, #0]
		toplam1 = toplam1 + deger1;
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <status2+0x6c>)
 80004f0:	781a      	ldrb	r2, [r3, #0]
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <status2+0x68>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	4413      	add	r3, r2
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <status2+0x6c>)
 80004fc:	701a      	strb	r2, [r3, #0]
	for(i=0;i<5;i++)
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <status2+0x64>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	3301      	adds	r3, #1
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <status2+0x64>)
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <status2+0x64>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b04      	cmp	r3, #4
 8000510:	d9e5      	bls.n	80004de <status2+0x12>
	}

	checksumd1 = toplam1 % 256;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <status2+0x6c>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b25a      	sxtb	r2, r3
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <status2+0x70>)
 800051a:	701a      	strb	r2, [r3, #0]
	toplam1=0;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <status2+0x6c>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000033 	.word	0x20000033
 8000534:	20000031 	.word	0x20000031
 8000538:	20000032 	.word	0x20000032
 800053c:	20000030 	.word	0x20000030

08000540 <button>:

void button(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

	status2(6,tbuffer);
 8000544:	4908      	ldr	r1, [pc, #32]	; (8000568 <button+0x28>)
 8000546:	2006      	movs	r0, #6
 8000548:	f7ff ffc0 	bl	80004cc <status2>
	tbuffer[5]=checksumd1;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <button+0x2c>)
 800054e:	f993 3000 	ldrsb.w	r3, [r3]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <button+0x28>)
 8000556:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit(&huart2,(uint8_t*)tbuffer,6,100);
 8000558:	2364      	movs	r3, #100	; 0x64
 800055a:	2206      	movs	r2, #6
 800055c:	4902      	ldr	r1, [pc, #8]	; (8000568 <button+0x28>)
 800055e:	4804      	ldr	r0, [pc, #16]	; (8000570 <button+0x30>)
 8000560:	f003 fd80 	bl	8004064 <HAL_UART_Transmit>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000000 	.word	0x20000000
 800056c:	20000030 	.word	0x20000030
 8000570:	2000012c 	.word	0x2000012c

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fc6e 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f850 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f976 	bl	8000870 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000584:	f000 f8b6 	bl	80006f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000588:	f000 f8e2 	bl	8000750 <MX_I2S3_Init>
  MX_SPI1_Init();
 800058c:	f000 f910 	bl	80007b0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f944 	bl	800081c <MX_USART2_UART_Init>

    /* USER CODE BEGIN 3 */



	   if (status1==0 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_RESET))
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <main+0xa4>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d10a      	bne.n	80005b2 <main+0x3e>
 800059c:	2101      	movs	r1, #1
 800059e:	481f      	ldr	r0, [pc, #124]	; (800061c <main+0xa8>)
 80005a0:	f000 ff72 	bl	8001488 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d103      	bne.n	80005b2 <main+0x3e>
		{
			//while((HAL_GPIO_ReadPin(GPIOA,button6Stream_Pin)==GPIO_PIN_SET));

			status1=0;
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <main+0xa4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
 80005b0:	e030      	b.n	8000614 <main+0xa0>
		}
			 	  	  	//sadece buton low olduğunda ve status=0 olduğunda buton flagini 1 yapıyoruz ve buton okuması gerçekleştiriyoruz
		else if( (status1==0 &&  HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET) )
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <main+0xa4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d10f      	bne.n	80005da <main+0x66>
 80005ba:	2101      	movs	r1, #1
 80005bc:	4817      	ldr	r0, [pc, #92]	; (800061c <main+0xa8>)
 80005be:	f000 ff63 	bl	8001488 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d108      	bne.n	80005da <main+0x66>
		{
			status1=1;
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <main+0xa4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]

			button();
 80005ce:	f7ff ffb7 	bl	8000540 <button>
			HAL_Delay(100);
 80005d2:	2064      	movs	r0, #100	; 0x64
 80005d4:	f000 fcb2 	bl	8000f3c <HAL_Delay>
 80005d8:	e01c      	b.n	8000614 <main+0xa0>


	    }
		else if (status1==1 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_RESET))
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <main+0xa4>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d10a      	bne.n	80005f8 <main+0x84>
 80005e2:	2101      	movs	r1, #1
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <main+0xa8>)
 80005e6:	f000 ff4f 	bl	8001488 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d103      	bne.n	80005f8 <main+0x84>
		{
			status1=0;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <main+0xa4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e00d      	b.n	8000614 <main+0xa0>
		}
		else if (status1==1 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET))
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <main+0xa4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d1c9      	bne.n	8000594 <main+0x20>
 8000600:	2101      	movs	r1, #1
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <main+0xa8>)
 8000604:	f000 ff40 	bl	8001488 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d1c2      	bne.n	8000594 <main+0x20>
		{
			 status1=1;
 800060e:	4b02      	ldr	r3, [pc, #8]	; (8000618 <main+0xa4>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
	   if (status1==0 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_RESET))
 8000614:	e7be      	b.n	8000594 <main+0x20>
 8000616:	bf00      	nop
 8000618:	20000034 	.word	0x20000034
 800061c:	40020000 	.word	0x40020000

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f004 fcc2 	bl	8004fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000694:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069e:	2307      	movs	r3, #7
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fe2e 	bl	8003308 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006b2:	f000 f9db 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2105      	movs	r1, #5
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 f88f 	bl	80037f8 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e0:	f000 f9c4 	bl	8000a6c <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	; 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2C1_Init+0x50>)
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <MX_I2C1_Init+0x54>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_I2C1_Init+0x50>)
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_I2C1_Init+0x58>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_I2C1_Init+0x50>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_I2C1_Init+0x50>)
 8000732:	f002 f805 	bl	8002740 <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 f996 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000038 	.word	0x20000038
 8000748:	40005400 	.word	0x40005400
 800074c:	000186a0 	.word	0x000186a0

08000750 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <MX_I2S3_Init+0x58>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2S3_Init+0x54>)
 800075c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000760:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_I2S3_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <MX_I2S3_Init+0x5c>)
 800077a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_I2S3_Init+0x54>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_I2S3_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000790:	f002 f91a 	bl	80029c8 <HAL_I2S_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800079a:	f000 f967 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000008c 	.word	0x2000008c
 80007a8:	40003c00 	.word	0x40003c00
 80007ac:	00017700 	.word	0x00017700

080007b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_SPI1_Init+0x64>)
 80007b6:	4a18      	ldr	r2, [pc, #96]	; (8000818 <MX_SPI1_Init+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_SPI1_Init+0x64>)
 80007bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_SPI1_Init+0x64>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_SPI1_Init+0x64>)
 80007fc:	220a      	movs	r2, #10
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_SPI1_Init+0x64>)
 8000802:	f003 fb59 	bl	8003eb8 <HAL_SPI_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800080c:	f000 f92e 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000d4 	.word	0x200000d4
 8000818:	40013000 	.word	0x40013000

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_USART2_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000854:	f003 fbb9 	bl	8003fca <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f000 f905 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000012c 	.word	0x2000012c
 800086c:	40004400 	.word	0x40004400

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4b72      	ldr	r3, [pc, #456]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a71      	ldr	r2, [pc, #452]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 8000890:	f043 0310 	orr.w	r3, r3, #16
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b6f      	ldr	r3, [pc, #444]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	4b6b      	ldr	r3, [pc, #428]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a6a      	ldr	r2, [pc, #424]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b68      	ldr	r3, [pc, #416]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b64      	ldr	r3, [pc, #400]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a63      	ldr	r2, [pc, #396]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b61      	ldr	r3, [pc, #388]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b5d      	ldr	r3, [pc, #372]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a5c      	ldr	r2, [pc, #368]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b5a      	ldr	r3, [pc, #360]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a55      	ldr	r2, [pc, #340]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b53      	ldr	r3, [pc, #332]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b4f      	ldr	r3, [pc, #316]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a4e      	ldr	r2, [pc, #312]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b4c      	ldr	r3, [pc, #304]	; (8000a54 <MX_GPIO_Init+0x1e4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	4849      	ldr	r0, [pc, #292]	; (8000a58 <MX_GPIO_Init+0x1e8>)
 8000934:	f000 fdc0 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2101      	movs	r1, #1
 800093c:	4847      	ldr	r0, [pc, #284]	; (8000a5c <MX_GPIO_Init+0x1ec>)
 800093e:	f000 fdbb 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000942:	2200      	movs	r2, #0
 8000944:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000948:	4845      	ldr	r0, [pc, #276]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 800094a:	f000 fdb5 	bl	80014b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800094e:	2308      	movs	r3, #8
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	483c      	ldr	r0, [pc, #240]	; (8000a58 <MX_GPIO_Init+0x1e8>)
 8000966:	f000 fbf3 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800096a:	2301      	movs	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4836      	ldr	r0, [pc, #216]	; (8000a5c <MX_GPIO_Init+0x1ec>)
 8000982:	f000 fbe5 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000986:	2308      	movs	r3, #8
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000996:	2305      	movs	r3, #5
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	482e      	ldr	r0, [pc, #184]	; (8000a5c <MX_GPIO_Init+0x1ec>)
 80009a2:	f000 fbd5 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009aa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	482a      	ldr	r0, [pc, #168]	; (8000a64 <MX_GPIO_Init+0x1f4>)
 80009bc:	f000 fbc8 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009c0:	2304      	movs	r3, #4
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4825      	ldr	r0, [pc, #148]	; (8000a68 <MX_GPIO_Init+0x1f8>)
 80009d4:	f000 fbbc 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ea:	2305      	movs	r3, #5
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	481c      	ldr	r0, [pc, #112]	; (8000a68 <MX_GPIO_Init+0x1f8>)
 80009f6:	f000 fbab 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009fa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4813      	ldr	r0, [pc, #76]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 8000a14:	f000 fb9c 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_GPIO_Init+0x1f0>)
 8000a2c:	f000 fb90 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a34:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_GPIO_Init+0x1e8>)
 8000a46:	f000 fb83 	bl	8001150 <HAL_GPIO_Init>

}
 8000a4a:	bf00      	nop
 8000a4c:	3730      	adds	r7, #48	; 0x30
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40020800 	.word	0x40020800
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020400 	.word	0x40020400

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab6:	2007      	movs	r0, #7
 8000ab8:	f000 fb16 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_I2C_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12c      	bne.n	8000b44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0c:	2312      	movs	r3, #18
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	480c      	ldr	r0, [pc, #48]	; (8000b54 <HAL_I2C_MspInit+0x8c>)
 8000b24:	f000 fb14 	bl	8001150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_I2C_MspInit+0x88>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400

08000b58 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	; 0x38
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <HAL_I2S_MspInit+0xf0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d15a      	bne.n	8000c3e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b8c:	23c0      	movs	r3, #192	; 0xc0
 8000b8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 f84d 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ba4:	f7ff ff62 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_I2S_MspInit+0xf4>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c0c:	2306      	movs	r3, #6
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	480e      	ldr	r0, [pc, #56]	; (8000c50 <HAL_I2S_MspInit+0xf8>)
 8000c18:	f000 fa9a 	bl	8001150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c1c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c2e:	2306      	movs	r3, #6
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <HAL_I2S_MspInit+0xfc>)
 8000c3a:	f000 fa89 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	; 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40003c00 	.word	0x40003c00
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020800 	.word	0x40020800

08000c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_SPI_MspInit+0x84>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12b      	bne.n	8000cd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cb2:	23e0      	movs	r3, #224	; 0xe0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_SPI_MspInit+0x8c>)
 8000cce:	f000 fa3f 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40013000 	.word	0x40013000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_UART_MspInit+0x84>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12b      	bne.n	8000d62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d42:	230c      	movs	r3, #12
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d52:	2307      	movs	r3, #7
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d5e:	f000 f9f7 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40004400 	.word	0x40004400
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f89a 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <OTG_FS_IRQHandler+0x10>)
 8000dd2:	f000 fb8a 	bl	80014ea <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000174 	.word	0x20000174

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e0a:	490e      	ldr	r1, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e20:	4c0b      	ldr	r4, [pc, #44]	; (8000e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff ffd7 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f004 f89d 	bl	8004f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fb9d 	bl	8000574 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e48:	08005008 	.word	0x08005008
  ldr r2, =_sbss
 8000e4c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e50:	20000478 	.word	0x20000478

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f931 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fdf4 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f93b 	bl	8001136 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f911 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	2000000c 	.word	0x2000000c

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	20000170 	.word	0x20000170

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000170 	.word	0x20000170

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_Delay+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000010 	.word	0x20000010

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff47 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff5c 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffb0 	bl	80010a4 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	e16b      	b.n	8001444 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800116c:	2201      	movs	r2, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	f040 815a 	bne.w	800143e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	2b01      	cmp	r3, #1
 8001194:	d005      	beq.n	80011a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d130      	bne.n	8001204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 0201 	and.w	r2, r3, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b03      	cmp	r3, #3
 800120e:	d017      	beq.n	8001240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d123      	bne.n	8001294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	220f      	movs	r2, #15
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	08da      	lsrs	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3208      	adds	r2, #8
 800128e:	69b9      	ldr	r1, [r7, #24]
 8001290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80b4 	beq.w	800143e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b60      	ldr	r3, [pc, #384]	; (800145c <HAL_GPIO_Init+0x30c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a5f      	ldr	r2, [pc, #380]	; (800145c <HAL_GPIO_Init+0x30c>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b5d      	ldr	r3, [pc, #372]	; (800145c <HAL_GPIO_Init+0x30c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f2:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <HAL_GPIO_Init+0x310>)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a52      	ldr	r2, [pc, #328]	; (8001464 <HAL_GPIO_Init+0x314>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d02b      	beq.n	8001376 <HAL_GPIO_Init+0x226>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a51      	ldr	r2, [pc, #324]	; (8001468 <HAL_GPIO_Init+0x318>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d025      	beq.n	8001372 <HAL_GPIO_Init+0x222>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_GPIO_Init+0x31c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01f      	beq.n	800136e <HAL_GPIO_Init+0x21e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4f      	ldr	r2, [pc, #316]	; (8001470 <HAL_GPIO_Init+0x320>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d019      	beq.n	800136a <HAL_GPIO_Init+0x21a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4e      	ldr	r2, [pc, #312]	; (8001474 <HAL_GPIO_Init+0x324>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0x216>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4d      	ldr	r2, [pc, #308]	; (8001478 <HAL_GPIO_Init+0x328>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_Init+0x212>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4c      	ldr	r2, [pc, #304]	; (800147c <HAL_GPIO_Init+0x32c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x20e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4b      	ldr	r2, [pc, #300]	; (8001480 <HAL_GPIO_Init+0x330>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_GPIO_Init+0x20a>
 8001356:	2307      	movs	r3, #7
 8001358:	e00e      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800135a:	2308      	movs	r3, #8
 800135c:	e00c      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800135e:	2306      	movs	r3, #6
 8001360:	e00a      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001362:	2305      	movs	r3, #5
 8001364:	e008      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001366:	2304      	movs	r3, #4
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800136a:	2303      	movs	r3, #3
 800136c:	e004      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800136e:	2302      	movs	r3, #2
 8001370:	e002      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001376:	2300      	movs	r3, #0
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	f002 0203 	and.w	r2, r2, #3
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	4093      	lsls	r3, r2
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001388:	4935      	ldr	r1, [pc, #212]	; (8001460 <HAL_GPIO_Init+0x310>)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_GPIO_Init+0x334>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ba:	4a32      	ldr	r2, [pc, #200]	; (8001484 <HAL_GPIO_Init+0x334>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c0:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_GPIO_Init+0x334>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e4:	4a27      	ldr	r2, [pc, #156]	; (8001484 <HAL_GPIO_Init+0x334>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_GPIO_Init+0x334>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140e:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_GPIO_Init+0x334>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_GPIO_Init+0x334>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001438:	4a12      	ldr	r2, [pc, #72]	; (8001484 <HAL_GPIO_Init+0x334>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3301      	adds	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	f67f ae90 	bls.w	800116c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40013800 	.word	0x40013800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40021400 	.word	0x40021400
 800147c:	40021800 	.word	0x40021800
 8001480:	40021c00 	.word	0x40021c00
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e001      	b.n	80014aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d4:	e003      	b.n	80014de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	619a      	str	r2, [r3, #24]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fa14 	bl	800492e <USB_GetMode>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	f040 80f6 	bne.w	80016fa <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f003 f9f8 	bl	8004908 <USB_ReadInterrupts>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80ec 	beq.w	80016f8 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f003 f9ef 	bl	8004908 <USB_ReadInterrupts>
 800152a:	4603      	mov	r3, r0
 800152c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001534:	d104      	bne.n	8001540 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800153e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f003 f9df 	bl	8004908 <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001554:	d104      	bne.n	8001560 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800155e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f003 f9cf 	bl	8004908 <USB_ReadInterrupts>
 800156a:	4603      	mov	r3, r0
 800156c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001574:	d104      	bne.n	8001580 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800157e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f003 f9bf 	bl	8004908 <USB_ReadInterrupts>
 800158a:	4603      	mov	r3, r0
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b02      	cmp	r3, #2
 8001592:	d103      	bne.n	800159c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2202      	movs	r2, #2
 800159a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 f9b1 	bl	8004908 <USB_ReadInterrupts>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015b0:	d11c      	bne.n	80015ec <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015ba:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10f      	bne.n	80015ec <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80015cc:	2110      	movs	r1, #16
 80015ce:	6938      	ldr	r0, [r7, #16]
 80015d0:	f003 f8de 	bl	8004790 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80015d4:	6938      	ldr	r0, [r7, #16]
 80015d6:	f003 f90f 	bl	80047f8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2101      	movs	r1, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 f9b2 	bl	800494a <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f003 fc43 	bl	8004e72 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 f989 	bl	8004908 <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d102      	bne.n	8001608 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f001 f829 	bl	800265a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f003 f97b 	bl	8004908 <USB_ReadInterrupts>
 8001612:	4603      	mov	r3, r0
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b08      	cmp	r3, #8
 800161a:	d106      	bne.n	800162a <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f003 fc0c 	bl	8004e3a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2208      	movs	r2, #8
 8001628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f003 f96a 	bl	8004908 <USB_ReadInterrupts>
 8001634:	4603      	mov	r3, r0
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	2b10      	cmp	r3, #16
 800163c:	d101      	bne.n	8001642 <HAL_HCD_IRQHandler+0x158>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_HCD_IRQHandler+0x15a>
 8001642:	2300      	movs	r3, #0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d012      	beq.n	800166e <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0210 	bic.w	r2, r2, #16
 8001656:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 ff2c 	bl	80024b6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699a      	ldr	r2, [r3, #24]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0210 	orr.w	r2, r2, #16
 800166c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f003 f948 	bl	8004908 <USB_ReadInterrupts>
 8001678:	4603      	mov	r3, r0
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001682:	d13a      	bne.n	80016fa <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f003 f998 	bl	80049be <USB_HC_ReadInterrupt>
 800168e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e025      	b.n	80016e2 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	fa22 f303 	lsr.w	r3, r2, r3
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d018      	beq.n	80016dc <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	015a      	lsls	r2, r3, #5
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016c0:	d106      	bne.n	80016d0 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f836 	bl	800173a <HCD_HC_IN_IRQHandler>
 80016ce:	e005      	b.n	80016dc <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fb84 	bl	8001de4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3301      	adds	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d3d4      	bcc.n	8001696 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016f4:	615a      	str	r2, [r3, #20]
 80016f6:	e000      	b.n	80016fa <HAL_HCD_IRQHandler+0x210>
      return;
 80016f8:	bf00      	nop
    }
  }
}
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_HCD_Stop+0x16>
 8001712:	2302      	movs	r3, #2
 8001714:	e00d      	b.n	8001732 <HAL_HCD_Stop+0x32>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f003 fa58 	bl	8004bd8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	015a      	lsls	r2, r3, #5
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4413      	add	r3, r2
 800175c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	2b04      	cmp	r3, #4
 8001768:	d11a      	bne.n	80017a0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4413      	add	r3, r2
 8001772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001776:	461a      	mov	r2, r3
 8001778:	2304      	movs	r3, #4
 800177a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	3361      	adds	r3, #97	; 0x61
 800178a:	2206      	movs	r2, #6
 800178c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f003 f921 	bl	80049e0 <USB_HC_Halt>
 800179e:	e0af      	b.n	8001900 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b6:	d11b      	bne.n	80017f0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c4:	461a      	mov	r2, r3
 80017c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3361      	adds	r3, #97	; 0x61
 80017da:	2207      	movs	r2, #7
 80017dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 f8f9 	bl	80049e0 <USB_HC_Halt>
 80017ee:	e087      	b.n	8001900 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	2b20      	cmp	r3, #32
 8001804:	d109      	bne.n	800181a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4413      	add	r3, r2
 800180e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001812:	461a      	mov	r2, r3
 8001814:	2320      	movs	r3, #32
 8001816:	6093      	str	r3, [r2, #8]
 8001818:	e072      	b.n	8001900 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4413      	add	r3, r2
 8001822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b08      	cmp	r3, #8
 800182e:	d11a      	bne.n	8001866 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4413      	add	r3, r2
 8001838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183c:	461a      	mov	r2, r3
 800183e:	2308      	movs	r3, #8
 8001840:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	3361      	adds	r3, #97	; 0x61
 8001850:	2205      	movs	r2, #5
 8001852:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f003 f8be 	bl	80049e0 <USB_HC_Halt>
 8001864:	e04c      	b.n	8001900 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4413      	add	r3, r2
 800186e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187c:	d11b      	bne.n	80018b6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4413      	add	r3, r2
 8001886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188a:	461a      	mov	r2, r3
 800188c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001890:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3361      	adds	r3, #97	; 0x61
 80018a0:	2208      	movs	r2, #8
 80018a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 f896 	bl	80049e0 <USB_HC_Halt>
 80018b4:	e024      	b.n	8001900 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	015a      	lsls	r2, r3, #5
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4413      	add	r3, r2
 80018be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c8:	2b80      	cmp	r3, #128	; 0x80
 80018ca:	d119      	bne.n	8001900 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	015a      	lsls	r2, r3, #5
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d8:	461a      	mov	r2, r3
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	3361      	adds	r3, #97	; 0x61
 80018ec:	2206      	movs	r2, #6
 80018ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f870 	bl	80049e0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	015a      	lsls	r2, r3, #5
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4413      	add	r3, r2
 8001908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001916:	d112      	bne.n	800193e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f003 f85c 	bl	80049e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	015a      	lsls	r2, r3, #5
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4413      	add	r3, r2
 8001930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001934:	461a      	mov	r2, r3
 8001936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800193c:	e24e      	b.n	8001ddc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4413      	add	r3, r2
 8001946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b01      	cmp	r3, #1
 8001952:	f040 80df 	bne.w	8001b14 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d019      	beq.n	8001992 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	3348      	adds	r3, #72	; 0x48
 800196c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	0159      	lsls	r1, r3, #5
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	440b      	add	r3, r1
 8001976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001980:	1ad2      	subs	r2, r2, r3
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	202c      	movs	r0, #44	; 0x2c
 8001988:	fb00 f303 	mul.w	r3, r0, r3
 800198c:	440b      	add	r3, r1
 800198e:	3350      	adds	r3, #80	; 0x50
 8001990:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	212c      	movs	r1, #44	; 0x2c
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	3361      	adds	r3, #97	; 0x61
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	212c      	movs	r1, #44	; 0x2c
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	335c      	adds	r3, #92	; 0x5c
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	015a      	lsls	r2, r3, #5
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4413      	add	r3, r2
 80019be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c2:	461a      	mov	r2, r3
 80019c4:	2301      	movs	r3, #1
 80019c6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	212c      	movs	r1, #44	; 0x2c
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	333f      	adds	r3, #63	; 0x3f
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d009      	beq.n	80019f0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	333f      	adds	r3, #63	; 0x3f
 80019ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d111      	bne.n	8001a14 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fff0 	bl	80049e0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	015a      	lsls	r2, r3, #5
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2310      	movs	r3, #16
 8001a10:	6093      	str	r3, [r2, #8]
 8001a12:	e03a      	b.n	8001a8a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	212c      	movs	r1, #44	; 0x2c
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	333f      	adds	r3, #63	; 0x3f
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d009      	beq.n	8001a3c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	333f      	adds	r3, #63	; 0x3f
 8001a36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d126      	bne.n	8001a8a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	015a      	lsls	r2, r3, #5
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	0151      	lsls	r1, r2, #5
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	440a      	add	r2, r1
 8001a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a5a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3360      	adds	r3, #96	; 0x60
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	b2d9      	uxtb	r1, r3
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	202c      	movs	r0, #44	; 0x2c
 8001a78:	fb00 f303 	mul.w	r3, r0, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3360      	adds	r3, #96	; 0x60
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f003 fa02 	bl	8004e8e <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d12b      	bne.n	8001aea <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	212c      	movs	r1, #44	; 0x2c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3348      	adds	r3, #72	; 0x48
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	202c      	movs	r0, #44	; 0x2c
 8001aa8:	fb00 f202 	mul.w	r2, r0, r2
 8001aac:	440a      	add	r2, r1
 8001aae:	3240      	adds	r2, #64	; 0x40
 8001ab0:	8812      	ldrh	r2, [r2, #0]
 8001ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 818e 	beq.w	8001ddc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	212c      	movs	r1, #44	; 0x2c
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	3354      	adds	r3, #84	; 0x54
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	f083 0301 	eor.w	r3, r3, #1
 8001ad4:	b2d8      	uxtb	r0, r3
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	212c      	movs	r1, #44	; 0x2c
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3354      	adds	r3, #84	; 0x54
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	701a      	strb	r2, [r3, #0]
}
 8001ae8:	e178      	b.n	8001ddc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	212c      	movs	r1, #44	; 0x2c
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	3354      	adds	r3, #84	; 0x54
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	f083 0301 	eor.w	r3, r3, #1
 8001afe:	b2d8      	uxtb	r0, r3
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3354      	adds	r3, #84	; 0x54
 8001b0e:	4602      	mov	r2, r0
 8001b10:	701a      	strb	r2, [r3, #0]
}
 8001b12:	e163      	b.n	8001ddc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	015a      	lsls	r2, r3, #5
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	f040 80f6 	bne.w	8001d18 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	3361      	adds	r3, #97	; 0x61
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d109      	bne.n	8001b54 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	212c      	movs	r1, #44	; 0x2c
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3360      	adds	r3, #96	; 0x60
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	e0c9      	b.n	8001ce8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	212c      	movs	r1, #44	; 0x2c
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	3361      	adds	r3, #97	; 0x61
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d109      	bne.n	8001b7c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	212c      	movs	r1, #44	; 0x2c
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	3360      	adds	r3, #96	; 0x60
 8001b76:	2205      	movs	r2, #5
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	e0b5      	b.n	8001ce8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	212c      	movs	r1, #44	; 0x2c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	3361      	adds	r3, #97	; 0x61
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b06      	cmp	r3, #6
 8001b8e:	d009      	beq.n	8001ba4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	212c      	movs	r1, #44	; 0x2c
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3361      	adds	r3, #97	; 0x61
 8001b9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d150      	bne.n	8001c46 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	335c      	adds	r3, #92	; 0x5c
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	202c      	movs	r0, #44	; 0x2c
 8001bbc:	fb00 f303 	mul.w	r3, r0, r3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	335c      	adds	r3, #92	; 0x5c
 8001bc4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	212c      	movs	r1, #44	; 0x2c
 8001bcc:	fb01 f303 	mul.w	r3, r1, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	335c      	adds	r3, #92	; 0x5c
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d912      	bls.n	8001c00 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	212c      	movs	r1, #44	; 0x2c
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	335c      	adds	r3, #92	; 0x5c
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	212c      	movs	r1, #44	; 0x2c
 8001bf2:	fb01 f303 	mul.w	r3, r1, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3360      	adds	r3, #96	; 0x60
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001bfe:	e073      	b.n	8001ce8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	212c      	movs	r1, #44	; 0x2c
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3360      	adds	r3, #96	; 0x60
 8001c0e:	2202      	movs	r2, #2
 8001c10:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c28:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c30:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c44:	e050      	b.n	8001ce8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	212c      	movs	r1, #44	; 0x2c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3361      	adds	r3, #97	; 0x61
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d122      	bne.n	8001ca0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3360      	adds	r3, #96	; 0x60
 8001c68:	2202      	movs	r2, #2
 8001c6a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	015a      	lsls	r2, r3, #5
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c82:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c8a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e023      	b.n	8001ce8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3361      	adds	r3, #97	; 0x61
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b07      	cmp	r3, #7
 8001cb2:	d119      	bne.n	8001ce8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	335c      	adds	r3, #92	; 0x5c
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	202c      	movs	r0, #44	; 0x2c
 8001ccc:	fb00 f303 	mul.w	r3, r0, r3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	335c      	adds	r3, #92	; 0x5c
 8001cd4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	212c      	movs	r1, #44	; 0x2c
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3360      	adds	r3, #96	; 0x60
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	b2d9      	uxtb	r1, r3
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	202c      	movs	r0, #44	; 0x2c
 8001d04:	fb00 f303 	mul.w	r3, r0, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	3360      	adds	r3, #96	; 0x60
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f003 f8bc 	bl	8004e8e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001d16:	e061      	b.n	8001ddc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d156      	bne.n	8001ddc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	212c      	movs	r1, #44	; 0x2c
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	333f      	adds	r3, #63	; 0x3f
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d111      	bne.n	8001d66 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	212c      	movs	r1, #44	; 0x2c
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	335c      	adds	r3, #92	; 0x5c
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 fe3e 	bl	80049e0 <USB_HC_Halt>
 8001d64:	e031      	b.n	8001dca <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	212c      	movs	r1, #44	; 0x2c
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	333f      	adds	r3, #63	; 0x3f
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	212c      	movs	r1, #44	; 0x2c
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	333f      	adds	r3, #63	; 0x3f
 8001d88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d11d      	bne.n	8001dca <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	212c      	movs	r1, #44	; 0x2c
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	335c      	adds	r3, #92	; 0x5c
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d110      	bne.n	8001dca <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	212c      	movs	r1, #44	; 0x2c
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	3361      	adds	r3, #97	; 0x61
 8001db6:	2203      	movs	r2, #3
 8001db8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 fe0b 	bl	80049e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2310      	movs	r3, #16
 8001dda:	6093      	str	r3, [r2, #8]
}
 8001ddc:	bf00      	nop
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d11a      	bne.n	8001e4a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	461a      	mov	r2, r3
 8001e22:	2304      	movs	r3, #4
 8001e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	212c      	movs	r1, #44	; 0x2c
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	3361      	adds	r3, #97	; 0x61
 8001e34:	2206      	movs	r2, #6
 8001e36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 fdcc 	bl	80049e0 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001e48:	e331      	b.n	80024ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d12e      	bne.n	8001ebe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2320      	movs	r3, #32
 8001e70:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	333d      	adds	r3, #61	; 0x3d
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	f040 8313 	bne.w	80024ae <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	212c      	movs	r1, #44	; 0x2c
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	333d      	adds	r3, #61	; 0x3d
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	212c      	movs	r1, #44	; 0x2c
 8001ea0:	fb01 f303 	mul.w	r3, r1, r3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3360      	adds	r3, #96	; 0x60
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f002 fd92 	bl	80049e0 <USB_HC_Halt>
}
 8001ebc:	e2f7      	b.n	80024ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed4:	d112      	bne.n	8001efc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 fd73 	bl	80049e0 <USB_HC_Halt>
}
 8001efa:	e2d8      	b.n	80024ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d140      	bne.n	8001f94 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	335c      	adds	r3, #92	; 0x5c
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d111      	bne.n	8001f5e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	212c      	movs	r1, #44	; 0x2c
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	333d      	adds	r3, #61	; 0x3d
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2340      	movs	r3, #64	; 0x40
 8001f5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	212c      	movs	r1, #44	; 0x2c
 8001f76:	fb01 f303 	mul.w	r3, r1, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3361      	adds	r3, #97	; 0x61
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fd27 	bl	80049e0 <USB_HC_Halt>
}
 8001f92:	e28c      	b.n	80024ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	2b40      	cmp	r3, #64	; 0x40
 8001fa8:	d12c      	bne.n	8002004 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3361      	adds	r3, #97	; 0x61
 8001fb8:	2204      	movs	r2, #4
 8001fba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	212c      	movs	r1, #44	; 0x2c
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	333d      	adds	r3, #61	; 0x3d
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	212c      	movs	r1, #44	; 0x2c
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	335c      	adds	r3, #92	; 0x5c
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f002 fcf8 	bl	80049e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2340      	movs	r3, #64	; 0x40
 8002000:	6093      	str	r3, [r2, #8]
}
 8002002:	e254      	b.n	80024ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11a      	bne.n	8002050 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4413      	add	r3, r2
 8002022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002026:	461a      	mov	r2, r3
 8002028:	2308      	movs	r3, #8
 800202a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	3361      	adds	r3, #97	; 0x61
 800203a:	2205      	movs	r2, #5
 800203c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f002 fcc9 	bl	80049e0 <USB_HC_Halt>
}
 800204e:	e22e      	b.n	80024ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b10      	cmp	r3, #16
 8002064:	d140      	bne.n	80020e8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	335c      	adds	r3, #92	; 0x5c
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3361      	adds	r3, #97	; 0x61
 8002086:	2203      	movs	r2, #3
 8002088:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	333d      	adds	r3, #61	; 0x3d
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d112      	bne.n	80020c4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	333c      	adds	r3, #60	; 0x3c
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d108      	bne.n	80020c4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	333d      	adds	r3, #61	; 0x3d
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fc86 	bl	80049e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	461a      	mov	r2, r3
 80020e2:	2310      	movs	r3, #16
 80020e4:	6093      	str	r3, [r2, #8]
}
 80020e6:	e1e2      	b.n	80024ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fa:	2b80      	cmp	r3, #128	; 0x80
 80020fc:	d164      	bne.n	80021c8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d111      	bne.n	800212a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3361      	adds	r3, #97	; 0x61
 8002114:	2206      	movs	r2, #6
 8002116:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f002 fc5c 	bl	80049e0 <USB_HC_Halt>
 8002128:	e044      	b.n	80021b4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	335c      	adds	r3, #92	; 0x5c
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	202c      	movs	r0, #44	; 0x2c
 8002142:	fb00 f303 	mul.w	r3, r0, r3
 8002146:	440b      	add	r3, r1
 8002148:	335c      	adds	r3, #92	; 0x5c
 800214a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	335c      	adds	r3, #92	; 0x5c
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d920      	bls.n	80021a2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	335c      	adds	r3, #92	; 0x5c
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	3360      	adds	r3, #96	; 0x60
 8002180:	2204      	movs	r2, #4
 8002182:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	b2d9      	uxtb	r1, r3
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	202c      	movs	r0, #44	; 0x2c
 800218e:	fb00 f303 	mul.w	r3, r0, r3
 8002192:	4413      	add	r3, r2
 8002194:	3360      	adds	r3, #96	; 0x60
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f002 fe77 	bl	8004e8e <HAL_HCD_HC_NotifyURBChange_Callback>
 80021a0:	e008      	b.n	80021b4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3360      	adds	r3, #96	; 0x60
 80021b0:	2202      	movs	r2, #2
 80021b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	461a      	mov	r2, r3
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	6093      	str	r3, [r2, #8]
}
 80021c6:	e172      	b.n	80024ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021de:	d11b      	bne.n	8002218 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3361      	adds	r3, #97	; 0x61
 80021ee:	2208      	movs	r2, #8
 80021f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 fbef 	bl	80049e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220e:	461a      	mov	r2, r3
 8002210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002214:	6093      	str	r3, [r2, #8]
}
 8002216:	e14a      	b.n	80024ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	f040 813f 	bne.w	80024ae <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3361      	adds	r3, #97	; 0x61
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d17d      	bne.n	8002340 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3360      	adds	r3, #96	; 0x60
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	333f      	adds	r3, #63	; 0x3f
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d00a      	beq.n	8002280 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	333f      	adds	r3, #63	; 0x3f
 8002278:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800227a:	2b03      	cmp	r3, #3
 800227c:	f040 8100 	bne.w	8002480 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d113      	bne.n	80022b0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3355      	adds	r3, #85	; 0x55
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	f083 0301 	eor.w	r3, r3, #1
 800229c:	b2d8      	uxtb	r0, r3
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3355      	adds	r3, #85	; 0x55
 80022ac:	4602      	mov	r2, r0
 80022ae:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	f040 80e3 	bne.w	8002480 <HCD_HC_OUT_IRQHandler+0x69c>
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	334c      	adds	r3, #76	; 0x4c
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80d8 	beq.w	8002480 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	334c      	adds	r3, #76	; 0x4c
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	202c      	movs	r0, #44	; 0x2c
 80022e6:	fb00 f202 	mul.w	r2, r0, r2
 80022ea:	440a      	add	r2, r1
 80022ec:	3240      	adds	r2, #64	; 0x40
 80022ee:	8812      	ldrh	r2, [r2, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	202c      	movs	r0, #44	; 0x2c
 80022fa:	fb00 f202 	mul.w	r2, r0, r2
 80022fe:	440a      	add	r2, r1
 8002300:	3240      	adds	r2, #64	; 0x40
 8002302:	8812      	ldrh	r2, [r2, #0]
 8002304:	fbb3 f3f2 	udiv	r3, r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80b5 	beq.w	8002480 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	3355      	adds	r3, #85	; 0x55
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	f083 0301 	eor.w	r3, r3, #1
 800232a:	b2d8      	uxtb	r0, r3
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3355      	adds	r3, #85	; 0x55
 800233a:	4602      	mov	r2, r0
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e09f      	b.n	8002480 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3361      	adds	r3, #97	; 0x61
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d109      	bne.n	8002368 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3360      	adds	r3, #96	; 0x60
 8002362:	2202      	movs	r2, #2
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e08b      	b.n	8002480 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3361      	adds	r3, #97	; 0x61
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d109      	bne.n	8002390 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3360      	adds	r3, #96	; 0x60
 800238a:	2202      	movs	r2, #2
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e077      	b.n	8002480 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3361      	adds	r3, #97	; 0x61
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d109      	bne.n	80023b8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3360      	adds	r3, #96	; 0x60
 80023b2:	2205      	movs	r2, #5
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	e063      	b.n	8002480 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3361      	adds	r3, #97	; 0x61
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	d009      	beq.n	80023e0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3361      	adds	r3, #97	; 0x61
 80023da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d14f      	bne.n	8002480 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	335c      	adds	r3, #92	; 0x5c
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	202c      	movs	r0, #44	; 0x2c
 80023f8:	fb00 f303 	mul.w	r3, r0, r3
 80023fc:	440b      	add	r3, r1
 80023fe:	335c      	adds	r3, #92	; 0x5c
 8002400:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	335c      	adds	r3, #92	; 0x5c
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d912      	bls.n	800243c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	335c      	adds	r3, #92	; 0x5c
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	3360      	adds	r3, #96	; 0x60
 8002436:	2204      	movs	r2, #4
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e021      	b.n	8002480 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	3360      	adds	r3, #96	; 0x60
 800244a:	2202      	movs	r2, #2
 800244c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002464:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800246c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	461a      	mov	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	461a      	mov	r2, r3
 800248e:	2302      	movs	r3, #2
 8002490:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	b2d9      	uxtb	r1, r3
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	202c      	movs	r0, #44	; 0x2c
 800249c:	fb00 f303 	mul.w	r3, r0, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3360      	adds	r3, #96	; 0x60
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f002 fcf0 	bl	8004e8e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024ae:	bf00      	nop
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b08a      	sub	sp, #40	; 0x28
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	0c5b      	lsrs	r3, r3, #17
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d004      	beq.n	80024fc <HCD_RXQLVL_IRQHandler+0x46>
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	f000 80a9 	beq.w	800264c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80024fa:	e0aa      	b.n	8002652 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80a6 	beq.w	8002650 <HCD_RXQLVL_IRQHandler+0x19a>
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3344      	adds	r3, #68	; 0x44
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 809b 	beq.w	8002650 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3350      	adds	r3, #80	; 0x50
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	441a      	add	r2, r3
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	202c      	movs	r0, #44	; 0x2c
 8002534:	fb00 f303 	mul.w	r3, r0, r3
 8002538:	440b      	add	r3, r1
 800253a:	334c      	adds	r3, #76	; 0x4c
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d87a      	bhi.n	8002638 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3344      	adds	r3, #68	; 0x44
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	b292      	uxth	r2, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f002 f97c 	bl	8004858 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3344      	adds	r3, #68	; 0x44
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	441a      	add	r2, r3
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	202c      	movs	r0, #44	; 0x2c
 800257a:	fb00 f303 	mul.w	r3, r0, r3
 800257e:	440b      	add	r3, r1
 8002580:	3344      	adds	r3, #68	; 0x44
 8002582:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	212c      	movs	r1, #44	; 0x2c
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	4413      	add	r3, r2
 8002590:	3350      	adds	r3, #80	; 0x50
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	441a      	add	r2, r3
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	202c      	movs	r0, #44	; 0x2c
 800259e:	fb00 f303 	mul.w	r3, r0, r3
 80025a2:	440b      	add	r3, r1
 80025a4:	3350      	adds	r3, #80	; 0x50
 80025a6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	0cdb      	lsrs	r3, r3, #19
 80025b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025bc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3340      	adds	r3, #64	; 0x40
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d13c      	bne.n	8002650 <HCD_RXQLVL_IRQHandler+0x19a>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d039      	beq.n	8002650 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	4413      	add	r3, r2
 8002604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002608:	461a      	mov	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3354      	adds	r3, #84	; 0x54
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	f083 0301 	eor.w	r3, r3, #1
 8002622:	b2d8      	uxtb	r0, r3
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3354      	adds	r3, #84	; 0x54
 8002632:	4602      	mov	r2, r0
 8002634:	701a      	strb	r2, [r3, #0]
      break;
 8002636:	e00b      	b.n	8002650 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	3360      	adds	r3, #96	; 0x60
 8002646:	2204      	movs	r2, #4
 8002648:	701a      	strb	r2, [r3, #0]
      break;
 800264a:	e001      	b.n	8002650 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002650:	bf00      	nop
  }
}
 8002652:	bf00      	nop
 8002654:	3728      	adds	r7, #40	; 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002686:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b02      	cmp	r3, #2
 8002690:	d10b      	bne.n	80026aa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d102      	bne.n	80026a2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f002 fbda 	bl	8004e56 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d132      	bne.n	800271a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d126      	bne.n	8002714 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d113      	bne.n	80026f6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80026d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026d8:	d106      	bne.n	80026e8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2102      	movs	r1, #2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 f932 	bl	800494a <USB_InitFSLSPClkSel>
 80026e6:	e011      	b.n	800270c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2101      	movs	r1, #1
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 f92b 	bl	800494a <USB_InitFSLSPClkSel>
 80026f4:	e00a      	b.n	800270c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d106      	bne.n	800270c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002704:	461a      	mov	r2, r3
 8002706:	f64e 2360 	movw	r3, #60000	; 0xea60
 800270a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f002 fbcc 	bl	8004eaa <HAL_HCD_PortEnabled_Callback>
 8002712:	e002      	b.n	800271a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f002 fbd6 	bl	8004ec6 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b20      	cmp	r3, #32
 8002722:	d103      	bne.n	800272c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f043 0320 	orr.w	r3, r3, #32
 800272a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002732:	461a      	mov	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	6013      	str	r3, [r2, #0]
}
 8002738:	bf00      	nop
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e12b      	b.n	80029aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe f9ae 	bl	8000ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2224      	movs	r2, #36	; 0x24
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a4:	f001 fa20 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 80027a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a81      	ldr	r2, [pc, #516]	; (80029b4 <HAL_I2C_Init+0x274>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d807      	bhi.n	80027c4 <HAL_I2C_Init+0x84>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a80      	ldr	r2, [pc, #512]	; (80029b8 <HAL_I2C_Init+0x278>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	bf94      	ite	ls
 80027bc:	2301      	movls	r3, #1
 80027be:	2300      	movhi	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e006      	b.n	80027d2 <HAL_I2C_Init+0x92>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a7d      	ldr	r2, [pc, #500]	; (80029bc <HAL_I2C_Init+0x27c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0e7      	b.n	80029aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a78      	ldr	r2, [pc, #480]	; (80029c0 <HAL_I2C_Init+0x280>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0c9b      	lsrs	r3, r3, #18
 80027e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a6a      	ldr	r2, [pc, #424]	; (80029b4 <HAL_I2C_Init+0x274>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d802      	bhi.n	8002814 <HAL_I2C_Init+0xd4>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3301      	adds	r3, #1
 8002812:	e009      	b.n	8002828 <HAL_I2C_Init+0xe8>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	4a69      	ldr	r2, [pc, #420]	; (80029c4 <HAL_I2C_Init+0x284>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	3301      	adds	r3, #1
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800283a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	495c      	ldr	r1, [pc, #368]	; (80029b4 <HAL_I2C_Init+0x274>)
 8002844:	428b      	cmp	r3, r1
 8002846:	d819      	bhi.n	800287c <HAL_I2C_Init+0x13c>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e59      	subs	r1, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	fbb1 f3f3 	udiv	r3, r1, r3
 8002856:	1c59      	adds	r1, r3, #1
 8002858:	f640 73fc 	movw	r3, #4092	; 0xffc
 800285c:	400b      	ands	r3, r1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_I2C_Init+0x138>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1e59      	subs	r1, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002870:	3301      	adds	r3, #1
 8002872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002876:	e051      	b.n	800291c <HAL_I2C_Init+0x1dc>
 8002878:	2304      	movs	r3, #4
 800287a:	e04f      	b.n	800291c <HAL_I2C_Init+0x1dc>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d111      	bne.n	80028a8 <HAL_I2C_Init+0x168>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e012      	b.n	80028ce <HAL_I2C_Init+0x18e>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Init+0x196>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e022      	b.n	800291c <HAL_I2C_Init+0x1dc>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10e      	bne.n	80028fc <HAL_I2C_Init+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1e58      	subs	r0, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	440b      	add	r3, r1
 80028ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fa:	e00f      	b.n	800291c <HAL_I2C_Init+0x1dc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	0099      	lsls	r1, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002912:	3301      	adds	r3, #1
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	6809      	ldr	r1, [r1, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800294a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6911      	ldr	r1, [r2, #16]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68d2      	ldr	r2, [r2, #12]
 8002956:	4311      	orrs	r1, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	430b      	orrs	r3, r1
 800295e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	000186a0 	.word	0x000186a0
 80029b8:	001e847f 	.word	0x001e847f
 80029bc:	003d08ff 	.word	0x003d08ff
 80029c0:	431bde83 	.word	0x431bde83
 80029c4:	10624dd3 	.word	0x10624dd3

080029c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e128      	b.n	8002c2c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a90      	ldr	r2, [pc, #576]	; (8002c34 <HAL_I2S_Init+0x26c>)
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7fe f8af 	bl	8000b58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2202      	movs	r2, #2
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a10:	f023 030f 	bic.w	r3, r3, #15
 8002a14:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d060      	beq.n	8002ae8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a2e:	2310      	movs	r3, #16
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	e001      	b.n	8002a38 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d802      	bhi.n	8002a46 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f001 f9d8 	bl	8003dfc <HAL_RCCEx_GetPeriphCLKFreq>
 8002a4c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a56:	d125      	bne.n	8002aa4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	461a      	mov	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	3305      	adds	r3, #5
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	e01f      	b.n	8002ac2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	3305      	adds	r3, #5
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	e00e      	b.n	8002ac2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	3305      	adds	r3, #5
 8002ac0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4a5c      	ldr	r2, [pc, #368]	; (8002c38 <HAL_I2S_Init+0x270>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	08db      	lsrs	r3, r3, #3
 8002acc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	e003      	b.n	8002af0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d902      	bls.n	8002afc <HAL_I2S_Init+0x134>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	2bff      	cmp	r3, #255	; 0xff
 8002afa:	d907      	bls.n	8002b0c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f043 0210 	orr.w	r2, r3, #16
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e08f      	b.n	8002c2c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	ea42 0103 	orr.w	r1, r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b2a:	f023 030f 	bic.w	r3, r3, #15
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6851      	ldr	r1, [r2, #4]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6892      	ldr	r2, [r2, #8]
 8002b36:	4311      	orrs	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68d2      	ldr	r2, [r2, #12]
 8002b3c:	4311      	orrs	r1, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6992      	ldr	r2, [r2, #24]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b4e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d161      	bne.n	8002c1c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a38      	ldr	r2, [pc, #224]	; (8002c3c <HAL_I2S_Init+0x274>)
 8002b5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a37      	ldr	r2, [pc, #220]	; (8002c40 <HAL_I2S_Init+0x278>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d101      	bne.n	8002b6c <HAL_I2S_Init+0x1a4>
 8002b68:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <HAL_I2S_Init+0x27c>)
 8002b6a:	e001      	b.n	8002b70 <HAL_I2S_Init+0x1a8>
 8002b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	4932      	ldr	r1, [pc, #200]	; (8002c40 <HAL_I2S_Init+0x278>)
 8002b78:	428a      	cmp	r2, r1
 8002b7a:	d101      	bne.n	8002b80 <HAL_I2S_Init+0x1b8>
 8002b7c:	4a31      	ldr	r2, [pc, #196]	; (8002c44 <HAL_I2S_Init+0x27c>)
 8002b7e:	e001      	b.n	8002b84 <HAL_I2S_Init+0x1bc>
 8002b80:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002b84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b88:	f023 030f 	bic.w	r3, r3, #15
 8002b8c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <HAL_I2S_Init+0x278>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_I2S_Init+0x1d4>
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_I2S_Init+0x27c>)
 8002b9a:	e001      	b.n	8002ba0 <HAL_I2S_Init+0x1d8>
 8002b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <HAL_I2S_Init+0x278>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2S_Init+0x1ea>
 8002bae:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_I2S_Init+0x27c>)
 8002bb0:	e001      	b.n	8002bb6 <HAL_I2S_Init+0x1ee>
 8002bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc2:	d003      	beq.n	8002bcc <HAL_I2S_Init+0x204>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	e001      	b.n	8002bd8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002be2:	4313      	orrs	r3, r2
 8002be4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002bec:	4313      	orrs	r3, r2
 8002bee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	897b      	ldrh	r3, [r7, #10]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c04:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <HAL_I2S_Init+0x278>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d101      	bne.n	8002c14 <HAL_I2S_Init+0x24c>
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_I2S_Init+0x27c>)
 8002c12:	e001      	b.n	8002c18 <HAL_I2S_Init+0x250>
 8002c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c18:	897a      	ldrh	r2, [r7, #10]
 8002c1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	08002d3f 	.word	0x08002d3f
 8002c38:	cccccccd 	.word	0xcccccccd
 8002c3c:	08002e55 	.word	0x08002e55
 8002c40:	40003800 	.word	0x40003800
 8002c44:	40003400 	.word	0x40003400

08002c48 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	881a      	ldrh	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	1c9a      	adds	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10e      	bne.n	8002cd8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cc8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffb8 	bl	8002c48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	b292      	uxth	r2, r2
 8002cf4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	1c9a      	adds	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10e      	bne.n	8002d36 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d26:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff93 	bl	8002c5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d13a      	bne.n	8002dd0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d109      	bne.n	8002d78 <I2S_IRQHandler+0x3a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d102      	bne.n	8002d78 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ffb4 	bl	8002ce0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	2b40      	cmp	r3, #64	; 0x40
 8002d80:	d126      	bne.n	8002dd0 <I2S_IRQHandler+0x92>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d11f      	bne.n	8002dd0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ff50 	bl	8002c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d136      	bne.n	8002e4a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d109      	bne.n	8002dfa <I2S_IRQHandler+0xbc>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b80      	cmp	r3, #128	; 0x80
 8002df2:	d102      	bne.n	8002dfa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff45 	bl	8002c84 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d122      	bne.n	8002e4a <I2S_IRQHandler+0x10c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d11b      	bne.n	8002e4a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e20:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3c:	f043 0204 	orr.w	r2, r3, #4
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff13 	bl	8002c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a92      	ldr	r2, [pc, #584]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002e6e:	4b92      	ldr	r3, [pc, #584]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e70:	e001      	b.n	8002e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a8b      	ldr	r2, [pc, #556]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d101      	bne.n	8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002e8c:	4b8a      	ldr	r3, [pc, #552]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e8e:	e001      	b.n	8002e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea0:	d004      	beq.n	8002eac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 8099 	bne.w	8002fde <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d107      	bne.n	8002ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f925 	bl	8003110 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d107      	bne.n	8002ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f9c8 	bl	8003270 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d13a      	bne.n	8002f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d035      	beq.n	8002f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6e      	ldr	r2, [pc, #440]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002efe:	4b6e      	ldr	r3, [pc, #440]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f00:	e001      	b.n	8002f06 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002f02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4969      	ldr	r1, [pc, #420]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f0e:	428b      	cmp	r3, r1
 8002f10:	d101      	bne.n	8002f16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002f12:	4b69      	ldr	r3, [pc, #420]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f14:	e001      	b.n	8002f1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002f16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f1e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f043 0202 	orr.w	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff fe88 	bl	8002c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	f040 80c3 	bne.w	80030f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80bd 	beq.w	80030f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f86:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a49      	ldr	r2, [pc, #292]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002f92:	4b49      	ldr	r3, [pc, #292]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f94:	e001      	b.n	8002f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4944      	ldr	r1, [pc, #272]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fa2:	428b      	cmp	r3, r1
 8002fa4:	d101      	bne.n	8002faa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002fa6:	4b44      	ldr	r3, [pc, #272]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fa8:	e001      	b.n	8002fae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fb2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f043 0204 	orr.w	r2, r3, #4
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fe4a 	bl	8002c70 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fdc:	e089      	b.n	80030f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d107      	bne.n	8002ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8be 	bl	8003174 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d107      	bne.n	8003012 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f8fd 	bl	800320c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d12f      	bne.n	800307c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d02a      	beq.n	800307c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003034:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003042:	e001      	b.n	8003048 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4919      	ldr	r1, [pc, #100]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003050:	428b      	cmp	r3, r1
 8003052:	d101      	bne.n	8003058 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003056:	e001      	b.n	800305c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800305c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003060:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f043 0202 	orr.w	r2, r3, #2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fdfa 	bl	8002c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b08      	cmp	r3, #8
 8003084:	d136      	bne.n	80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d031      	beq.n	80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800309c:	e001      	b.n	80030a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800309e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4902      	ldr	r1, [pc, #8]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030aa:	428b      	cmp	r3, r1
 80030ac:	d106      	bne.n	80030bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80030ae:	4b02      	ldr	r3, [pc, #8]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030b0:	e006      	b.n	80030c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80030b2:	bf00      	nop
 80030b4:	40003800 	.word	0x40003800
 80030b8:	40003400 	.word	0x40003400
 80030bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f043 0204 	orr.w	r2, r3, #4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff fdc0 	bl	8002c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030f0:	e000      	b.n	80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030f2:	bf00      	nop
}
 80030f4:	bf00      	nop
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c99      	adds	r1, r3, #2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6251      	str	r1, [r2, #36]	; 0x24
 8003122:	881a      	ldrh	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d113      	bne.n	800316a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003150:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ffc9 	bl	80030fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	1c99      	adds	r1, r3, #2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6251      	str	r1, [r2, #36]	; 0x24
 8003186:	8819      	ldrh	r1, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <I2SEx_TxISR_I2SExt+0x90>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <I2SEx_TxISR_I2SExt+0x22>
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <I2SEx_TxISR_I2SExt+0x94>)
 8003194:	e001      	b.n	800319a <I2SEx_TxISR_I2SExt+0x26>
 8003196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800319a:	460a      	mov	r2, r1
 800319c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d121      	bne.n	80031fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <I2SEx_TxISR_I2SExt+0x90>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d101      	bne.n	80031c4 <I2SEx_TxISR_I2SExt+0x50>
 80031c0:	4b11      	ldr	r3, [pc, #68]	; (8003208 <I2SEx_TxISR_I2SExt+0x94>)
 80031c2:	e001      	b.n	80031c8 <I2SEx_TxISR_I2SExt+0x54>
 80031c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	490d      	ldr	r1, [pc, #52]	; (8003204 <I2SEx_TxISR_I2SExt+0x90>)
 80031d0:	428b      	cmp	r3, r1
 80031d2:	d101      	bne.n	80031d8 <I2SEx_TxISR_I2SExt+0x64>
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <I2SEx_TxISR_I2SExt+0x94>)
 80031d6:	e001      	b.n	80031dc <I2SEx_TxISR_I2SExt+0x68>
 80031d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d106      	bne.n	80031fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff81 	bl	80030fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40003800 	.word	0x40003800
 8003208:	40003400 	.word	0x40003400

0800320c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68d8      	ldr	r0, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	1c99      	adds	r1, r3, #2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003224:	b282      	uxth	r2, r0
 8003226:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d113      	bne.n	8003268 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800324e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ff4a 	bl	80030fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a20      	ldr	r2, [pc, #128]	; (8003300 <I2SEx_RxISR_I2SExt+0x90>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <I2SEx_RxISR_I2SExt+0x16>
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <I2SEx_RxISR_I2SExt+0x94>)
 8003284:	e001      	b.n	800328a <I2SEx_RxISR_I2SExt+0x1a>
 8003286:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800328a:	68d8      	ldr	r0, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	1c99      	adds	r1, r3, #2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003296:	b282      	uxth	r2, r0
 8003298:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d121      	bne.n	80032f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a12      	ldr	r2, [pc, #72]	; (8003300 <I2SEx_RxISR_I2SExt+0x90>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <I2SEx_RxISR_I2SExt+0x50>
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <I2SEx_RxISR_I2SExt+0x94>)
 80032be:	e001      	b.n	80032c4 <I2SEx_RxISR_I2SExt+0x54>
 80032c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	490d      	ldr	r1, [pc, #52]	; (8003300 <I2SEx_RxISR_I2SExt+0x90>)
 80032cc:	428b      	cmp	r3, r1
 80032ce:	d101      	bne.n	80032d4 <I2SEx_RxISR_I2SExt+0x64>
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <I2SEx_RxISR_I2SExt+0x94>)
 80032d2:	e001      	b.n	80032d8 <I2SEx_RxISR_I2SExt+0x68>
 80032d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff03 	bl	80030fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40003800 	.word	0x40003800
 8003304:	40003400 	.word	0x40003400

08003308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e267      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d075      	beq.n	8003412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00c      	beq.n	800334c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333a:	2b08      	cmp	r3, #8
 800333c:	d112      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334a:	d10b      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05b      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d157      	bne.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e242      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x74>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6f      	ldr	r2, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6c      	ldr	r2, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a68      	ldr	r2, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fd fdb0 	bl	8000f24 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fd fdac 	bl	8000f24 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e207      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd fd9c 	bl	8000f24 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fd fd98 	bl	8000f24 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1f3      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c7      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4937      	ldr	r1, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x244>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fd fd51 	bl	8000f24 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003486:	f7fd fd4d 	bl	8000f24 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a8      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4925      	ldr	r1, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x244>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fd fd30 	bl	8000f24 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fd fd2c 	bl	8000f24 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e187      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d036      	beq.n	8003560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fd fd10 	bl	8000f24 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003508:	f7fd fd0c 	bl	8000f24 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e167      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x200>
 8003526:	e01b      	b.n	8003560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fd fcf9 	bl	8000f24 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00e      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7fd fcf5 	bl	8000f24 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d907      	bls.n	8003554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e150      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	42470000 	.word	0x42470000
 8003550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ea      	bne.n	8003536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8097 	beq.w	800369c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b81      	ldr	r3, [pc, #516]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	4b7d      	ldr	r3, [pc, #500]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b7a      	ldr	r3, [pc, #488]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fd fcb5 	bl	8000f24 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fd fcb1 	bl	8000f24 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e10c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ea>
 80035e4:	4b64      	ldr	r3, [pc, #400]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a63      	ldr	r2, [pc, #396]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	e01c      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x30c>
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5e      	ldr	r2, [pc, #376]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a5b      	ldr	r2, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 8003614:	4b58      	ldr	r3, [pc, #352]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a57      	ldr	r2, [pc, #348]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	4b55      	ldr	r3, [pc, #340]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fd fc76 	bl	8000f24 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fd fc72 	bl	8000f24 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0cb      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	4b49      	ldr	r3, [pc, #292]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ee      	beq.n	800363c <HAL_RCC_OscConfig+0x334>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003660:	f7fd fc60 	bl	8000f24 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fd fc5c 	bl	8000f24 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0b5      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ee      	bne.n	8003668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003690:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a38      	ldr	r2, [pc, #224]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80a1 	beq.w	80037e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d05c      	beq.n	800376c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d141      	bne.n	800373e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fd fc30 	bl	8000f24 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fd fc2c 	bl	8000f24 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e087      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fd fc05 	bl	8000f24 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371e:	f7fd fc01 	bl	8000f24 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e05c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x416>
 800373c:	e054      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fd fbee 	bl	8000f24 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd fbea 	bl	8000f24 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e045      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x444>
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e038      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003778:	40023800 	.word	0x40023800
 800377c:	40007000 	.word	0x40007000
 8003780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x4ec>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d028      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d121      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d11a      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fd fb1c 	bl	8000f24 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fd fb18 	bl	8000f24 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f821 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	490a      	ldr	r1, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fa7c 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	08004fe0 	.word	0x08004fe0
 80039bc:	20000008 	.word	0x20000008
 80039c0:	2000000c 	.word	0x2000000c

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c8:	b094      	sub	sp, #80	; 0x50
 80039ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	647b      	str	r3, [r7, #68]	; 0x44
 80039d0:	2300      	movs	r3, #0
 80039d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d4:	2300      	movs	r3, #0
 80039d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039dc:	4b79      	ldr	r3, [pc, #484]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d00d      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x40>
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	f200 80e1 	bhi.w	8003bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x34>
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d003      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x3a>
 80039f6:	e0db      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b73      	ldr	r3, [pc, #460]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039fc:	e0db      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039fe:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x208>)
 8003a00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a02:	e0d8      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a04:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0e:	4b6d      	ldr	r3, [pc, #436]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d063      	beq.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1a:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	099b      	lsrs	r3, r3, #6
 8003a20:	2200      	movs	r2, #0
 8003a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a2e:	2300      	movs	r3, #0
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
 8003a32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a36:	4622      	mov	r2, r4
 8003a38:	462b      	mov	r3, r5
 8003a3a:	f04f 0000 	mov.w	r0, #0
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	0159      	lsls	r1, r3, #5
 8003a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a48:	0150      	lsls	r0, r2, #5
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4621      	mov	r1, r4
 8003a50:	1a51      	subs	r1, r2, r1
 8003a52:	6139      	str	r1, [r7, #16]
 8003a54:	4629      	mov	r1, r5
 8003a56:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a68:	4659      	mov	r1, fp
 8003a6a:	018b      	lsls	r3, r1, #6
 8003a6c:	4651      	mov	r1, sl
 8003a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a72:	4651      	mov	r1, sl
 8003a74:	018a      	lsls	r2, r1, #6
 8003a76:	4651      	mov	r1, sl
 8003a78:	ebb2 0801 	subs.w	r8, r2, r1
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a96:	4690      	mov	r8, r2
 8003a98:	4699      	mov	r9, r3
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	eb18 0303 	adds.w	r3, r8, r3
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	eb49 0303 	adc.w	r3, r9, r3
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	024b      	lsls	r3, r1, #9
 8003aba:	4621      	mov	r1, r4
 8003abc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	024a      	lsls	r2, r1, #9
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aca:	2200      	movs	r2, #0
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad4:	f7fc fb78 	bl	80001c8 <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4613      	mov	r3, r2
 8003ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae0:	e058      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae2:	4b38      	ldr	r3, [pc, #224]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	4611      	mov	r1, r2
 8003aee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
 8003af8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	f04f 0000 	mov.w	r0, #0
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	0159      	lsls	r1, r3, #5
 8003b0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b0e:	0150      	lsls	r0, r2, #5
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4641      	mov	r1, r8
 8003b16:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b34:	ebb2 040a 	subs.w	r4, r2, sl
 8003b38:	eb63 050b 	sbc.w	r5, r3, fp
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	00eb      	lsls	r3, r5, #3
 8003b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b4a:	00e2      	lsls	r2, r4, #3
 8003b4c:	4614      	mov	r4, r2
 8003b4e:	461d      	mov	r5, r3
 8003b50:	4643      	mov	r3, r8
 8003b52:	18e3      	adds	r3, r4, r3
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	464b      	mov	r3, r9
 8003b58:	eb45 0303 	adc.w	r3, r5, r3
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	028b      	lsls	r3, r1, #10
 8003b6e:	4621      	mov	r1, r4
 8003b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b74:	4621      	mov	r1, r4
 8003b76:	028a      	lsls	r2, r1, #10
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7e:	2200      	movs	r2, #0
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	61fa      	str	r2, [r7, #28]
 8003b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b88:	f7fc fb1e 	bl	80001c8 <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4613      	mov	r3, r2
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	0c1b      	lsrs	r3, r3, #16
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bae:	e002      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3750      	adds	r7, #80	; 0x50
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	00f42400 	.word	0x00f42400
 8003bcc:	007a1200 	.word	0x007a1200

08003bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000008 	.word	0x20000008

08003be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bec:	f7ff fff0 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0a9b      	lsrs	r3, r3, #10
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4903      	ldr	r1, [pc, #12]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	08004ff0 	.word	0x08004ff0

08003c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c14:	f7ff ffdc 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0b5b      	lsrs	r3, r3, #13
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4903      	ldr	r1, [pc, #12]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40023800 	.word	0x40023800
 8003c34:	08004ff0 	.word	0x08004ff0

08003c38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d035      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c60:	4b62      	ldr	r3, [pc, #392]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c66:	f7fd f95d 	bl	8000f24 <HAL_GetTick>
 8003c6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c6e:	f7fd f959 	bl	8000f24 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e0b0      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c80:	4b5b      	ldr	r3, [pc, #364]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f0      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	019a      	lsls	r2, r3, #6
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	071b      	lsls	r3, r3, #28
 8003c98:	4955      	ldr	r1, [pc, #340]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ca0:	4b52      	ldr	r3, [pc, #328]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ca6:	f7fd f93d 	bl	8000f24 <HAL_GetTick>
 8003caa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cae:	f7fd f939 	bl	8000f24 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e090      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cc0:	4b4b      	ldr	r3, [pc, #300]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8083 	beq.w	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	4b44      	ldr	r3, [pc, #272]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	4a43      	ldr	r2, [pc, #268]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cea:	4b41      	ldr	r3, [pc, #260]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003cf6:	4b3f      	ldr	r3, [pc, #252]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a3e      	ldr	r2, [pc, #248]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d02:	f7fd f90f 	bl	8000f24 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d0a:	f7fd f90b 	bl	8000f24 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e062      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d1c:	4b35      	ldr	r3, [pc, #212]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d28:	4b31      	ldr	r3, [pc, #196]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d02f      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d028      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d46:	4b2a      	ldr	r3, [pc, #168]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d50:	4b29      	ldr	r3, [pc, #164]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d56:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d5c:	4a24      	ldr	r2, [pc, #144]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d62:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d114      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fd f8d9 	bl	8000f24 <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fd f8d5 	bl	8000f24 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e02a      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8c:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ee      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da4:	d10d      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	490d      	ldr	r1, [pc, #52]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	608b      	str	r3, [r1, #8]
 8003dc0:	e005      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dcc:	6093      	str	r3, [r2, #8]
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dda:	4905      	ldr	r1, [pc, #20]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	42470068 	.word	0x42470068
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40007000 	.word	0x40007000
 8003df8:	42470e40 	.word	0x42470e40

08003dfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d13e      	bne.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e1a:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d12f      	bne.n	8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e30:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e32:	617b      	str	r3, [r7, #20]
          break;
 8003e34:	e02f      	b.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e36:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e42:	d108      	bne.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e44:	4b18      	ldr	r3, [pc, #96]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4c:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	e007      	b.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e5e:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e80:	0f1b      	lsrs	r3, r3, #28
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
          break;
 8003e8e:	e002      	b.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
          break;
 8003e94:	bf00      	nop
        }
      }
      break;
 8003e96:	bf00      	nop
    }
  }
  return frequency;
 8003e98:	697b      	ldr	r3, [r7, #20]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	00bb8000 	.word	0x00bb8000
 8003eb0:	007a1200 	.word	0x007a1200
 8003eb4:	00f42400 	.word	0x00f42400

08003eb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e07b      	b.n	8003fc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d108      	bne.n	8003ee4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eda:	d009      	beq.n	8003ef0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	61da      	str	r2, [r3, #28]
 8003ee2:	e005      	b.n	8003ef0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fc fea4 	bl	8000c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	ea42 0103 	orr.w	r1, r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	f003 0104 	and.w	r1, r3, #4
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	f003 0210 	and.w	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e03f      	b.n	800405c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fc fe79 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2224      	movs	r2, #36	; 0x24
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f928 	bl	8004264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004022:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004032:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004042:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	d17c      	bne.n	800417e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_UART_Transmit+0x2c>
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e075      	b.n	8004180 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Transmit+0x3e>
 800409e:	2302      	movs	r3, #2
 80040a0:	e06e      	b.n	8004180 <HAL_UART_Transmit+0x11c>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2221      	movs	r2, #33	; 0x21
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b8:	f7fc ff34 	bl	8000f24 <HAL_GetTick>
 80040bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	d108      	bne.n	80040e6 <HAL_UART_Transmit+0x82>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	e003      	b.n	80040ee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040f6:	e02a      	b.n	800414e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2200      	movs	r2, #0
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f840 	bl	8004188 <UART_WaitOnFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e036      	b.n	8004180 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004126:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	3302      	adds	r3, #2
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	e007      	b.n	8004140 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3301      	adds	r3, #1
 800413e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1cf      	bne.n	80040f8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2200      	movs	r2, #0
 8004160:	2140      	movs	r1, #64	; 0x40
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f810 	bl	8004188 <UART_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e006      	b.n	8004180 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b090      	sub	sp, #64	; 0x40
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004198:	e050      	b.n	800423c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d04c      	beq.n	800423c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041a8:	f7fc febc 	bl	8000f24 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d241      	bcs.n	800423c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041d8:	637a      	str	r2, [r7, #52]	; 0x34
 80041da:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e5      	bne.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3314      	adds	r3, #20
 80041f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	613b      	str	r3, [r7, #16]
   return(result);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	63bb      	str	r3, [r7, #56]	; 0x38
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3314      	adds	r3, #20
 800420a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800420c:	623a      	str	r2, [r7, #32]
 800420e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	69f9      	ldr	r1, [r7, #28]
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	61bb      	str	r3, [r7, #24]
   return(result);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e00f      	b.n	800425c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	429a      	cmp	r2, r3
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	429a      	cmp	r2, r3
 8004258:	d09f      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3740      	adds	r7, #64	; 0x40
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004268:	b0c0      	sub	sp, #256	; 0x100
 800426a:	af00      	add	r7, sp, #0
 800426c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004280:	68d9      	ldr	r1, [r3, #12]
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	ea40 0301 	orr.w	r3, r0, r1
 800428c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	431a      	orrs	r2, r3
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042bc:	f021 010c 	bic.w	r1, r1, #12
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042ca:	430b      	orrs	r3, r1
 80042cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042de:	6999      	ldr	r1, [r3, #24]
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	ea40 0301 	orr.w	r3, r0, r1
 80042ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b8f      	ldr	r3, [pc, #572]	; (8004530 <UART_SetConfig+0x2cc>)
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d005      	beq.n	8004304 <UART_SetConfig+0xa0>
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b8d      	ldr	r3, [pc, #564]	; (8004534 <UART_SetConfig+0x2d0>)
 8004300:	429a      	cmp	r2, r3
 8004302:	d104      	bne.n	800430e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004304:	f7ff fc84 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8004308:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800430c:	e003      	b.n	8004316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800430e:	f7ff fc6b 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8004312:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004320:	f040 810c 	bne.w	800453c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004328:	2200      	movs	r2, #0
 800432a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800432e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004336:	4622      	mov	r2, r4
 8004338:	462b      	mov	r3, r5
 800433a:	1891      	adds	r1, r2, r2
 800433c:	65b9      	str	r1, [r7, #88]	; 0x58
 800433e:	415b      	adcs	r3, r3
 8004340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004346:	4621      	mov	r1, r4
 8004348:	eb12 0801 	adds.w	r8, r2, r1
 800434c:	4629      	mov	r1, r5
 800434e:	eb43 0901 	adc.w	r9, r3, r1
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004366:	4690      	mov	r8, r2
 8004368:	4699      	mov	r9, r3
 800436a:	4623      	mov	r3, r4
 800436c:	eb18 0303 	adds.w	r3, r8, r3
 8004370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004374:	462b      	mov	r3, r5
 8004376:	eb49 0303 	adc.w	r3, r9, r3
 800437a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800438a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800438e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004392:	460b      	mov	r3, r1
 8004394:	18db      	adds	r3, r3, r3
 8004396:	653b      	str	r3, [r7, #80]	; 0x50
 8004398:	4613      	mov	r3, r2
 800439a:	eb42 0303 	adc.w	r3, r2, r3
 800439e:	657b      	str	r3, [r7, #84]	; 0x54
 80043a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043a8:	f7fb ff0e 	bl	80001c8 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4b61      	ldr	r3, [pc, #388]	; (8004538 <UART_SetConfig+0x2d4>)
 80043b2:	fba3 2302 	umull	r2, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	011c      	lsls	r4, r3, #4
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80043d4:	415b      	adcs	r3, r3
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043dc:	4641      	mov	r1, r8
 80043de:	eb12 0a01 	adds.w	sl, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb43 0b01 	adc.w	fp, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043fc:	4692      	mov	sl, r2
 80043fe:	469b      	mov	fp, r3
 8004400:	4643      	mov	r3, r8
 8004402:	eb1a 0303 	adds.w	r3, sl, r3
 8004406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800440a:	464b      	mov	r3, r9
 800440c:	eb4b 0303 	adc.w	r3, fp, r3
 8004410:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004420:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004428:	460b      	mov	r3, r1
 800442a:	18db      	adds	r3, r3, r3
 800442c:	643b      	str	r3, [r7, #64]	; 0x40
 800442e:	4613      	mov	r3, r2
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	647b      	str	r3, [r7, #68]	; 0x44
 8004436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800443a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800443e:	f7fb fec3 	bl	80001c8 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4611      	mov	r1, r2
 8004448:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <UART_SetConfig+0x2d4>)
 800444a:	fba3 2301 	umull	r2, r3, r3, r1
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2264      	movs	r2, #100	; 0x64
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	1acb      	subs	r3, r1, r3
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800445e:	4b36      	ldr	r3, [pc, #216]	; (8004538 <UART_SetConfig+0x2d4>)
 8004460:	fba3 2302 	umull	r2, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800446c:	441c      	add	r4, r3
 800446e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004478:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800447c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004480:	4642      	mov	r2, r8
 8004482:	464b      	mov	r3, r9
 8004484:	1891      	adds	r1, r2, r2
 8004486:	63b9      	str	r1, [r7, #56]	; 0x38
 8004488:	415b      	adcs	r3, r3
 800448a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800448c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004490:	4641      	mov	r1, r8
 8004492:	1851      	adds	r1, r2, r1
 8004494:	6339      	str	r1, [r7, #48]	; 0x30
 8004496:	4649      	mov	r1, r9
 8004498:	414b      	adcs	r3, r1
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044a8:	4659      	mov	r1, fp
 80044aa:	00cb      	lsls	r3, r1, #3
 80044ac:	4651      	mov	r1, sl
 80044ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b2:	4651      	mov	r1, sl
 80044b4:	00ca      	lsls	r2, r1, #3
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	4642      	mov	r2, r8
 80044be:	189b      	adds	r3, r3, r2
 80044c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044c4:	464b      	mov	r3, r9
 80044c6:	460a      	mov	r2, r1
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044e4:	460b      	mov	r3, r1
 80044e6:	18db      	adds	r3, r3, r3
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ea:	4613      	mov	r3, r2
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044fa:	f7fb fe65 	bl	80001c8 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <UART_SetConfig+0x2d4>)
 8004504:	fba3 1302 	umull	r1, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	2164      	movs	r1, #100	; 0x64
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	3332      	adds	r3, #50	; 0x32
 8004516:	4a08      	ldr	r2, [pc, #32]	; (8004538 <UART_SetConfig+0x2d4>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	f003 0207 	and.w	r2, r3, #7
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4422      	add	r2, r4
 800452a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800452c:	e105      	b.n	800473a <UART_SetConfig+0x4d6>
 800452e:	bf00      	nop
 8004530:	40011000 	.word	0x40011000
 8004534:	40011400 	.word	0x40011400
 8004538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800453c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004540:	2200      	movs	r2, #0
 8004542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004546:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800454a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800454e:	4642      	mov	r2, r8
 8004550:	464b      	mov	r3, r9
 8004552:	1891      	adds	r1, r2, r2
 8004554:	6239      	str	r1, [r7, #32]
 8004556:	415b      	adcs	r3, r3
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800455e:	4641      	mov	r1, r8
 8004560:	1854      	adds	r4, r2, r1
 8004562:	4649      	mov	r1, r9
 8004564:	eb43 0501 	adc.w	r5, r3, r1
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	00eb      	lsls	r3, r5, #3
 8004572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004576:	00e2      	lsls	r2, r4, #3
 8004578:	4614      	mov	r4, r2
 800457a:	461d      	mov	r5, r3
 800457c:	4643      	mov	r3, r8
 800457e:	18e3      	adds	r3, r4, r3
 8004580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004584:	464b      	mov	r3, r9
 8004586:	eb45 0303 	adc.w	r3, r5, r3
 800458a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800459a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045aa:	4629      	mov	r1, r5
 80045ac:	008b      	lsls	r3, r1, #2
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b4:	4621      	mov	r1, r4
 80045b6:	008a      	lsls	r2, r1, #2
 80045b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045bc:	f7fb fe04 	bl	80001c8 <__aeabi_uldivmod>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4b60      	ldr	r3, [pc, #384]	; (8004748 <UART_SetConfig+0x4e4>)
 80045c6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	011c      	lsls	r4, r3, #4
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	61b9      	str	r1, [r7, #24]
 80045e8:	415b      	adcs	r3, r3
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f0:	4641      	mov	r1, r8
 80045f2:	1851      	adds	r1, r2, r1
 80045f4:	6139      	str	r1, [r7, #16]
 80045f6:	4649      	mov	r1, r9
 80045f8:	414b      	adcs	r3, r1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004608:	4659      	mov	r1, fp
 800460a:	00cb      	lsls	r3, r1, #3
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004612:	4651      	mov	r1, sl
 8004614:	00ca      	lsls	r2, r1, #3
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	4603      	mov	r3, r0
 800461c:	4642      	mov	r2, r8
 800461e:	189b      	adds	r3, r3, r2
 8004620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004624:	464b      	mov	r3, r9
 8004626:	460a      	mov	r2, r1
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	67bb      	str	r3, [r7, #120]	; 0x78
 800463a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004648:	4649      	mov	r1, r9
 800464a:	008b      	lsls	r3, r1, #2
 800464c:	4641      	mov	r1, r8
 800464e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004652:	4641      	mov	r1, r8
 8004654:	008a      	lsls	r2, r1, #2
 8004656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800465a:	f7fb fdb5 	bl	80001c8 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4b39      	ldr	r3, [pc, #228]	; (8004748 <UART_SetConfig+0x4e4>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	; 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	3332      	adds	r3, #50	; 0x32
 8004676:	4a34      	ldr	r2, [pc, #208]	; (8004748 <UART_SetConfig+0x4e4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004682:	441c      	add	r4, r3
 8004684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004688:	2200      	movs	r2, #0
 800468a:	673b      	str	r3, [r7, #112]	; 0x70
 800468c:	677a      	str	r2, [r7, #116]	; 0x74
 800468e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004692:	4642      	mov	r2, r8
 8004694:	464b      	mov	r3, r9
 8004696:	1891      	adds	r1, r2, r2
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	415b      	adcs	r3, r3
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a2:	4641      	mov	r1, r8
 80046a4:	1851      	adds	r1, r2, r1
 80046a6:	6039      	str	r1, [r7, #0]
 80046a8:	4649      	mov	r1, r9
 80046aa:	414b      	adcs	r3, r1
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046ba:	4659      	mov	r1, fp
 80046bc:	00cb      	lsls	r3, r1, #3
 80046be:	4651      	mov	r1, sl
 80046c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c4:	4651      	mov	r1, sl
 80046c6:	00ca      	lsls	r2, r1, #3
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	4603      	mov	r3, r0
 80046ce:	4642      	mov	r2, r8
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d4:	464b      	mov	r3, r9
 80046d6:	460a      	mov	r2, r1
 80046d8:	eb42 0303 	adc.w	r3, r2, r3
 80046dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	663b      	str	r3, [r7, #96]	; 0x60
 80046e8:	667a      	str	r2, [r7, #100]	; 0x64
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046f6:	4649      	mov	r1, r9
 80046f8:	008b      	lsls	r3, r1, #2
 80046fa:	4641      	mov	r1, r8
 80046fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004700:	4641      	mov	r1, r8
 8004702:	008a      	lsls	r2, r1, #2
 8004704:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004708:	f7fb fd5e 	bl	80001c8 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <UART_SetConfig+0x4e4>)
 8004712:	fba3 1302 	umull	r1, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	2164      	movs	r1, #100	; 0x64
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	3332      	adds	r3, #50	; 0x32
 8004724:	4a08      	ldr	r2, [pc, #32]	; (8004748 <UART_SetConfig+0x4e4>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4422      	add	r2, r4
 8004738:	609a      	str	r2, [r3, #8]
}
 800473a:	bf00      	nop
 800473c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004740:	46bd      	mov	sp, r7
 8004742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004746:	bf00      	nop
 8004748:	51eb851f 	.word	0x51eb851f

0800474c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f043 0201 	orr.w	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f023 0201 	bic.w	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3301      	adds	r3, #1
 80047a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <USB_FlushTxFifo+0x64>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e01b      	b.n	80047e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	daf2      	bge.n	800479e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	019b      	lsls	r3, r3, #6
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3301      	adds	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <USB_FlushTxFifo+0x64>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e006      	b.n	80047e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d0f0      	beq.n	80047c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	00030d40 	.word	0x00030d40

080047f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a11      	ldr	r2, [pc, #68]	; (8004854 <USB_FlushRxFifo+0x5c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e018      	b.n	8004848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	daf2      	bge.n	8004804 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2210      	movs	r2, #16
 8004826:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4a08      	ldr	r2, [pc, #32]	; (8004854 <USB_FlushRxFifo+0x5c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e006      	b.n	8004848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b10      	cmp	r3, #16
 8004844:	d0f0      	beq.n	8004828 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	00030d40 	.word	0x00030d40

08004858 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004858:	b480      	push	{r7}
 800485a:	b08b      	sub	sp, #44	; 0x2c
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	089b      	lsrs	r3, r3, #2
 8004872:	b29b      	uxth	r3, r3
 8004874:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800487e:	2300      	movs	r3, #0
 8004880:	623b      	str	r3, [r7, #32]
 8004882:	e014      	b.n	80048ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	3301      	adds	r3, #1
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	3301      	adds	r3, #1
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	3301      	adds	r3, #1
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	3301      	adds	r3, #1
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	3301      	adds	r3, #1
 80048ac:	623b      	str	r3, [r7, #32]
 80048ae:	6a3a      	ldr	r2, [r7, #32]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d3e6      	bcc.n	8004884 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048b6:	8bfb      	ldrh	r3, [r7, #30]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01e      	beq.n	80048fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c6:	461a      	mov	r2, r3
 80048c8:	f107 0310 	add.w	r3, r7, #16
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	701a      	strb	r2, [r3, #0]
      i++;
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	3301      	adds	r3, #1
 80048e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	3301      	adds	r3, #1
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048ee:	8bfb      	ldrh	r3, [r7, #30]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048f4:	8bfb      	ldrh	r3, [r7, #30]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1ea      	bne.n	80048d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	372c      	adds	r7, #44	; 0x2c
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4013      	ands	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004920:	68fb      	ldr	r3, [r7, #12]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0301 	and.w	r3, r3, #1
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004968:	f023 0303 	bic.w	r3, r3, #3
 800496c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	68f9      	ldr	r1, [r7, #12]
 800497e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d107      	bne.n	800499c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004992:	461a      	mov	r2, r3
 8004994:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004998:	6053      	str	r3, [r2, #4]
 800499a:	e009      	b.n	80049b0 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d106      	bne.n	80049b0 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a8:	461a      	mov	r2, r3
 80049aa:	f241 7370 	movw	r3, #6000	; 0x1770
 80049ae:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049be:	b480      	push	{r7}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	b29b      	uxth	r3, r3
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	0c9b      	lsrs	r3, r3, #18
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0fdb      	lsrs	r3, r3, #31
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d104      	bne.n	8004a3a <USB_HC_Halt+0x5a>
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e0c8      	b.n	8004bcc <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <USB_HC_Halt+0x66>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d163      	bne.n	8004b0e <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	0151      	lsls	r1, r2, #5
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a64:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f040 80ab 	bne.w	8004bca <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d133      	bne.n	8004ae8 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	0151      	lsls	r1, r2, #5
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	440a      	add	r2, r1
 8004a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a9e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004abe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004acc:	d81d      	bhi.n	8004b0a <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ae4:	d0ec      	beq.n	8004ac0 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ae6:	e070      	b.n	8004bca <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b06:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b08:	e05f      	b.n	8004bca <USB_HC_Halt+0x1ea>
            break;
 8004b0a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b0c:	e05d      	b.n	8004bca <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b2c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d133      	bne.n	8004ba6 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b5c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b7c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3301      	adds	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b8a:	d81d      	bhi.n	8004bc8 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ba2:	d0ec      	beq.n	8004b7e <USB_HC_Halt+0x19e>
 8004ba4:	e011      	b.n	8004bca <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e000      	b.n	8004bca <USB_HC_Halt+0x1ea>
          break;
 8004bc8:	bf00      	nop
    }
  }

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3724      	adds	r7, #36	; 0x24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff fdbe 	bl	800476e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bf2:	2110      	movs	r1, #16
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fdcb 	bl	8004790 <USB_FlushTxFifo>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff fdf7 	bl	80047f8 <USB_FlushRxFifo>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	e01f      	b.n	8004c5a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c40:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4e:	461a      	mov	r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b0f      	cmp	r3, #15
 8004c5e:	d9dc      	bls.n	8004c1a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	e034      	b.n	8004cd0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c7c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c84:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c8c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cac:	d80c      	bhi.n	8004cc8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cc4:	d0ec      	beq.n	8004ca0 <USB_StopHost+0xc8>
 8004cc6:	e000      	b.n	8004cca <USB_StopHost+0xf2>
        break;
 8004cc8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b0f      	cmp	r3, #15
 8004cd4:	d9c7      	bls.n	8004c66 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff fd2d 	bl	800474c <USB_EnableGlobalInt>

  return ret;
 8004cf2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3720      	adds	r7, #32
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f804 	bl	8004d20 <USBH_HandleSof>
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b0b      	cmp	r3, #11
 8004d30:	d10a      	bne.n	8004d48 <USBH_HandleSof+0x28>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
  }
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8004d60:	bf00      	nop
}
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004d7c:	bf00      	nop
}
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f883 	bl	8004ee2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	791b      	ldrb	r3, [r3, #4]
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f80b 	bl	8004dfe <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	795b      	ldrb	r3, [r3, #5]
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f805 	bl	8004dfe <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	2b0f      	cmp	r3, #15
 8004e0e:	d80d      	bhi.n	8004e2c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	33e0      	adds	r3, #224	; 0xe0
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	33e0      	adds	r3, #224	; 0xe0
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff ff57 	bl	8004cfc <USBH_LL_IncTimer>
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff ff8f 	bl	8004d88 <USBH_LL_Connect>
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff ff98 	bl	8004db6 <USBH_LL_Disconnect>
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	460b      	mov	r3, r1
 8004e98:	70fb      	strb	r3, [r7, #3]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff ff49 	bl	8004d50 <USBH_LL_PortEnabled>
}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff ff49 	bl	8004d6c <USBH_LL_PortDisabled>
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fc fc01 	bl	8001700 <HAL_HCD_Stop>
 8004efe:	4603      	mov	r3, r0
 8004f00:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 f807 	bl	8004f18 <USBH_Get_USB_Status>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d817      	bhi.n	8004f5c <USBH_Get_USB_Status+0x44>
 8004f2c:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <USBH_Get_USB_Status+0x1c>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f4b 	.word	0x08004f4b
 8004f3c:	08004f51 	.word	0x08004f51
 8004f40:	08004f57 	.word	0x08004f57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	73fb      	strb	r3, [r7, #15]
    break;
 8004f48:	e00b      	b.n	8004f62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8004f4e:	e008      	b.n	8004f62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
    break;
 8004f54:	e005      	b.n	8004f62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004f56:	2302      	movs	r3, #2
 8004f58:	73fb      	strb	r3, [r7, #15]
    break;
 8004f5a:	e002      	b.n	8004f62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8004f60:	bf00      	nop
  }
  return usb_status;
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <__libc_init_array>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	4d0d      	ldr	r5, [pc, #52]	; (8004fa8 <__libc_init_array+0x38>)
 8004f74:	4c0d      	ldr	r4, [pc, #52]	; (8004fac <__libc_init_array+0x3c>)
 8004f76:	1b64      	subs	r4, r4, r5
 8004f78:	10a4      	asrs	r4, r4, #2
 8004f7a:	2600      	movs	r6, #0
 8004f7c:	42a6      	cmp	r6, r4
 8004f7e:	d109      	bne.n	8004f94 <__libc_init_array+0x24>
 8004f80:	4d0b      	ldr	r5, [pc, #44]	; (8004fb0 <__libc_init_array+0x40>)
 8004f82:	4c0c      	ldr	r4, [pc, #48]	; (8004fb4 <__libc_init_array+0x44>)
 8004f84:	f000 f820 	bl	8004fc8 <_init>
 8004f88:	1b64      	subs	r4, r4, r5
 8004f8a:	10a4      	asrs	r4, r4, #2
 8004f8c:	2600      	movs	r6, #0
 8004f8e:	42a6      	cmp	r6, r4
 8004f90:	d105      	bne.n	8004f9e <__libc_init_array+0x2e>
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
 8004f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f98:	4798      	blx	r3
 8004f9a:	3601      	adds	r6, #1
 8004f9c:	e7ee      	b.n	8004f7c <__libc_init_array+0xc>
 8004f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa2:	4798      	blx	r3
 8004fa4:	3601      	adds	r6, #1
 8004fa6:	e7f2      	b.n	8004f8e <__libc_init_array+0x1e>
 8004fa8:	08005000 	.word	0x08005000
 8004fac:	08005000 	.word	0x08005000
 8004fb0:	08005000 	.word	0x08005000
 8004fb4:	08005004 	.word	0x08005004

08004fb8 <memset>:
 8004fb8:	4402      	add	r2, r0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d100      	bne.n	8004fc2 <memset+0xa>
 8004fc0:	4770      	bx	lr
 8004fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc6:	e7f9      	b.n	8004fbc <memset+0x4>

08004fc8 <_init>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr

08004fd4 <_fini>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr
