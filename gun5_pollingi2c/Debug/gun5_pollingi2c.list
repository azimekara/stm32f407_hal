
gun5_pollingi2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007234  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073d8  080073d8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073e0  080073e0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080073e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007b4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000844  20000844  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013c81  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000343c  00000000  00000000  00033d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00037180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc8  00000000  00000000  000380a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002317d  00000000  00000000  00038e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151f4  00000000  00000000  0005bfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c99ac  00000000  00000000  000711e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ab8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004040  00000000  00000000  0013abe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073a4 	.word	0x080073a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080073a4 	.word	0x080073a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fbbf 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f819 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8df 	bl	800069c <MX_GPIO_Init>
  MX_I2S3_Init();
 80004de:	f000 f8ad 	bl	800063c <MX_I2S3_Init>
  MX_USB_HOST_Init();
 80004e2:	f006 fb6f 	bl	8006bc4 <MX_USB_HOST_Init>
  MX_I2C3_Init();
 80004e6:	f000 f87b 	bl	80005e0 <MX_I2C3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  HAL_I2C_Mem_Read(&hi2c3, 0xd1, 0x75, 1, &whoamidata, 1, 100); //adresten okuma yaptık.
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9302      	str	r3, [sp, #8]
 80004ee:	2301      	movs	r3, #1
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	4b04      	ldr	r3, [pc, #16]	; (8000504 <main+0x38>)
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2301      	movs	r3, #1
 80004f8:	2275      	movs	r2, #117	; 0x75
 80004fa:	21d1      	movs	r1, #209	; 0xd1
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <main+0x3c>)
 80004fe:	f002 fc39 	bl	8002d74 <HAL_I2C_Mem_Read>
 8000502:	e7f2      	b.n	80004ea <main+0x1e>
 8000504:	200000ac 	.word	0x200000ac
 8000508:	200000b0 	.word	0x200000b0

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f006 fe3c 	bl	8007198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <SystemClock_Config+0xcc>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xd0>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000580:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	4618      	mov	r0, r3
 8000594:	f003 fd38 	bl	8004008 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059e:	f000 f99b 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2105      	movs	r1, #5
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 ff99 	bl	80044f8 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005cc:	f000 f984 	bl	80008d8 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C3_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C3_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C3_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C3_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C3_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C3_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C3_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C3_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C3_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C3_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C3_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C3_Init+0x50>)
 800061e:	f002 fa65 	bl	8002aec <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 f956 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000b0 	.word	0x200000b0
 8000634:	40005c00 	.word	0x40005c00
 8000638:	00061a80 	.word	0x00061a80

0800063c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_I2S3_Init+0x54>)
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <MX_I2S3_Init+0x58>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2S3_Init+0x54>)
 8000648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_I2S3_Init+0x54>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2S3_Init+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_I2S3_Init+0x54>)
 800065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000660:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_I2S3_Init+0x54>)
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <MX_I2S3_Init+0x5c>)
 8000666:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_I2S3_Init+0x54>)
 800067c:	f003 f824 	bl	80036c8 <HAL_I2S_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000686:	f000 f927 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000104 	.word	0x20000104
 8000694:	40003c00 	.word	0x40003c00
 8000698:	00017700 	.word	0x00017700

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
 80006b6:	4b82      	ldr	r3, [pc, #520]	; (80008c0 <MX_GPIO_Init+0x224>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a81      	ldr	r2, [pc, #516]	; (80008c0 <MX_GPIO_Init+0x224>)
 80006bc:	f043 0310 	orr.w	r3, r3, #16
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b7f      	ldr	r3, [pc, #508]	; (80008c0 <MX_GPIO_Init+0x224>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0310 	and.w	r3, r3, #16
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	4b7b      	ldr	r3, [pc, #492]	; (80008c0 <MX_GPIO_Init+0x224>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a7a      	ldr	r2, [pc, #488]	; (80008c0 <MX_GPIO_Init+0x224>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b78      	ldr	r3, [pc, #480]	; (80008c0 <MX_GPIO_Init+0x224>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b74      	ldr	r3, [pc, #464]	; (80008c0 <MX_GPIO_Init+0x224>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a73      	ldr	r2, [pc, #460]	; (80008c0 <MX_GPIO_Init+0x224>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b71      	ldr	r3, [pc, #452]	; (80008c0 <MX_GPIO_Init+0x224>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b6d      	ldr	r3, [pc, #436]	; (80008c0 <MX_GPIO_Init+0x224>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a6c      	ldr	r2, [pc, #432]	; (80008c0 <MX_GPIO_Init+0x224>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b6a      	ldr	r3, [pc, #424]	; (80008c0 <MX_GPIO_Init+0x224>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b66      	ldr	r3, [pc, #408]	; (80008c0 <MX_GPIO_Init+0x224>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a65      	ldr	r2, [pc, #404]	; (80008c0 <MX_GPIO_Init+0x224>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b63      	ldr	r3, [pc, #396]	; (80008c0 <MX_GPIO_Init+0x224>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b5f      	ldr	r3, [pc, #380]	; (80008c0 <MX_GPIO_Init+0x224>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a5e      	ldr	r2, [pc, #376]	; (80008c0 <MX_GPIO_Init+0x224>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b5c      	ldr	r3, [pc, #368]	; (80008c0 <MX_GPIO_Init+0x224>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2108      	movs	r1, #8
 800075e:	4859      	ldr	r0, [pc, #356]	; (80008c4 <MX_GPIO_Init+0x228>)
 8000760:	f000 fdbc 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2101      	movs	r1, #1
 8000768:	4857      	ldr	r0, [pc, #348]	; (80008c8 <MX_GPIO_Init+0x22c>)
 800076a:	f000 fdb7 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800076e:	2200      	movs	r2, #0
 8000770:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000774:	4855      	ldr	r0, [pc, #340]	; (80008cc <MX_GPIO_Init+0x230>)
 8000776:	f000 fdb1 	bl	80012dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800077a:	2308      	movs	r3, #8
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	484c      	ldr	r0, [pc, #304]	; (80008c4 <MX_GPIO_Init+0x228>)
 8000792:	f000 fc07 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000796:	2301      	movs	r3, #1
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4846      	ldr	r0, [pc, #280]	; (80008c8 <MX_GPIO_Init+0x22c>)
 80007ae:	f000 fbf9 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007b2:	2308      	movs	r3, #8
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007c2:	2305      	movs	r3, #5
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	483e      	ldr	r0, [pc, #248]	; (80008c8 <MX_GPIO_Init+0x22c>)
 80007ce:	f000 fbe9 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	483a      	ldr	r0, [pc, #232]	; (80008d0 <MX_GPIO_Init+0x234>)
 80007e8:	f000 fbdc 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007ec:	23e0      	movs	r3, #224	; 0xe0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007fc:	2305      	movs	r3, #5
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4832      	ldr	r0, [pc, #200]	; (80008d0 <MX_GPIO_Init+0x234>)
 8000808:	f000 fbcc 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800080c:	2304      	movs	r3, #4
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	482d      	ldr	r0, [pc, #180]	; (80008d4 <MX_GPIO_Init+0x238>)
 8000820:	f000 fbc0 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000836:	2305      	movs	r3, #5
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4824      	ldr	r0, [pc, #144]	; (80008d4 <MX_GPIO_Init+0x238>)
 8000842:	f000 fbaf 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000846:	f24f 0310 	movw	r3, #61456	; 0xf010
 800084a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	481b      	ldr	r0, [pc, #108]	; (80008cc <MX_GPIO_Init+0x230>)
 8000860:	f000 fba0 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000864:	2320      	movs	r3, #32
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4815      	ldr	r0, [pc, #84]	; (80008cc <MX_GPIO_Init+0x230>)
 8000878:	f000 fb94 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800087c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000882:	2312      	movs	r3, #18
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000886:	2301      	movs	r3, #1
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088e:	2304      	movs	r3, #4
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	480e      	ldr	r0, [pc, #56]	; (80008d4 <MX_GPIO_Init+0x238>)
 800089a:	f000 fb83 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800089e:	2302      	movs	r3, #2
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_GPIO_Init+0x228>)
 80008b4:	f000 fb76 	bl	8000fa4 <HAL_GPIO_Init>

}
 80008b8:	bf00      	nop
 80008ba:	3730      	adds	r7, #48	; 0x30
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40020800 	.word	0x40020800
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020400 	.word	0x40020400

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fafc 	bl	8000f20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a29      	ldr	r2, [pc, #164]	; (80009f8 <HAL_I2C_MspInit+0xc4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d14b      	bne.n	80009ee <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <HAL_I2C_MspInit+0xc8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a27      	ldr	r2, [pc, #156]	; (80009fc <HAL_I2C_MspInit+0xc8>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <HAL_I2C_MspInit+0xc8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <HAL_I2C_MspInit+0xc8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a20      	ldr	r2, [pc, #128]	; (80009fc <HAL_I2C_MspInit+0xc8>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_I2C_MspInit+0xc8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800098e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000994:	2312      	movs	r3, #18
 8000996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009a0:	2304      	movs	r3, #4
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4815      	ldr	r0, [pc, #84]	; (8000a00 <HAL_I2C_MspInit+0xcc>)
 80009ac:	f000 fafa 	bl	8000fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b6:	2312      	movs	r3, #18
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009c2:	2304      	movs	r3, #4
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <HAL_I2C_MspInit+0xd0>)
 80009ce:	f000 fae9 	bl	8000fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_I2C_MspInit+0xc8>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_I2C_MspInit+0xc8>)
 80009dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_I2C_MspInit+0xc8>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40005c00 	.word	0x40005c00
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020000 	.word	0x40020000

08000a08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08e      	sub	sp, #56	; 0x38
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a31      	ldr	r2, [pc, #196]	; (8000af8 <HAL_I2S_MspInit+0xf0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d15a      	bne.n	8000aee <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a3c:	23c0      	movs	r3, #192	; 0xc0
 8000a3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 ff61 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a54:	f7ff ff40 	bl	80008d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	4b27      	ldr	r3, [pc, #156]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a26      	ldr	r2, [pc, #152]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a18      	ldr	r2, [pc, #96]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000aac:	2310      	movs	r3, #16
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000abc:	2306      	movs	r3, #6
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480e      	ldr	r0, [pc, #56]	; (8000b00 <HAL_I2S_MspInit+0xf8>)
 8000ac8:	f000 fa6c 	bl	8000fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000acc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ade:	2306      	movs	r3, #6
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <HAL_I2S_MspInit+0xfc>)
 8000aea:	f000 fa5b 	bl	8000fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3738      	adds	r7, #56	; 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40003c00 	.word	0x40003c00
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 f8d0 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <OTG_FS_IRQHandler+0x10>)
 8000b62:	f000 fe3f 	bl	80017e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000530 	.word	0x20000530

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f006 fac0 	bl	8007124 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20020000 	.word	0x20020000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	2000014c 	.word	0x2000014c
 8000bd8:	20000848 	.word	0x20000848

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c1c:	4c0b      	ldr	r4, [pc, #44]	; (8000c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c2a:	f7ff ffd7 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f006 fa7f 	bl	8007130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fc4b 	bl	80004cc <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c44:	080073e8 	.word	0x080073e8
  ldr r2, =_sbss
 8000c48:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c4c:	20000844 	.word	0x20000844

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f94f 	bl	8000f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fe2c 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f967 	bl	8000f8a <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 f92f 	bl	8000f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000150 	.word	0x20000150

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000150 	.word	0x20000150

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffde 	bl	8000d20 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eec:	d301      	bcc.n	8000ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00f      	b.n	8000f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <SysTick_Config+0x40>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efa:	210f      	movs	r1, #15
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f7ff ff8e 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <SysTick_Config+0x40>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <SysTick_Config+0x40>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	e000e010 	.word	0xe000e010

08000f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ff29 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f48:	f7ff ff3e 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	f7ff ff8e 	bl	8000e74 <NVIC_EncodePriority>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff5d 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff31 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffa2 	bl	8000edc <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e16b      	b.n	8001298 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 815a 	bne.w	8001292 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d005      	beq.n	8000ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d130      	bne.n	8001058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	f003 0201 	and.w	r2, r3, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b03      	cmp	r3, #3
 8001062:	d017      	beq.n	8001094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d123      	bne.n	80010e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	69b9      	ldr	r1, [r7, #24]
 80010e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0203 	and.w	r2, r3, #3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80b4 	beq.w	8001292 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b60      	ldr	r3, [pc, #384]	; (80012b0 <HAL_GPIO_Init+0x30c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a5f      	ldr	r2, [pc, #380]	; (80012b0 <HAL_GPIO_Init+0x30c>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b5d      	ldr	r3, [pc, #372]	; (80012b0 <HAL_GPIO_Init+0x30c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001146:	4a5b      	ldr	r2, [pc, #364]	; (80012b4 <HAL_GPIO_Init+0x310>)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a52      	ldr	r2, [pc, #328]	; (80012b8 <HAL_GPIO_Init+0x314>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d02b      	beq.n	80011ca <HAL_GPIO_Init+0x226>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a51      	ldr	r2, [pc, #324]	; (80012bc <HAL_GPIO_Init+0x318>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d025      	beq.n	80011c6 <HAL_GPIO_Init+0x222>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a50      	ldr	r2, [pc, #320]	; (80012c0 <HAL_GPIO_Init+0x31c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d01f      	beq.n	80011c2 <HAL_GPIO_Init+0x21e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4f      	ldr	r2, [pc, #316]	; (80012c4 <HAL_GPIO_Init+0x320>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x21a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4e      	ldr	r2, [pc, #312]	; (80012c8 <HAL_GPIO_Init+0x324>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x216>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4d      	ldr	r2, [pc, #308]	; (80012cc <HAL_GPIO_Init+0x328>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x212>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4c      	ldr	r2, [pc, #304]	; (80012d0 <HAL_GPIO_Init+0x32c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x20e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4b      	ldr	r2, [pc, #300]	; (80012d4 <HAL_GPIO_Init+0x330>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x20a>
 80011aa:	2307      	movs	r3, #7
 80011ac:	e00e      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011ae:	2308      	movs	r3, #8
 80011b0:	e00c      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011b2:	2306      	movs	r3, #6
 80011b4:	e00a      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e008      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011be:	2303      	movs	r3, #3
 80011c0:	e004      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011ca:	2300      	movs	r3, #0
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	f002 0203 	and.w	r2, r2, #3
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	4093      	lsls	r3, r2
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011dc:	4935      	ldr	r1, [pc, #212]	; (80012b4 <HAL_GPIO_Init+0x310>)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <HAL_GPIO_Init+0x334>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120e:	4a32      	ldr	r2, [pc, #200]	; (80012d8 <HAL_GPIO_Init+0x334>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001214:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_GPIO_Init+0x334>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001238:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <HAL_GPIO_Init+0x334>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <HAL_GPIO_Init+0x334>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001262:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <HAL_GPIO_Init+0x334>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_GPIO_Init+0x334>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800128c:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <HAL_GPIO_Init+0x334>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3301      	adds	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b0f      	cmp	r3, #15
 800129c:	f67f ae90 	bls.w	8000fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40013800 	.word	0x40013800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40021400 	.word	0x40021400
 80012d0:	40021800 	.word	0x40021800
 80012d4:	40021c00 	.word	0x40021c00
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f8:	e003      	b.n	8001302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800130e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001310:	b08f      	sub	sp, #60	; 0x3c
 8001312:	af0a      	add	r7, sp, #40	; 0x28
 8001314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e054      	b.n	80013ca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f005 fc96 	bl	8006c6c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2203      	movs	r2, #3
 8001344:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fc88 	bl	8004c74 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	687e      	ldr	r6, [r7, #4]
 800136c:	466d      	mov	r5, sp
 800136e:	f106 0410 	add.w	r4, r6, #16
 8001372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800137e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001382:	1d33      	adds	r3, r6, #4
 8001384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001386:	6838      	ldr	r0, [r7, #0]
 8001388:	f003 fc02 	bl	8004b90 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2101      	movs	r1, #1
 8001392:	4618      	mov	r0, r3
 8001394:	f003 fc7f 	bl	8004c96 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	687e      	ldr	r6, [r7, #4]
 80013a0:	466d      	mov	r5, sp
 80013a2:	f106 0410 	add.w	r4, r6, #16
 80013a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80013b6:	1d33      	adds	r3, r6, #4
 80013b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ba:	6838      	ldr	r0, [r7, #0]
 80013bc:	f003 fe08 	bl	8004fd0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013d2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80013d2:	b590      	push	{r4, r7, lr}
 80013d4:	b089      	sub	sp, #36	; 0x24
 80013d6:	af04      	add	r7, sp, #16
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	4608      	mov	r0, r1
 80013dc:	4611      	mov	r1, r2
 80013de:	461a      	mov	r2, r3
 80013e0:	4603      	mov	r3, r0
 80013e2:	70fb      	strb	r3, [r7, #3]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70bb      	strb	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_HCD_HC_Init+0x28>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e076      	b.n	80014e8 <HAL_HCD_HC_Init+0x116>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	212c      	movs	r1, #44	; 0x2c
 8001408:	fb01 f303 	mul.w	r3, r1, r3
 800140c:	4413      	add	r3, r2
 800140e:	333d      	adds	r3, #61	; 0x3d
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	212c      	movs	r1, #44	; 0x2c
 800141a:	fb01 f303 	mul.w	r3, r1, r3
 800141e:	4413      	add	r3, r2
 8001420:	3338      	adds	r3, #56	; 0x38
 8001422:	787a      	ldrb	r2, [r7, #1]
 8001424:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	212c      	movs	r1, #44	; 0x2c
 800142c:	fb01 f303 	mul.w	r3, r1, r3
 8001430:	4413      	add	r3, r2
 8001432:	3340      	adds	r3, #64	; 0x40
 8001434:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001436:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	212c      	movs	r1, #44	; 0x2c
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	4413      	add	r3, r2
 8001444:	3339      	adds	r3, #57	; 0x39
 8001446:	78fa      	ldrb	r2, [r7, #3]
 8001448:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	212c      	movs	r1, #44	; 0x2c
 8001450:	fb01 f303 	mul.w	r3, r1, r3
 8001454:	4413      	add	r3, r2
 8001456:	333f      	adds	r3, #63	; 0x3f
 8001458:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800145c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	78ba      	ldrb	r2, [r7, #2]
 8001462:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001466:	b2d0      	uxtb	r0, r2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	212c      	movs	r1, #44	; 0x2c
 800146c:	fb01 f303 	mul.w	r3, r1, r3
 8001470:	4413      	add	r3, r2
 8001472:	333a      	adds	r3, #58	; 0x3a
 8001474:	4602      	mov	r2, r0
 8001476:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001478:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800147c:	2b00      	cmp	r3, #0
 800147e:	da09      	bge.n	8001494 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	212c      	movs	r1, #44	; 0x2c
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	4413      	add	r3, r2
 800148c:	333b      	adds	r3, #59	; 0x3b
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e008      	b.n	80014a6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	212c      	movs	r1, #44	; 0x2c
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	4413      	add	r3, r2
 80014a0:	333b      	adds	r3, #59	; 0x3b
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	212c      	movs	r1, #44	; 0x2c
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	333c      	adds	r3, #60	; 0x3c
 80014b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014b8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	787c      	ldrb	r4, [r7, #1]
 80014c0:	78ba      	ldrb	r2, [r7, #2]
 80014c2:	78f9      	ldrb	r1, [r7, #3]
 80014c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4623      	mov	r3, r4
 80014d6:	f003 fed7 	bl	8005288 <USB_HC_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}

080014f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_HCD_HC_Halt+0x1e>
 800150a:	2302      	movs	r3, #2
 800150c:	e00f      	b.n	800152e <HAL_HCD_HC_Halt+0x3e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	78fa      	ldrb	r2, [r7, #3]
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f004 f927 	bl	8005772 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	70fb      	strb	r3, [r7, #3]
 800154a:	460b      	mov	r3, r1
 800154c:	70bb      	strb	r3, [r7, #2]
 800154e:	4613      	mov	r3, r2
 8001550:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	212c      	movs	r1, #44	; 0x2c
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	333b      	adds	r3, #59	; 0x3b
 8001560:	78ba      	ldrb	r2, [r7, #2]
 8001562:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	212c      	movs	r1, #44	; 0x2c
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	4413      	add	r3, r2
 8001570:	333f      	adds	r3, #63	; 0x3f
 8001572:	787a      	ldrb	r2, [r7, #1]
 8001574:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001576:	7c3b      	ldrb	r3, [r7, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d112      	bne.n	80015a2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	212c      	movs	r1, #44	; 0x2c
 8001582:	fb01 f303 	mul.w	r3, r1, r3
 8001586:	4413      	add	r3, r2
 8001588:	3342      	adds	r3, #66	; 0x42
 800158a:	2203      	movs	r2, #3
 800158c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	212c      	movs	r1, #44	; 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	333d      	adds	r3, #61	; 0x3d
 800159c:	7f3a      	ldrb	r2, [r7, #28]
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e008      	b.n	80015b4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	212c      	movs	r1, #44	; 0x2c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	3342      	adds	r3, #66	; 0x42
 80015b0:	2202      	movs	r2, #2
 80015b2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	f200 80c6 	bhi.w	8001748 <HAL_HCD_HC_SubmitRequest+0x210>
 80015bc:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015d5 	.word	0x080015d5
 80015c8:	08001735 	.word	0x08001735
 80015cc:	08001639 	.word	0x08001639
 80015d0:	080016b7 	.word	0x080016b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80015d4:	7c3b      	ldrb	r3, [r7, #16]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	f040 80b8 	bne.w	800174c <HAL_HCD_HC_SubmitRequest+0x214>
 80015dc:	78bb      	ldrb	r3, [r7, #2]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f040 80b4 	bne.w	800174c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80015e4:	8b3b      	ldrh	r3, [r7, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d108      	bne.n	80015fc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	212c      	movs	r1, #44	; 0x2c
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	3355      	adds	r3, #85	; 0x55
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	212c      	movs	r1, #44	; 0x2c
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	3355      	adds	r3, #85	; 0x55
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	212c      	movs	r1, #44	; 0x2c
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	3342      	adds	r3, #66	; 0x42
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001622:	e093      	b.n	800174c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	212c      	movs	r1, #44	; 0x2c
 800162a:	fb01 f303 	mul.w	r3, r1, r3
 800162e:	4413      	add	r3, r2
 8001630:	3342      	adds	r3, #66	; 0x42
 8001632:	2202      	movs	r2, #2
 8001634:	701a      	strb	r2, [r3, #0]
      break;
 8001636:	e089      	b.n	800174c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001638:	78bb      	ldrb	r3, [r7, #2]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d11d      	bne.n	800167a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	212c      	movs	r1, #44	; 0x2c
 8001644:	fb01 f303 	mul.w	r3, r1, r3
 8001648:	4413      	add	r3, r2
 800164a:	3355      	adds	r3, #85	; 0x55
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	212c      	movs	r1, #44	; 0x2c
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	4413      	add	r3, r2
 800165e:	3342      	adds	r3, #66	; 0x42
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001664:	e073      	b.n	800174e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	212c      	movs	r1, #44	; 0x2c
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	4413      	add	r3, r2
 8001672:	3342      	adds	r3, #66	; 0x42
 8001674:	2202      	movs	r2, #2
 8001676:	701a      	strb	r2, [r3, #0]
      break;
 8001678:	e069      	b.n	800174e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	212c      	movs	r1, #44	; 0x2c
 8001680:	fb01 f303 	mul.w	r3, r1, r3
 8001684:	4413      	add	r3, r2
 8001686:	3354      	adds	r3, #84	; 0x54
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	212c      	movs	r1, #44	; 0x2c
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	4413      	add	r3, r2
 800169a:	3342      	adds	r3, #66	; 0x42
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
      break;
 80016a0:	e055      	b.n	800174e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	212c      	movs	r1, #44	; 0x2c
 80016a8:	fb01 f303 	mul.w	r3, r1, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	3342      	adds	r3, #66	; 0x42
 80016b0:	2202      	movs	r2, #2
 80016b2:	701a      	strb	r2, [r3, #0]
      break;
 80016b4:	e04b      	b.n	800174e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80016b6:	78bb      	ldrb	r3, [r7, #2]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d11d      	bne.n	80016f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	212c      	movs	r1, #44	; 0x2c
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	3355      	adds	r3, #85	; 0x55
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d109      	bne.n	80016e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	212c      	movs	r1, #44	; 0x2c
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4413      	add	r3, r2
 80016dc:	3342      	adds	r3, #66	; 0x42
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016e2:	e034      	b.n	800174e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	212c      	movs	r1, #44	; 0x2c
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	3342      	adds	r3, #66	; 0x42
 80016f2:	2202      	movs	r2, #2
 80016f4:	701a      	strb	r2, [r3, #0]
      break;
 80016f6:	e02a      	b.n	800174e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	3354      	adds	r3, #84	; 0x54
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d109      	bne.n	8001720 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	212c      	movs	r1, #44	; 0x2c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	3342      	adds	r3, #66	; 0x42
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
      break;
 800171e:	e016      	b.n	800174e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	3342      	adds	r3, #66	; 0x42
 800172e:	2202      	movs	r2, #2
 8001730:	701a      	strb	r2, [r3, #0]
      break;
 8001732:	e00c      	b.n	800174e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	3342      	adds	r3, #66	; 0x42
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
      break;
 8001746:	e002      	b.n	800174e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001748:	bf00      	nop
 800174a:	e000      	b.n	800174e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800174c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	212c      	movs	r1, #44	; 0x2c
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	3344      	adds	r3, #68	; 0x44
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	8b3a      	ldrh	r2, [r7, #24]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	202c      	movs	r0, #44	; 0x2c
 8001768:	fb00 f303 	mul.w	r3, r0, r3
 800176c:	440b      	add	r3, r1
 800176e:	334c      	adds	r3, #76	; 0x4c
 8001770:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	212c      	movs	r1, #44	; 0x2c
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	4413      	add	r3, r2
 800177e:	3360      	adds	r3, #96	; 0x60
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	212c      	movs	r1, #44	; 0x2c
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	4413      	add	r3, r2
 8001790:	3350      	adds	r3, #80	; 0x50
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	3339      	adds	r3, #57	; 0x39
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	212c      	movs	r1, #44	; 0x2c
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	3361      	adds	r3, #97	; 0x61
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	222c      	movs	r2, #44	; 0x2c
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	3338      	adds	r3, #56	; 0x38
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	18d1      	adds	r1, r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	f003 fe7a 	bl	80054cc <USB_HC_StartXfer>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop

080017e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fba5 	bl	8004f4a <USB_GetMode>
 8001800:	4603      	mov	r3, r0
 8001802:	2b01      	cmp	r3, #1
 8001804:	f040 80f6 	bne.w	80019f4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 fb89 	bl	8004f24 <USB_ReadInterrupts>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80ec 	beq.w	80019f2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fb80 	bl	8004f24 <USB_ReadInterrupts>
 8001824:	4603      	mov	r3, r0
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800182e:	d104      	bne.n	800183a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001838:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fb70 	bl	8004f24 <USB_ReadInterrupts>
 8001844:	4603      	mov	r3, r0
 8001846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800184e:	d104      	bne.n	800185a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001858:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fb60 	bl	8004f24 <USB_ReadInterrupts>
 8001864:	4603      	mov	r3, r0
 8001866:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800186a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800186e:	d104      	bne.n	800187a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001878:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fb50 	bl	8004f24 <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b02      	cmp	r3, #2
 800188c:	d103      	bne.n	8001896 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2202      	movs	r2, #2
 8001894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f003 fb42 	bl	8004f24 <USB_ReadInterrupts>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018aa:	d11c      	bne.n	80018e6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10f      	bne.n	80018e6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80018c6:	2110      	movs	r1, #16
 80018c8:	6938      	ldr	r0, [r7, #16]
 80018ca:	f003 fa31 	bl	8004d30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80018ce:	6938      	ldr	r0, [r7, #16]
 80018d0:	f003 fa62 	bl	8004d98 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2101      	movs	r1, #1
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fc38 	bl	8005150 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f005 fa41 	bl	8006d68 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 fb1a 	bl	8004f24 <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fa:	d102      	bne.n	8001902 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f001 f882 	bl	8002a06 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fb0c 	bl	8004f24 <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b08      	cmp	r3, #8
 8001914:	d106      	bne.n	8001924 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f005 fa0a 	bl	8006d30 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2208      	movs	r2, #8
 8001922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fafb 	bl	8004f24 <USB_ReadInterrupts>
 800192e:	4603      	mov	r3, r0
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b10      	cmp	r3, #16
 8001936:	d101      	bne.n	800193c <HAL_HCD_IRQHandler+0x158>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_HCD_IRQHandler+0x15a>
 800193c:	2300      	movs	r3, #0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d012      	beq.n	8001968 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699a      	ldr	r2, [r3, #24]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0210 	bic.w	r2, r2, #16
 8001950:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 ff85 	bl	8002862 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699a      	ldr	r2, [r3, #24]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0210 	orr.w	r2, r2, #16
 8001966:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f003 fad9 	bl	8004f24 <USB_ReadInterrupts>
 8001972:	4603      	mov	r3, r0
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800197c:	d13a      	bne.n	80019f4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f003 fee4 	bl	8005750 <USB_HC_ReadInterrupt>
 8001988:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e025      	b.n	80019dc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d018      	beq.n	80019d6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019ba:	d106      	bne.n	80019ca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4619      	mov	r1, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f88f 	bl	8001ae6 <HCD_HC_IN_IRQHandler>
 80019c8:	e005      	b.n	80019d6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4619      	mov	r1, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fbdd 	bl	8002190 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d3d4      	bcc.n	8001990 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ee:	615a      	str	r2, [r3, #20]
 80019f0:	e000      	b.n	80019f4 <HAL_HCD_IRQHandler+0x210>
      return;
 80019f2:	bf00      	nop
    }
  }
}
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_HCD_Start+0x16>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e013      	b.n	8001a38 <HAL_HCD_Start+0x3e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fbd0 	bl	80051c4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 f912 	bl	8004c52 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_HCD_Stop+0x16>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e00d      	b.n	8001a72 <HAL_HCD_Stop+0x32>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 ffbe 	bl	80059e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	212c      	movs	r1, #44	; 0x2c
 8001a8c:	fb01 f303 	mul.w	r3, r1, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	3360      	adds	r3, #96	; 0x60
 8001a94:	781b      	ldrb	r3, [r3, #0]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3350      	adds	r3, #80	; 0x50
 8001abc:	681b      	ldr	r3, [r3, #0]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fbc4 	bl	8005264 <USB_GetCurrentFrame>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	015a      	lsls	r2, r3, #5
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d11a      	bne.n	8001b4c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b22:	461a      	mov	r2, r3
 8001b24:	2304      	movs	r3, #4
 8001b26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3361      	adds	r3, #97	; 0x61
 8001b36:	2206      	movs	r2, #6
 8001b38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fe14 	bl	8005772 <USB_HC_Halt>
 8001b4a:	e0af      	b.n	8001cac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b62:	d11b      	bne.n	8001b9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	015a      	lsls	r2, r3, #5
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b70:	461a      	mov	r2, r3
 8001b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3361      	adds	r3, #97	; 0x61
 8001b86:	2207      	movs	r2, #7
 8001b88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 fdec 	bl	8005772 <USB_HC_Halt>
 8001b9a:	e087      	b.n	8001cac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d109      	bne.n	8001bc6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2320      	movs	r3, #32
 8001bc2:	6093      	str	r3, [r2, #8]
 8001bc4:	e072      	b.n	8001cac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d11a      	bne.n	8001c12 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	461a      	mov	r2, r3
 8001bea:	2308      	movs	r3, #8
 8001bec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	212c      	movs	r1, #44	; 0x2c
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3361      	adds	r3, #97	; 0x61
 8001bfc:	2205      	movs	r2, #5
 8001bfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fdb1 	bl	8005772 <USB_HC_Halt>
 8001c10:	e04c      	b.n	8001cac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c28:	d11b      	bne.n	8001c62 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c36:	461a      	mov	r2, r3
 8001c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	212c      	movs	r1, #44	; 0x2c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3361      	adds	r3, #97	; 0x61
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 fd89 	bl	8005772 <USB_HC_Halt>
 8001c60:	e024      	b.n	8001cac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c74:	2b80      	cmp	r3, #128	; 0x80
 8001c76:	d119      	bne.n	8001cac <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c84:	461a      	mov	r2, r3
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	212c      	movs	r1, #44	; 0x2c
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	3361      	adds	r3, #97	; 0x61
 8001c98:	2206      	movs	r2, #6
 8001c9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fd63 	bl	8005772 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc2:	d112      	bne.n	8001cea <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fd4f 	bl	8005772 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ce8:	e24e      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	f040 80df 	bne.w	8001ec0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d019      	beq.n	8001d3e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	212c      	movs	r1, #44	; 0x2c
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	3348      	adds	r3, #72	; 0x48
 8001d18:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	0159      	lsls	r1, r3, #5
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	440b      	add	r3, r1
 8001d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d2c:	1ad2      	subs	r2, r2, r3
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	202c      	movs	r0, #44	; 0x2c
 8001d34:	fb00 f303 	mul.w	r3, r0, r3
 8001d38:	440b      	add	r3, r1
 8001d3a:	3350      	adds	r3, #80	; 0x50
 8001d3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	212c      	movs	r1, #44	; 0x2c
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3361      	adds	r3, #97	; 0x61
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	335c      	adds	r3, #92	; 0x5c
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2301      	movs	r3, #1
 8001d72:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	212c      	movs	r1, #44	; 0x2c
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	333f      	adds	r3, #63	; 0x3f
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	212c      	movs	r1, #44	; 0x2c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	333f      	adds	r3, #63	; 0x3f
 8001d96:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d111      	bne.n	8001dc0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 fce3 	bl	8005772 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db8:	461a      	mov	r2, r3
 8001dba:	2310      	movs	r3, #16
 8001dbc:	6093      	str	r3, [r2, #8]
 8001dbe:	e03a      	b.n	8001e36 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	212c      	movs	r1, #44	; 0x2c
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	333f      	adds	r3, #63	; 0x3f
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d009      	beq.n	8001de8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	212c      	movs	r1, #44	; 0x2c
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	333f      	adds	r3, #63	; 0x3f
 8001de2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d126      	bne.n	8001e36 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	0151      	lsls	r1, r2, #5
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	440a      	add	r2, r1
 8001dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e06:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3360      	adds	r3, #96	; 0x60
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	b2d9      	uxtb	r1, r3
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	202c      	movs	r0, #44	; 0x2c
 8001e24:	fb00 f303 	mul.w	r3, r0, r3
 8001e28:	4413      	add	r3, r2
 8001e2a:	3360      	adds	r3, #96	; 0x60
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f004 ffa7 	bl	8006d84 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d12b      	bne.n	8001e96 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	212c      	movs	r1, #44	; 0x2c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	3348      	adds	r3, #72	; 0x48
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	202c      	movs	r0, #44	; 0x2c
 8001e54:	fb00 f202 	mul.w	r2, r0, r2
 8001e58:	440a      	add	r2, r1
 8001e5a:	3240      	adds	r2, #64	; 0x40
 8001e5c:	8812      	ldrh	r2, [r2, #0]
 8001e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 818e 	beq.w	8002188 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	212c      	movs	r1, #44	; 0x2c
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	3354      	adds	r3, #84	; 0x54
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f083 0301 	eor.w	r3, r3, #1
 8001e80:	b2d8      	uxtb	r0, r3
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	212c      	movs	r1, #44	; 0x2c
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3354      	adds	r3, #84	; 0x54
 8001e90:	4602      	mov	r2, r0
 8001e92:	701a      	strb	r2, [r3, #0]
}
 8001e94:	e178      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3354      	adds	r3, #84	; 0x54
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	f083 0301 	eor.w	r3, r3, #1
 8001eaa:	b2d8      	uxtb	r0, r3
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	212c      	movs	r1, #44	; 0x2c
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3354      	adds	r3, #84	; 0x54
 8001eba:	4602      	mov	r2, r0
 8001ebc:	701a      	strb	r2, [r3, #0]
}
 8001ebe:	e163      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	f040 80f6 	bne.w	80020c4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	212c      	movs	r1, #44	; 0x2c
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3361      	adds	r3, #97	; 0x61
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d109      	bne.n	8001f00 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	212c      	movs	r1, #44	; 0x2c
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3360      	adds	r3, #96	; 0x60
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	e0c9      	b.n	8002094 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	212c      	movs	r1, #44	; 0x2c
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3361      	adds	r3, #97	; 0x61
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d109      	bne.n	8001f28 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3360      	adds	r3, #96	; 0x60
 8001f22:	2205      	movs	r2, #5
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	e0b5      	b.n	8002094 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	3361      	adds	r3, #97	; 0x61
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b06      	cmp	r3, #6
 8001f3a:	d009      	beq.n	8001f50 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	3361      	adds	r3, #97	; 0x61
 8001f4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d150      	bne.n	8001ff2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	212c      	movs	r1, #44	; 0x2c
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	335c      	adds	r3, #92	; 0x5c
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	202c      	movs	r0, #44	; 0x2c
 8001f68:	fb00 f303 	mul.w	r3, r0, r3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	335c      	adds	r3, #92	; 0x5c
 8001f70:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	335c      	adds	r3, #92	; 0x5c
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d912      	bls.n	8001fac <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	212c      	movs	r1, #44	; 0x2c
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	335c      	adds	r3, #92	; 0x5c
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	212c      	movs	r1, #44	; 0x2c
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3360      	adds	r3, #96	; 0x60
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001faa:	e073      	b.n	8002094 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3360      	adds	r3, #96	; 0x60
 8001fba:	2202      	movs	r2, #2
 8001fbc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fd4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fdc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	461a      	mov	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001ff0:	e050      	b.n	8002094 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3361      	adds	r3, #97	; 0x61
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d122      	bne.n	800204c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	212c      	movs	r1, #44	; 0x2c
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	3360      	adds	r3, #96	; 0x60
 8002014:	2202      	movs	r2, #2
 8002016:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800202e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002036:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e023      	b.n	8002094 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	212c      	movs	r1, #44	; 0x2c
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	3361      	adds	r3, #97	; 0x61
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b07      	cmp	r3, #7
 800205e:	d119      	bne.n	8002094 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	335c      	adds	r3, #92	; 0x5c
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	202c      	movs	r0, #44	; 0x2c
 8002078:	fb00 f303 	mul.w	r3, r0, r3
 800207c:	440b      	add	r3, r1
 800207e:	335c      	adds	r3, #92	; 0x5c
 8002080:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3360      	adds	r3, #96	; 0x60
 8002090:	2204      	movs	r2, #4
 8002092:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a0:	461a      	mov	r2, r3
 80020a2:	2302      	movs	r3, #2
 80020a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	b2d9      	uxtb	r1, r3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	202c      	movs	r0, #44	; 0x2c
 80020b0:	fb00 f303 	mul.w	r3, r0, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	3360      	adds	r3, #96	; 0x60
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f004 fe61 	bl	8006d84 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80020c2:	e061      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d156      	bne.n	8002188 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	333f      	adds	r3, #63	; 0x3f
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d111      	bne.n	8002112 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	335c      	adds	r3, #92	; 0x5c
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f003 fb31 	bl	8005772 <USB_HC_Halt>
 8002110:	e031      	b.n	8002176 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	333f      	adds	r3, #63	; 0x3f
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	333f      	adds	r3, #63	; 0x3f
 8002134:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002136:	2b02      	cmp	r3, #2
 8002138:	d11d      	bne.n	8002176 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	335c      	adds	r3, #92	; 0x5c
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d110      	bne.n	8002176 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3361      	adds	r3, #97	; 0x61
 8002162:	2203      	movs	r2, #3
 8002164:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fafe 	bl	8005772 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002182:	461a      	mov	r2, r3
 8002184:	2310      	movs	r3, #16
 8002186:	6093      	str	r3, [r2, #8]
}
 8002188:	bf00      	nop
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d11a      	bne.n	80021f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	461a      	mov	r2, r3
 80021ce:	2304      	movs	r3, #4
 80021d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	3361      	adds	r3, #97	; 0x61
 80021e0:	2206      	movs	r2, #6
 80021e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fabf 	bl	8005772 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80021f4:	e331      	b.n	800285a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b20      	cmp	r3, #32
 800220a:	d12e      	bne.n	800226a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	461a      	mov	r2, r3
 800221a:	2320      	movs	r3, #32
 800221c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	333d      	adds	r3, #61	; 0x3d
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	f040 8313 	bne.w	800285a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	333d      	adds	r3, #61	; 0x3d
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3360      	adds	r3, #96	; 0x60
 8002254:	2202      	movs	r2, #2
 8002256:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f003 fa85 	bl	8005772 <USB_HC_Halt>
}
 8002268:	e2f7      	b.n	800285a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002280:	d112      	bne.n	80022a8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	461a      	mov	r2, r3
 8002290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002294:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 fa66 	bl	8005772 <USB_HC_Halt>
}
 80022a6:	e2d8      	b.n	800285a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d140      	bne.n	8002340 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	335c      	adds	r3, #92	; 0x5c
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e2:	2b40      	cmp	r3, #64	; 0x40
 80022e4:	d111      	bne.n	800230a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	333d      	adds	r3, #61	; 0x3d
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	461a      	mov	r2, r3
 8002306:	2340      	movs	r3, #64	; 0x40
 8002308:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	461a      	mov	r2, r3
 8002318:	2301      	movs	r3, #1
 800231a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	3361      	adds	r3, #97	; 0x61
 800232a:	2201      	movs	r2, #1
 800232c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fa1a 	bl	8005772 <USB_HC_Halt>
}
 800233e:	e28c      	b.n	800285a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b40      	cmp	r3, #64	; 0x40
 8002354:	d12c      	bne.n	80023b0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	3361      	adds	r3, #97	; 0x61
 8002364:	2204      	movs	r2, #4
 8002366:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	333d      	adds	r3, #61	; 0x3d
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	335c      	adds	r3, #92	; 0x5c
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f003 f9eb 	bl	8005772 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	461a      	mov	r2, r3
 80023aa:	2340      	movs	r3, #64	; 0x40
 80023ac:	6093      	str	r3, [r2, #8]
}
 80023ae:	e254      	b.n	800285a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d11a      	bne.n	80023fc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	461a      	mov	r2, r3
 80023d4:	2308      	movs	r3, #8
 80023d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3361      	adds	r3, #97	; 0x61
 80023e6:	2205      	movs	r2, #5
 80023e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 f9bc 	bl	8005772 <USB_HC_Halt>
}
 80023fa:	e22e      	b.n	800285a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b10      	cmp	r3, #16
 8002410:	d140      	bne.n	8002494 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	335c      	adds	r3, #92	; 0x5c
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3361      	adds	r3, #97	; 0x61
 8002432:	2203      	movs	r2, #3
 8002434:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	333d      	adds	r3, #61	; 0x3d
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d112      	bne.n	8002470 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	333c      	adds	r3, #60	; 0x3c
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	333d      	adds	r3, #61	; 0x3d
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f003 f979 	bl	8005772 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	461a      	mov	r2, r3
 800248e:	2310      	movs	r3, #16
 8002490:	6093      	str	r3, [r2, #8]
}
 8002492:	e1e2      	b.n	800285a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d164      	bne.n	8002574 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d111      	bne.n	80024d6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3361      	adds	r3, #97	; 0x61
 80024c0:	2206      	movs	r2, #6
 80024c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 f94f 	bl	8005772 <USB_HC_Halt>
 80024d4:	e044      	b.n	8002560 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	335c      	adds	r3, #92	; 0x5c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	202c      	movs	r0, #44	; 0x2c
 80024ee:	fb00 f303 	mul.w	r3, r0, r3
 80024f2:	440b      	add	r3, r1
 80024f4:	335c      	adds	r3, #92	; 0x5c
 80024f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	335c      	adds	r3, #92	; 0x5c
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d920      	bls.n	800254e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	335c      	adds	r3, #92	; 0x5c
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	3360      	adds	r3, #96	; 0x60
 800252c:	2204      	movs	r2, #4
 800252e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	b2d9      	uxtb	r1, r3
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	202c      	movs	r0, #44	; 0x2c
 800253a:	fb00 f303 	mul.w	r3, r0, r3
 800253e:	4413      	add	r3, r2
 8002540:	3360      	adds	r3, #96	; 0x60
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f004 fc1c 	bl	8006d84 <HAL_HCD_HC_NotifyURBChange_Callback>
 800254c:	e008      	b.n	8002560 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	3360      	adds	r3, #96	; 0x60
 800255c:	2202      	movs	r2, #2
 800255e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	6093      	str	r3, [r2, #8]
}
 8002572:	e172      	b.n	800285a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258a:	d11b      	bne.n	80025c4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3361      	adds	r3, #97	; 0x61
 800259a:	2208      	movs	r2, #8
 800259c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 f8e2 	bl	8005772 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	461a      	mov	r2, r3
 80025bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c0:	6093      	str	r3, [r2, #8]
}
 80025c2:	e14a      	b.n	800285a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	f040 813f 	bne.w	800285a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3361      	adds	r3, #97	; 0x61
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d17d      	bne.n	80026ec <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3360      	adds	r3, #96	; 0x60
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	333f      	adds	r3, #63	; 0x3f
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d00a      	beq.n	800262c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	333f      	adds	r3, #63	; 0x3f
 8002624:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002626:	2b03      	cmp	r3, #3
 8002628:	f040 8100 	bne.w	800282c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d113      	bne.n	800265c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	3355      	adds	r3, #85	; 0x55
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2d8      	uxtb	r0, r3
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	3355      	adds	r3, #85	; 0x55
 8002658:	4602      	mov	r2, r0
 800265a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b01      	cmp	r3, #1
 8002662:	f040 80e3 	bne.w	800282c <HCD_HC_OUT_IRQHandler+0x69c>
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	334c      	adds	r3, #76	; 0x4c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80d8 	beq.w	800282c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	334c      	adds	r3, #76	; 0x4c
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	202c      	movs	r0, #44	; 0x2c
 8002692:	fb00 f202 	mul.w	r2, r0, r2
 8002696:	440a      	add	r2, r1
 8002698:	3240      	adds	r2, #64	; 0x40
 800269a:	8812      	ldrh	r2, [r2, #0]
 800269c:	4413      	add	r3, r2
 800269e:	3b01      	subs	r3, #1
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	202c      	movs	r0, #44	; 0x2c
 80026a6:	fb00 f202 	mul.w	r2, r0, r2
 80026aa:	440a      	add	r2, r1
 80026ac:	3240      	adds	r2, #64	; 0x40
 80026ae:	8812      	ldrh	r2, [r2, #0]
 80026b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80b5 	beq.w	800282c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3355      	adds	r3, #85	; 0x55
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	f083 0301 	eor.w	r3, r3, #1
 80026d6:	b2d8      	uxtb	r0, r3
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3355      	adds	r3, #85	; 0x55
 80026e6:	4602      	mov	r2, r0
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e09f      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	3361      	adds	r3, #97	; 0x61
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d109      	bne.n	8002714 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3360      	adds	r3, #96	; 0x60
 800270e:	2202      	movs	r2, #2
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	e08b      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3361      	adds	r3, #97	; 0x61
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d109      	bne.n	800273c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	3360      	adds	r3, #96	; 0x60
 8002736:	2202      	movs	r2, #2
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	e077      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	3361      	adds	r3, #97	; 0x61
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b05      	cmp	r3, #5
 800274e:	d109      	bne.n	8002764 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	3360      	adds	r3, #96	; 0x60
 800275e:	2205      	movs	r2, #5
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e063      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	3361      	adds	r3, #97	; 0x61
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b06      	cmp	r3, #6
 8002776:	d009      	beq.n	800278c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3361      	adds	r3, #97	; 0x61
 8002786:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002788:	2b08      	cmp	r3, #8
 800278a:	d14f      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	335c      	adds	r3, #92	; 0x5c
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	202c      	movs	r0, #44	; 0x2c
 80027a4:	fb00 f303 	mul.w	r3, r0, r3
 80027a8:	440b      	add	r3, r1
 80027aa:	335c      	adds	r3, #92	; 0x5c
 80027ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	335c      	adds	r3, #92	; 0x5c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d912      	bls.n	80027e8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	335c      	adds	r3, #92	; 0x5c
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3360      	adds	r3, #96	; 0x60
 80027e2:	2204      	movs	r2, #4
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e021      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3360      	adds	r3, #96	; 0x60
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002810:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002818:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	461a      	mov	r2, r3
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	461a      	mov	r2, r3
 800283a:	2302      	movs	r3, #2
 800283c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	b2d9      	uxtb	r1, r3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	202c      	movs	r0, #44	; 0x2c
 8002848:	fb00 f303 	mul.w	r3, r0, r3
 800284c:	4413      	add	r3, r2
 800284e:	3360      	adds	r3, #96	; 0x60
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f004 fa95 	bl	8006d84 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800285a:	bf00      	nop
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b08a      	sub	sp, #40	; 0x28
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	0c5b      	lsrs	r3, r3, #17
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002896:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d004      	beq.n	80028a8 <HCD_RXQLVL_IRQHandler+0x46>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	f000 80a9 	beq.w	80029f8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80028a6:	e0aa      	b.n	80029fe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80a6 	beq.w	80029fc <HCD_RXQLVL_IRQHandler+0x19a>
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3344      	adds	r3, #68	; 0x44
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 809b 	beq.w	80029fc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	3350      	adds	r3, #80	; 0x50
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	441a      	add	r2, r3
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	202c      	movs	r0, #44	; 0x2c
 80028e0:	fb00 f303 	mul.w	r3, r0, r3
 80028e4:	440b      	add	r3, r1
 80028e6:	334c      	adds	r3, #76	; 0x4c
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d87a      	bhi.n	80029e4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3344      	adds	r3, #68	; 0x44
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	b292      	uxth	r2, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f002 fab4 	bl	8004e74 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3344      	adds	r3, #68	; 0x44
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	441a      	add	r2, r3
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	202c      	movs	r0, #44	; 0x2c
 8002926:	fb00 f303 	mul.w	r3, r0, r3
 800292a:	440b      	add	r3, r1
 800292c:	3344      	adds	r3, #68	; 0x44
 800292e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3350      	adds	r3, #80	; 0x50
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	441a      	add	r2, r3
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	202c      	movs	r0, #44	; 0x2c
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	440b      	add	r3, r1
 8002950:	3350      	adds	r3, #80	; 0x50
 8002952:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	0cdb      	lsrs	r3, r3, #19
 8002964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002968:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3340      	adds	r3, #64	; 0x40
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4293      	cmp	r3, r2
 8002980:	d13c      	bne.n	80029fc <HCD_RXQLVL_IRQHandler+0x19a>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d039      	beq.n	80029fc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800299e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3354      	adds	r3, #84	; 0x54
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	f083 0301 	eor.w	r3, r3, #1
 80029ce:	b2d8      	uxtb	r0, r3
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3354      	adds	r3, #84	; 0x54
 80029de:	4602      	mov	r2, r0
 80029e0:	701a      	strb	r2, [r3, #0]
      break;
 80029e2:	e00b      	b.n	80029fc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3360      	adds	r3, #96	; 0x60
 80029f2:	2204      	movs	r2, #4
 80029f4:	701a      	strb	r2, [r3, #0]
      break;
 80029f6:	e001      	b.n	80029fc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80029f8:	bf00      	nop
 80029fa:	e000      	b.n	80029fe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80029fc:	bf00      	nop
  }
}
 80029fe:	bf00      	nop
 8002a00:	3728      	adds	r7, #40	; 0x28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a32:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d10b      	bne.n	8002a56 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d102      	bne.n	8002a4e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f004 f97f 	bl	8006d4c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d132      	bne.n	8002ac6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f043 0308 	orr.w	r3, r3, #8
 8002a66:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d126      	bne.n	8002ac0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d113      	bne.n	8002aa2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a84:	d106      	bne.n	8002a94 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 fb5f 	bl	8005150 <USB_InitFSLSPClkSel>
 8002a92:	e011      	b.n	8002ab8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f002 fb58 	bl	8005150 <USB_InitFSLSPClkSel>
 8002aa0:	e00a      	b.n	8002ab8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d106      	bne.n	8002ab8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ab6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f004 f971 	bl	8006da0 <HAL_HCD_PortEnabled_Callback>
 8002abe:	e002      	b.n	8002ac6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f004 f97b 	bl	8006dbc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d103      	bne.n	8002ad8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f043 0320 	orr.w	r3, r3, #32
 8002ad6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e12b      	b.n	8002d56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fd ff0e 	bl	8000934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2224      	movs	r2, #36	; 0x24
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b50:	f001 feca 	bl	80048e8 <HAL_RCC_GetPCLK1Freq>
 8002b54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4a81      	ldr	r2, [pc, #516]	; (8002d60 <HAL_I2C_Init+0x274>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d807      	bhi.n	8002b70 <HAL_I2C_Init+0x84>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a80      	ldr	r2, [pc, #512]	; (8002d64 <HAL_I2C_Init+0x278>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	bf94      	ite	ls
 8002b68:	2301      	movls	r3, #1
 8002b6a:	2300      	movhi	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e006      	b.n	8002b7e <HAL_I2C_Init+0x92>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4a7d      	ldr	r2, [pc, #500]	; (8002d68 <HAL_I2C_Init+0x27c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	bf94      	ite	ls
 8002b78:	2301      	movls	r3, #1
 8002b7a:	2300      	movhi	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0e7      	b.n	8002d56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a78      	ldr	r2, [pc, #480]	; (8002d6c <HAL_I2C_Init+0x280>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0c9b      	lsrs	r3, r3, #18
 8002b90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4a6a      	ldr	r2, [pc, #424]	; (8002d60 <HAL_I2C_Init+0x274>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d802      	bhi.n	8002bc0 <HAL_I2C_Init+0xd4>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	e009      	b.n	8002bd4 <HAL_I2C_Init+0xe8>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	4a69      	ldr	r2, [pc, #420]	; (8002d70 <HAL_I2C_Init+0x284>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002be6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	495c      	ldr	r1, [pc, #368]	; (8002d60 <HAL_I2C_Init+0x274>)
 8002bf0:	428b      	cmp	r3, r1
 8002bf2:	d819      	bhi.n	8002c28 <HAL_I2C_Init+0x13c>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1e59      	subs	r1, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c02:	1c59      	adds	r1, r3, #1
 8002c04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c08:	400b      	ands	r3, r1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_I2C_Init+0x138>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1e59      	subs	r1, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c22:	e051      	b.n	8002cc8 <HAL_I2C_Init+0x1dc>
 8002c24:	2304      	movs	r3, #4
 8002c26:	e04f      	b.n	8002cc8 <HAL_I2C_Init+0x1dc>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d111      	bne.n	8002c54 <HAL_I2C_Init+0x168>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e58      	subs	r0, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	440b      	add	r3, r1
 8002c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e012      	b.n	8002c7a <HAL_I2C_Init+0x18e>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1e58      	subs	r0, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	0099      	lsls	r1, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Init+0x196>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e022      	b.n	8002cc8 <HAL_I2C_Init+0x1dc>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10e      	bne.n	8002ca8 <HAL_I2C_Init+0x1bc>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1e58      	subs	r0, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6859      	ldr	r1, [r3, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	440b      	add	r3, r1
 8002c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca6:	e00f      	b.n	8002cc8 <HAL_I2C_Init+0x1dc>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e58      	subs	r0, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	0099      	lsls	r1, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	6809      	ldr	r1, [r1, #0]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6911      	ldr	r1, [r2, #16]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68d2      	ldr	r2, [r2, #12]
 8002d02:	4311      	orrs	r1, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	000186a0 	.word	0x000186a0
 8002d64:	001e847f 	.word	0x001e847f
 8002d68:	003d08ff 	.word	0x003d08ff
 8002d6c:	431bde83 	.word	0x431bde83
 8002d70:	10624dd3 	.word	0x10624dd3

08002d74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08c      	sub	sp, #48	; 0x30
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	817b      	strh	r3, [r7, #10]
 8002d86:	460b      	mov	r3, r1
 8002d88:	813b      	strh	r3, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d8e:	f7fd ffc7 	bl	8000d20 <HAL_GetTick>
 8002d92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	f040 8208 	bne.w	80031b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2319      	movs	r3, #25
 8002da8:	2201      	movs	r2, #1
 8002daa:	497b      	ldr	r1, [pc, #492]	; (8002f98 <HAL_I2C_Mem_Read+0x224>)
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 faef 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
 8002dba:	e1fb      	b.n	80031b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_I2C_Mem_Read+0x56>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e1f4      	b.n	80031b4 <HAL_I2C_Mem_Read+0x440>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d007      	beq.n	8002df0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2222      	movs	r2, #34	; 0x22
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a5b      	ldr	r2, [pc, #364]	; (8002f9c <HAL_I2C_Mem_Read+0x228>)
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e32:	88f8      	ldrh	r0, [r7, #6]
 8002e34:	893a      	ldrh	r2, [r7, #8]
 8002e36:	8979      	ldrh	r1, [r7, #10]
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4603      	mov	r3, r0
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f9bc 	bl	80031c0 <I2C_RequestMemoryRead>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1b0      	b.n	80031b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d113      	bne.n	8002e82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	623b      	str	r3, [r7, #32]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	623b      	str	r3, [r7, #32]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e184      	b.n	800318c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d11b      	bne.n	8002ec2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	61fb      	str	r3, [r7, #28]
 8002eae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e164      	b.n	800318c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d11b      	bne.n	8002f02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	e144      	b.n	800318c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f18:	e138      	b.n	800318c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	f200 80f1 	bhi.w	8003106 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d123      	bne.n	8002f74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fb44 	bl	80035be <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e139      	b.n	80031b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f72:	e10b      	b.n	800318c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d14e      	bne.n	800301a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	2200      	movs	r2, #0
 8002f84:	4906      	ldr	r1, [pc, #24]	; (8002fa0 <HAL_I2C_Mem_Read+0x22c>)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fa02 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e10e      	b.n	80031b4 <HAL_I2C_Mem_Read+0x440>
 8002f96:	bf00      	nop
 8002f98:	00100002 	.word	0x00100002
 8002f9c:	ffff0000 	.word	0xffff0000
 8002fa0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003018:	e0b8      	b.n	800318c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	2200      	movs	r2, #0
 8003022:	4966      	ldr	r1, [pc, #408]	; (80031bc <HAL_I2C_Mem_Read+0x448>)
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f9b3 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0bf      	b.n	80031b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	2200      	movs	r2, #0
 800307e:	494f      	ldr	r1, [pc, #316]	; (80031bc <HAL_I2C_Mem_Read+0x448>)
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f985 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e091      	b.n	80031b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003104:	e042      	b.n	800318c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003108:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fa57 	bl	80035be <I2C_WaitOnRXNEFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e04c      	b.n	80031b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b04      	cmp	r3, #4
 8003158:	d118      	bne.n	800318c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	f47f aec2 	bne.w	8002f1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e000      	b.n	80031b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3728      	adds	r7, #40	; 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	00010004 	.word	0x00010004

080031c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	817b      	strh	r3, [r7, #10]
 80031d2:	460b      	mov	r3, r1
 80031d4:	813b      	strh	r3, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	2200      	movs	r2, #0
 8003202:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f8c2 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003220:	d103      	bne.n	800322a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0aa      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800323c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	6a3a      	ldr	r2, [r7, #32]
 8003242:	4952      	ldr	r1, [pc, #328]	; (800338c <I2C_RequestMemoryRead+0x1cc>)
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f8fa 	bl	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e097      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	6a39      	ldr	r1, [r7, #32]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f964 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00d      	beq.n	8003296 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b04      	cmp	r3, #4
 8003280:	d107      	bne.n	8003292 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003290:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e076      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800329c:	893b      	ldrh	r3, [r7, #8]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	611a      	str	r2, [r3, #16]
 80032a6:	e021      	b.n	80032ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032a8:	893b      	ldrh	r3, [r7, #8]
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	6a39      	ldr	r1, [r7, #32]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f93e 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d107      	bne.n	80032de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e050      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032e2:	893b      	ldrh	r3, [r7, #8]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	6a39      	ldr	r1, [r7, #32]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f923 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	2b04      	cmp	r3, #4
 8003302:	d107      	bne.n	8003314 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003312:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e035      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003326:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	2200      	movs	r2, #0
 8003330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f82b 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334e:	d103      	bne.n	8003358 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e013      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800335c:	897b      	ldrh	r3, [r7, #10]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	6a3a      	ldr	r2, [r7, #32]
 8003370:	4906      	ldr	r1, [pc, #24]	; (800338c <I2C_RequestMemoryRead+0x1cc>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f863 	bl	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	00010002 	.word	0x00010002

08003390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a0:	e025      	b.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d021      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fd fcb9 	bl	8000d20 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e023      	b.n	8003436 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10d      	bne.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	e00c      	b.n	800342e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4013      	ands	r3, r2
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	429a      	cmp	r2, r3
 8003432:	d0b6      	beq.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800344c:	e051      	b.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345c:	d123      	bne.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003476:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e046      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d021      	beq.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fd fc37 	bl	8000d20 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e020      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10c      	bne.n	8003516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf14      	ite	ne
 800350e:	2301      	movne	r3, #1
 8003510:	2300      	moveq	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e00b      	b.n	800352e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	43da      	mvns	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d18d      	bne.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003548:	e02d      	b.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f88d 	bl	800366a <I2C_IsAcknowledgeFailed>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e02d      	b.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d021      	beq.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fd fbdd 	bl	8000d20 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d116      	bne.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d1ca      	bne.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035ca:	e042      	b.n	8003652 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d119      	bne.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f06f 0210 	mvn.w	r2, #16
 80035e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e029      	b.n	8003662 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fd fb87 	bl	8000d20 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f043 0220 	orr.w	r2, r3, #32
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e007      	b.n	8003662 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d1b5      	bne.n	80035cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003680:	d11b      	bne.n	80036ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800368a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f043 0204 	orr.w	r2, r3, #4
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e128      	b.n	800392c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a90      	ldr	r2, [pc, #576]	; (8003934 <HAL_I2S_Init+0x26c>)
 80036f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fd f987 	bl	8000a08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003710:	f023 030f 	bic.w	r3, r3, #15
 8003714:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2202      	movs	r2, #2
 800371c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d060      	beq.n	80037e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800372e:	2310      	movs	r3, #16
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	e001      	b.n	8003738 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b20      	cmp	r3, #32
 800373e:	d802      	bhi.n	8003746 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003746:	2001      	movs	r0, #1
 8003748:	f001 f9c4 	bl	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 800374c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003756:	d125      	bne.n	80037a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	fbb2 f2f3 	udiv	r2, r2, r3
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	461a      	mov	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	3305      	adds	r3, #5
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	e01f      	b.n	80037c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	fbb2 f2f3 	udiv	r2, r2, r3
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	3305      	adds	r3, #5
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	e00e      	b.n	80037c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	461a      	mov	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	3305      	adds	r3, #5
 80037c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4a5c      	ldr	r2, [pc, #368]	; (8003938 <HAL_I2S_Init+0x270>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	08db      	lsrs	r3, r3, #3
 80037cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	e003      	b.n	80037f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80037e8:	2302      	movs	r3, #2
 80037ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d902      	bls.n	80037fc <HAL_I2S_Init+0x134>
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	2bff      	cmp	r3, #255	; 0xff
 80037fa:	d907      	bls.n	800380c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003800:	f043 0210 	orr.w	r2, r3, #16
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e08f      	b.n	800392c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	ea42 0103 	orr.w	r1, r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	430a      	orrs	r2, r1
 800381e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800382a:	f023 030f 	bic.w	r3, r3, #15
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6851      	ldr	r1, [r2, #4]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6892      	ldr	r2, [r2, #8]
 8003836:	4311      	orrs	r1, r2
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	68d2      	ldr	r2, [r2, #12]
 800383c:	4311      	orrs	r1, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6992      	ldr	r2, [r2, #24]
 8003842:	430a      	orrs	r2, r1
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800384e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d161      	bne.n	800391c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a38      	ldr	r2, [pc, #224]	; (800393c <HAL_I2S_Init+0x274>)
 800385c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a37      	ldr	r2, [pc, #220]	; (8003940 <HAL_I2S_Init+0x278>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d101      	bne.n	800386c <HAL_I2S_Init+0x1a4>
 8003868:	4b36      	ldr	r3, [pc, #216]	; (8003944 <HAL_I2S_Init+0x27c>)
 800386a:	e001      	b.n	8003870 <HAL_I2S_Init+0x1a8>
 800386c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	4932      	ldr	r1, [pc, #200]	; (8003940 <HAL_I2S_Init+0x278>)
 8003878:	428a      	cmp	r2, r1
 800387a:	d101      	bne.n	8003880 <HAL_I2S_Init+0x1b8>
 800387c:	4a31      	ldr	r2, [pc, #196]	; (8003944 <HAL_I2S_Init+0x27c>)
 800387e:	e001      	b.n	8003884 <HAL_I2S_Init+0x1bc>
 8003880:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003884:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003888:	f023 030f 	bic.w	r3, r3, #15
 800388c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2b      	ldr	r2, [pc, #172]	; (8003940 <HAL_I2S_Init+0x278>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d101      	bne.n	800389c <HAL_I2S_Init+0x1d4>
 8003898:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <HAL_I2S_Init+0x27c>)
 800389a:	e001      	b.n	80038a0 <HAL_I2S_Init+0x1d8>
 800389c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a0:	2202      	movs	r2, #2
 80038a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a25      	ldr	r2, [pc, #148]	; (8003940 <HAL_I2S_Init+0x278>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_I2S_Init+0x1ea>
 80038ae:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_I2S_Init+0x27c>)
 80038b0:	e001      	b.n	80038b6 <HAL_I2S_Init+0x1ee>
 80038b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c2:	d003      	beq.n	80038cc <HAL_I2S_Init+0x204>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d103      	bne.n	80038d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	e001      	b.n	80038d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038e2:	4313      	orrs	r3, r2
 80038e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038ec:	4313      	orrs	r3, r2
 80038ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038f6:	4313      	orrs	r3, r2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	897b      	ldrh	r3, [r7, #10]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003904:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <HAL_I2S_Init+0x278>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d101      	bne.n	8003914 <HAL_I2S_Init+0x24c>
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_I2S_Init+0x27c>)
 8003912:	e001      	b.n	8003918 <HAL_I2S_Init+0x250>
 8003914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003918:	897a      	ldrh	r2, [r7, #10]
 800391a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	08003a3f 	.word	0x08003a3f
 8003938:	cccccccd 	.word	0xcccccccd
 800393c:	08003b55 	.word	0x08003b55
 8003940:	40003800 	.word	0x40003800
 8003944:	40003400 	.word	0x40003400

08003948 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	881a      	ldrh	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c9a      	adds	r2, r3, #2
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10e      	bne.n	80039d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ffb8 	bl	8003948 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	b292      	uxth	r2, r2
 80039f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	1c9a      	adds	r2, r3, #2
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10e      	bne.n	8003a36 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a26:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff93 	bl	800395c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d13a      	bne.n	8003ad0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d109      	bne.n	8003a78 <I2S_IRQHandler+0x3a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d102      	bne.n	8003a78 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff ffb4 	bl	80039e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b40      	cmp	r3, #64	; 0x40
 8003a80:	d126      	bne.n	8003ad0 <I2S_IRQHandler+0x92>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d11f      	bne.n	8003ad0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f043 0202 	orr.w	r2, r3, #2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ff50 	bl	8003970 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d136      	bne.n	8003b4a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d109      	bne.n	8003afa <I2S_IRQHandler+0xbc>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	d102      	bne.n	8003afa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff45 	bl	8003984 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d122      	bne.n	8003b4a <I2S_IRQHandler+0x10c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d11b      	bne.n	8003b4a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b20:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	f043 0204 	orr.w	r2, r3, #4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ff13 	bl	8003970 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a92      	ldr	r2, [pc, #584]	; (8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b6e:	4b92      	ldr	r3, [pc, #584]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b70:	e001      	b.n	8003b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a8b      	ldr	r2, [pc, #556]	; (8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b8c:	4b8a      	ldr	r3, [pc, #552]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b8e:	e001      	b.n	8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba0:	d004      	beq.n	8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 8099 	bne.w	8003cde <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d107      	bne.n	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f925 	bl	8003e10 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f9c8 	bl	8003f70 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	d13a      	bne.n	8003c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d035      	beq.n	8003c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a6e      	ldr	r2, [pc, #440]	; (8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003bfe:	4b6e      	ldr	r3, [pc, #440]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c00:	e001      	b.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4969      	ldr	r1, [pc, #420]	; (8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c0e:	428b      	cmp	r3, r1
 8003c10:	d101      	bne.n	8003c16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c12:	4b69      	ldr	r3, [pc, #420]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c14:	e001      	b.n	8003c1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c1e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f043 0202 	orr.w	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff fe88 	bl	8003970 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	f040 80c3 	bne.w	8003df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80bd 	beq.w	8003df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c86:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a49      	ldr	r2, [pc, #292]	; (8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d101      	bne.n	8003c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c92:	4b49      	ldr	r3, [pc, #292]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c94:	e001      	b.n	8003c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4944      	ldr	r1, [pc, #272]	; (8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ca2:	428b      	cmp	r3, r1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ca8:	e001      	b.n	8003cae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cb2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fe4a 	bl	8003970 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cdc:	e089      	b.n	8003df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d107      	bne.n	8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f8be 	bl	8003e74 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d107      	bne.n	8003d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f8fd 	bl	8003f0c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d12f      	bne.n	8003d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d02a      	beq.n	8003d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d34:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d101      	bne.n	8003d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d40:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d42:	e001      	b.n	8003d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4919      	ldr	r1, [pc, #100]	; (8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d50:	428b      	cmp	r3, r1
 8003d52:	d101      	bne.n	8003d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d56:	e001      	b.n	8003d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f043 0202 	orr.w	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff fdfa 	bl	8003970 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d136      	bne.n	8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d031      	beq.n	8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d101      	bne.n	8003d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003d9a:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d9c:	e001      	b.n	8003da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4902      	ldr	r1, [pc, #8]	; (8003db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003daa:	428b      	cmp	r3, r1
 8003dac:	d106      	bne.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003dae:	4b02      	ldr	r3, [pc, #8]	; (8003db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003db0:	e006      	b.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003db2:	bf00      	nop
 8003db4:	40003800 	.word	0x40003800
 8003db8:	40003400 	.word	0x40003400
 8003dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dc4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dd4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f043 0204 	orr.w	r2, r3, #4
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff fdc0 	bl	8003970 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003df0:	e000      	b.n	8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003df2:	bf00      	nop
}
 8003df4:	bf00      	nop
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c99      	adds	r1, r3, #2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6251      	str	r1, [r2, #36]	; 0x24
 8003e22:	881a      	ldrh	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d113      	bne.n	8003e6a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff ffc9 	bl	8003dfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	1c99      	adds	r1, r3, #2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6251      	str	r1, [r2, #36]	; 0x24
 8003e86:	8819      	ldrh	r1, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <I2SEx_TxISR_I2SExt+0x90>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d101      	bne.n	8003e96 <I2SEx_TxISR_I2SExt+0x22>
 8003e92:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <I2SEx_TxISR_I2SExt+0x94>)
 8003e94:	e001      	b.n	8003e9a <I2SEx_TxISR_I2SExt+0x26>
 8003e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e9a:	460a      	mov	r2, r1
 8003e9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d121      	bne.n	8003efa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <I2SEx_TxISR_I2SExt+0x90>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <I2SEx_TxISR_I2SExt+0x50>
 8003ec0:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <I2SEx_TxISR_I2SExt+0x94>)
 8003ec2:	e001      	b.n	8003ec8 <I2SEx_TxISR_I2SExt+0x54>
 8003ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	490d      	ldr	r1, [pc, #52]	; (8003f04 <I2SEx_TxISR_I2SExt+0x90>)
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	d101      	bne.n	8003ed8 <I2SEx_TxISR_I2SExt+0x64>
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <I2SEx_TxISR_I2SExt+0x94>)
 8003ed6:	e001      	b.n	8003edc <I2SEx_TxISR_I2SExt+0x68>
 8003ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003edc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ee0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ff81 	bl	8003dfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40003800 	.word	0x40003800
 8003f08:	40003400 	.word	0x40003400

08003f0c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68d8      	ldr	r0, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	1c99      	adds	r1, r3, #2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f24:	b282      	uxth	r2, r0
 8003f26:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d113      	bne.n	8003f68 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f4e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ff4a 	bl	8003dfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a20      	ldr	r2, [pc, #128]	; (8004000 <I2SEx_RxISR_I2SExt+0x90>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d101      	bne.n	8003f86 <I2SEx_RxISR_I2SExt+0x16>
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <I2SEx_RxISR_I2SExt+0x94>)
 8003f84:	e001      	b.n	8003f8a <I2SEx_RxISR_I2SExt+0x1a>
 8003f86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f8a:	68d8      	ldr	r0, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	1c99      	adds	r1, r3, #2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f96:	b282      	uxth	r2, r0
 8003f98:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d121      	bne.n	8003ff6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <I2SEx_RxISR_I2SExt+0x90>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d101      	bne.n	8003fc0 <I2SEx_RxISR_I2SExt+0x50>
 8003fbc:	4b11      	ldr	r3, [pc, #68]	; (8004004 <I2SEx_RxISR_I2SExt+0x94>)
 8003fbe:	e001      	b.n	8003fc4 <I2SEx_RxISR_I2SExt+0x54>
 8003fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	490d      	ldr	r1, [pc, #52]	; (8004000 <I2SEx_RxISR_I2SExt+0x90>)
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	d101      	bne.n	8003fd4 <I2SEx_RxISR_I2SExt+0x64>
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <I2SEx_RxISR_I2SExt+0x94>)
 8003fd2:	e001      	b.n	8003fd8 <I2SEx_RxISR_I2SExt+0x68>
 8003fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fdc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff03 	bl	8003dfc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40003800 	.word	0x40003800
 8004004:	40003400 	.word	0x40003400

08004008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e267      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d075      	beq.n	8004112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004026:	4b88      	ldr	r3, [pc, #544]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b04      	cmp	r3, #4
 8004030:	d00c      	beq.n	800404c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004032:	4b85      	ldr	r3, [pc, #532]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800403a:	2b08      	cmp	r3, #8
 800403c:	d112      	bne.n	8004064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403e:	4b82      	ldr	r3, [pc, #520]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404a:	d10b      	bne.n	8004064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404c:	4b7e      	ldr	r3, [pc, #504]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d05b      	beq.n	8004110 <HAL_RCC_OscConfig+0x108>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d157      	bne.n	8004110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e242      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406c:	d106      	bne.n	800407c <HAL_RCC_OscConfig+0x74>
 800406e:	4b76      	ldr	r3, [pc, #472]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a75      	ldr	r2, [pc, #468]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	e01d      	b.n	80040b8 <HAL_RCC_OscConfig+0xb0>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x98>
 8004086:	4b70      	ldr	r3, [pc, #448]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a6f      	ldr	r2, [pc, #444]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 800408c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	4b6d      	ldr	r3, [pc, #436]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6c      	ldr	r2, [pc, #432]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e00b      	b.n	80040b8 <HAL_RCC_OscConfig+0xb0>
 80040a0:	4b69      	ldr	r3, [pc, #420]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a68      	ldr	r2, [pc, #416]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 80040a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	4b66      	ldr	r3, [pc, #408]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a65      	ldr	r2, [pc, #404]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 80040b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d013      	beq.n	80040e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fc fe2e 	bl	8000d20 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c8:	f7fc fe2a 	bl	8000d20 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	; 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e207      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	4b5b      	ldr	r3, [pc, #364]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0xc0>
 80040e6:	e014      	b.n	8004112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fc fe1a 	bl	8000d20 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f0:	f7fc fe16 	bl	8000d20 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	; 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e1f3      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004102:	4b51      	ldr	r3, [pc, #324]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0xe8>
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d063      	beq.n	80041e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800411e:	4b4a      	ldr	r3, [pc, #296]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412a:	4b47      	ldr	r3, [pc, #284]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004132:	2b08      	cmp	r3, #8
 8004134:	d11c      	bne.n	8004170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004136:	4b44      	ldr	r3, [pc, #272]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d116      	bne.n	8004170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004142:	4b41      	ldr	r3, [pc, #260]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_RCC_OscConfig+0x152>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d001      	beq.n	800415a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e1c7      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415a:	4b3b      	ldr	r3, [pc, #236]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4937      	ldr	r1, [pc, #220]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	e03a      	b.n	80041e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004178:	4b34      	ldr	r3, [pc, #208]	; (800424c <HAL_RCC_OscConfig+0x244>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7fc fdcf 	bl	8000d20 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004186:	f7fc fdcb 	bl	8000d20 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e1a8      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004198:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a4:	4b28      	ldr	r3, [pc, #160]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4925      	ldr	r1, [pc, #148]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	600b      	str	r3, [r1, #0]
 80041b8:	e015      	b.n	80041e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <HAL_RCC_OscConfig+0x244>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fc fdae 	bl	8000d20 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c8:	f7fc fdaa 	bl	8000d20 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e187      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041da:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d036      	beq.n	8004260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d016      	beq.n	8004228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <HAL_RCC_OscConfig+0x248>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004200:	f7fc fd8e 	bl	8000d20 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004208:	f7fc fd8a 	bl	8000d20 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e167      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421a:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_OscConfig+0x240>)
 800421c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0x200>
 8004226:	e01b      	b.n	8004260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_RCC_OscConfig+0x248>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422e:	f7fc fd77 	bl	8000d20 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004234:	e00e      	b.n	8004254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004236:	f7fc fd73 	bl	8000d20 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d907      	bls.n	8004254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e150      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
 8004248:	40023800 	.word	0x40023800
 800424c:	42470000 	.word	0x42470000
 8004250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004254:	4b88      	ldr	r3, [pc, #544]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ea      	bne.n	8004236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8097 	beq.w	800439c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426e:	2300      	movs	r3, #0
 8004270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004272:	4b81      	ldr	r3, [pc, #516]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	4b7d      	ldr	r3, [pc, #500]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	4a7c      	ldr	r2, [pc, #496]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
 800428e:	4b7a      	ldr	r3, [pc, #488]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429a:	2301      	movs	r3, #1
 800429c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429e:	4b77      	ldr	r3, [pc, #476]	; (800447c <HAL_RCC_OscConfig+0x474>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d118      	bne.n	80042dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042aa:	4b74      	ldr	r3, [pc, #464]	; (800447c <HAL_RCC_OscConfig+0x474>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a73      	ldr	r2, [pc, #460]	; (800447c <HAL_RCC_OscConfig+0x474>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b6:	f7fc fd33 	bl	8000d20 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042be:	f7fc fd2f 	bl	8000d20 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e10c      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d0:	4b6a      	ldr	r3, [pc, #424]	; (800447c <HAL_RCC_OscConfig+0x474>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d106      	bne.n	80042f2 <HAL_RCC_OscConfig+0x2ea>
 80042e4:	4b64      	ldr	r3, [pc, #400]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	4a63      	ldr	r2, [pc, #396]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6713      	str	r3, [r2, #112]	; 0x70
 80042f0:	e01c      	b.n	800432c <HAL_RCC_OscConfig+0x324>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b05      	cmp	r3, #5
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0x30c>
 80042fa:	4b5f      	ldr	r3, [pc, #380]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	4a5e      	ldr	r2, [pc, #376]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004300:	f043 0304 	orr.w	r3, r3, #4
 8004304:	6713      	str	r3, [r2, #112]	; 0x70
 8004306:	4b5c      	ldr	r3, [pc, #368]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	4a5b      	ldr	r2, [pc, #364]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	6713      	str	r3, [r2, #112]	; 0x70
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0x324>
 8004314:	4b58      	ldr	r3, [pc, #352]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a57      	ldr	r2, [pc, #348]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
 8004320:	4b55      	ldr	r3, [pc, #340]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a54      	ldr	r2, [pc, #336]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004326:	f023 0304 	bic.w	r3, r3, #4
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fc fcf4 	bl	8000d20 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433a:	e00a      	b.n	8004352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fc fcf0 	bl	8000d20 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e0cb      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004352:	4b49      	ldr	r3, [pc, #292]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0ee      	beq.n	800433c <HAL_RCC_OscConfig+0x334>
 800435e:	e014      	b.n	800438a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004360:	f7fc fcde 	bl	8000d20 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004366:	e00a      	b.n	800437e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	f7fc fcda 	bl	8000d20 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	; 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e0b5      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437e:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1ee      	bne.n	8004368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d105      	bne.n	800439c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004390:	4b39      	ldr	r3, [pc, #228]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	4a38      	ldr	r2, [pc, #224]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80a1 	beq.w	80044e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043a6:	4b34      	ldr	r3, [pc, #208]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d05c      	beq.n	800446c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d141      	bne.n	800443e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ba:	4b31      	ldr	r3, [pc, #196]	; (8004480 <HAL_RCC_OscConfig+0x478>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fc fcae 	bl	8000d20 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fc fcaa 	bl	8000d20 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e087      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043da:	4b27      	ldr	r3, [pc, #156]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	019b      	lsls	r3, r3, #6
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	3b01      	subs	r3, #1
 8004400:	041b      	lsls	r3, r3, #16
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	061b      	lsls	r3, r3, #24
 800440a:	491b      	ldr	r1, [pc, #108]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 800440c:	4313      	orrs	r3, r2
 800440e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004410:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <HAL_RCC_OscConfig+0x478>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004416:	f7fc fc83 	bl	8000d20 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441e:	f7fc fc7f 	bl	8000d20 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e05c      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004430:	4b11      	ldr	r3, [pc, #68]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x416>
 800443c:	e054      	b.n	80044e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <HAL_RCC_OscConfig+0x478>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fc fc6c 	bl	8000d20 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444c:	f7fc fc68 	bl	8000d20 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e045      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_RCC_OscConfig+0x470>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x444>
 800446a:	e03d      	b.n	80044e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d107      	bne.n	8004484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e038      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
 8004478:	40023800 	.word	0x40023800
 800447c:	40007000 	.word	0x40007000
 8004480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004484:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <HAL_RCC_OscConfig+0x4ec>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d028      	beq.n	80044e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d121      	bne.n	80044e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d11a      	bne.n	80044e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044bc:	4293      	cmp	r3, r2
 80044be:	d111      	bne.n	80044e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	3b01      	subs	r3, #1
 80044ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800

080044f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0cc      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800450c:	4b68      	ldr	r3, [pc, #416]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d90c      	bls.n	8004534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b65      	ldr	r3, [pc, #404]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b63      	ldr	r3, [pc, #396]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0b8      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d020      	beq.n	8004582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800454c:	4b59      	ldr	r3, [pc, #356]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4a58      	ldr	r2, [pc, #352]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004564:	4b53      	ldr	r3, [pc, #332]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4a52      	ldr	r2, [pc, #328]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800456e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004570:	4b50      	ldr	r3, [pc, #320]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	494d      	ldr	r1, [pc, #308]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d044      	beq.n	8004618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d107      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004596:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d119      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e07f      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d003      	beq.n	80045b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d107      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b6:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e06f      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c6:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e067      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045d6:	4b37      	ldr	r3, [pc, #220]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f023 0203 	bic.w	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4934      	ldr	r1, [pc, #208]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e8:	f7fc fb9a 	bl	8000d20 <HAL_GetTick>
 80045ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f0:	f7fc fb96 	bl	8000d20 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e04f      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004606:	4b2b      	ldr	r3, [pc, #172]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 020c 	and.w	r2, r3, #12
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	429a      	cmp	r2, r3
 8004616:	d1eb      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004618:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d20c      	bcs.n	8004640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004626:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800462e:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e032      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800464c:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4916      	ldr	r1, [pc, #88]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800466a:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	490e      	ldr	r1, [pc, #56]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800467e:	f000 f821 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 8004682:	4602      	mov	r2, r0
 8004684:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	490a      	ldr	r1, [pc, #40]	; (80046b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004690:	5ccb      	ldrb	r3, [r1, r3]
 8004692:	fa22 f303 	lsr.w	r3, r2, r3
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <HAL_RCC_ClockConfig+0x1c4>)
 8004698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <HAL_RCC_ClockConfig+0x1c8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fc fafa 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40023c00 	.word	0x40023c00
 80046b4:	40023800 	.word	0x40023800
 80046b8:	080073c0 	.word	0x080073c0
 80046bc:	20000000 	.word	0x20000000
 80046c0:	20000004 	.word	0x20000004

080046c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c8:	b094      	sub	sp, #80	; 0x50
 80046ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	647b      	str	r3, [r7, #68]	; 0x44
 80046d0:	2300      	movs	r3, #0
 80046d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d4:	2300      	movs	r3, #0
 80046d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046dc:	4b79      	ldr	r3, [pc, #484]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 030c 	and.w	r3, r3, #12
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d00d      	beq.n	8004704 <HAL_RCC_GetSysClockFreq+0x40>
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	f200 80e1 	bhi.w	80048b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x34>
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d003      	beq.n	80046fe <HAL_RCC_GetSysClockFreq+0x3a>
 80046f6:	e0db      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046f8:	4b73      	ldr	r3, [pc, #460]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80046fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80046fc:	e0db      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046fe:	4b73      	ldr	r3, [pc, #460]	; (80048cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004702:	e0d8      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004704:	4b6f      	ldr	r3, [pc, #444]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800470c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800470e:	4b6d      	ldr	r3, [pc, #436]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d063      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471a:	4b6a      	ldr	r3, [pc, #424]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	099b      	lsrs	r3, r3, #6
 8004720:	2200      	movs	r2, #0
 8004722:	63bb      	str	r3, [r7, #56]	; 0x38
 8004724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472c:	633b      	str	r3, [r7, #48]	; 0x30
 800472e:	2300      	movs	r3, #0
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
 8004732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004736:	4622      	mov	r2, r4
 8004738:	462b      	mov	r3, r5
 800473a:	f04f 0000 	mov.w	r0, #0
 800473e:	f04f 0100 	mov.w	r1, #0
 8004742:	0159      	lsls	r1, r3, #5
 8004744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004748:	0150      	lsls	r0, r2, #5
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4621      	mov	r1, r4
 8004750:	1a51      	subs	r1, r2, r1
 8004752:	6139      	str	r1, [r7, #16]
 8004754:	4629      	mov	r1, r5
 8004756:	eb63 0301 	sbc.w	r3, r3, r1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004768:	4659      	mov	r1, fp
 800476a:	018b      	lsls	r3, r1, #6
 800476c:	4651      	mov	r1, sl
 800476e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004772:	4651      	mov	r1, sl
 8004774:	018a      	lsls	r2, r1, #6
 8004776:	4651      	mov	r1, sl
 8004778:	ebb2 0801 	subs.w	r8, r2, r1
 800477c:	4659      	mov	r1, fp
 800477e:	eb63 0901 	sbc.w	r9, r3, r1
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800478e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004796:	4690      	mov	r8, r2
 8004798:	4699      	mov	r9, r3
 800479a:	4623      	mov	r3, r4
 800479c:	eb18 0303 	adds.w	r3, r8, r3
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	462b      	mov	r3, r5
 80047a4:	eb49 0303 	adc.w	r3, r9, r3
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047b6:	4629      	mov	r1, r5
 80047b8:	024b      	lsls	r3, r1, #9
 80047ba:	4621      	mov	r1, r4
 80047bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047c0:	4621      	mov	r1, r4
 80047c2:	024a      	lsls	r2, r1, #9
 80047c4:	4610      	mov	r0, r2
 80047c6:	4619      	mov	r1, r3
 80047c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ca:	2200      	movs	r2, #0
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047d4:	f7fb fcf8 	bl	80001c8 <__aeabi_uldivmod>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4613      	mov	r3, r2
 80047de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e0:	e058      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e2:	4b38      	ldr	r3, [pc, #224]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	2200      	movs	r2, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	4611      	mov	r1, r2
 80047ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047f2:	623b      	str	r3, [r7, #32]
 80047f4:	2300      	movs	r3, #0
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
 80047f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	f04f 0000 	mov.w	r0, #0
 8004804:	f04f 0100 	mov.w	r1, #0
 8004808:	0159      	lsls	r1, r3, #5
 800480a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800480e:	0150      	lsls	r0, r2, #5
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4641      	mov	r1, r8
 8004816:	ebb2 0a01 	subs.w	sl, r2, r1
 800481a:	4649      	mov	r1, r9
 800481c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800482c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004834:	ebb2 040a 	subs.w	r4, r2, sl
 8004838:	eb63 050b 	sbc.w	r5, r3, fp
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	00eb      	lsls	r3, r5, #3
 8004846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800484a:	00e2      	lsls	r2, r4, #3
 800484c:	4614      	mov	r4, r2
 800484e:	461d      	mov	r5, r3
 8004850:	4643      	mov	r3, r8
 8004852:	18e3      	adds	r3, r4, r3
 8004854:	603b      	str	r3, [r7, #0]
 8004856:	464b      	mov	r3, r9
 8004858:	eb45 0303 	adc.w	r3, r5, r3
 800485c:	607b      	str	r3, [r7, #4]
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800486a:	4629      	mov	r1, r5
 800486c:	028b      	lsls	r3, r1, #10
 800486e:	4621      	mov	r1, r4
 8004870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004874:	4621      	mov	r1, r4
 8004876:	028a      	lsls	r2, r1, #10
 8004878:	4610      	mov	r0, r2
 800487a:	4619      	mov	r1, r3
 800487c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800487e:	2200      	movs	r2, #0
 8004880:	61bb      	str	r3, [r7, #24]
 8004882:	61fa      	str	r2, [r7, #28]
 8004884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004888:	f7fb fc9e 	bl	80001c8 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4613      	mov	r3, r2
 8004892:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	3301      	adds	r3, #1
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ae:	e002      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3750      	adds	r7, #80	; 0x50
 80048bc:	46bd      	mov	sp, r7
 80048be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800
 80048c8:	00f42400 	.word	0x00f42400
 80048cc:	007a1200 	.word	0x007a1200

080048d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048d6:	681b      	ldr	r3, [r3, #0]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000000 	.word	0x20000000

080048e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048ec:	f7ff fff0 	bl	80048d0 <HAL_RCC_GetHCLKFreq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	0a9b      	lsrs	r3, r3, #10
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	4903      	ldr	r1, [pc, #12]	; (800490c <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fe:	5ccb      	ldrb	r3, [r1, r3]
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40023800 	.word	0x40023800
 800490c:	080073d0 	.word	0x080073d0

08004910 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d105      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004934:	2b00      	cmp	r3, #0
 8004936:	d035      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004938:	4b62      	ldr	r3, [pc, #392]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800493e:	f7fc f9ef 	bl	8000d20 <HAL_GetTick>
 8004942:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004946:	f7fc f9eb 	bl	8000d20 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e0b0      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004958:	4b5b      	ldr	r3, [pc, #364]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f0      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	019a      	lsls	r2, r3, #6
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	071b      	lsls	r3, r3, #28
 8004970:	4955      	ldr	r1, [pc, #340]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004978:	4b52      	ldr	r3, [pc, #328]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800497e:	f7fc f9cf 	bl	8000d20 <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004986:	f7fc f9cb 	bl	8000d20 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e090      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004998:	4b4b      	ldr	r3, [pc, #300]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8083 	beq.w	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	4b44      	ldr	r3, [pc, #272]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	4a43      	ldr	r2, [pc, #268]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6413      	str	r3, [r2, #64]	; 0x40
 80049c2:	4b41      	ldr	r3, [pc, #260]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049ce:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a3e      	ldr	r2, [pc, #248]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049da:	f7fc f9a1 	bl	8000d20 <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049e2:	f7fc f99d 	bl	8000d20 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e062      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049f4:	4b35      	ldr	r3, [pc, #212]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a00:	4b31      	ldr	r3, [pc, #196]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d02f      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d028      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a28:	4b29      	ldr	r3, [pc, #164]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a2e:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a34:	4a24      	ldr	r2, [pc, #144]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d114      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a46:	f7fc f96b 	bl	8000d20 <HAL_GetTick>
 8004a4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fc f967 	bl	8000d20 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e02a      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a64:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ee      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7c:	d10d      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a92:	490d      	ldr	r1, [pc, #52]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	608b      	str	r3, [r1, #8]
 8004a98:	e005      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aa0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004aa4:	6093      	str	r3, [r2, #8]
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab2:	4905      	ldr	r1, [pc, #20]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	42470068 	.word	0x42470068
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40007000 	.word	0x40007000
 8004ad0:	42470e40 	.word	0x42470e40

08004ad4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d13e      	bne.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004af2:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d12f      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b08:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b0a:	617b      	str	r3, [r7, #20]
          break;
 8004b0c:	e02f      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b0e:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b1a:	d108      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b1c:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b24:	4a18      	ldr	r2, [pc, #96]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	e007      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b2e:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b36:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b44:	099b      	lsrs	r3, r3, #6
 8004b46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b58:	0f1b      	lsrs	r3, r3, #28
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	617b      	str	r3, [r7, #20]
          break;
 8004b66:	e002      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
          break;
 8004b6c:	bf00      	nop
        }
      }
      break;
 8004b6e:	bf00      	nop
    }
  }
  return frequency;
 8004b70:	697b      	ldr	r3, [r7, #20]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800
 8004b84:	00bb8000 	.word	0x00bb8000
 8004b88:	007a1200 	.word	0x007a1200
 8004b8c:	00f42400 	.word	0x00f42400

08004b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b90:	b084      	sub	sp, #16
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	f107 001c 	add.w	r0, r7, #28
 8004b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d122      	bne.n	8004bee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d105      	bne.n	8004be2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f9c0 	bl	8004f68 <USB_CoreReset>
 8004be8:	4603      	mov	r3, r0
 8004bea:	73fb      	strb	r3, [r7, #15]
 8004bec:	e01a      	b.n	8004c24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f9b4 	bl	8004f68 <USB_CoreReset>
 8004c00:	4603      	mov	r3, r0
 8004c02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38
 8004c16:	e005      	b.n	8004c24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d10b      	bne.n	8004c42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f043 0206 	orr.w	r2, r3, #6
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f043 0220 	orr.w	r2, r3, #32
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c4e:	b004      	add	sp, #16
 8004c50:	4770      	bx	lr

08004c52 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f043 0201 	orr.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f023 0201 	bic.w	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d115      	bne.n	8004ce4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f7fc f837 	bl	8000d38 <HAL_Delay>
      ms++;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f93a 	bl	8004f4a <USB_GetMode>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d01e      	beq.n	8004d1a <USB_SetCurrentMode+0x84>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b31      	cmp	r3, #49	; 0x31
 8004ce0:	d9f0      	bls.n	8004cc4 <USB_SetCurrentMode+0x2e>
 8004ce2:	e01a      	b.n	8004d1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d115      	bne.n	8004d16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f7fc f81e 	bl	8000d38 <HAL_Delay>
      ms++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f921 	bl	8004f4a <USB_GetMode>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <USB_SetCurrentMode+0x84>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b31      	cmp	r3, #49	; 0x31
 8004d12:	d9f0      	bls.n	8004cf6 <USB_SetCurrentMode+0x60>
 8004d14:	e001      	b.n	8004d1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e005      	b.n	8004d26 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b32      	cmp	r3, #50	; 0x32
 8004d1e:	d101      	bne.n	8004d24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e000      	b.n	8004d26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3301      	adds	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4a13      	ldr	r2, [pc, #76]	; (8004d94 <USB_FlushTxFifo+0x64>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e01b      	b.n	8004d88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	daf2      	bge.n	8004d3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	019b      	lsls	r3, r3, #6
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <USB_FlushTxFifo+0x64>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e006      	b.n	8004d88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d0f0      	beq.n	8004d68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	00030d40 	.word	0x00030d40

08004d98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3301      	adds	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a11      	ldr	r2, [pc, #68]	; (8004df4 <USB_FlushRxFifo+0x5c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e018      	b.n	8004de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	daf2      	bge.n	8004da4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2210      	movs	r2, #16
 8004dc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4a08      	ldr	r2, [pc, #32]	; (8004df4 <USB_FlushRxFifo+0x5c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e006      	b.n	8004de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d0f0      	beq.n	8004dc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	00030d40 	.word	0x00030d40

08004df8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b089      	sub	sp, #36	; 0x24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4611      	mov	r1, r2
 8004e04:	461a      	mov	r2, r3
 8004e06:	460b      	mov	r3, r1
 8004e08:	71fb      	strb	r3, [r7, #7]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d123      	bne.n	8004e66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e1e:	88bb      	ldrh	r3, [r7, #4]
 8004e20:	3303      	adds	r3, #3
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e26:	2300      	movs	r3, #0
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	e018      	b.n	8004e5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	031a      	lsls	r2, r3, #12
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e38:	461a      	mov	r2, r3
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	3301      	adds	r3, #1
 8004e44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3301      	adds	r3, #1
 8004e56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d3e2      	bcc.n	8004e2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3724      	adds	r7, #36	; 0x24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b08b      	sub	sp, #44	; 0x2c
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	089b      	lsrs	r3, r3, #2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	623b      	str	r3, [r7, #32]
 8004e9e:	e014      	b.n	8004eca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	601a      	str	r2, [r3, #0]
    pDest++;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	3301      	adds	r3, #1
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	623b      	str	r3, [r7, #32]
 8004eca:	6a3a      	ldr	r2, [r7, #32]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d3e6      	bcc.n	8004ea0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ed2:	8bfb      	ldrh	r3, [r7, #30]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01e      	beq.n	8004f16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f107 0310 	add.w	r3, r7, #16
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	701a      	strb	r2, [r3, #0]
      i++;
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	3301      	adds	r3, #1
 8004f02:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	3301      	adds	r3, #1
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f0a:	8bfb      	ldrh	r3, [r7, #30]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f10:	8bfb      	ldrh	r3, [r7, #30]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1ea      	bne.n	8004eec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	372c      	adds	r7, #44	; 0x2c
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0301 	and.w	r3, r3, #1
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3301      	adds	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a13      	ldr	r2, [pc, #76]	; (8004fcc <USB_CoreReset+0x64>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e01b      	b.n	8004fbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	daf2      	bge.n	8004f74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f043 0201 	orr.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <USB_CoreReset+0x64>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d901      	bls.n	8004fb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e006      	b.n	8004fbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d0f0      	beq.n	8004f9e <USB_CoreReset+0x36>

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	00030d40 	.word	0x00030d40

08004fd0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d018      	beq.n	8005058 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10a      	bne.n	8005042 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800503a:	f043 0304 	orr.w	r3, r3, #4
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e014      	b.n	800506c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005050:	f023 0304 	bic.w	r3, r3, #4
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	e009      	b.n	800506c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005066:	f023 0304 	bic.w	r3, r3, #4
 800506a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800506c:	2110      	movs	r1, #16
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff fe5e 	bl	8004d30 <USB_FlushTxFifo>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fe8a 	bl	8004d98 <USB_FlushRxFifo>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	e015      	b.n	80050c0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a0:	461a      	mov	r2, r3
 80050a2:	f04f 33ff 	mov.w	r3, #4294967295
 80050a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b4:	461a      	mov	r2, r3
 80050b6:	2300      	movs	r3, #0
 80050b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	3301      	adds	r3, #1
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d3e5      	bcc.n	8005094 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f04f 32ff 	mov.w	r2, #4294967295
 80050d4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050e8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a13      	ldr	r2, [pc, #76]	; (800513c <USB_HostInit+0x16c>)
 80050ee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a13      	ldr	r2, [pc, #76]	; (8005140 <USB_HostInit+0x170>)
 80050f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80050f8:	e009      	b.n	800510e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2280      	movs	r2, #128	; 0x80
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a10      	ldr	r2, [pc, #64]	; (8005144 <USB_HostInit+0x174>)
 8005104:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a0f      	ldr	r2, [pc, #60]	; (8005148 <USB_HostInit+0x178>)
 800510a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	2b00      	cmp	r3, #0
 8005112:	d105      	bne.n	8005120 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f043 0210 	orr.w	r2, r3, #16
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	4b09      	ldr	r3, [pc, #36]	; (800514c <USB_HostInit+0x17c>)
 8005126:	4313      	orrs	r3, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800512c:	7dfb      	ldrb	r3, [r7, #23]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005138:	b004      	add	sp, #16
 800513a:	4770      	bx	lr
 800513c:	01000200 	.word	0x01000200
 8005140:	00e00300 	.word	0x00e00300
 8005144:	00600080 	.word	0x00600080
 8005148:	004000e0 	.word	0x004000e0
 800514c:	a3200008 	.word	0xa3200008

08005150 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800516e:	f023 0303 	bic.w	r3, r3, #3
 8005172:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005188:	4313      	orrs	r3, r2
 800518a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005198:	461a      	mov	r2, r3
 800519a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800519e:	6053      	str	r3, [r2, #4]
 80051a0:	e009      	b.n	80051b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80051a2:	78fb      	ldrb	r3, [r7, #3]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d106      	bne.n	80051b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ae:	461a      	mov	r2, r3
 80051b0:	f241 7370 	movw	r3, #6000	; 0x1770
 80051b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d109      	bne.n	8005208 <USB_DriveVbus+0x44>
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d106      	bne.n	8005208 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005206:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800520e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005212:	d109      	bne.n	8005228 <USB_DriveVbus+0x64>
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005226:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	0c5b      	lsrs	r3, r3, #17
 8005254:	f003 0303 	and.w	r3, r3, #3
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	b29b      	uxth	r3, r3
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	4608      	mov	r0, r1
 8005292:	4611      	mov	r1, r2
 8005294:	461a      	mov	r2, r3
 8005296:	4603      	mov	r3, r0
 8005298:	70fb      	strb	r3, [r7, #3]
 800529a:	460b      	mov	r3, r1
 800529c:	70bb      	strb	r3, [r7, #2]
 800529e:	4613      	mov	r3, r2
 80052a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	461a      	mov	r2, r3
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80052be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d87e      	bhi.n	80053c4 <USB_HC_Init+0x13c>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <USB_HC_Init+0x44>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080052dd 	.word	0x080052dd
 80052d0:	08005387 	.word	0x08005387
 80052d4:	080052dd 	.word	0x080052dd
 80052d8:	08005349 	.word	0x08005349
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e8:	461a      	mov	r2, r3
 80052ea:	f240 439d 	movw	r3, #1181	; 0x49d
 80052ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80052f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	da10      	bge.n	800531a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	78fa      	ldrb	r2, [r7, #3]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	440a      	add	r2, r1
 800530e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005316:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005318:	e057      	b.n	80053ca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	2b00      	cmp	r3, #0
 8005324:	d051      	beq.n	80053ca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	78fa      	ldrb	r2, [r7, #3]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	440a      	add	r2, r1
 800533c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005340:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005344:	60d3      	str	r3, [r2, #12]
      break;
 8005346:	e040      	b.n	80053ca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4413      	add	r3, r2
 8005350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005354:	461a      	mov	r2, r3
 8005356:	f240 639d 	movw	r3, #1693	; 0x69d
 800535a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800535c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005360:	2b00      	cmp	r3, #0
 8005362:	da34      	bge.n	80053ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	78fa      	ldrb	r2, [r7, #3]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	440a      	add	r2, r1
 800537a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800537e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005382:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005384:	e023      	b.n	80053ce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4413      	add	r3, r2
 800538e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005392:	461a      	mov	r2, r3
 8005394:	f240 2325 	movw	r3, #549	; 0x225
 8005398:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800539a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	da17      	bge.n	80053d2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053bc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80053c0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80053c2:	e006      	b.n	80053d2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	77fb      	strb	r3, [r7, #31]
      break;
 80053c8:	e004      	b.n	80053d4 <USB_HC_Init+0x14c>
      break;
 80053ca:	bf00      	nop
 80053cc:	e002      	b.n	80053d4 <USB_HC_Init+0x14c>
      break;
 80053ce:	bf00      	nop
 80053d0:	e000      	b.n	80053d4 <USB_HC_Init+0x14c>
      break;
 80053d2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	0151      	lsls	r1, r2, #5
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	440a      	add	r2, r1
 80053ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ee:	f043 0302 	orr.w	r3, r3, #2
 80053f2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053fa:	699a      	ldr	r2, [r3, #24]
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	2101      	movs	r1, #1
 8005404:	fa01 f303 	lsl.w	r3, r1, r3
 8005408:	6939      	ldr	r1, [r7, #16]
 800540a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800540e:	4313      	orrs	r3, r2
 8005410:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800541e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005422:	2b00      	cmp	r3, #0
 8005424:	da03      	bge.n	800542e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	e001      	b.n	8005432 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff feff 	bl	8005236 <USB_GetHostSpeed>
 8005438:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800543a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800543e:	2b02      	cmp	r3, #2
 8005440:	d106      	bne.n	8005450 <USB_HC_Init+0x1c8>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d003      	beq.n	8005450 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e001      	b.n	8005454 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005454:	787b      	ldrb	r3, [r7, #1]
 8005456:	059b      	lsls	r3, r3, #22
 8005458:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800545c:	78bb      	ldrb	r3, [r7, #2]
 800545e:	02db      	lsls	r3, r3, #11
 8005460:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005464:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005466:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800546a:	049b      	lsls	r3, r3, #18
 800546c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005470:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005472:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005474:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005478:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	0159      	lsls	r1, r3, #5
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	440b      	add	r3, r1
 8005486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005490:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005492:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005496:	2b03      	cmp	r3, #3
 8005498:	d003      	beq.n	80054a2 <USB_HC_Init+0x21a>
 800549a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d10f      	bne.n	80054c2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	78fa      	ldrb	r2, [r7, #3]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054c0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80054c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08c      	sub	sp, #48	; 0x30
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	4613      	mov	r3, r2
 80054d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80054e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054e8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d02d      	beq.n	8005552 <USB_HC_StartXfer+0x86>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	791b      	ldrb	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d129      	bne.n	8005552 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d117      	bne.n	8005534 <USB_HC_StartXfer+0x68>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	79db      	ldrb	r3, [r3, #7]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <USB_HC_StartXfer+0x48>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	79db      	ldrb	r3, [r3, #7]
 8005510:	2b02      	cmp	r3, #2
 8005512:	d10f      	bne.n	8005534 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	6a3a      	ldr	r2, [r7, #32]
 8005528:	440a      	add	r2, r1
 800552a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800552e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005532:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10b      	bne.n	8005552 <USB_HC_StartXfer+0x86>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	795b      	ldrb	r3, [r3, #5]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d107      	bne.n	8005552 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	4619      	mov	r1, r3
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 fa0f 	bl	800596c <USB_DoPing>
      return HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	e0f8      	b.n	8005744 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d018      	beq.n	800558c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	8912      	ldrh	r2, [r2, #8]
 8005562:	4413      	add	r3, r2
 8005564:	3b01      	subs	r3, #1
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	8912      	ldrh	r2, [r2, #8]
 800556a:	fbb3 f3f2 	udiv	r3, r3, r2
 800556e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005570:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005572:	8b7b      	ldrh	r3, [r7, #26]
 8005574:	429a      	cmp	r2, r3
 8005576:	d90b      	bls.n	8005590 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005578:	8b7b      	ldrh	r3, [r7, #26]
 800557a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800557c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	8912      	ldrh	r2, [r2, #8]
 8005582:	fb03 f202 	mul.w	r2, r3, r2
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	611a      	str	r2, [r3, #16]
 800558a:	e001      	b.n	8005590 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800558c:	2301      	movs	r3, #1
 800558e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	78db      	ldrb	r3, [r3, #3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d007      	beq.n	80055a8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005598:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	8912      	ldrh	r2, [r2, #8]
 800559e:	fb03 f202 	mul.w	r2, r3, r2
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	611a      	str	r2, [r3, #16]
 80055a6:	e003      	b.n	80055b0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	695a      	ldr	r2, [r3, #20]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055ba:	04d9      	lsls	r1, r3, #19
 80055bc:	4b63      	ldr	r3, [pc, #396]	; (800574c <USB_HC_StartXfer+0x280>)
 80055be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	7a9b      	ldrb	r3, [r3, #10]
 80055c6:	075b      	lsls	r3, r3, #29
 80055c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055cc:	69f9      	ldr	r1, [r7, #28]
 80055ce:	0148      	lsls	r0, r1, #5
 80055d0:	6a39      	ldr	r1, [r7, #32]
 80055d2:	4401      	add	r1, r0
 80055d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	68d9      	ldr	r1, [r3, #12]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f2:	460a      	mov	r2, r1
 80055f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	4413      	add	r3, r2
 8005616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	0151      	lsls	r1, r2, #5
 8005620:	6a3a      	ldr	r2, [r7, #32]
 8005622:	440a      	add	r2, r1
 8005624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005628:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800562c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	7e7b      	ldrb	r3, [r7, #25]
 800563e:	075b      	lsls	r3, r3, #29
 8005640:	69f9      	ldr	r1, [r7, #28]
 8005642:	0148      	lsls	r0, r1, #5
 8005644:	6a39      	ldr	r1, [r7, #32]
 8005646:	4401      	add	r1, r0
 8005648:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800564c:	4313      	orrs	r3, r2
 800564e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005666:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	78db      	ldrb	r3, [r3, #3]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	e003      	b.n	8005682 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005680:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005688:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	4413      	add	r3, r2
 8005692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005696:	461a      	mov	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e04e      	b.n	8005744 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	78db      	ldrb	r3, [r3, #3]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d149      	bne.n	8005742 <USB_HC_StartXfer+0x276>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d045      	beq.n	8005742 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	79db      	ldrb	r3, [r3, #7]
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d830      	bhi.n	8005720 <USB_HC_StartXfer+0x254>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <USB_HC_StartXfer+0x1f8>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056d5 	.word	0x080056d5
 80056c8:	080056f9 	.word	0x080056f9
 80056cc:	080056d5 	.word	0x080056d5
 80056d0:	080056f9 	.word	0x080056f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	3303      	adds	r3, #3
 80056da:	089b      	lsrs	r3, r3, #2
 80056dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80056de:	8afa      	ldrh	r2, [r7, #22]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d91c      	bls.n	8005724 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80056f6:	e015      	b.n	8005724 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	3303      	adds	r3, #3
 80056fe:	089b      	lsrs	r3, r3, #2
 8005700:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005702:	8afa      	ldrh	r2, [r7, #22]
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	b29b      	uxth	r3, r3
 800570e:	429a      	cmp	r2, r3
 8005710:	d90a      	bls.n	8005728 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	619a      	str	r2, [r3, #24]
        }
        break;
 800571e:	e003      	b.n	8005728 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005720:	bf00      	nop
 8005722:	e002      	b.n	800572a <USB_HC_StartXfer+0x25e>
        break;
 8005724:	bf00      	nop
 8005726:	e000      	b.n	800572a <USB_HC_StartXfer+0x25e>
        break;
 8005728:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	68d9      	ldr	r1, [r3, #12]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	785a      	ldrb	r2, [r3, #1]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	b29b      	uxth	r3, r3
 8005738:	2000      	movs	r0, #0
 800573a:	9000      	str	r0, [sp, #0]
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f7ff fb5b 	bl	8004df8 <USB_WritePacket>
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3728      	adds	r7, #40	; 0x28
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	1ff80000 	.word	0x1ff80000

08005750 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	b29b      	uxth	r3, r3
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005772:	b480      	push	{r7}
 8005774:	b089      	sub	sp, #36	; 0x24
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	0c9b      	lsrs	r3, r3, #18
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	0fdb      	lsrs	r3, r3, #31
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d104      	bne.n	80057cc <USB_HC_Halt+0x5a>
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	e0c8      	b.n	800595e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <USB_HC_Halt+0x66>
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d163      	bne.n	80058a0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 80ab 	bne.w	800595c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d133      	bne.n	800587a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	440a      	add	r2, r1
 8005828:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800582c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005830:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	440a      	add	r2, r1
 8005848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800584c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005850:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800585e:	d81d      	bhi.n	800589c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4413      	add	r3, r2
 8005868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005876:	d0ec      	beq.n	8005852 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005878:	e070      	b.n	800595c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	440a      	add	r2, r1
 8005890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005898:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800589a:	e05f      	b.n	800595c <USB_HC_Halt+0x1ea>
            break;
 800589c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800589e:	e05d      	b.n	800595c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	0151      	lsls	r1, r2, #5
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	440a      	add	r2, r1
 80058b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d133      	bne.n	8005938 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	440a      	add	r2, r1
 8005906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800590a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800590e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3301      	adds	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800591c:	d81d      	bhi.n	800595a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4413      	add	r3, r2
 8005926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005934:	d0ec      	beq.n	8005910 <USB_HC_Halt+0x19e>
 8005936:	e011      	b.n	800595c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	4413      	add	r3, r2
 8005940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	440a      	add	r2, r1
 800594e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005952:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	e000      	b.n	800595c <USB_HC_Halt+0x1ea>
          break;
 800595a:	bf00      	nop
    }
  }

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3724      	adds	r7, #36	; 0x24
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
	...

0800596c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005980:	2301      	movs	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	04da      	lsls	r2, r3, #19
 8005988:	4b15      	ldr	r3, [pc, #84]	; (80059e0 <USB_DoPing+0x74>)
 800598a:	4013      	ands	r3, r2
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	440a      	add	r2, r1
 8005994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800599c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ca:	461a      	mov	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	1ff80000 	.word	0x1ff80000

080059e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff f93b 	bl	8004c74 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059fe:	2110      	movs	r1, #16
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff f995 	bl	8004d30 <USB_FlushTxFifo>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff f9c1 	bl	8004d98 <USB_FlushRxFifo>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005a20:	2300      	movs	r3, #0
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	e01f      	b.n	8005a66 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a4c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	3301      	adds	r3, #1
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b0f      	cmp	r3, #15
 8005a6a:	d9dc      	bls.n	8005a26 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	e034      	b.n	8005adc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a88:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a98:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ab8:	d80c      	bhi.n	8005ad4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ad0:	d0ec      	beq.n	8005aac <USB_StopHost+0xc8>
 8005ad2:	e000      	b.n	8005ad6 <USB_StopHost+0xf2>
        break;
 8005ad4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b0f      	cmp	r3, #15
 8005ae0:	d9c7      	bls.n	8005a72 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f04f 33ff 	mov.w	r3, #4294967295
 8005aee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f04f 32ff 	mov.w	r2, #4294967295
 8005af6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff f8aa 	bl	8004c52 <USB_EnableGlobalInt>

  return ret;
 8005afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3720      	adds	r7, #32
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b089      	sub	sp, #36	; 0x24
 8005b0c:	af04      	add	r7, sp, #16
 8005b0e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005b10:	2301      	movs	r3, #1
 8005b12:	2202      	movs	r2, #2
 8005b14:	2102      	movs	r1, #2
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fc66 	bl	80063e8 <USBH_FindInterface>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2bff      	cmp	r3, #255	; 0xff
 8005b24:	d002      	beq.n	8005b2c <USBH_CDC_InterfaceInit+0x24>
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d901      	bls.n	8005b30 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e13d      	b.n	8005dac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fc3b 	bl	80063b0 <USBH_SelectInterface>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005b3e:	7bbb      	ldrb	r3, [r7, #14]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005b44:	2302      	movs	r3, #2
 8005b46:	e131      	b.n	8005dac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005b4e:	2050      	movs	r0, #80	; 0x50
 8005b50:	f001 fb12 	bl	8007178 <malloc>
 8005b54:	4603      	mov	r3, r0
 8005b56:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e11f      	b.n	8005dac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005b6c:	2250      	movs	r2, #80	; 0x50
 8005b6e:	2100      	movs	r1, #0
 8005b70:	68b8      	ldr	r0, [r7, #8]
 8005b72:	f001 fb11 	bl	8007198 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	211a      	movs	r1, #26
 8005b7c:	fb01 f303 	mul.w	r3, r1, r3
 8005b80:	4413      	add	r3, r2
 8005b82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	b25b      	sxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	da15      	bge.n	8005bba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	211a      	movs	r1, #26
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b9e:	781a      	ldrb	r2, [r3, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	211a      	movs	r1, #26
 8005baa:	fb01 f303 	mul.w	r3, r1, r3
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005bb4:	881a      	ldrh	r2, [r3, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	785b      	ldrb	r3, [r3, #1]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 ff9c 	bl	8006afe <USBH_AllocPipe>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	461a      	mov	r2, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	7819      	ldrb	r1, [r3, #0]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	7858      	ldrb	r0, [r3, #1]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	8952      	ldrh	r2, [r2, #10]
 8005be6:	9202      	str	r2, [sp, #8]
 8005be8:	2203      	movs	r2, #3
 8005bea:	9201      	str	r2, [sp, #4]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	4623      	mov	r3, r4
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 ff54 	bl	8006aa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 fa17 	bl	8007034 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005c06:	2300      	movs	r3, #0
 8005c08:	2200      	movs	r2, #0
 8005c0a:	210a      	movs	r1, #10
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fbeb 	bl	80063e8 <USBH_FindInterface>
 8005c12:	4603      	mov	r3, r0
 8005c14:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	2bff      	cmp	r3, #255	; 0xff
 8005c1a:	d002      	beq.n	8005c22 <USBH_CDC_InterfaceInit+0x11a>
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d901      	bls.n	8005c26 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c22:	2302      	movs	r3, #2
 8005c24:	e0c2      	b.n	8005dac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	211a      	movs	r1, #26
 8005c2c:	fb01 f303 	mul.w	r3, r1, r3
 8005c30:	4413      	add	r3, r2
 8005c32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	b25b      	sxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	da16      	bge.n	8005c6c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	211a      	movs	r1, #26
 8005c44:	fb01 f303 	mul.w	r3, r1, r3
 8005c48:	4413      	add	r3, r2
 8005c4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c4e:	781a      	ldrb	r2, [r3, #0]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	211a      	movs	r1, #26
 8005c5a:	fb01 f303 	mul.w	r3, r1, r3
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c64:	881a      	ldrh	r2, [r3, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	835a      	strh	r2, [r3, #26]
 8005c6a:	e015      	b.n	8005c98 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	211a      	movs	r1, #26
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	211a      	movs	r1, #26
 8005c88:	fb01 f303 	mul.w	r3, r1, r3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c92:	881a      	ldrh	r2, [r3, #0]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	211a      	movs	r1, #26
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	b25b      	sxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	da16      	bge.n	8005cde <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	211a      	movs	r1, #26
 8005cb6:	fb01 f303 	mul.w	r3, r1, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	211a      	movs	r1, #26
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005cd6:	881a      	ldrh	r2, [r3, #0]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	835a      	strh	r2, [r3, #26]
 8005cdc:	e015      	b.n	8005d0a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	211a      	movs	r1, #26
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	4413      	add	r3, r2
 8005cea:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005cee:	781a      	ldrb	r2, [r3, #0]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	211a      	movs	r1, #26
 8005cfa:	fb01 f303 	mul.w	r3, r1, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d04:	881a      	ldrh	r2, [r3, #0]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	7b9b      	ldrb	r3, [r3, #14]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fef4 	bl	8006afe <USBH_AllocPipe>
 8005d16:	4603      	mov	r3, r0
 8005d18:	461a      	mov	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	7bdb      	ldrb	r3, [r3, #15]
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 feea 	bl	8006afe <USBH_AllocPipe>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	7b59      	ldrb	r1, [r3, #13]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	7b98      	ldrb	r0, [r3, #14]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	8b12      	ldrh	r2, [r2, #24]
 8005d4a:	9202      	str	r2, [sp, #8]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	9201      	str	r2, [sp, #4]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	4623      	mov	r3, r4
 8005d54:	4602      	mov	r2, r0
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fea2 	bl	8006aa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	7b19      	ldrb	r1, [r3, #12]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	7bd8      	ldrb	r0, [r3, #15]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	8b52      	ldrh	r2, [r2, #26]
 8005d74:	9202      	str	r2, [sp, #8]
 8005d76:	2202      	movs	r2, #2
 8005d78:	9201      	str	r2, [sp, #4]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	4602      	mov	r2, r0
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fe8d 	bl	8006aa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	7b5b      	ldrb	r3, [r3, #13]
 8005d92:	2200      	movs	r2, #0
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f001 f94c 	bl	8007034 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	7b1b      	ldrb	r3, [r3, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 f945 	bl	8007034 <USBH_LL_SetToggle>

  return USBH_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd90      	pop	{r4, r7, pc}

08005db4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fe82 	bl	8006ade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fead 	bl	8006b40 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	7b1b      	ldrb	r3, [r3, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	7b1b      	ldrb	r3, [r3, #12]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fe6f 	bl	8006ade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	7b1b      	ldrb	r3, [r3, #12]
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fe9a 	bl	8006b40 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	7b5b      	ldrb	r3, [r3, #13]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00e      	beq.n	8005e38 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	7b5b      	ldrb	r3, [r3, #13]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fe5c 	bl	8006ade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	7b5b      	ldrb	r3, [r3, #13]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fe87 	bl	8006b40 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 f99b 	bl	8007188 <free>
    phost->pActiveClass->pData = 0U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e58:	2200      	movs	r2, #0
 8005e5a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3340      	adds	r3, #64	; 0x40
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f8b1 	bl	8005fe6 <GetLineCoding>
 8005e84:	4603      	mov	r3, r0
 8005e86:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005e88:	7afb      	ldrb	r3, [r7, #11]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d105      	bne.n	8005e9a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e94:	2102      	movs	r1, #2
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005eac:	2301      	movs	r3, #1
 8005eae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d877      	bhi.n	8005fb8 <USBH_CDC_Process+0x114>
 8005ec8:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <USBH_CDC_Process+0x2c>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005ee5 	.word	0x08005ee5
 8005ed4:	08005eeb 	.word	0x08005eeb
 8005ed8:	08005f1b 	.word	0x08005f1b
 8005edc:	08005f8f 	.word	0x08005f8f
 8005ee0:	08005f9d 	.word	0x08005f9d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee8:	e06d      	b.n	8005fc6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f897 	bl	8006024 <SetLineCoding>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005efa:	7bbb      	ldrb	r3, [r7, #14]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d104      	bne.n	8005f0a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005f08:	e058      	b.n	8005fbc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005f0a:	7bbb      	ldrb	r3, [r7, #14]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d055      	beq.n	8005fbc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2204      	movs	r2, #4
 8005f14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005f18:	e050      	b.n	8005fbc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	3340      	adds	r3, #64	; 0x40
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f860 	bl	8005fe6 <GetLineCoding>
 8005f26:	4603      	mov	r3, r0
 8005f28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005f2a:	7bbb      	ldrb	r3, [r7, #14]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d126      	bne.n	8005f7e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f42:	791b      	ldrb	r3, [r3, #4]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d13b      	bne.n	8005fc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f52:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d133      	bne.n	8005fc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f62:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d12b      	bne.n	8005fc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f70:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d124      	bne.n	8005fc0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f958 	bl	800622c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005f7c:	e020      	b.n	8005fc0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005f7e:	7bbb      	ldrb	r3, [r7, #14]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d01d      	beq.n	8005fc0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2204      	movs	r2, #4
 8005f88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005f8c:	e018      	b.n	8005fc0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f867 	bl	8006062 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f8da 	bl	800614e <CDC_ProcessReception>
      break;
 8005f9a:	e014      	b.n	8005fc6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fb08 	bl	80065b4 <USBH_ClrFeature>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005fa8:	7bbb      	ldrb	r3, [r7, #14]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10a      	bne.n	8005fc4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005fb6:	e005      	b.n	8005fc4 <USBH_CDC_Process+0x120>

    default:
      break;
 8005fb8:	bf00      	nop
 8005fba:	e004      	b.n	8005fc6 <USBH_CDC_Process+0x122>
      break;
 8005fbc:	bf00      	nop
 8005fbe:	e002      	b.n	8005fc6 <USBH_CDC_Process+0x122>
      break;
 8005fc0:	bf00      	nop
 8005fc2:	e000      	b.n	8005fc6 <USBH_CDC_Process+0x122>
      break;
 8005fc4:	bf00      	nop

  }

  return status;
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	22a1      	movs	r2, #161	; 0xa1
 8005ff4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2221      	movs	r2, #33	; 0x21
 8005ffa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2207      	movs	r2, #7
 800600c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2207      	movs	r2, #7
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 faf1 	bl	80065fc <USBH_CtlReq>
 800601a:	4603      	mov	r3, r0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2221      	movs	r2, #33	; 0x21
 8006032:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2207      	movs	r2, #7
 800604a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2207      	movs	r2, #7
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fad2 	bl	80065fc <USBH_CtlReq>
 8006058:	4603      	mov	r3, r0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b086      	sub	sp, #24
 8006066:	af02      	add	r7, sp, #8
 8006068:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006074:	2300      	movs	r3, #0
 8006076:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800607e:	2b01      	cmp	r3, #1
 8006080:	d002      	beq.n	8006088 <CDC_ProcessTransmission+0x26>
 8006082:	2b02      	cmp	r3, #2
 8006084:	d023      	beq.n	80060ce <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006086:	e05e      	b.n	8006146 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	8b12      	ldrh	r2, [r2, #24]
 8006090:	4293      	cmp	r3, r2
 8006092:	d90b      	bls.n	80060ac <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	69d9      	ldr	r1, [r3, #28]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8b1a      	ldrh	r2, [r3, #24]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	7b5b      	ldrb	r3, [r3, #13]
 80060a0:	2001      	movs	r0, #1
 80060a2:	9000      	str	r0, [sp, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fcb8 	bl	8006a1a <USBH_BulkSendData>
 80060aa:	e00b      	b.n	80060c4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	7b5b      	ldrb	r3, [r3, #13]
 80060ba:	2001      	movs	r0, #1
 80060bc:	9000      	str	r0, [sp, #0]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fcab 	bl	8006a1a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80060cc:	e03b      	b.n	8006146 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	7b5b      	ldrb	r3, [r3, #13]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 ff83 	bl	8006fe0 <USBH_LL_GetURBState>
 80060da:	4603      	mov	r3, r0
 80060dc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80060de:	7afb      	ldrb	r3, [r7, #11]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d128      	bne.n	8006136 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	8b12      	ldrh	r2, [r2, #24]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d90e      	bls.n	800610e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	8b12      	ldrh	r2, [r2, #24]
 80060f8:	1a9a      	subs	r2, r3, r2
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	8b12      	ldrh	r2, [r2, #24]
 8006106:	441a      	add	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	61da      	str	r2, [r3, #28]
 800610c:	e002      	b.n	8006114 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	d004      	beq.n	8006126 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006124:	e00e      	b.n	8006144 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f868 	bl	8006204 <USBH_CDC_TransmitCallback>
      break;
 8006134:	e006      	b.n	8006144 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006136:	7afb      	ldrb	r3, [r7, #11]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d103      	bne.n	8006144 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006144:	bf00      	nop
  }
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b086      	sub	sp, #24
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006160:	2300      	movs	r3, #0
 8006162:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800616a:	2b03      	cmp	r3, #3
 800616c:	d002      	beq.n	8006174 <CDC_ProcessReception+0x26>
 800616e:	2b04      	cmp	r3, #4
 8006170:	d00e      	beq.n	8006190 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006172:	e043      	b.n	80061fc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	6a19      	ldr	r1, [r3, #32]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	8b5a      	ldrh	r2, [r3, #26]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	7b1b      	ldrb	r3, [r3, #12]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fc6f 	bl	8006a64 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2204      	movs	r2, #4
 800618a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800618e:	e035      	b.n	80061fc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	7b1b      	ldrb	r3, [r3, #12]
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 ff22 	bl	8006fe0 <USBH_LL_GetURBState>
 800619c:	4603      	mov	r3, r0
 800619e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80061a0:	7cfb      	ldrb	r3, [r7, #19]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d129      	bne.n	80061fa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	7b1b      	ldrb	r3, [r3, #12]
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fe85 	bl	8006ebc <USBH_LL_GetLastXferSize>
 80061b2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d016      	beq.n	80061ec <CDC_ProcessReception+0x9e>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	8b5b      	ldrh	r3, [r3, #26]
 80061c2:	461a      	mov	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d910      	bls.n	80061ec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1ad2      	subs	r2, r2, r3
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	6a1a      	ldr	r2, [r3, #32]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	441a      	add	r2, r3
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2203      	movs	r2, #3
 80061e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80061ea:	e006      	b.n	80061fa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f80f 	bl	8006218 <USBH_CDC_ReceiveCallback>
      break;
 80061fa:	bf00      	nop
  }
}
 80061fc:	bf00      	nop
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	4613      	mov	r3, r2
 800624c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006254:	2302      	movs	r3, #2
 8006256:	e029      	b.n	80062ac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	79fa      	ldrb	r2, [r7, #7]
 800625c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f81f 	bl	80062b4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fd97 	bl	8006dd8 <USBH_LL_Init>

  return USBH_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e009      	b.n	80062da <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	33e0      	adds	r3, #224	; 0xe0
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	2200      	movs	r2, #0
 80062d2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b0f      	cmp	r3, #15
 80062de:	d9f2      	bls.n	80062c6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e009      	b.n	80062fa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80062f0:	2200      	movs	r2, #0
 80062f2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3301      	adds	r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006300:	d3f1      	bcc.n	80062e6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2240      	movs	r2, #64	; 0x40
 8006326:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d016      	beq.n	800639e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10e      	bne.n	8006398 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006380:	1c59      	adds	r1, r3, #1
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	33de      	adds	r3, #222	; 0xde
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]
 8006396:	e004      	b.n	80063a2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006398:	2302      	movs	r3, #2
 800639a:	73fb      	strb	r3, [r7, #15]
 800639c:	e001      	b.n	80063a2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800639e:	2302      	movs	r3, #2
 80063a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d204      	bcs.n	80063d6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	78fa      	ldrb	r2, [r7, #3]
 80063d0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80063d4:	e001      	b.n	80063da <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80063d6:	2302      	movs	r3, #2
 80063d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	461a      	mov	r2, r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	70fb      	strb	r3, [r7, #3]
 80063fa:	460b      	mov	r3, r1
 80063fc:	70bb      	strb	r3, [r7, #2]
 80063fe:	4613      	mov	r3, r2
 8006400:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006410:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006412:	e025      	b.n	8006460 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	221a      	movs	r2, #26
 8006418:	fb02 f303 	mul.w	r3, r2, r3
 800641c:	3308      	adds	r3, #8
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	3302      	adds	r3, #2
 8006424:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	795b      	ldrb	r3, [r3, #5]
 800642a:	78fa      	ldrb	r2, [r7, #3]
 800642c:	429a      	cmp	r2, r3
 800642e:	d002      	beq.n	8006436 <USBH_FindInterface+0x4e>
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	2bff      	cmp	r3, #255	; 0xff
 8006434:	d111      	bne.n	800645a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800643a:	78ba      	ldrb	r2, [r7, #2]
 800643c:	429a      	cmp	r2, r3
 800643e:	d002      	beq.n	8006446 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006440:	78bb      	ldrb	r3, [r7, #2]
 8006442:	2bff      	cmp	r3, #255	; 0xff
 8006444:	d109      	bne.n	800645a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800644a:	787a      	ldrb	r2, [r7, #1]
 800644c:	429a      	cmp	r2, r3
 800644e:	d002      	beq.n	8006456 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006450:	787b      	ldrb	r3, [r7, #1]
 8006452:	2bff      	cmp	r3, #255	; 0xff
 8006454:	d101      	bne.n	800645a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	e006      	b.n	8006468 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	3301      	adds	r3, #1
 800645e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d9d6      	bls.n	8006414 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006466:	23ff      	movs	r3, #255	; 0xff
}
 8006468:	4618      	mov	r0, r3
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fce7 	bl	8006e50 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006482:	2101      	movs	r1, #1
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fdbe 	bl	8007006 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f804 	bl	80064d6 <USBH_HandleSof>
}
 80064ce:	bf00      	nop
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b0b      	cmp	r3, #11
 80064e6:	d10a      	bne.n	80064fe <USBH_HandleSof+0x28>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
  }
}
 80064fe:	bf00      	nop
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006516:	bf00      	nop
}
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006532:	bf00      	nop
}
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fc7a 	bl	8006e86 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	791b      	ldrb	r3, [r3, #4]
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fad1 	bl	8006b40 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	795b      	ldrb	r3, [r3, #5]
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 facb 	bl	8006b40 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	789b      	ldrb	r3, [r3, #2]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d10f      	bne.n	80065e8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	b29a      	uxth	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80065e8:	2200      	movs	r2, #0
 80065ea:	2100      	movs	r1, #0
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f805 	bl	80065fc <USBH_CtlReq>
 80065f2:	4603      	mov	r3, r0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800660a:	2301      	movs	r3, #1
 800660c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	789b      	ldrb	r3, [r3, #2]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d002      	beq.n	800661c <USBH_CtlReq+0x20>
 8006616:	2b02      	cmp	r3, #2
 8006618:	d00f      	beq.n	800663a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800661a:	e027      	b.n	800666c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	88fa      	ldrh	r2, [r7, #6]
 8006626:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2202      	movs	r2, #2
 8006632:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006634:	2301      	movs	r3, #1
 8006636:	75fb      	strb	r3, [r7, #23]
      break;
 8006638:	e018      	b.n	800666c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f81c 	bl	8006678 <USBH_HandleControl>
 8006640:	4603      	mov	r3, r0
 8006642:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006644:	7dfb      	ldrb	r3, [r7, #23]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <USBH_CtlReq+0x54>
 800664a:	7dfb      	ldrb	r3, [r7, #23]
 800664c:	2b03      	cmp	r3, #3
 800664e:	d106      	bne.n	800665e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	761a      	strb	r2, [r3, #24]
      break;
 800665c:	e005      	b.n	800666a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d102      	bne.n	800666a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	709a      	strb	r2, [r3, #2]
      break;
 800666a:	bf00      	nop
  }
  return status;
 800666c:	7dfb      	ldrb	r3, [r7, #23]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af02      	add	r7, sp, #8
 800667e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006680:	2301      	movs	r3, #1
 8006682:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006684:	2300      	movs	r3, #0
 8006686:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	7e1b      	ldrb	r3, [r3, #24]
 800668c:	3b01      	subs	r3, #1
 800668e:	2b0a      	cmp	r3, #10
 8006690:	f200 8156 	bhi.w	8006940 <USBH_HandleControl+0x2c8>
 8006694:	a201      	add	r2, pc, #4	; (adr r2, 800669c <USBH_HandleControl+0x24>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066c9 	.word	0x080066c9
 80066a0:	080066e3 	.word	0x080066e3
 80066a4:	0800674d 	.word	0x0800674d
 80066a8:	08006773 	.word	0x08006773
 80066ac:	080067ab 	.word	0x080067ab
 80066b0:	080067d5 	.word	0x080067d5
 80066b4:	08006827 	.word	0x08006827
 80066b8:	08006849 	.word	0x08006849
 80066bc:	08006885 	.word	0x08006885
 80066c0:	080068ab 	.word	0x080068ab
 80066c4:	080068e9 	.word	0x080068e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f103 0110 	add.w	r1, r3, #16
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	795b      	ldrb	r3, [r3, #5]
 80066d2:	461a      	mov	r2, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f943 	bl	8006960 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2202      	movs	r2, #2
 80066de:	761a      	strb	r2, [r3, #24]
      break;
 80066e0:	e139      	b.n	8006956 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	795b      	ldrb	r3, [r3, #5]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fc79 	bl	8006fe0 <USBH_LL_GetURBState>
 80066ee:	4603      	mov	r3, r0
 80066f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d11e      	bne.n	8006736 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	7c1b      	ldrb	r3, [r3, #16]
 80066fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006700:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	8adb      	ldrh	r3, [r3, #22]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800670a:	7b7b      	ldrb	r3, [r7, #13]
 800670c:	2b80      	cmp	r3, #128	; 0x80
 800670e:	d103      	bne.n	8006718 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2203      	movs	r2, #3
 8006714:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006716:	e115      	b.n	8006944 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2205      	movs	r2, #5
 800671c:	761a      	strb	r2, [r3, #24]
      break;
 800671e:	e111      	b.n	8006944 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006720:	7b7b      	ldrb	r3, [r7, #13]
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d103      	bne.n	800672e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2209      	movs	r2, #9
 800672a:	761a      	strb	r2, [r3, #24]
      break;
 800672c:	e10a      	b.n	8006944 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2207      	movs	r2, #7
 8006732:	761a      	strb	r2, [r3, #24]
      break;
 8006734:	e106      	b.n	8006944 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006736:	7bbb      	ldrb	r3, [r7, #14]
 8006738:	2b04      	cmp	r3, #4
 800673a:	d003      	beq.n	8006744 <USBH_HandleControl+0xcc>
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	2b02      	cmp	r3, #2
 8006740:	f040 8100 	bne.w	8006944 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	220b      	movs	r2, #11
 8006748:	761a      	strb	r2, [r3, #24]
      break;
 800674a:	e0fb      	b.n	8006944 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006752:	b29a      	uxth	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6899      	ldr	r1, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	899a      	ldrh	r2, [r3, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	791b      	ldrb	r3, [r3, #4]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f93a 	bl	80069de <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2204      	movs	r2, #4
 800676e:	761a      	strb	r2, [r3, #24]
      break;
 8006770:	e0f1      	b.n	8006956 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	791b      	ldrb	r3, [r3, #4]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fc31 	bl	8006fe0 <USBH_LL_GetURBState>
 800677e:	4603      	mov	r3, r0
 8006780:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d102      	bne.n	800678e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2209      	movs	r2, #9
 800678c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	2b05      	cmp	r3, #5
 8006792:	d102      	bne.n	800679a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006794:	2303      	movs	r3, #3
 8006796:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006798:	e0d6      	b.n	8006948 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	2b04      	cmp	r3, #4
 800679e:	f040 80d3 	bne.w	8006948 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	220b      	movs	r2, #11
 80067a6:	761a      	strb	r2, [r3, #24]
      break;
 80067a8:	e0ce      	b.n	8006948 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6899      	ldr	r1, [r3, #8]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	899a      	ldrh	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	795b      	ldrb	r3, [r3, #5]
 80067b6:	2001      	movs	r0, #1
 80067b8:	9000      	str	r0, [sp, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f8ea 	bl	8006994 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2206      	movs	r2, #6
 80067d0:	761a      	strb	r2, [r3, #24]
      break;
 80067d2:	e0c0      	b.n	8006956 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	795b      	ldrb	r3, [r3, #5]
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fc00 	bl	8006fe0 <USBH_LL_GetURBState>
 80067e0:	4603      	mov	r3, r0
 80067e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d103      	bne.n	80067f2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2207      	movs	r2, #7
 80067ee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80067f0:	e0ac      	b.n	800694c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	2b05      	cmp	r3, #5
 80067f6:	d105      	bne.n	8006804 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	220c      	movs	r2, #12
 80067fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80067fe:	2303      	movs	r3, #3
 8006800:	73fb      	strb	r3, [r7, #15]
      break;
 8006802:	e0a3      	b.n	800694c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d103      	bne.n	8006812 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2205      	movs	r2, #5
 800680e:	761a      	strb	r2, [r3, #24]
      break;
 8006810:	e09c      	b.n	800694c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	2b04      	cmp	r3, #4
 8006816:	f040 8099 	bne.w	800694c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	220b      	movs	r2, #11
 800681e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006820:	2302      	movs	r3, #2
 8006822:	73fb      	strb	r3, [r7, #15]
      break;
 8006824:	e092      	b.n	800694c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	791b      	ldrb	r3, [r3, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	2100      	movs	r1, #0
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f8d5 	bl	80069de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2208      	movs	r2, #8
 8006844:	761a      	strb	r2, [r3, #24]

      break;
 8006846:	e086      	b.n	8006956 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	791b      	ldrb	r3, [r3, #4]
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fbc6 	bl	8006fe0 <USBH_LL_GetURBState>
 8006854:	4603      	mov	r3, r0
 8006856:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d105      	bne.n	800686a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	220d      	movs	r2, #13
 8006862:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006868:	e072      	b.n	8006950 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	2b04      	cmp	r3, #4
 800686e:	d103      	bne.n	8006878 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	220b      	movs	r2, #11
 8006874:	761a      	strb	r2, [r3, #24]
      break;
 8006876:	e06b      	b.n	8006950 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	2b05      	cmp	r3, #5
 800687c:	d168      	bne.n	8006950 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800687e:	2303      	movs	r3, #3
 8006880:	73fb      	strb	r3, [r7, #15]
      break;
 8006882:	e065      	b.n	8006950 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	795b      	ldrb	r3, [r3, #5]
 8006888:	2201      	movs	r2, #1
 800688a:	9200      	str	r2, [sp, #0]
 800688c:	2200      	movs	r2, #0
 800688e:	2100      	movs	r1, #0
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f87f 	bl	8006994 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800689c:	b29a      	uxth	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	220a      	movs	r2, #10
 80068a6:	761a      	strb	r2, [r3, #24]
      break;
 80068a8:	e055      	b.n	8006956 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	795b      	ldrb	r3, [r3, #5]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fb95 	bl	8006fe0 <USBH_LL_GetURBState>
 80068b6:	4603      	mov	r3, r0
 80068b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80068ba:	7bbb      	ldrb	r3, [r7, #14]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d105      	bne.n	80068cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	220d      	movs	r2, #13
 80068c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80068ca:	e043      	b.n	8006954 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d103      	bne.n	80068da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2209      	movs	r2, #9
 80068d6:	761a      	strb	r2, [r3, #24]
      break;
 80068d8:	e03c      	b.n	8006954 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	2b04      	cmp	r3, #4
 80068de:	d139      	bne.n	8006954 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	220b      	movs	r2, #11
 80068e4:	761a      	strb	r2, [r3, #24]
      break;
 80068e6:	e035      	b.n	8006954 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	7e5b      	ldrb	r3, [r3, #25]
 80068ec:	3301      	adds	r3, #1
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	765a      	strb	r2, [r3, #25]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	7e5b      	ldrb	r3, [r3, #25]
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d806      	bhi.n	800690a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006908:	e025      	b.n	8006956 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006910:	2106      	movs	r1, #6
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	795b      	ldrb	r3, [r3, #5]
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f90c 	bl	8006b40 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	791b      	ldrb	r3, [r3, #4]
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f906 	bl	8006b40 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800693a:	2302      	movs	r3, #2
 800693c:	73fb      	strb	r3, [r7, #15]
      break;
 800693e:	e00a      	b.n	8006956 <USBH_HandleControl+0x2de>

    default:
      break;
 8006940:	bf00      	nop
 8006942:	e008      	b.n	8006956 <USBH_HandleControl+0x2de>
      break;
 8006944:	bf00      	nop
 8006946:	e006      	b.n	8006956 <USBH_HandleControl+0x2de>
      break;
 8006948:	bf00      	nop
 800694a:	e004      	b.n	8006956 <USBH_HandleControl+0x2de>
      break;
 800694c:	bf00      	nop
 800694e:	e002      	b.n	8006956 <USBH_HandleControl+0x2de>
      break;
 8006950:	bf00      	nop
 8006952:	e000      	b.n	8006956 <USBH_HandleControl+0x2de>
      break;
 8006954:	bf00      	nop
  }

  return status;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af04      	add	r7, sp, #16
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	4613      	mov	r3, r2
 800696c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800696e:	79f9      	ldrb	r1, [r7, #7]
 8006970:	2300      	movs	r3, #0
 8006972:	9303      	str	r3, [sp, #12]
 8006974:	2308      	movs	r3, #8
 8006976:	9302      	str	r3, [sp, #8]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	2300      	movs	r3, #0
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	2300      	movs	r3, #0
 8006982:	2200      	movs	r2, #0
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 fafa 	bl	8006f7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af04      	add	r7, sp, #16
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	4611      	mov	r1, r2
 80069a0:	461a      	mov	r2, r3
 80069a2:	460b      	mov	r3, r1
 80069a4:	80fb      	strh	r3, [r7, #6]
 80069a6:	4613      	mov	r3, r2
 80069a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80069b8:	7979      	ldrb	r1, [r7, #5]
 80069ba:	7e3b      	ldrb	r3, [r7, #24]
 80069bc:	9303      	str	r3, [sp, #12]
 80069be:	88fb      	ldrh	r3, [r7, #6]
 80069c0:	9302      	str	r3, [sp, #8]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	2301      	movs	r3, #1
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	2300      	movs	r3, #0
 80069cc:	2200      	movs	r2, #0
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 fad5 	bl	8006f7e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b088      	sub	sp, #32
 80069e2:	af04      	add	r7, sp, #16
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	4611      	mov	r1, r2
 80069ea:	461a      	mov	r2, r3
 80069ec:	460b      	mov	r3, r1
 80069ee:	80fb      	strh	r3, [r7, #6]
 80069f0:	4613      	mov	r3, r2
 80069f2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80069f4:	7979      	ldrb	r1, [r7, #5]
 80069f6:	2300      	movs	r3, #0
 80069f8:	9303      	str	r3, [sp, #12]
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	9302      	str	r3, [sp, #8]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	2301      	movs	r3, #1
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	2300      	movs	r3, #0
 8006a08:	2201      	movs	r2, #1
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fab7 	bl	8006f7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006a10:	2300      	movs	r3, #0

}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b088      	sub	sp, #32
 8006a1e:	af04      	add	r7, sp, #16
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	4611      	mov	r1, r2
 8006a26:	461a      	mov	r2, r3
 8006a28:	460b      	mov	r3, r1
 8006a2a:	80fb      	strh	r3, [r7, #6]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006a3e:	7979      	ldrb	r1, [r7, #5]
 8006a40:	7e3b      	ldrb	r3, [r7, #24]
 8006a42:	9303      	str	r3, [sp, #12]
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	9302      	str	r3, [sp, #8]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	2302      	movs	r3, #2
 8006a52:	2200      	movs	r2, #0
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fa92 	bl	8006f7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af04      	add	r7, sp, #16
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	4611      	mov	r1, r2
 8006a70:	461a      	mov	r2, r3
 8006a72:	460b      	mov	r3, r1
 8006a74:	80fb      	strh	r3, [r7, #6]
 8006a76:	4613      	mov	r3, r2
 8006a78:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006a7a:	7979      	ldrb	r1, [r7, #5]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9303      	str	r3, [sp, #12]
 8006a80:	88fb      	ldrh	r3, [r7, #6]
 8006a82:	9302      	str	r3, [sp, #8]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	2301      	movs	r3, #1
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	2201      	movs	r2, #1
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 fa74 	bl	8006f7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af04      	add	r7, sp, #16
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	4611      	mov	r1, r2
 8006aac:	461a      	mov	r2, r3
 8006aae:	4603      	mov	r3, r0
 8006ab0:	70fb      	strb	r3, [r7, #3]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70bb      	strb	r3, [r7, #2]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006aba:	7878      	ldrb	r0, [r7, #1]
 8006abc:	78ba      	ldrb	r2, [r7, #2]
 8006abe:	78f9      	ldrb	r1, [r7, #3]
 8006ac0:	8b3b      	ldrh	r3, [r7, #24]
 8006ac2:	9302      	str	r3, [sp, #8]
 8006ac4:	7d3b      	ldrb	r3, [r7, #20]
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	7c3b      	ldrb	r3, [r7, #16]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	4603      	mov	r3, r0
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa07 	bl	8006ee2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa26 	bl	8006f40 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f836 	bl	8006b7c <USBH_GetFreePipe>
 8006b10:	4603      	mov	r3, r0
 8006b12:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006b14:	89fb      	ldrh	r3, [r7, #14]
 8006b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00a      	beq.n	8006b34 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006b1e:	78fa      	ldrb	r2, [r7, #3]
 8006b20:	89fb      	ldrh	r3, [r7, #14]
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	33e0      	adds	r3, #224	; 0xe0
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	440b      	add	r3, r1
 8006b32:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006b34:	89fb      	ldrh	r3, [r7, #14]
 8006b36:	b2db      	uxtb	r3, r3
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	2b0f      	cmp	r3, #15
 8006b50:	d80d      	bhi.n	8006b6e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006b52:	78fb      	ldrb	r3, [r7, #3]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	33e0      	adds	r3, #224	; 0xe0
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	33e0      	adds	r3, #224	; 0xe0
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	73fb      	strb	r3, [r7, #15]
 8006b8c:	e00f      	b.n	8006bae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	33e0      	adds	r3, #224	; 0xe0
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d102      	bne.n	8006ba8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	e007      	b.n	8006bb8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	3301      	adds	r3, #1
 8006bac:	73fb      	strb	r3, [r7, #15]
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b0f      	cmp	r3, #15
 8006bb2:	d9ec      	bls.n	8006b8e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	490e      	ldr	r1, [pc, #56]	; (8006c04 <MX_USB_HOST_Init+0x40>)
 8006bcc:	480e      	ldr	r0, [pc, #56]	; (8006c08 <MX_USB_HOST_Init+0x44>)
 8006bce:	f7ff fb37 	bl	8006240 <USBH_Init>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006bd8:	f7f9 fe7e 	bl	80008d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006bdc:	490b      	ldr	r1, [pc, #44]	; (8006c0c <MX_USB_HOST_Init+0x48>)
 8006bde:	480a      	ldr	r0, [pc, #40]	; (8006c08 <MX_USB_HOST_Init+0x44>)
 8006be0:	f7ff fbbc 	bl	800635c <USBH_RegisterClass>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006bea:	f7f9 fe75 	bl	80008d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006bee:	4806      	ldr	r0, [pc, #24]	; (8006c08 <MX_USB_HOST_Init+0x44>)
 8006bf0:	f7ff fc40 	bl	8006474 <USBH_Start>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006bfa:	f7f9 fe6d 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006bfe:	bf00      	nop
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	08006c11 	.word	0x08006c11
 8006c08:	20000154 	.word	0x20000154
 8006c0c:	2000000c 	.word	0x2000000c

08006c10 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d819      	bhi.n	8006c58 <USBH_UserProcess+0x48>
 8006c24:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <USBH_UserProcess+0x1c>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c59 	.word	0x08006c59
 8006c30:	08006c49 	.word	0x08006c49
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c51 	.word	0x08006c51
 8006c3c:	08006c41 	.word	0x08006c41
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006c40:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <USBH_UserProcess+0x58>)
 8006c42:	2203      	movs	r2, #3
 8006c44:	701a      	strb	r2, [r3, #0]
  break;
 8006c46:	e008      	b.n	8006c5a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006c48:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <USBH_UserProcess+0x58>)
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	701a      	strb	r2, [r3, #0]
  break;
 8006c4e:	e004      	b.n	8006c5a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006c50:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <USBH_UserProcess+0x58>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
  break;
 8006c56:	e000      	b.n	8006c5a <USBH_UserProcess+0x4a>

  default:
  break;
 8006c58:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	2000052c 	.word	0x2000052c

08006c6c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08a      	sub	sp, #40	; 0x28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c74:	f107 0314 	add.w	r3, r7, #20
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	605a      	str	r2, [r3, #4]
 8006c7e:	609a      	str	r2, [r3, #8]
 8006c80:	60da      	str	r2, [r3, #12]
 8006c82:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c8c:	d147      	bne.n	8006d1e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	4b25      	ldr	r3, [pc, #148]	; (8006d28 <HAL_HCD_MspInit+0xbc>)
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	4a24      	ldr	r2, [pc, #144]	; (8006d28 <HAL_HCD_MspInit+0xbc>)
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c9e:	4b22      	ldr	r3, [pc, #136]	; (8006d28 <HAL_HCD_MspInit+0xbc>)
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006cb8:	f107 0314 	add.w	r3, r7, #20
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	481b      	ldr	r0, [pc, #108]	; (8006d2c <HAL_HCD_MspInit+0xc0>)
 8006cc0:	f7fa f970 	bl	8000fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006cc4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cca:	2302      	movs	r3, #2
 8006ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006cd6:	230a      	movs	r3, #10
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cda:	f107 0314 	add.w	r3, r7, #20
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4812      	ldr	r0, [pc, #72]	; (8006d2c <HAL_HCD_MspInit+0xc0>)
 8006ce2:	f7fa f95f 	bl	8000fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ce6:	4b10      	ldr	r3, [pc, #64]	; (8006d28 <HAL_HCD_MspInit+0xbc>)
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cea:	4a0f      	ldr	r2, [pc, #60]	; (8006d28 <HAL_HCD_MspInit+0xbc>)
 8006cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf0:	6353      	str	r3, [r2, #52]	; 0x34
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <HAL_HCD_MspInit+0xbc>)
 8006cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfa:	4a0b      	ldr	r2, [pc, #44]	; (8006d28 <HAL_HCD_MspInit+0xbc>)
 8006cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d00:	6453      	str	r3, [r2, #68]	; 0x44
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <HAL_HCD_MspInit+0xbc>)
 8006d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2100      	movs	r1, #0
 8006d12:	2043      	movs	r0, #67	; 0x43
 8006d14:	f7fa f90f 	bl	8000f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d18:	2043      	movs	r0, #67	; 0x43
 8006d1a:	f7fa f928 	bl	8000f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d1e:	bf00      	nop
 8006d20:	3728      	adds	r7, #40	; 0x28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	40020000 	.word	0x40020000

08006d30 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fbb7 	bl	80064b2 <USBH_LL_IncTimer>
}
 8006d44:	bf00      	nop
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fbef 	bl	800653e <USBH_LL_Connect>
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff fbf8 	bl	800656c <USBH_LL_Disconnect>
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
 8006d90:	4613      	mov	r3, r2
 8006d92:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff fba9 	bl	8006506 <USBH_LL_PortEnabled>
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff fba9 	bl	8006522 <USBH_LL_PortDisabled>
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d12a      	bne.n	8006e40 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006dea:	4a18      	ldr	r2, [pc, #96]	; (8006e4c <USBH_LL_Init+0x74>)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <USBH_LL_Init+0x74>)
 8006df6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006dfa:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <USBH_LL_Init+0x74>)
 8006dfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006e00:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006e02:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <USBH_LL_Init+0x74>)
 8006e04:	2208      	movs	r2, #8
 8006e06:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006e08:	4b10      	ldr	r3, [pc, #64]	; (8006e4c <USBH_LL_Init+0x74>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <USBH_LL_Init+0x74>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006e14:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <USBH_LL_Init+0x74>)
 8006e16:	2202      	movs	r2, #2
 8006e18:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006e1a:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <USBH_LL_Init+0x74>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006e20:	480a      	ldr	r0, [pc, #40]	; (8006e4c <USBH_LL_Init+0x74>)
 8006e22:	f7fa fa74 	bl	800130e <HAL_HCD_Init>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006e2c:	f7f9 fd54 	bl	80008d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006e30:	4806      	ldr	r0, [pc, #24]	; (8006e4c <USBH_LL_Init+0x74>)
 8006e32:	f7fa fe4a 	bl	8001aca <HAL_HCD_GetCurrentFrame>
 8006e36:	4603      	mov	r3, r0
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff fb2a 	bl	8006494 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000530 	.word	0x20000530

08006e50 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fa fdc7 	bl	80019fa <HAL_HCD_Start>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 f90e 	bl	8007094 <USBH_Get_USB_Status>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fa fdcf 	bl	8001a40 <HAL_HCD_Stop>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 f8f3 	bl	8007094 <USBH_Get_USB_Status>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fa fde5 	bl	8001aa2 <HAL_HCD_HC_GetXferCount>
 8006ed8:	4603      	mov	r3, r0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006ee2:	b590      	push	{r4, r7, lr}
 8006ee4:	b089      	sub	sp, #36	; 0x24
 8006ee6:	af04      	add	r7, sp, #16
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	4608      	mov	r0, r1
 8006eec:	4611      	mov	r1, r2
 8006eee:	461a      	mov	r2, r3
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	70fb      	strb	r3, [r7, #3]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70bb      	strb	r3, [r7, #2]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006f0a:	787c      	ldrb	r4, [r7, #1]
 8006f0c:	78ba      	ldrb	r2, [r7, #2]
 8006f0e:	78f9      	ldrb	r1, [r7, #3]
 8006f10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f12:	9302      	str	r3, [sp, #8]
 8006f14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	4623      	mov	r3, r4
 8006f22:	f7fa fa56 	bl	80013d2 <HAL_HCD_HC_Init>
 8006f26:	4603      	mov	r3, r0
 8006f28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 f8b1 	bl	8007094 <USBH_Get_USB_Status>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd90      	pop	{r4, r7, pc}

08006f40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fa fac6 	bl	80014f0 <HAL_HCD_HC_Halt>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f892 	bl	8007094 <USBH_Get_USB_Status>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006f7e:	b590      	push	{r4, r7, lr}
 8006f80:	b089      	sub	sp, #36	; 0x24
 8006f82:	af04      	add	r7, sp, #16
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	4608      	mov	r0, r1
 8006f88:	4611      	mov	r1, r2
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	70fb      	strb	r3, [r7, #3]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70bb      	strb	r3, [r7, #2]
 8006f94:	4613      	mov	r3, r2
 8006f96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006fa6:	787c      	ldrb	r4, [r7, #1]
 8006fa8:	78ba      	ldrb	r2, [r7, #2]
 8006faa:	78f9      	ldrb	r1, [r7, #3]
 8006fac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fb0:	9303      	str	r3, [sp, #12]
 8006fb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fb4:	9302      	str	r3, [sp, #8]
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	f7fa fab9 	bl	8001538 <HAL_HCD_HC_SubmitRequest>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 f861 	bl	8007094 <USBH_Get_USB_Status>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd90      	pop	{r4, r7, pc}

08006fe0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fa fd3f 	bl	8001a7a <HAL_HCD_HC_GetURBState>
 8006ffc:	4603      	mov	r3, r0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007018:	2b01      	cmp	r3, #1
 800701a:	d103      	bne.n	8007024 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f864 	bl	80070ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007024:	20c8      	movs	r0, #200	; 0xc8
 8007026:	f7f9 fe87 	bl	8000d38 <HAL_Delay>
  return USBH_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
 8007040:	4613      	mov	r3, r2
 8007042:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800704a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800704c:	78fb      	ldrb	r3, [r7, #3]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	212c      	movs	r1, #44	; 0x2c
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	4413      	add	r3, r2
 8007058:	333b      	adds	r3, #59	; 0x3b
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	212c      	movs	r1, #44	; 0x2c
 8007066:	fb01 f303 	mul.w	r3, r1, r3
 800706a:	4413      	add	r3, r2
 800706c:	3354      	adds	r3, #84	; 0x54
 800706e:	78ba      	ldrb	r2, [r7, #2]
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	e008      	b.n	8007086 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	212c      	movs	r1, #44	; 0x2c
 800707a:	fb01 f303 	mul.w	r3, r1, r3
 800707e:	4413      	add	r3, r2
 8007080:	3355      	adds	r3, #85	; 0x55
 8007082:	78ba      	ldrb	r2, [r7, #2]
 8007084:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d817      	bhi.n	80070d8 <USBH_Get_USB_Status+0x44>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <USBH_Get_USB_Status+0x1c>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070c1 	.word	0x080070c1
 80070b4:	080070c7 	.word	0x080070c7
 80070b8:	080070cd 	.word	0x080070cd
 80070bc:	080070d3 	.word	0x080070d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73fb      	strb	r3, [r7, #15]
    break;
 80070c4:	e00b      	b.n	80070de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80070c6:	2302      	movs	r3, #2
 80070c8:	73fb      	strb	r3, [r7, #15]
    break;
 80070ca:	e008      	b.n	80070de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80070cc:	2301      	movs	r3, #1
 80070ce:	73fb      	strb	r3, [r7, #15]
    break;
 80070d0:	e005      	b.n	80070de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80070d2:	2302      	movs	r3, #2
 80070d4:	73fb      	strb	r3, [r7, #15]
    break;
 80070d6:	e002      	b.n	80070de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80070d8:	2302      	movs	r3, #2
 80070da:	73fb      	strb	r3, [r7, #15]
    break;
 80070dc:	bf00      	nop
  }
  return usb_status;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d102      	bne.n	8007106 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]
 8007104:	e001      	b.n	800710a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007106:	2301      	movs	r3, #1
 8007108:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	461a      	mov	r2, r3
 800710e:	2101      	movs	r1, #1
 8007110:	4803      	ldr	r0, [pc, #12]	; (8007120 <MX_DriverVbusFS+0x34>)
 8007112:	f7fa f8e3 	bl	80012dc <HAL_GPIO_WritePin>
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40020800 	.word	0x40020800

08007124 <__errno>:
 8007124:	4b01      	ldr	r3, [pc, #4]	; (800712c <__errno+0x8>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	2000002c 	.word	0x2000002c

08007130 <__libc_init_array>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4d0d      	ldr	r5, [pc, #52]	; (8007168 <__libc_init_array+0x38>)
 8007134:	4c0d      	ldr	r4, [pc, #52]	; (800716c <__libc_init_array+0x3c>)
 8007136:	1b64      	subs	r4, r4, r5
 8007138:	10a4      	asrs	r4, r4, #2
 800713a:	2600      	movs	r6, #0
 800713c:	42a6      	cmp	r6, r4
 800713e:	d109      	bne.n	8007154 <__libc_init_array+0x24>
 8007140:	4d0b      	ldr	r5, [pc, #44]	; (8007170 <__libc_init_array+0x40>)
 8007142:	4c0c      	ldr	r4, [pc, #48]	; (8007174 <__libc_init_array+0x44>)
 8007144:	f000 f92e 	bl	80073a4 <_init>
 8007148:	1b64      	subs	r4, r4, r5
 800714a:	10a4      	asrs	r4, r4, #2
 800714c:	2600      	movs	r6, #0
 800714e:	42a6      	cmp	r6, r4
 8007150:	d105      	bne.n	800715e <__libc_init_array+0x2e>
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	f855 3b04 	ldr.w	r3, [r5], #4
 8007158:	4798      	blx	r3
 800715a:	3601      	adds	r6, #1
 800715c:	e7ee      	b.n	800713c <__libc_init_array+0xc>
 800715e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007162:	4798      	blx	r3
 8007164:	3601      	adds	r6, #1
 8007166:	e7f2      	b.n	800714e <__libc_init_array+0x1e>
 8007168:	080073e0 	.word	0x080073e0
 800716c:	080073e0 	.word	0x080073e0
 8007170:	080073e0 	.word	0x080073e0
 8007174:	080073e4 	.word	0x080073e4

08007178 <malloc>:
 8007178:	4b02      	ldr	r3, [pc, #8]	; (8007184 <malloc+0xc>)
 800717a:	4601      	mov	r1, r0
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	f000 b87f 	b.w	8007280 <_malloc_r>
 8007182:	bf00      	nop
 8007184:	2000002c 	.word	0x2000002c

08007188 <free>:
 8007188:	4b02      	ldr	r3, [pc, #8]	; (8007194 <free+0xc>)
 800718a:	4601      	mov	r1, r0
 800718c:	6818      	ldr	r0, [r3, #0]
 800718e:	f000 b80b 	b.w	80071a8 <_free_r>
 8007192:	bf00      	nop
 8007194:	2000002c 	.word	0x2000002c

08007198 <memset>:
 8007198:	4402      	add	r2, r0
 800719a:	4603      	mov	r3, r0
 800719c:	4293      	cmp	r3, r2
 800719e:	d100      	bne.n	80071a2 <memset+0xa>
 80071a0:	4770      	bx	lr
 80071a2:	f803 1b01 	strb.w	r1, [r3], #1
 80071a6:	e7f9      	b.n	800719c <memset+0x4>

080071a8 <_free_r>:
 80071a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071aa:	2900      	cmp	r1, #0
 80071ac:	d044      	beq.n	8007238 <_free_r+0x90>
 80071ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071b2:	9001      	str	r0, [sp, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f1a1 0404 	sub.w	r4, r1, #4
 80071ba:	bfb8      	it	lt
 80071bc:	18e4      	addlt	r4, r4, r3
 80071be:	f000 f8e3 	bl	8007388 <__malloc_lock>
 80071c2:	4a1e      	ldr	r2, [pc, #120]	; (800723c <_free_r+0x94>)
 80071c4:	9801      	ldr	r0, [sp, #4]
 80071c6:	6813      	ldr	r3, [r2, #0]
 80071c8:	b933      	cbnz	r3, 80071d8 <_free_r+0x30>
 80071ca:	6063      	str	r3, [r4, #4]
 80071cc:	6014      	str	r4, [r2, #0]
 80071ce:	b003      	add	sp, #12
 80071d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071d4:	f000 b8de 	b.w	8007394 <__malloc_unlock>
 80071d8:	42a3      	cmp	r3, r4
 80071da:	d908      	bls.n	80071ee <_free_r+0x46>
 80071dc:	6825      	ldr	r5, [r4, #0]
 80071de:	1961      	adds	r1, r4, r5
 80071e0:	428b      	cmp	r3, r1
 80071e2:	bf01      	itttt	eq
 80071e4:	6819      	ldreq	r1, [r3, #0]
 80071e6:	685b      	ldreq	r3, [r3, #4]
 80071e8:	1949      	addeq	r1, r1, r5
 80071ea:	6021      	streq	r1, [r4, #0]
 80071ec:	e7ed      	b.n	80071ca <_free_r+0x22>
 80071ee:	461a      	mov	r2, r3
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	b10b      	cbz	r3, 80071f8 <_free_r+0x50>
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	d9fa      	bls.n	80071ee <_free_r+0x46>
 80071f8:	6811      	ldr	r1, [r2, #0]
 80071fa:	1855      	adds	r5, r2, r1
 80071fc:	42a5      	cmp	r5, r4
 80071fe:	d10b      	bne.n	8007218 <_free_r+0x70>
 8007200:	6824      	ldr	r4, [r4, #0]
 8007202:	4421      	add	r1, r4
 8007204:	1854      	adds	r4, r2, r1
 8007206:	42a3      	cmp	r3, r4
 8007208:	6011      	str	r1, [r2, #0]
 800720a:	d1e0      	bne.n	80071ce <_free_r+0x26>
 800720c:	681c      	ldr	r4, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	6053      	str	r3, [r2, #4]
 8007212:	4421      	add	r1, r4
 8007214:	6011      	str	r1, [r2, #0]
 8007216:	e7da      	b.n	80071ce <_free_r+0x26>
 8007218:	d902      	bls.n	8007220 <_free_r+0x78>
 800721a:	230c      	movs	r3, #12
 800721c:	6003      	str	r3, [r0, #0]
 800721e:	e7d6      	b.n	80071ce <_free_r+0x26>
 8007220:	6825      	ldr	r5, [r4, #0]
 8007222:	1961      	adds	r1, r4, r5
 8007224:	428b      	cmp	r3, r1
 8007226:	bf04      	itt	eq
 8007228:	6819      	ldreq	r1, [r3, #0]
 800722a:	685b      	ldreq	r3, [r3, #4]
 800722c:	6063      	str	r3, [r4, #4]
 800722e:	bf04      	itt	eq
 8007230:	1949      	addeq	r1, r1, r5
 8007232:	6021      	streq	r1, [r4, #0]
 8007234:	6054      	str	r4, [r2, #4]
 8007236:	e7ca      	b.n	80071ce <_free_r+0x26>
 8007238:	b003      	add	sp, #12
 800723a:	bd30      	pop	{r4, r5, pc}
 800723c:	20000834 	.word	0x20000834

08007240 <sbrk_aligned>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	4e0e      	ldr	r6, [pc, #56]	; (800727c <sbrk_aligned+0x3c>)
 8007244:	460c      	mov	r4, r1
 8007246:	6831      	ldr	r1, [r6, #0]
 8007248:	4605      	mov	r5, r0
 800724a:	b911      	cbnz	r1, 8007252 <sbrk_aligned+0x12>
 800724c:	f000 f88c 	bl	8007368 <_sbrk_r>
 8007250:	6030      	str	r0, [r6, #0]
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	f000 f887 	bl	8007368 <_sbrk_r>
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	d00a      	beq.n	8007274 <sbrk_aligned+0x34>
 800725e:	1cc4      	adds	r4, r0, #3
 8007260:	f024 0403 	bic.w	r4, r4, #3
 8007264:	42a0      	cmp	r0, r4
 8007266:	d007      	beq.n	8007278 <sbrk_aligned+0x38>
 8007268:	1a21      	subs	r1, r4, r0
 800726a:	4628      	mov	r0, r5
 800726c:	f000 f87c 	bl	8007368 <_sbrk_r>
 8007270:	3001      	adds	r0, #1
 8007272:	d101      	bne.n	8007278 <sbrk_aligned+0x38>
 8007274:	f04f 34ff 	mov.w	r4, #4294967295
 8007278:	4620      	mov	r0, r4
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	20000838 	.word	0x20000838

08007280 <_malloc_r>:
 8007280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007284:	1ccd      	adds	r5, r1, #3
 8007286:	f025 0503 	bic.w	r5, r5, #3
 800728a:	3508      	adds	r5, #8
 800728c:	2d0c      	cmp	r5, #12
 800728e:	bf38      	it	cc
 8007290:	250c      	movcc	r5, #12
 8007292:	2d00      	cmp	r5, #0
 8007294:	4607      	mov	r7, r0
 8007296:	db01      	blt.n	800729c <_malloc_r+0x1c>
 8007298:	42a9      	cmp	r1, r5
 800729a:	d905      	bls.n	80072a8 <_malloc_r+0x28>
 800729c:	230c      	movs	r3, #12
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	2600      	movs	r6, #0
 80072a2:	4630      	mov	r0, r6
 80072a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a8:	4e2e      	ldr	r6, [pc, #184]	; (8007364 <_malloc_r+0xe4>)
 80072aa:	f000 f86d 	bl	8007388 <__malloc_lock>
 80072ae:	6833      	ldr	r3, [r6, #0]
 80072b0:	461c      	mov	r4, r3
 80072b2:	bb34      	cbnz	r4, 8007302 <_malloc_r+0x82>
 80072b4:	4629      	mov	r1, r5
 80072b6:	4638      	mov	r0, r7
 80072b8:	f7ff ffc2 	bl	8007240 <sbrk_aligned>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	4604      	mov	r4, r0
 80072c0:	d14d      	bne.n	800735e <_malloc_r+0xde>
 80072c2:	6834      	ldr	r4, [r6, #0]
 80072c4:	4626      	mov	r6, r4
 80072c6:	2e00      	cmp	r6, #0
 80072c8:	d140      	bne.n	800734c <_malloc_r+0xcc>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	4631      	mov	r1, r6
 80072ce:	4638      	mov	r0, r7
 80072d0:	eb04 0803 	add.w	r8, r4, r3
 80072d4:	f000 f848 	bl	8007368 <_sbrk_r>
 80072d8:	4580      	cmp	r8, r0
 80072da:	d13a      	bne.n	8007352 <_malloc_r+0xd2>
 80072dc:	6821      	ldr	r1, [r4, #0]
 80072de:	3503      	adds	r5, #3
 80072e0:	1a6d      	subs	r5, r5, r1
 80072e2:	f025 0503 	bic.w	r5, r5, #3
 80072e6:	3508      	adds	r5, #8
 80072e8:	2d0c      	cmp	r5, #12
 80072ea:	bf38      	it	cc
 80072ec:	250c      	movcc	r5, #12
 80072ee:	4629      	mov	r1, r5
 80072f0:	4638      	mov	r0, r7
 80072f2:	f7ff ffa5 	bl	8007240 <sbrk_aligned>
 80072f6:	3001      	adds	r0, #1
 80072f8:	d02b      	beq.n	8007352 <_malloc_r+0xd2>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	442b      	add	r3, r5
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	e00e      	b.n	8007320 <_malloc_r+0xa0>
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	1b52      	subs	r2, r2, r5
 8007306:	d41e      	bmi.n	8007346 <_malloc_r+0xc6>
 8007308:	2a0b      	cmp	r2, #11
 800730a:	d916      	bls.n	800733a <_malloc_r+0xba>
 800730c:	1961      	adds	r1, r4, r5
 800730e:	42a3      	cmp	r3, r4
 8007310:	6025      	str	r5, [r4, #0]
 8007312:	bf18      	it	ne
 8007314:	6059      	strne	r1, [r3, #4]
 8007316:	6863      	ldr	r3, [r4, #4]
 8007318:	bf08      	it	eq
 800731a:	6031      	streq	r1, [r6, #0]
 800731c:	5162      	str	r2, [r4, r5]
 800731e:	604b      	str	r3, [r1, #4]
 8007320:	4638      	mov	r0, r7
 8007322:	f104 060b 	add.w	r6, r4, #11
 8007326:	f000 f835 	bl	8007394 <__malloc_unlock>
 800732a:	f026 0607 	bic.w	r6, r6, #7
 800732e:	1d23      	adds	r3, r4, #4
 8007330:	1af2      	subs	r2, r6, r3
 8007332:	d0b6      	beq.n	80072a2 <_malloc_r+0x22>
 8007334:	1b9b      	subs	r3, r3, r6
 8007336:	50a3      	str	r3, [r4, r2]
 8007338:	e7b3      	b.n	80072a2 <_malloc_r+0x22>
 800733a:	6862      	ldr	r2, [r4, #4]
 800733c:	42a3      	cmp	r3, r4
 800733e:	bf0c      	ite	eq
 8007340:	6032      	streq	r2, [r6, #0]
 8007342:	605a      	strne	r2, [r3, #4]
 8007344:	e7ec      	b.n	8007320 <_malloc_r+0xa0>
 8007346:	4623      	mov	r3, r4
 8007348:	6864      	ldr	r4, [r4, #4]
 800734a:	e7b2      	b.n	80072b2 <_malloc_r+0x32>
 800734c:	4634      	mov	r4, r6
 800734e:	6876      	ldr	r6, [r6, #4]
 8007350:	e7b9      	b.n	80072c6 <_malloc_r+0x46>
 8007352:	230c      	movs	r3, #12
 8007354:	603b      	str	r3, [r7, #0]
 8007356:	4638      	mov	r0, r7
 8007358:	f000 f81c 	bl	8007394 <__malloc_unlock>
 800735c:	e7a1      	b.n	80072a2 <_malloc_r+0x22>
 800735e:	6025      	str	r5, [r4, #0]
 8007360:	e7de      	b.n	8007320 <_malloc_r+0xa0>
 8007362:	bf00      	nop
 8007364:	20000834 	.word	0x20000834

08007368 <_sbrk_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4d06      	ldr	r5, [pc, #24]	; (8007384 <_sbrk_r+0x1c>)
 800736c:	2300      	movs	r3, #0
 800736e:	4604      	mov	r4, r0
 8007370:	4608      	mov	r0, r1
 8007372:	602b      	str	r3, [r5, #0]
 8007374:	f7f9 fbfc 	bl	8000b70 <_sbrk>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d102      	bne.n	8007382 <_sbrk_r+0x1a>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	b103      	cbz	r3, 8007382 <_sbrk_r+0x1a>
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	2000083c 	.word	0x2000083c

08007388 <__malloc_lock>:
 8007388:	4801      	ldr	r0, [pc, #4]	; (8007390 <__malloc_lock+0x8>)
 800738a:	f000 b809 	b.w	80073a0 <__retarget_lock_acquire_recursive>
 800738e:	bf00      	nop
 8007390:	20000840 	.word	0x20000840

08007394 <__malloc_unlock>:
 8007394:	4801      	ldr	r0, [pc, #4]	; (800739c <__malloc_unlock+0x8>)
 8007396:	f000 b804 	b.w	80073a2 <__retarget_lock_release_recursive>
 800739a:	bf00      	nop
 800739c:	20000840 	.word	0x20000840

080073a0 <__retarget_lock_acquire_recursive>:
 80073a0:	4770      	bx	lr

080073a2 <__retarget_lock_release_recursive>:
 80073a2:	4770      	bx	lr

080073a4 <_init>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr

080073b0 <_fini>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr
