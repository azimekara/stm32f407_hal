
gun1_pushbutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004570  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004710  08004710  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004718  08004718  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004718  08004718  00014718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000041c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000428  20000428  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011933  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b71  00000000  00000000  0003196f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  000344e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df8  00000000  00000000  000353f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002189a  00000000  00000000  000361f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001370f  00000000  00000000  00057a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca0a5  00000000  00000000  0006b199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013523e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f38  00000000  00000000  00135290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046e0 	.word	0x080046e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080046e0 	.word	0x080046e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <deneme>:
#include "main.h"
#include "ioinput.h"


void deneme(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80004d0:	2064      	movs	r0, #100	; 0x64
 80004d2:	f000 fc79 	bl	8000dc8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004da:	4802      	ldr	r0, [pc, #8]	; (80004e4 <deneme+0x18>)
 80004dc:	f000 ff4b 	bl	8001376 <HAL_GPIO_TogglePin>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fbfa 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f84e 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f94a 	bl	800078c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f8:	f000 f8b4 	bl	8000664 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004fc:	f000 f8e0 	bl	80006c0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000500:	f000 f90e 	bl	8000720 <MX_SPI1_Init>
  while (1)
  {

	  	//debounce önlenmesi için buton okumaların içerisine 50 milisaniye gecikme koyuyoruz

	  	HAL_Delay(50);
 8000504:	2032      	movs	r0, #50	; 0x32
 8000506:	f000 fc5f 	bl	8000dc8 <HAL_Delay>
	  	if (Button5Status==0 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_RESET))
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <main+0xa0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d10a      	bne.n	8000528 <main+0x40>
 8000512:	2101      	movs	r1, #1
 8000514:	481d      	ldr	r0, [pc, #116]	; (800058c <main+0xa4>)
 8000516:	f000 fefd 	bl	8001314 <HAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d103      	bne.n	8000528 <main+0x40>
	  	{
	  		//while((HAL_GPIO_ReadPin(GPIOA,button6Stream_Pin)==GPIO_PIN_SET));

	  		Button5Status=0;
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <main+0xa0>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e02d      	b.n	8000584 <main+0x9c>
	  	}
	  	//sadece buton low olduğunda ve status=0 olduğunda buton flagini 1 yapıyoruz ve buton okuması gerçekleştiriyoruz
	  	else if( (Button5Status==0 &&  HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET) )
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <main+0xa0>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10c      	bne.n	800054a <main+0x62>
 8000530:	2101      	movs	r1, #1
 8000532:	4816      	ldr	r0, [pc, #88]	; (800058c <main+0xa4>)
 8000534:	f000 feee 	bl	8001314 <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	2b01      	cmp	r3, #1
 800053c:	d105      	bne.n	800054a <main+0x62>
	  	{
	  		Button5Status=1;
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <main+0xa0>)
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]

	  		deneme();
 8000544:	f7ff ffc2 	bl	80004cc <deneme>
 8000548:	e01c      	b.n	8000584 <main+0x9c>
	  	}
	  	else if (Button5Status==1 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_RESET))
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <main+0xa0>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d10a      	bne.n	8000568 <main+0x80>
 8000552:	2101      	movs	r1, #1
 8000554:	480d      	ldr	r0, [pc, #52]	; (800058c <main+0xa4>)
 8000556:	f000 fedd 	bl	8001314 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d103      	bne.n	8000568 <main+0x80>
	  	{
	  		Button5Status=0;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <main+0xa0>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
 8000566:	e00d      	b.n	8000584 <main+0x9c>
	  	}
	  	else if (Button5Status==1 &&  (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==GPIO_PIN_SET))
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <main+0xa0>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d1c9      	bne.n	8000504 <main+0x1c>
 8000570:	2101      	movs	r1, #1
 8000572:	4806      	ldr	r0, [pc, #24]	; (800058c <main+0xa4>)
 8000574:	f000 fece 	bl	8001314 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b01      	cmp	r3, #1
 800057c:	d1c2      	bne.n	8000504 <main+0x1c>
	  	{
	  		Button5Status=1;
 800057e:	4b02      	ldr	r3, [pc, #8]	; (8000588 <main+0xa0>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(50);
 8000584:	e7be      	b.n	8000504 <main+0x1c>
 8000586:	bf00      	nop
 8000588:	20000028 	.word	0x20000028
 800058c:	40020000 	.word	0x40020000

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 f896 	bl	80046d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fdd6 	bl	80031c8 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000622:	f000 f9b1 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f003 f837 	bl	80036b8 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000650:	f000 f99a 	bl	8000988 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C1_Init+0x50>)
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <MX_I2C1_Init+0x54>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_I2C1_Init+0x58>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_I2C1_Init+0x50>)
 80006a2:	f001 ffad 	bl	8002600 <HAL_I2C_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 f96c 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	40005400 	.word	0x40005400
 80006bc:	000186a0 	.word	0x000186a0

080006c0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_I2S3_Init+0x54>)
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <MX_I2S3_Init+0x58>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_I2S3_Init+0x54>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_I2S3_Init+0x54>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_I2S3_Init+0x54>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_I2S3_Init+0x54>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_I2S3_Init+0x54>)
 80006e8:	4a0c      	ldr	r2, [pc, #48]	; (800071c <MX_I2S3_Init+0x5c>)
 80006ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_I2S3_Init+0x54>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_I2S3_Init+0x54>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_I2S3_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_I2S3_Init+0x54>)
 8000700:	f002 f8c2 	bl	8002888 <HAL_I2S_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800070a:	f000 f93d 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000080 	.word	0x20000080
 8000718:	40003c00 	.word	0x40003c00
 800071c:	00017700 	.word	0x00017700

08000720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_SPI1_Init+0x64>)
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <MX_SPI1_Init+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_SPI1_Init+0x64>)
 800072c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_SPI1_Init+0x64>)
 800076c:	220a      	movs	r2, #10
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_SPI1_Init+0x64>)
 8000772:	f003 faed 	bl	8003d50 <HAL_SPI_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 f904 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000c8 	.word	0x200000c8
 8000788:	40013000 	.word	0x40013000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4b72      	ldr	r3, [pc, #456]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a71      	ldr	r2, [pc, #452]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b6f      	ldr	r3, [pc, #444]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b6b      	ldr	r3, [pc, #428]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a6a      	ldr	r2, [pc, #424]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b68      	ldr	r3, [pc, #416]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b64      	ldr	r3, [pc, #400]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a63      	ldr	r2, [pc, #396]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b61      	ldr	r3, [pc, #388]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b5d      	ldr	r3, [pc, #372]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a5c      	ldr	r2, [pc, #368]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b5a      	ldr	r3, [pc, #360]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b56      	ldr	r3, [pc, #344]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a55      	ldr	r2, [pc, #340]	; (8000970 <MX_GPIO_Init+0x1e4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b53      	ldr	r3, [pc, #332]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b4f      	ldr	r3, [pc, #316]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a4e      	ldr	r2, [pc, #312]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b4c      	ldr	r3, [pc, #304]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4849      	ldr	r0, [pc, #292]	; (8000974 <MX_GPIO_Init+0x1e8>)
 8000850:	f000 fd78 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4847      	ldr	r0, [pc, #284]	; (8000978 <MX_GPIO_Init+0x1ec>)
 800085a:	f000 fd73 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085e:	2200      	movs	r2, #0
 8000860:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000864:	4845      	ldr	r0, [pc, #276]	; (800097c <MX_GPIO_Init+0x1f0>)
 8000866:	f000 fd6d 	bl	8001344 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	483c      	ldr	r0, [pc, #240]	; (8000974 <MX_GPIO_Init+0x1e8>)
 8000882:	f000 fbab 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4836      	ldr	r0, [pc, #216]	; (8000978 <MX_GPIO_Init+0x1ec>)
 800089e:	f000 fb9d 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b2:	2305      	movs	r3, #5
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	482e      	ldr	r0, [pc, #184]	; (8000978 <MX_GPIO_Init+0x1ec>)
 80008be:	f000 fb8d 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	482a      	ldr	r0, [pc, #168]	; (8000980 <MX_GPIO_Init+0x1f4>)
 80008d8:	f000 fb80 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008dc:	2304      	movs	r3, #4
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4825      	ldr	r0, [pc, #148]	; (8000984 <MX_GPIO_Init+0x1f8>)
 80008f0:	f000 fb74 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000906:	2305      	movs	r3, #5
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	481c      	ldr	r0, [pc, #112]	; (8000984 <MX_GPIO_Init+0x1f8>)
 8000912:	f000 fb63 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000916:	f24f 0310 	movw	r3, #61456	; 0xf010
 800091a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4813      	ldr	r0, [pc, #76]	; (800097c <MX_GPIO_Init+0x1f0>)
 8000930:	f000 fb54 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000934:	2320      	movs	r3, #32
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_GPIO_Init+0x1f0>)
 8000948:	f000 fb48 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800094c:	2302      	movs	r3, #2
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000950:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_GPIO_Init+0x1e8>)
 8000962:	f000 fb3b 	bl	8000fdc <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	; 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40020800 	.word	0x40020800
 800097c:	40020c00 	.word	0x40020c00
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 face 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_I2C_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <HAL_I2C_MspInit+0x8c>)
 8000a40:	f000 facc 	bl	8000fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400

08000a74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <HAL_I2S_MspInit+0xf0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d15a      	bne.n	8000b5a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aa8:	23c0      	movs	r3, #192	; 0xc0
 8000aaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 f80b 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ac0:	f7ff ff62 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b28:	2306      	movs	r3, #6
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	480e      	ldr	r0, [pc, #56]	; (8000b6c <HAL_I2S_MspInit+0xf8>)
 8000b34:	f000 fa52 	bl	8000fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b38:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <HAL_I2S_MspInit+0xfc>)
 8000b56:	f000 fa41 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	; 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40003c00 	.word	0x40003c00
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020800 	.word	0x40020800

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_SPI_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12b      	bne.n	8000bee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bce:	23e0      	movs	r3, #224	; 0xe0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bde:	2305      	movs	r3, #5
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000bea:	f000 f9f7 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40013000 	.word	0x40013000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f89a 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <OTG_FS_IRQHandler+0x10>)
 8000c5e:	f000 fba4 	bl	80013aa <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000124 	.word	0x20000124

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c96:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cac:	4c0b      	ldr	r4, [pc, #44]	; (8000cdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cba:	f7ff ffd7 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f003 fce3 	bl	8004688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fc11 	bl	80004e8 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cd4:	08004720 	.word	0x08004720
  ldr r2, =_sbss
 8000cd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cdc:	20000428 	.word	0x20000428

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_Init+0x40>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_Init+0x40>)
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x40>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f931 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fe3c 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f93b 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f911 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000120 	.word	0x20000120

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000120 	.word	0x20000120

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_Delay+0x44>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffde 	bl	8000db0 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff47 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5c 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff8e 	bl	8000ec8 <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5d 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb0 	bl	8000f30 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e16b      	b.n	80012d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	f040 815a 	bne.w	80012ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b01      	cmp	r3, #1
 8001020:	d005      	beq.n	800102e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	2b02      	cmp	r3, #2
 800102c:	d130      	bne.n	8001090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	f003 0201 	and.w	r2, r3, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b03      	cmp	r3, #3
 800109a:	d017      	beq.n	80010cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80b4 	beq.w	80012ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b60      	ldr	r3, [pc, #384]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a5f      	ldr	r2, [pc, #380]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b5d      	ldr	r3, [pc, #372]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117e:	4a5b      	ldr	r2, [pc, #364]	; (80012ec <HAL_GPIO_Init+0x310>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <HAL_GPIO_Init+0x314>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d02b      	beq.n	8001202 <HAL_GPIO_Init+0x226>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a51      	ldr	r2, [pc, #324]	; (80012f4 <HAL_GPIO_Init+0x318>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x222>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a50      	ldr	r2, [pc, #320]	; (80012f8 <HAL_GPIO_Init+0x31c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x21e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <HAL_GPIO_Init+0x320>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x21a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4e      	ldr	r2, [pc, #312]	; (8001300 <HAL_GPIO_Init+0x324>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x216>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <HAL_GPIO_Init+0x328>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x212>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_GPIO_Init+0x32c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x20e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x330>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x20a>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e00e      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011e6:	2308      	movs	r3, #8
 80011e8:	e00c      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011ea:	2306      	movs	r3, #6
 80011ec:	e00a      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011ee:	2305      	movs	r3, #5
 80011f0:	e008      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011f2:	2304      	movs	r3, #4
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e004      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <HAL_GPIO_Init+0x228>
 8001202:	2300      	movs	r3, #0
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	f002 0203 	and.w	r2, r2, #3
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	4093      	lsls	r3, r2
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001214:	4935      	ldr	r1, [pc, #212]	; (80012ec <HAL_GPIO_Init+0x310>)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001246:	4a32      	ldr	r2, [pc, #200]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800124c:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_GPIO_Init+0x334>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129a:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_GPIO_Init+0x334>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_GPIO_Init+0x334>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <HAL_GPIO_Init+0x334>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	f67f ae90 	bls.w	8000ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40013800 	.word	0x40013800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	40021000 	.word	0x40021000
 8001304:	40021400 	.word	0x40021400
 8001308:	40021800 	.word	0x40021800
 800130c:	40021c00 	.word	0x40021c00
 8001310:	40013c00 	.word	0x40013c00

08001314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e001      	b.n	8001336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001360:	e003      	b.n	800136a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001388:	887a      	ldrh	r2, [r7, #2]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	041a      	lsls	r2, r3, #16
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43d9      	mvns	r1, r3
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	400b      	ands	r3, r1
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fe40 	bl	8004046 <USB_GetMode>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	f040 80f6 	bne.w	80015ba <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fe24 	bl	8004020 <USB_ReadInterrupts>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80ec 	beq.w	80015b8 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fe1b 	bl	8004020 <USB_ReadInterrupts>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013f4:	d104      	bne.n	8001400 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013fe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fe0b 	bl	8004020 <USB_ReadInterrupts>
 800140a:	4603      	mov	r3, r0
 800140c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001414:	d104      	bne.n	8001420 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800141e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f002 fdfb 	bl	8004020 <USB_ReadInterrupts>
 800142a:	4603      	mov	r3, r0
 800142c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001430:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001434:	d104      	bne.n	8001440 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800143e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fdeb 	bl	8004020 <USB_ReadInterrupts>
 800144a:	4603      	mov	r3, r0
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b02      	cmp	r3, #2
 8001452:	d103      	bne.n	800145c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2202      	movs	r2, #2
 800145a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fddd 	bl	8004020 <USB_ReadInterrupts>
 8001466:	4603      	mov	r3, r0
 8001468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800146c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001470:	d11c      	bne.n	80014ac <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800147a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10f      	bne.n	80014ac <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800148c:	2110      	movs	r1, #16
 800148e:	6938      	ldr	r0, [r7, #16]
 8001490:	f002 fd0a 	bl	8003ea8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001494:	6938      	ldr	r0, [r7, #16]
 8001496:	f002 fd3b 	bl	8003f10 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fdde 	bl	8004062 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f003 f86f 	bl	800458a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fdb5 	bl	8004020 <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d102      	bne.n	80014c8 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f001 f829 	bl	800251a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 fda7 	bl	8004020 <USB_ReadInterrupts>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d106      	bne.n	80014ea <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f003 f838 	bl	8004552 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2208      	movs	r2, #8
 80014e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fd96 	bl	8004020 <USB_ReadInterrupts>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d101      	bne.n	8001502 <HAL_HCD_IRQHandler+0x158>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_HCD_IRQHandler+0x15a>
 8001502:	2300      	movs	r3, #0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d012      	beq.n	800152e <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0210 	bic.w	r2, r2, #16
 8001516:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 ff2c 	bl	8002376 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	699a      	ldr	r2, [r3, #24]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0210 	orr.w	r2, r2, #16
 800152c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fd74 	bl	8004020 <USB_ReadInterrupts>
 8001538:	4603      	mov	r3, r0
 800153a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001542:	d13a      	bne.n	80015ba <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f002 fdc4 	bl	80040d6 <USB_HC_ReadInterrupt>
 800154e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e025      	b.n	80015a2 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	fa22 f303 	lsr.w	r3, r2, r3
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d018      	beq.n	800159c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	015a      	lsls	r2, r3, #5
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001580:	d106      	bne.n	8001590 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4619      	mov	r1, r3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f836 	bl	80015fa <HCD_HC_IN_IRQHandler>
 800158e:	e005      	b.n	800159c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fb84 	bl	8001ca4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d3d4      	bcc.n	8001556 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	e000      	b.n	80015ba <HAL_HCD_IRQHandler+0x210>
      return;
 80015b8:	bf00      	nop
    }
  }
}
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_HCD_Stop+0x16>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e00d      	b.n	80015f2 <HAL_HCD_Stop+0x32>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fe84 	bl	80042f0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4413      	add	r3, r2
 800161c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b04      	cmp	r3, #4
 8001628:	d11a      	bne.n	8001660 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	015a      	lsls	r2, r3, #5
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4413      	add	r3, r2
 8001632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001636:	461a      	mov	r2, r3
 8001638:	2304      	movs	r3, #4
 800163a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	3361      	adds	r3, #97	; 0x61
 800164a:	2206      	movs	r2, #6
 800164c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fd4d 	bl	80040f8 <USB_HC_Halt>
 800165e:	e0af      	b.n	80017c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	015a      	lsls	r2, r3, #5
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4413      	add	r3, r2
 8001668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001676:	d11b      	bne.n	80016b0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	015a      	lsls	r2, r3, #5
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4413      	add	r3, r2
 8001680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001684:	461a      	mov	r2, r3
 8001686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	212c      	movs	r1, #44	; 0x2c
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	4413      	add	r3, r2
 8001698:	3361      	adds	r3, #97	; 0x61
 800169a:	2207      	movs	r2, #7
 800169c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fd25 	bl	80040f8 <USB_HC_Halt>
 80016ae:	e087      	b.n	80017c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	015a      	lsls	r2, r3, #5
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	2b20      	cmp	r3, #32
 80016c4:	d109      	bne.n	80016da <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	015a      	lsls	r2, r3, #5
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d2:	461a      	mov	r2, r3
 80016d4:	2320      	movs	r3, #32
 80016d6:	6093      	str	r3, [r2, #8]
 80016d8:	e072      	b.n	80017c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d11a      	bne.n	8001726 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016fc:	461a      	mov	r2, r3
 80016fe:	2308      	movs	r3, #8
 8001700:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	212c      	movs	r1, #44	; 0x2c
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4413      	add	r3, r2
 800170e:	3361      	adds	r3, #97	; 0x61
 8001710:	2205      	movs	r2, #5
 8001712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f002 fcea 	bl	80040f8 <USB_HC_Halt>
 8001724:	e04c      	b.n	80017c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	015a      	lsls	r2, r3, #5
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4413      	add	r3, r2
 800172e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800173c:	d11b      	bne.n	8001776 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	015a      	lsls	r2, r3, #5
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4413      	add	r3, r2
 8001746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800174a:	461a      	mov	r2, r3
 800174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001750:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	212c      	movs	r1, #44	; 0x2c
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	3361      	adds	r3, #97	; 0x61
 8001760:	2208      	movs	r2, #8
 8001762:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fcc2 	bl	80040f8 <USB_HC_Halt>
 8001774:	e024      	b.n	80017c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4413      	add	r3, r2
 800177e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001788:	2b80      	cmp	r3, #128	; 0x80
 800178a:	d119      	bne.n	80017c0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	015a      	lsls	r2, r3, #5
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4413      	add	r3, r2
 8001794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001798:	461a      	mov	r2, r3
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	212c      	movs	r1, #44	; 0x2c
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	3361      	adds	r3, #97	; 0x61
 80017ac:	2206      	movs	r2, #6
 80017ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 fc9c 	bl	80040f8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	015a      	lsls	r2, r3, #5
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d6:	d112      	bne.n	80017fe <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fc88 	bl	80040f8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	015a      	lsls	r2, r3, #5
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f4:	461a      	mov	r2, r3
 80017f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017fa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80017fc:	e24e      	b.n	8001c9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4413      	add	r3, r2
 8001806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b01      	cmp	r3, #1
 8001812:	f040 80df 	bne.w	80019d4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d019      	beq.n	8001852 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3348      	adds	r3, #72	; 0x48
 800182c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	0159      	lsls	r1, r3, #5
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	440b      	add	r3, r1
 8001836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001840:	1ad2      	subs	r2, r2, r3
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	202c      	movs	r0, #44	; 0x2c
 8001848:	fb00 f303 	mul.w	r3, r0, r3
 800184c:	440b      	add	r3, r1
 800184e:	3350      	adds	r3, #80	; 0x50
 8001850:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3361      	adds	r3, #97	; 0x61
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	335c      	adds	r3, #92	; 0x5c
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4413      	add	r3, r2
 800187e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001882:	461a      	mov	r2, r3
 8001884:	2301      	movs	r3, #1
 8001886:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	333f      	adds	r3, #63	; 0x3f
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d009      	beq.n	80018b0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	212c      	movs	r1, #44	; 0x2c
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	333f      	adds	r3, #63	; 0x3f
 80018aa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d111      	bne.n	80018d4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fc1c 	bl	80040f8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	015a      	lsls	r2, r3, #5
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018cc:	461a      	mov	r2, r3
 80018ce:	2310      	movs	r3, #16
 80018d0:	6093      	str	r3, [r2, #8]
 80018d2:	e03a      	b.n	800194a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	333f      	adds	r3, #63	; 0x3f
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d009      	beq.n	80018fc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	212c      	movs	r1, #44	; 0x2c
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	333f      	adds	r3, #63	; 0x3f
 80018f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d126      	bne.n	800194a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	015a      	lsls	r2, r3, #5
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4413      	add	r3, r2
 8001904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	0151      	lsls	r1, r2, #5
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	440a      	add	r2, r1
 8001912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001916:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800191a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	212c      	movs	r1, #44	; 0x2c
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	3360      	adds	r3, #96	; 0x60
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	b2d9      	uxtb	r1, r3
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	202c      	movs	r0, #44	; 0x2c
 8001938:	fb00 f303 	mul.w	r3, r0, r3
 800193c:	4413      	add	r3, r2
 800193e:	3360      	adds	r3, #96	; 0x60
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f002 fe2e 	bl	80045a6 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d12b      	bne.n	80019aa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	212c      	movs	r1, #44	; 0x2c
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	3348      	adds	r3, #72	; 0x48
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	202c      	movs	r0, #44	; 0x2c
 8001968:	fb00 f202 	mul.w	r2, r0, r2
 800196c:	440a      	add	r2, r1
 800196e:	3240      	adds	r2, #64	; 0x40
 8001970:	8812      	ldrh	r2, [r2, #0]
 8001972:	fbb3 f3f2 	udiv	r3, r3, r2
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 818e 	beq.w	8001c9c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	212c      	movs	r1, #44	; 0x2c
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	3354      	adds	r3, #84	; 0x54
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	f083 0301 	eor.w	r3, r3, #1
 8001994:	b2d8      	uxtb	r0, r3
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	3354      	adds	r3, #84	; 0x54
 80019a4:	4602      	mov	r2, r0
 80019a6:	701a      	strb	r2, [r3, #0]
}
 80019a8:	e178      	b.n	8001c9c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	3354      	adds	r3, #84	; 0x54
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	f083 0301 	eor.w	r3, r3, #1
 80019be:	b2d8      	uxtb	r0, r3
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	212c      	movs	r1, #44	; 0x2c
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	3354      	adds	r3, #84	; 0x54
 80019ce:	4602      	mov	r2, r0
 80019d0:	701a      	strb	r2, [r3, #0]
}
 80019d2:	e163      	b.n	8001c9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	f040 80f6 	bne.w	8001bd8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	212c      	movs	r1, #44	; 0x2c
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	3361      	adds	r3, #97	; 0x61
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d109      	bne.n	8001a14 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	212c      	movs	r1, #44	; 0x2c
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3360      	adds	r3, #96	; 0x60
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e0c9      	b.n	8001ba8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	212c      	movs	r1, #44	; 0x2c
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	3361      	adds	r3, #97	; 0x61
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d109      	bne.n	8001a3c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	3360      	adds	r3, #96	; 0x60
 8001a36:	2205      	movs	r2, #5
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e0b5      	b.n	8001ba8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	3361      	adds	r3, #97	; 0x61
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b06      	cmp	r3, #6
 8001a4e:	d009      	beq.n	8001a64 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3361      	adds	r3, #97	; 0x61
 8001a5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d150      	bne.n	8001b06 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	335c      	adds	r3, #92	; 0x5c
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	202c      	movs	r0, #44	; 0x2c
 8001a7c:	fb00 f303 	mul.w	r3, r0, r3
 8001a80:	440b      	add	r3, r1
 8001a82:	335c      	adds	r3, #92	; 0x5c
 8001a84:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	212c      	movs	r1, #44	; 0x2c
 8001a8c:	fb01 f303 	mul.w	r3, r1, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	335c      	adds	r3, #92	; 0x5c
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d912      	bls.n	8001ac0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	335c      	adds	r3, #92	; 0x5c
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	212c      	movs	r1, #44	; 0x2c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3360      	adds	r3, #96	; 0x60
 8001aba:	2204      	movs	r2, #4
 8001abc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001abe:	e073      	b.n	8001ba8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	212c      	movs	r1, #44	; 0x2c
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	3360      	adds	r3, #96	; 0x60
 8001ace:	2202      	movs	r2, #2
 8001ad0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	015a      	lsls	r2, r3, #5
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ae8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afe:	461a      	mov	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b04:	e050      	b.n	8001ba8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	212c      	movs	r1, #44	; 0x2c
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	3361      	adds	r3, #97	; 0x61
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d122      	bne.n	8001b60 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	212c      	movs	r1, #44	; 0x2c
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	3360      	adds	r3, #96	; 0x60
 8001b28:	2202      	movs	r2, #2
 8001b2a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b42:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b4a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b58:	461a      	mov	r2, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e023      	b.n	8001ba8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3361      	adds	r3, #97	; 0x61
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b07      	cmp	r3, #7
 8001b72:	d119      	bne.n	8001ba8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	212c      	movs	r1, #44	; 0x2c
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	335c      	adds	r3, #92	; 0x5c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	202c      	movs	r0, #44	; 0x2c
 8001b8c:	fb00 f303 	mul.w	r3, r0, r3
 8001b90:	440b      	add	r3, r1
 8001b92:	335c      	adds	r3, #92	; 0x5c
 8001b94:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3360      	adds	r3, #96	; 0x60
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	015a      	lsls	r2, r3, #5
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	b2d9      	uxtb	r1, r3
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	202c      	movs	r0, #44	; 0x2c
 8001bc4:	fb00 f303 	mul.w	r3, r0, r3
 8001bc8:	4413      	add	r3, r2
 8001bca:	3360      	adds	r3, #96	; 0x60
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f002 fce8 	bl	80045a6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001bd6:	e061      	b.n	8001c9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b10      	cmp	r3, #16
 8001bec:	d156      	bne.n	8001c9c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	212c      	movs	r1, #44	; 0x2c
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	333f      	adds	r3, #63	; 0x3f
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d111      	bne.n	8001c26 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	212c      	movs	r1, #44	; 0x2c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	335c      	adds	r3, #92	; 0x5c
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 fa6a 	bl	80040f8 <USB_HC_Halt>
 8001c24:	e031      	b.n	8001c8a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	333f      	adds	r3, #63	; 0x3f
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	333f      	adds	r3, #63	; 0x3f
 8001c48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d11d      	bne.n	8001c8a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	335c      	adds	r3, #92	; 0x5c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d110      	bne.n	8001c8a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3361      	adds	r3, #97	; 0x61
 8001c76:	2203      	movs	r2, #3
 8001c78:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f002 fa37 	bl	80040f8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c96:	461a      	mov	r2, r3
 8001c98:	2310      	movs	r3, #16
 8001c9a:	6093      	str	r3, [r2, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d11a      	bne.n	8001d0a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3361      	adds	r3, #97	; 0x61
 8001cf4:	2206      	movs	r2, #6
 8001cf6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 f9f8 	bl	80040f8 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001d08:	e331      	b.n	800236e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	d12e      	bne.n	8001d7e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2320      	movs	r3, #32
 8001d30:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	333d      	adds	r3, #61	; 0x3d
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	f040 8313 	bne.w	800236e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	333d      	adds	r3, #61	; 0x3d
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	3360      	adds	r3, #96	; 0x60
 8001d68:	2202      	movs	r2, #2
 8001d6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 f9be 	bl	80040f8 <USB_HC_Halt>
}
 8001d7c:	e2f7      	b.n	800236e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d94:	d112      	bne.n	8001dbc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da2:	461a      	mov	r2, r3
 8001da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 f99f 	bl	80040f8 <USB_HC_Halt>
}
 8001dba:	e2d8      	b.n	800236e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d140      	bne.n	8001e54 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	212c      	movs	r1, #44	; 0x2c
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	335c      	adds	r3, #92	; 0x5c
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d111      	bne.n	8001e1e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	333d      	adds	r3, #61	; 0x3d
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2340      	movs	r3, #64	; 0x40
 8001e1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	212c      	movs	r1, #44	; 0x2c
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3361      	adds	r3, #97	; 0x61
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 f953 	bl	80040f8 <USB_HC_Halt>
}
 8001e52:	e28c      	b.n	800236e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b40      	cmp	r3, #64	; 0x40
 8001e68:	d12c      	bne.n	8001ec4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	3361      	adds	r3, #97	; 0x61
 8001e78:	2204      	movs	r2, #4
 8001e7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	333d      	adds	r3, #61	; 0x3d
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	335c      	adds	r3, #92	; 0x5c
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 f924 	bl	80040f8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2340      	movs	r3, #64	; 0x40
 8001ec0:	6093      	str	r3, [r2, #8]
}
 8001ec2:	e254      	b.n	800236e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11a      	bne.n	8001f10 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2308      	movs	r3, #8
 8001eea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	212c      	movs	r1, #44	; 0x2c
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3361      	adds	r3, #97	; 0x61
 8001efa:	2205      	movs	r2, #5
 8001efc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 f8f5 	bl	80040f8 <USB_HC_Halt>
}
 8001f0e:	e22e      	b.n	800236e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d140      	bne.n	8001fa8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	212c      	movs	r1, #44	; 0x2c
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	335c      	adds	r3, #92	; 0x5c
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	212c      	movs	r1, #44	; 0x2c
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	3361      	adds	r3, #97	; 0x61
 8001f46:	2203      	movs	r2, #3
 8001f48:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	333d      	adds	r3, #61	; 0x3d
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d112      	bne.n	8001f84 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	333c      	adds	r3, #60	; 0x3c
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d108      	bne.n	8001f84 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	333d      	adds	r3, #61	; 0x3d
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 f8b2 	bl	80040f8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2310      	movs	r3, #16
 8001fa4:	6093      	str	r3, [r2, #8]
}
 8001fa6:	e1e2      	b.n	800236e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	2b80      	cmp	r3, #128	; 0x80
 8001fbc:	d164      	bne.n	8002088 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d111      	bne.n	8001fea <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	212c      	movs	r1, #44	; 0x2c
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3361      	adds	r3, #97	; 0x61
 8001fd4:	2206      	movs	r2, #6
 8001fd6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 f888 	bl	80040f8 <USB_HC_Halt>
 8001fe8:	e044      	b.n	8002074 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	335c      	adds	r3, #92	; 0x5c
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	202c      	movs	r0, #44	; 0x2c
 8002002:	fb00 f303 	mul.w	r3, r0, r3
 8002006:	440b      	add	r3, r1
 8002008:	335c      	adds	r3, #92	; 0x5c
 800200a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	335c      	adds	r3, #92	; 0x5c
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d920      	bls.n	8002062 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	335c      	adds	r3, #92	; 0x5c
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	3360      	adds	r3, #96	; 0x60
 8002040:	2204      	movs	r2, #4
 8002042:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	b2d9      	uxtb	r1, r3
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	202c      	movs	r0, #44	; 0x2c
 800204e:	fb00 f303 	mul.w	r3, r0, r3
 8002052:	4413      	add	r3, r2
 8002054:	3360      	adds	r3, #96	; 0x60
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f002 faa3 	bl	80045a6 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002060:	e008      	b.n	8002074 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	212c      	movs	r1, #44	; 0x2c
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	3360      	adds	r3, #96	; 0x60
 8002070:	2202      	movs	r2, #2
 8002072:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	461a      	mov	r2, r3
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	6093      	str	r3, [r2, #8]
}
 8002086:	e172      	b.n	800236e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209e:	d11b      	bne.n	80020d8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	3361      	adds	r3, #97	; 0x61
 80020ae:	2208      	movs	r2, #8
 80020b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 f81b 	bl	80040f8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ce:	461a      	mov	r2, r3
 80020d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d4:	6093      	str	r3, [r2, #8]
}
 80020d6:	e14a      	b.n	800236e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	f040 813f 	bne.w	800236e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3361      	adds	r3, #97	; 0x61
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d17d      	bne.n	8002200 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3360      	adds	r3, #96	; 0x60
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	333f      	adds	r3, #63	; 0x3f
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d00a      	beq.n	8002140 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	333f      	adds	r3, #63	; 0x3f
 8002138:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800213a:	2b03      	cmp	r3, #3
 800213c:	f040 8100 	bne.w	8002340 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d113      	bne.n	8002170 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3355      	adds	r3, #85	; 0x55
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	f083 0301 	eor.w	r3, r3, #1
 800215c:	b2d8      	uxtb	r0, r3
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3355      	adds	r3, #85	; 0x55
 800216c:	4602      	mov	r2, r0
 800216e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b01      	cmp	r3, #1
 8002176:	f040 80e3 	bne.w	8002340 <HCD_HC_OUT_IRQHandler+0x69c>
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	334c      	adds	r3, #76	; 0x4c
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80d8 	beq.w	8002340 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	334c      	adds	r3, #76	; 0x4c
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	202c      	movs	r0, #44	; 0x2c
 80021a6:	fb00 f202 	mul.w	r2, r0, r2
 80021aa:	440a      	add	r2, r1
 80021ac:	3240      	adds	r2, #64	; 0x40
 80021ae:	8812      	ldrh	r2, [r2, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	3b01      	subs	r3, #1
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	202c      	movs	r0, #44	; 0x2c
 80021ba:	fb00 f202 	mul.w	r2, r0, r2
 80021be:	440a      	add	r2, r1
 80021c0:	3240      	adds	r2, #64	; 0x40
 80021c2:	8812      	ldrh	r2, [r2, #0]
 80021c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80b5 	beq.w	8002340 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3355      	adds	r3, #85	; 0x55
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	f083 0301 	eor.w	r3, r3, #1
 80021ea:	b2d8      	uxtb	r0, r3
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3355      	adds	r3, #85	; 0x55
 80021fa:	4602      	mov	r2, r0
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e09f      	b.n	8002340 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3361      	adds	r3, #97	; 0x61
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d109      	bne.n	8002228 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	212c      	movs	r1, #44	; 0x2c
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	4413      	add	r3, r2
 8002220:	3360      	adds	r3, #96	; 0x60
 8002222:	2202      	movs	r2, #2
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e08b      	b.n	8002340 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	212c      	movs	r1, #44	; 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	3361      	adds	r3, #97	; 0x61
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d109      	bne.n	8002250 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3360      	adds	r3, #96	; 0x60
 800224a:	2202      	movs	r2, #2
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e077      	b.n	8002340 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3361      	adds	r3, #97	; 0x61
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d109      	bne.n	8002278 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3360      	adds	r3, #96	; 0x60
 8002272:	2205      	movs	r2, #5
 8002274:	701a      	strb	r2, [r3, #0]
 8002276:	e063      	b.n	8002340 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	212c      	movs	r1, #44	; 0x2c
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3361      	adds	r3, #97	; 0x61
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b06      	cmp	r3, #6
 800228a:	d009      	beq.n	80022a0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3361      	adds	r3, #97	; 0x61
 800229a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800229c:	2b08      	cmp	r3, #8
 800229e:	d14f      	bne.n	8002340 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	335c      	adds	r3, #92	; 0x5c
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	202c      	movs	r0, #44	; 0x2c
 80022b8:	fb00 f303 	mul.w	r3, r0, r3
 80022bc:	440b      	add	r3, r1
 80022be:	335c      	adds	r3, #92	; 0x5c
 80022c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	335c      	adds	r3, #92	; 0x5c
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d912      	bls.n	80022fc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	335c      	adds	r3, #92	; 0x5c
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3360      	adds	r3, #96	; 0x60
 80022f6:	2204      	movs	r2, #4
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e021      	b.n	8002340 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	3360      	adds	r3, #96	; 0x60
 800230a:	2202      	movs	r2, #2
 800230c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002324:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800232c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	461a      	mov	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234c:	461a      	mov	r2, r3
 800234e:	2302      	movs	r3, #2
 8002350:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	b2d9      	uxtb	r1, r3
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	202c      	movs	r0, #44	; 0x2c
 800235c:	fb00 f303 	mul.w	r3, r0, r3
 8002360:	4413      	add	r3, r2
 8002362:	3360      	adds	r3, #96	; 0x60
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f002 f91c 	bl	80045a6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800236e:	bf00      	nop
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b08a      	sub	sp, #40	; 0x28
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	0c5b      	lsrs	r3, r3, #17
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d004      	beq.n	80023bc <HCD_RXQLVL_IRQHandler+0x46>
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	f000 80a9 	beq.w	800250c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80023ba:	e0aa      	b.n	8002512 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80a6 	beq.w	8002510 <HCD_RXQLVL_IRQHandler+0x19a>
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	3344      	adds	r3, #68	; 0x44
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 809b 	beq.w	8002510 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3350      	adds	r3, #80	; 0x50
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	441a      	add	r2, r3
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	202c      	movs	r0, #44	; 0x2c
 80023f4:	fb00 f303 	mul.w	r3, r0, r3
 80023f8:	440b      	add	r3, r1
 80023fa:	334c      	adds	r3, #76	; 0x4c
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d87a      	bhi.n	80024f8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	3344      	adds	r3, #68	; 0x44
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	b292      	uxth	r2, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f001 fda8 	bl	8003f70 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3344      	adds	r3, #68	; 0x44
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	441a      	add	r2, r3
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	202c      	movs	r0, #44	; 0x2c
 800243a:	fb00 f303 	mul.w	r3, r0, r3
 800243e:	440b      	add	r3, r1
 8002440:	3344      	adds	r3, #68	; 0x44
 8002442:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	3350      	adds	r3, #80	; 0x50
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	441a      	add	r2, r3
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	202c      	movs	r0, #44	; 0x2c
 800245e:	fb00 f303 	mul.w	r3, r0, r3
 8002462:	440b      	add	r3, r1
 8002464:	3350      	adds	r3, #80	; 0x50
 8002466:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	0cdb      	lsrs	r3, r3, #19
 8002478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3340      	adds	r3, #64	; 0x40
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4293      	cmp	r3, r2
 8002494:	d13c      	bne.n	8002510 <HCD_RXQLVL_IRQHandler+0x19a>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d039      	beq.n	8002510 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024b2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024ba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	461a      	mov	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3354      	adds	r3, #84	; 0x54
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f083 0301 	eor.w	r3, r3, #1
 80024e2:	b2d8      	uxtb	r0, r3
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3354      	adds	r3, #84	; 0x54
 80024f2:	4602      	mov	r2, r0
 80024f4:	701a      	strb	r2, [r3, #0]
      break;
 80024f6:	e00b      	b.n	8002510 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	3360      	adds	r3, #96	; 0x60
 8002506:	2204      	movs	r2, #4
 8002508:	701a      	strb	r2, [r3, #0]
      break;
 800250a:	e001      	b.n	8002510 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800250c:	bf00      	nop
 800250e:	e000      	b.n	8002512 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002510:	bf00      	nop
  }
}
 8002512:	bf00      	nop
 8002514:	3728      	adds	r7, #40	; 0x28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002546:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d10b      	bne.n	800256a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d102      	bne.n	8002562 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f002 f806 	bl	800456e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b08      	cmp	r3, #8
 8002572:	d132      	bne.n	80025da <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f043 0308 	orr.w	r3, r3, #8
 800257a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b04      	cmp	r3, #4
 8002584:	d126      	bne.n	80025d4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d113      	bne.n	80025b6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002598:	d106      	bne.n	80025a8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2102      	movs	r1, #2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 fd5e 	bl	8004062 <USB_InitFSLSPClkSel>
 80025a6:	e011      	b.n	80025cc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 fd57 	bl	8004062 <USB_InitFSLSPClkSel>
 80025b4:	e00a      	b.n	80025cc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d106      	bne.n	80025cc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025c4:	461a      	mov	r2, r3
 80025c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80025ca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f001 fff8 	bl	80045c2 <HAL_HCD_PortEnabled_Callback>
 80025d2:	e002      	b.n	80025da <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f002 f802 	bl	80045de <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d103      	bne.n	80025ec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f043 0320 	orr.w	r3, r3, #32
 80025ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025f2:	461a      	mov	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e12b      	b.n	800286a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe f9dc 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2224      	movs	r2, #36	; 0x24
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002664:	f001 fa20 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 8002668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4a81      	ldr	r2, [pc, #516]	; (8002874 <HAL_I2C_Init+0x274>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d807      	bhi.n	8002684 <HAL_I2C_Init+0x84>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a80      	ldr	r2, [pc, #512]	; (8002878 <HAL_I2C_Init+0x278>)
 8002678:	4293      	cmp	r3, r2
 800267a:	bf94      	ite	ls
 800267c:	2301      	movls	r3, #1
 800267e:	2300      	movhi	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e006      	b.n	8002692 <HAL_I2C_Init+0x92>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a7d      	ldr	r2, [pc, #500]	; (800287c <HAL_I2C_Init+0x27c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	bf94      	ite	ls
 800268c:	2301      	movls	r3, #1
 800268e:	2300      	movhi	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e0e7      	b.n	800286a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4a78      	ldr	r2, [pc, #480]	; (8002880 <HAL_I2C_Init+0x280>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0c9b      	lsrs	r3, r3, #18
 80026a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a6a      	ldr	r2, [pc, #424]	; (8002874 <HAL_I2C_Init+0x274>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d802      	bhi.n	80026d4 <HAL_I2C_Init+0xd4>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3301      	adds	r3, #1
 80026d2:	e009      	b.n	80026e8 <HAL_I2C_Init+0xe8>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	4a69      	ldr	r2, [pc, #420]	; (8002884 <HAL_I2C_Init+0x284>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	099b      	lsrs	r3, r3, #6
 80026e6:	3301      	adds	r3, #1
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	430b      	orrs	r3, r1
 80026ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	495c      	ldr	r1, [pc, #368]	; (8002874 <HAL_I2C_Init+0x274>)
 8002704:	428b      	cmp	r3, r1
 8002706:	d819      	bhi.n	800273c <HAL_I2C_Init+0x13c>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1e59      	subs	r1, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fbb1 f3f3 	udiv	r3, r1, r3
 8002716:	1c59      	adds	r1, r3, #1
 8002718:	f640 73fc 	movw	r3, #4092	; 0xffc
 800271c:	400b      	ands	r3, r1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_I2C_Init+0x138>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1e59      	subs	r1, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002730:	3301      	adds	r3, #1
 8002732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002736:	e051      	b.n	80027dc <HAL_I2C_Init+0x1dc>
 8002738:	2304      	movs	r3, #4
 800273a:	e04f      	b.n	80027dc <HAL_I2C_Init+0x1dc>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <HAL_I2C_Init+0x168>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1e58      	subs	r0, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	440b      	add	r3, r1
 8002752:	fbb0 f3f3 	udiv	r3, r0, r3
 8002756:	3301      	adds	r3, #1
 8002758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	e012      	b.n	800278e <HAL_I2C_Init+0x18e>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e58      	subs	r0, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	0099      	lsls	r1, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	fbb0 f3f3 	udiv	r3, r0, r3
 800277e:	3301      	adds	r3, #1
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Init+0x196>
 8002792:	2301      	movs	r3, #1
 8002794:	e022      	b.n	80027dc <HAL_I2C_Init+0x1dc>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10e      	bne.n	80027bc <HAL_I2C_Init+0x1bc>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1e58      	subs	r0, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	440b      	add	r3, r1
 80027ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ba:	e00f      	b.n	80027dc <HAL_I2C_Init+0x1dc>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e58      	subs	r0, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	0099      	lsls	r1, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	6809      	ldr	r1, [r1, #0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69da      	ldr	r2, [r3, #28]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800280a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6911      	ldr	r1, [r2, #16]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68d2      	ldr	r2, [r2, #12]
 8002816:	4311      	orrs	r1, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	430b      	orrs	r3, r1
 800281e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	000186a0 	.word	0x000186a0
 8002878:	001e847f 	.word	0x001e847f
 800287c:	003d08ff 	.word	0x003d08ff
 8002880:	431bde83 	.word	0x431bde83
 8002884:	10624dd3 	.word	0x10624dd3

08002888 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e128      	b.n	8002aec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a90      	ldr	r2, [pc, #576]	; (8002af4 <HAL_I2S_Init+0x26c>)
 80028b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe f8dd 	bl	8000a74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028d0:	f023 030f 	bic.w	r3, r3, #15
 80028d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2202      	movs	r2, #2
 80028dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d060      	beq.n	80029a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80028ee:	2310      	movs	r3, #16
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e001      	b.n	80028f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d802      	bhi.n	8002906 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002906:	2001      	movs	r0, #1
 8002908:	f001 f9c4 	bl	8003c94 <HAL_RCCEx_GetPeriphCLKFreq>
 800290c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002916:	d125      	bne.n	8002964 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d010      	beq.n	8002942 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	fbb2 f2f3 	udiv	r2, r2, r3
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	461a      	mov	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	3305      	adds	r3, #5
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	e01f      	b.n	8002982 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	fbb2 f2f3 	udiv	r2, r2, r3
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	461a      	mov	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	3305      	adds	r3, #5
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	e00e      	b.n	8002982 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	fbb2 f2f3 	udiv	r2, r2, r3
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	461a      	mov	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	3305      	adds	r3, #5
 8002980:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4a5c      	ldr	r2, [pc, #368]	; (8002af8 <HAL_I2S_Init+0x270>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e003      	b.n	80029b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80029a8:	2302      	movs	r3, #2
 80029aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d902      	bls.n	80029bc <HAL_I2S_Init+0x134>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	2bff      	cmp	r3, #255	; 0xff
 80029ba:	d907      	bls.n	80029cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	f043 0210 	orr.w	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e08f      	b.n	8002aec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	ea42 0103 	orr.w	r1, r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	430a      	orrs	r2, r1
 80029de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80029ea:	f023 030f 	bic.w	r3, r3, #15
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6851      	ldr	r1, [r2, #4]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6892      	ldr	r2, [r2, #8]
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68d2      	ldr	r2, [r2, #12]
 80029fc:	4311      	orrs	r1, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6992      	ldr	r2, [r2, #24]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a0e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d161      	bne.n	8002adc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a38      	ldr	r2, [pc, #224]	; (8002afc <HAL_I2S_Init+0x274>)
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a37      	ldr	r2, [pc, #220]	; (8002b00 <HAL_I2S_Init+0x278>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_I2S_Init+0x1a4>
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <HAL_I2S_Init+0x27c>)
 8002a2a:	e001      	b.n	8002a30 <HAL_I2S_Init+0x1a8>
 8002a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	4932      	ldr	r1, [pc, #200]	; (8002b00 <HAL_I2S_Init+0x278>)
 8002a38:	428a      	cmp	r2, r1
 8002a3a:	d101      	bne.n	8002a40 <HAL_I2S_Init+0x1b8>
 8002a3c:	4a31      	ldr	r2, [pc, #196]	; (8002b04 <HAL_I2S_Init+0x27c>)
 8002a3e:	e001      	b.n	8002a44 <HAL_I2S_Init+0x1bc>
 8002a40:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002a44:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a48:	f023 030f 	bic.w	r3, r3, #15
 8002a4c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2b      	ldr	r2, [pc, #172]	; (8002b00 <HAL_I2S_Init+0x278>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_I2S_Init+0x1d4>
 8002a58:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_I2S_Init+0x27c>)
 8002a5a:	e001      	b.n	8002a60 <HAL_I2S_Init+0x1d8>
 8002a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a60:	2202      	movs	r2, #2
 8002a62:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a25      	ldr	r2, [pc, #148]	; (8002b00 <HAL_I2S_Init+0x278>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2S_Init+0x1ea>
 8002a6e:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <HAL_I2S_Init+0x27c>)
 8002a70:	e001      	b.n	8002a76 <HAL_I2S_Init+0x1ee>
 8002a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a82:	d003      	beq.n	8002a8c <HAL_I2S_Init+0x204>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	e001      	b.n	8002a98 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002aac:	4313      	orrs	r3, r2
 8002aae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	897b      	ldrh	r3, [r7, #10]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ac4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <HAL_I2S_Init+0x278>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d101      	bne.n	8002ad4 <HAL_I2S_Init+0x24c>
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <HAL_I2S_Init+0x27c>)
 8002ad2:	e001      	b.n	8002ad8 <HAL_I2S_Init+0x250>
 8002ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ad8:	897a      	ldrh	r2, [r7, #10]
 8002ada:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	08002bff 	.word	0x08002bff
 8002af8:	cccccccd 	.word	0xcccccccd
 8002afc:	08002d15 	.word	0x08002d15
 8002b00:	40003800 	.word	0x40003800
 8002b04:	40003400 	.word	0x40003400

08002b08 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	881a      	ldrh	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	1c9a      	adds	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10e      	bne.n	8002b98 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b88:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffb8 	bl	8002b08 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	1c9a      	adds	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10e      	bne.n	8002bf6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002be6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff93 	bl	8002b1c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d13a      	bne.n	8002c90 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d109      	bne.n	8002c38 <I2S_IRQHandler+0x3a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d102      	bne.n	8002c38 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffb4 	bl	8002ba0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	d126      	bne.n	8002c90 <I2S_IRQHandler+0x92>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d11f      	bne.n	8002c90 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f043 0202 	orr.w	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ff50 	bl	8002b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d136      	bne.n	8002d0a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d109      	bne.n	8002cba <I2S_IRQHandler+0xbc>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	2b80      	cmp	r3, #128	; 0x80
 8002cb2:	d102      	bne.n	8002cba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff45 	bl	8002b44 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d122      	bne.n	8002d0a <I2S_IRQHandler+0x10c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d11b      	bne.n	8002d0a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ce0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	f043 0204 	orr.w	r2, r3, #4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff13 	bl	8002b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a92      	ldr	r2, [pc, #584]	; (8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002d2e:	4b92      	ldr	r3, [pc, #584]	; (8002f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d30:	e001      	b.n	8002d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002d32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a8b      	ldr	r2, [pc, #556]	; (8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002d4c:	4b8a      	ldr	r3, [pc, #552]	; (8002f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d4e:	e001      	b.n	8002d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d60:	d004      	beq.n	8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 8099 	bne.w	8002e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d107      	bne.n	8002d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f925 	bl	8002fd0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d107      	bne.n	8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f9c8 	bl	8003130 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b40      	cmp	r3, #64	; 0x40
 8002da8:	d13a      	bne.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d035      	beq.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6e      	ldr	r2, [pc, #440]	; (8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002dbe:	4b6e      	ldr	r3, [pc, #440]	; (8002f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dc0:	e001      	b.n	8002dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4969      	ldr	r1, [pc, #420]	; (8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dce:	428b      	cmp	r3, r1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002dd2:	4b69      	ldr	r3, [pc, #420]	; (8002f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dd4:	e001      	b.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dde:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f043 0202 	orr.w	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff fe88 	bl	8002b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	f040 80c3 	bne.w	8002fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80bd 	beq.w	8002fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e46:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a49      	ldr	r2, [pc, #292]	; (8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d101      	bne.n	8002e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002e52:	4b49      	ldr	r3, [pc, #292]	; (8002f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e54:	e001      	b.n	8002e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002e56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4944      	ldr	r1, [pc, #272]	; (8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e62:	428b      	cmp	r3, r1
 8002e64:	d101      	bne.n	8002e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002e66:	4b44      	ldr	r3, [pc, #272]	; (8002f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e68:	e001      	b.n	8002e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e72:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e74:	2300      	movs	r3, #0
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f043 0204 	orr.w	r2, r3, #4
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff fe4a 	bl	8002b30 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e9c:	e089      	b.n	8002fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d107      	bne.n	8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8be 	bl	8003034 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d107      	bne.n	8002ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f8fd 	bl	80030cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d12f      	bne.n	8002f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d02a      	beq.n	8002f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ef4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f02:	e001      	b.n	8002f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4919      	ldr	r1, [pc, #100]	; (8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f10:	428b      	cmp	r3, r1
 8002f12:	d101      	bne.n	8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f16:	e001      	b.n	8002f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f20:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f043 0202 	orr.w	r2, r3, #2
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fdfa 	bl	8002b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d136      	bne.n	8002fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d031      	beq.n	8002fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a07      	ldr	r2, [pc, #28]	; (8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f5c:	e001      	b.n	8002f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4902      	ldr	r1, [pc, #8]	; (8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f6a:	428b      	cmp	r3, r1
 8002f6c:	d106      	bne.n	8002f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002f6e:	4b02      	ldr	r3, [pc, #8]	; (8002f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f70:	e006      	b.n	8002f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002f72:	bf00      	nop
 8002f74:	40003800 	.word	0x40003800
 8002f78:	40003400 	.word	0x40003400
 8002f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f84:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f043 0204 	orr.w	r2, r3, #4
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fdc0 	bl	8002b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fb0:	e000      	b.n	8002fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fb2:	bf00      	nop
}
 8002fb4:	bf00      	nop
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	1c99      	adds	r1, r3, #2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6251      	str	r1, [r2, #36]	; 0x24
 8002fe2:	881a      	ldrh	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d113      	bne.n	800302a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003010:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ffc9 	bl	8002fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c99      	adds	r1, r3, #2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6251      	str	r1, [r2, #36]	; 0x24
 8003046:	8819      	ldrh	r1, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <I2SEx_TxISR_I2SExt+0x90>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <I2SEx_TxISR_I2SExt+0x22>
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003054:	e001      	b.n	800305a <I2SEx_TxISR_I2SExt+0x26>
 8003056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800305a:	460a      	mov	r2, r1
 800305c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d121      	bne.n	80030ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <I2SEx_TxISR_I2SExt+0x90>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d101      	bne.n	8003084 <I2SEx_TxISR_I2SExt+0x50>
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003082:	e001      	b.n	8003088 <I2SEx_TxISR_I2SExt+0x54>
 8003084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	490d      	ldr	r1, [pc, #52]	; (80030c4 <I2SEx_TxISR_I2SExt+0x90>)
 8003090:	428b      	cmp	r3, r1
 8003092:	d101      	bne.n	8003098 <I2SEx_TxISR_I2SExt+0x64>
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003096:	e001      	b.n	800309c <I2SEx_TxISR_I2SExt+0x68>
 8003098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800309c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ff81 	bl	8002fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40003800 	.word	0x40003800
 80030c8:	40003400 	.word	0x40003400

080030cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68d8      	ldr	r0, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	1c99      	adds	r1, r3, #2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80030e4:	b282      	uxth	r2, r0
 80030e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d113      	bne.n	8003128 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800310e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff4a 	bl	8002fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a20      	ldr	r2, [pc, #128]	; (80031c0 <I2SEx_RxISR_I2SExt+0x90>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <I2SEx_RxISR_I2SExt+0x16>
 8003142:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <I2SEx_RxISR_I2SExt+0x94>)
 8003144:	e001      	b.n	800314a <I2SEx_RxISR_I2SExt+0x1a>
 8003146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800314a:	68d8      	ldr	r0, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	1c99      	adds	r1, r3, #2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003156:	b282      	uxth	r2, r0
 8003158:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d121      	bne.n	80031b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <I2SEx_RxISR_I2SExt+0x90>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <I2SEx_RxISR_I2SExt+0x50>
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <I2SEx_RxISR_I2SExt+0x94>)
 800317e:	e001      	b.n	8003184 <I2SEx_RxISR_I2SExt+0x54>
 8003180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	490d      	ldr	r1, [pc, #52]	; (80031c0 <I2SEx_RxISR_I2SExt+0x90>)
 800318c:	428b      	cmp	r3, r1
 800318e:	d101      	bne.n	8003194 <I2SEx_RxISR_I2SExt+0x64>
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <I2SEx_RxISR_I2SExt+0x94>)
 8003192:	e001      	b.n	8003198 <I2SEx_RxISR_I2SExt+0x68>
 8003194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003198:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800319c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d106      	bne.n	80031b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff ff03 	bl	8002fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40003800 	.word	0x40003800
 80031c4:	40003400 	.word	0x40003400

080031c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e267      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d075      	beq.n	80032d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e6:	4b88      	ldr	r3, [pc, #544]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d00c      	beq.n	800320c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f2:	4b85      	ldr	r3, [pc, #532]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d112      	bne.n	8003224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fe:	4b82      	ldr	r3, [pc, #520]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320a:	d10b      	bne.n	8003224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	4b7e      	ldr	r3, [pc, #504]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05b      	beq.n	80032d0 <HAL_RCC_OscConfig+0x108>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d157      	bne.n	80032d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e242      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d106      	bne.n	800323c <HAL_RCC_OscConfig+0x74>
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a75      	ldr	r2, [pc, #468]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e01d      	b.n	8003278 <HAL_RCC_OscConfig+0xb0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0x98>
 8003246:	4b70      	ldr	r3, [pc, #448]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6f      	ldr	r2, [pc, #444]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6c      	ldr	r2, [pc, #432]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e00b      	b.n	8003278 <HAL_RCC_OscConfig+0xb0>
 8003260:	4b69      	ldr	r3, [pc, #420]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a68      	ldr	r2, [pc, #416]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a65      	ldr	r2, [pc, #404]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fd fd96 	bl	8000db0 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003288:	f7fd fd92 	bl	8000db0 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e207      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	4b5b      	ldr	r3, [pc, #364]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0xc0>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fd fd82 	bl	8000db0 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fd fd7e 	bl	8000db0 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1f3      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c2:	4b51      	ldr	r3, [pc, #324]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0xe8>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d063      	beq.n	80033a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032de:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d11c      	bne.n	8003330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f6:	4b44      	ldr	r3, [pc, #272]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d116      	bne.n	8003330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_RCC_OscConfig+0x152>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d001      	beq.n	800331a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e1c7      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4937      	ldr	r1, [pc, #220]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332e:	e03a      	b.n	80033a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003338:	4b34      	ldr	r3, [pc, #208]	; (800340c <HAL_RCC_OscConfig+0x244>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fd fd37 	bl	8000db0 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003346:	f7fd fd33 	bl	8000db0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e1a8      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003358:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003364:	4b28      	ldr	r3, [pc, #160]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4925      	ldr	r1, [pc, #148]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_OscConfig+0x244>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fd fd16 	bl	8000db0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003388:	f7fd fd12 	bl	8000db0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e187      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d036      	beq.n	8003420 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_RCC_OscConfig+0x248>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fd fcf6 	bl	8000db0 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c8:	f7fd fcf2 	bl	8000db0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e167      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_OscConfig+0x240>)
 80033dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x200>
 80033e6:	e01b      	b.n	8003420 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_RCC_OscConfig+0x248>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ee:	f7fd fcdf 	bl	8000db0 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	e00e      	b.n	8003414 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f6:	f7fd fcdb 	bl	8000db0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d907      	bls.n	8003414 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e150      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
 8003408:	40023800 	.word	0x40023800
 800340c:	42470000 	.word	0x42470000
 8003410:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003414:	4b88      	ldr	r3, [pc, #544]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ea      	bne.n	80033f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8097 	beq.w	800355c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342e:	2300      	movs	r3, #0
 8003430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003432:	4b81      	ldr	r3, [pc, #516]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	4b7d      	ldr	r3, [pc, #500]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	4a7c      	ldr	r2, [pc, #496]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	6413      	str	r3, [r2, #64]	; 0x40
 800344e:	4b7a      	ldr	r3, [pc, #488]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	4b77      	ldr	r3, [pc, #476]	; (800363c <HAL_RCC_OscConfig+0x474>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d118      	bne.n	800349c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346a:	4b74      	ldr	r3, [pc, #464]	; (800363c <HAL_RCC_OscConfig+0x474>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a73      	ldr	r2, [pc, #460]	; (800363c <HAL_RCC_OscConfig+0x474>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003476:	f7fd fc9b 	bl	8000db0 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7fd fc97 	bl	8000db0 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e10c      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003490:	4b6a      	ldr	r3, [pc, #424]	; (800363c <HAL_RCC_OscConfig+0x474>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_OscConfig+0x2ea>
 80034a4:	4b64      	ldr	r3, [pc, #400]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a63      	ldr	r2, [pc, #396]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
 80034b0:	e01c      	b.n	80034ec <HAL_RCC_OscConfig+0x324>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b05      	cmp	r3, #5
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x30c>
 80034ba:	4b5f      	ldr	r3, [pc, #380]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a5e      	ldr	r2, [pc, #376]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034c0:	f043 0304 	orr.w	r3, r3, #4
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
 80034c6:	4b5c      	ldr	r3, [pc, #368]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	4a5b      	ldr	r2, [pc, #364]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70
 80034d2:	e00b      	b.n	80034ec <HAL_RCC_OscConfig+0x324>
 80034d4:	4b58      	ldr	r3, [pc, #352]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a57      	ldr	r2, [pc, #348]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
 80034e0:	4b55      	ldr	r3, [pc, #340]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	4a54      	ldr	r2, [pc, #336]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80034e6:	f023 0304 	bic.w	r3, r3, #4
 80034ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d015      	beq.n	8003520 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fd fc5c 	bl	8000db0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fd fc58 	bl	8000db0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e0cb      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	4b49      	ldr	r3, [pc, #292]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0ee      	beq.n	80034fc <HAL_RCC_OscConfig+0x334>
 800351e:	e014      	b.n	800354a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003520:	f7fd fc46 	bl	8000db0 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003526:	e00a      	b.n	800353e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003528:	f7fd fc42 	bl	8000db0 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0b5      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353e:	4b3e      	ldr	r3, [pc, #248]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1ee      	bne.n	8003528 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003550:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4a38      	ldr	r2, [pc, #224]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80a1 	beq.w	80036a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003566:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b08      	cmp	r3, #8
 8003570:	d05c      	beq.n	800362c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d141      	bne.n	80035fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b31      	ldr	r3, [pc, #196]	; (8003640 <HAL_RCC_OscConfig+0x478>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fd fc16 	bl	8000db0 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003588:	f7fd fc12 	bl	8000db0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e087      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	4b27      	ldr	r3, [pc, #156]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	019b      	lsls	r3, r3, #6
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	3b01      	subs	r3, #1
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	491b      	ldr	r1, [pc, #108]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x478>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d6:	f7fd fbeb 	bl	8000db0 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035de:	f7fd fbe7 	bl	8000db0 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e05c      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f0:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x416>
 80035fc:	e054      	b.n	80036a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_RCC_OscConfig+0x478>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fd fbd4 	bl	8000db0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd fbd0 	bl	8000db0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e045      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_OscConfig+0x470>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x444>
 800362a:	e03d      	b.n	80036a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d107      	bne.n	8003644 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e038      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
 8003638:	40023800 	.word	0x40023800
 800363c:	40007000 	.word	0x40007000
 8003640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_RCC_OscConfig+0x4ec>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d028      	beq.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d121      	bne.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d11a      	bne.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003674:	4013      	ands	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800367a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800367c:	4293      	cmp	r3, r2
 800367e:	d111      	bne.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	3b01      	subs	r3, #1
 800368e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800

080036b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0cc      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036cc:	4b68      	ldr	r3, [pc, #416]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d90c      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b65      	ldr	r3, [pc, #404]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b63      	ldr	r3, [pc, #396]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0b8      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a58      	ldr	r2, [pc, #352]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a52      	ldr	r2, [pc, #328]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800372e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b50      	ldr	r3, [pc, #320]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	494d      	ldr	r1, [pc, #308]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d044      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d119      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d003      	beq.n	8003776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003772:	2b03      	cmp	r3, #3
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e06f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003786:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e067      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003796:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 0203 	bic.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4934      	ldr	r1, [pc, #208]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a8:	f7fd fb02 	bl	8000db0 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fd fafe 	bl	8000db0 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e04f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 020c 	and.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d1eb      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d8:	4b25      	ldr	r3, [pc, #148]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d20c      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b22      	ldr	r3, [pc, #136]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e032      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4916      	ldr	r1, [pc, #88]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	490e      	ldr	r1, [pc, #56]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800383e:	f000 f821 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8003842:	4602      	mov	r2, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	490a      	ldr	r1, [pc, #40]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	5ccb      	ldrb	r3, [r1, r3]
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	4a09      	ldr	r2, [pc, #36]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_RCC_ClockConfig+0x1c8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fa62 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023c00 	.word	0x40023c00
 8003874:	40023800 	.word	0x40023800
 8003878:	080046f8 	.word	0x080046f8
 800387c:	20000000 	.word	0x20000000
 8003880:	20000004 	.word	0x20000004

08003884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003888:	b094      	sub	sp, #80	; 0x50
 800388a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	647b      	str	r3, [r7, #68]	; 0x44
 8003890:	2300      	movs	r3, #0
 8003892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003894:	2300      	movs	r3, #0
 8003896:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800389c:	4b79      	ldr	r3, [pc, #484]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d00d      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x40>
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	f200 80e1 	bhi.w	8003a70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x34>
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d003      	beq.n	80038be <HAL_RCC_GetSysClockFreq+0x3a>
 80038b6:	e0db      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b8:	4b73      	ldr	r3, [pc, #460]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x204>)
 80038ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038bc:	e0db      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038be:	4b73      	ldr	r3, [pc, #460]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x208>)
 80038c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038c2:	e0d8      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c4:	4b6f      	ldr	r3, [pc, #444]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ce:	4b6d      	ldr	r3, [pc, #436]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d063      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038da:	4b6a      	ldr	r3, [pc, #424]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	099b      	lsrs	r3, r3, #6
 80038e0:	2200      	movs	r2, #0
 80038e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ec:	633b      	str	r3, [r7, #48]	; 0x30
 80038ee:	2300      	movs	r3, #0
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
 80038f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038f6:	4622      	mov	r2, r4
 80038f8:	462b      	mov	r3, r5
 80038fa:	f04f 0000 	mov.w	r0, #0
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	0159      	lsls	r1, r3, #5
 8003904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003908:	0150      	lsls	r0, r2, #5
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4621      	mov	r1, r4
 8003910:	1a51      	subs	r1, r2, r1
 8003912:	6139      	str	r1, [r7, #16]
 8003914:	4629      	mov	r1, r5
 8003916:	eb63 0301 	sbc.w	r3, r3, r1
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003928:	4659      	mov	r1, fp
 800392a:	018b      	lsls	r3, r1, #6
 800392c:	4651      	mov	r1, sl
 800392e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003932:	4651      	mov	r1, sl
 8003934:	018a      	lsls	r2, r1, #6
 8003936:	4651      	mov	r1, sl
 8003938:	ebb2 0801 	subs.w	r8, r2, r1
 800393c:	4659      	mov	r1, fp
 800393e:	eb63 0901 	sbc.w	r9, r3, r1
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800394e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003956:	4690      	mov	r8, r2
 8003958:	4699      	mov	r9, r3
 800395a:	4623      	mov	r3, r4
 800395c:	eb18 0303 	adds.w	r3, r8, r3
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	462b      	mov	r3, r5
 8003964:	eb49 0303 	adc.w	r3, r9, r3
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003976:	4629      	mov	r1, r5
 8003978:	024b      	lsls	r3, r1, #9
 800397a:	4621      	mov	r1, r4
 800397c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003980:	4621      	mov	r1, r4
 8003982:	024a      	lsls	r2, r1, #9
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398a:	2200      	movs	r2, #0
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
 800398e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003990:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003994:	f7fc fc18 	bl	80001c8 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4613      	mov	r3, r2
 800399e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a0:	e058      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a2:	4b38      	ldr	r3, [pc, #224]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	2200      	movs	r2, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	4611      	mov	r1, r2
 80039ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039b2:	623b      	str	r3, [r7, #32]
 80039b4:	2300      	movs	r3, #0
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
 80039b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039bc:	4642      	mov	r2, r8
 80039be:	464b      	mov	r3, r9
 80039c0:	f04f 0000 	mov.w	r0, #0
 80039c4:	f04f 0100 	mov.w	r1, #0
 80039c8:	0159      	lsls	r1, r3, #5
 80039ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ce:	0150      	lsls	r0, r2, #5
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4641      	mov	r1, r8
 80039d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80039da:	4649      	mov	r1, r9
 80039dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039f4:	ebb2 040a 	subs.w	r4, r2, sl
 80039f8:	eb63 050b 	sbc.w	r5, r3, fp
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	00eb      	lsls	r3, r5, #3
 8003a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a0a:	00e2      	lsls	r2, r4, #3
 8003a0c:	4614      	mov	r4, r2
 8003a0e:	461d      	mov	r5, r3
 8003a10:	4643      	mov	r3, r8
 8003a12:	18e3      	adds	r3, r4, r3
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	464b      	mov	r3, r9
 8003a18:	eb45 0303 	adc.w	r3, r5, r3
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	028b      	lsls	r3, r1, #10
 8003a2e:	4621      	mov	r1, r4
 8003a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a34:	4621      	mov	r1, r4
 8003a36:	028a      	lsls	r2, r1, #10
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	61fa      	str	r2, [r7, #28]
 8003a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a48:	f7fc fbbe 	bl	80001c8 <__aeabi_uldivmod>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4613      	mov	r3, r2
 8003a52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3750      	adds	r7, #80	; 0x50
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	007a1200 	.word	0x007a1200

08003a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000000 	.word	0x20000000

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aac:	f7ff fff0 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0a9b      	lsrs	r3, r3, #10
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4903      	ldr	r1, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08004708 	.word	0x08004708

08003ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d035      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003af8:	4b62      	ldr	r3, [pc, #392]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003afe:	f7fd f957 	bl	8000db0 <HAL_GetTick>
 8003b02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b06:	f7fd f953 	bl	8000db0 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0b0      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b18:	4b5b      	ldr	r3, [pc, #364]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	019a      	lsls	r2, r3, #6
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	071b      	lsls	r3, r3, #28
 8003b30:	4955      	ldr	r1, [pc, #340]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b38:	4b52      	ldr	r3, [pc, #328]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b3e:	f7fd f937 	bl	8000db0 <HAL_GetTick>
 8003b42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b46:	f7fd f933 	bl	8000db0 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e090      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b58:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8083 	beq.w	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	4b44      	ldr	r3, [pc, #272]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	4a43      	ldr	r2, [pc, #268]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40
 8003b82:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b8e:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a3e      	ldr	r2, [pc, #248]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b9a:	f7fd f909 	bl	8000db0 <HAL_GetTick>
 8003b9e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7fd f905 	bl	8000db0 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e062      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bb4:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bc0:	4b31      	ldr	r3, [pc, #196]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d02f      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d028      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bde:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003be8:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bee:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003bf4:	4a24      	ldr	r2, [pc, #144]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d114      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fd f8d3 	bl	8000db0 <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fd f8cf 	bl	8000db0 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e02a      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ee      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c3c:	d10d      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c52:	490d      	ldr	r1, [pc, #52]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	608b      	str	r3, [r1, #8]
 8003c58:	e005      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c60:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c64:	6093      	str	r3, [r2, #8]
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c72:	4905      	ldr	r1, [pc, #20]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	42470068 	.word	0x42470068
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	42470e40 	.word	0x42470e40

08003c94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d13e      	bne.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d12f      	bne.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003cca:	617b      	str	r3, [r7, #20]
          break;
 8003ccc:	e02f      	b.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cda:	d108      	bne.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003cdc:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce4:	4a18      	ldr	r2, [pc, #96]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	e007      	b.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf6:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	fb02 f303 	mul.w	r3, r2, r3
 8003d10:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d18:	0f1b      	lsrs	r3, r3, #28
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	617b      	str	r3, [r7, #20]
          break;
 8003d26:	e002      	b.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
          break;
 8003d2c:	bf00      	nop
        }
      }
      break;
 8003d2e:	bf00      	nop
    }
  }
  return frequency;
 8003d30:	697b      	ldr	r3, [r7, #20]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	00bb8000 	.word	0x00bb8000
 8003d48:	007a1200 	.word	0x007a1200
 8003d4c:	00f42400 	.word	0x00f42400

08003d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e07b      	b.n	8003e5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d108      	bne.n	8003d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d72:	d009      	beq.n	8003d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	61da      	str	r2, [r3, #28]
 8003d7a:	e005      	b.n	8003d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fc fee6 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0c:	ea42 0103 	orr.w	r1, r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	f003 0104 	and.w	r1, r3, #4
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	f003 0210 	and.w	r2, r3, #16
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f023 0201 	bic.w	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
	...

08003ea8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <USB_FlushTxFifo+0x64>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e01b      	b.n	8003f00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	daf2      	bge.n	8003eb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	019b      	lsls	r3, r3, #6
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <USB_FlushTxFifo+0x64>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e006      	b.n	8003f00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d0f0      	beq.n	8003ee0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	00030d40 	.word	0x00030d40

08003f10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <USB_FlushRxFifo+0x5c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e018      	b.n	8003f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	daf2      	bge.n	8003f1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3301      	adds	r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <USB_FlushRxFifo+0x5c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e006      	b.n	8003f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d0f0      	beq.n	8003f40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	00030d40 	.word	0x00030d40

08003f70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b08b      	sub	sp, #44	; 0x2c
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	089b      	lsrs	r3, r3, #2
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f96:	2300      	movs	r3, #0
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	e014      	b.n	8003fc6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	3301      	adds	r3, #1
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	623b      	str	r3, [r7, #32]
 8003fc6:	6a3a      	ldr	r2, [r7, #32]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d3e6      	bcc.n	8003f9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003fce:	8bfb      	ldrh	r3, [r7, #30]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01e      	beq.n	8004012 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f107 0310 	add.w	r3, r7, #16
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	701a      	strb	r2, [r3, #0]
      i++;
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	623b      	str	r3, [r7, #32]
      pDest++;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	3301      	adds	r3, #1
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004006:	8bfb      	ldrh	r3, [r7, #30]
 8004008:	3b01      	subs	r3, #1
 800400a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800400c:	8bfb      	ldrh	r3, [r7, #30]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1ea      	bne.n	8003fe8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004014:	4618      	mov	r0, r3
 8004016:	372c      	adds	r7, #44	; 0x2c
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004038:	68fb      	ldr	r3, [r7, #12]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f003 0301 	and.w	r3, r3, #1
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004080:	f023 0303 	bic.w	r3, r3, #3
 8004084:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	68f9      	ldr	r1, [r7, #12]
 8004096:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d107      	bne.n	80040b4 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040aa:	461a      	mov	r2, r3
 80040ac:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80040b0:	6053      	str	r3, [r2, #4]
 80040b2:	e009      	b.n	80040c8 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d106      	bne.n	80040c8 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040c0:	461a      	mov	r2, r3
 80040c2:	f241 7370 	movw	r3, #6000	; 0x1770
 80040c6:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	b29b      	uxth	r3, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	; 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	0c9b      	lsrs	r3, r3, #18
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0fdb      	lsrs	r3, r3, #31
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b20      	cmp	r3, #32
 8004146:	d104      	bne.n	8004152 <USB_HC_Halt+0x5a>
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e0c8      	b.n	80042e4 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <USB_HC_Halt+0x66>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d163      	bne.n	8004226 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	440a      	add	r2, r1
 8004174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800417c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	f040 80ab 	bne.w	80042e2 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d133      	bne.n	8004200 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041b6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	0151      	lsls	r1, r2, #5
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	440a      	add	r2, r1
 80041ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041d6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3301      	adds	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041e4:	d81d      	bhi.n	8004222 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041fc:	d0ec      	beq.n	80041d8 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80041fe:	e070      	b.n	80042e2 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	440a      	add	r2, r1
 8004216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800421a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800421e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004220:	e05f      	b.n	80042e2 <USB_HC_Halt+0x1ea>
            break;
 8004222:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004224:	e05d      	b.n	80042e2 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	440a      	add	r2, r1
 800423c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004244:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d133      	bne.n	80042be <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	440a      	add	r2, r1
 800426c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004270:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004274:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	440a      	add	r2, r1
 800428c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004290:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004294:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3301      	adds	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a2:	d81d      	bhi.n	80042e0 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ba:	d0ec      	beq.n	8004296 <USB_HC_Halt+0x19e>
 80042bc:	e011      	b.n	80042e2 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e000      	b.n	80042e2 <USB_HC_Halt+0x1ea>
          break;
 80042e0:	bf00      	nop
    }
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3724      	adds	r7, #36	; 0x24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fdbd 	bl	8003e84 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800430a:	2110      	movs	r1, #16
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff fdcb 	bl	8003ea8 <USB_FlushTxFifo>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff fdf7 	bl	8003f10 <USB_FlushRxFifo>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800432c:	2300      	movs	r3, #0
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	e01f      	b.n	8004372 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	4413      	add	r3, r2
 800433a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004348:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004350:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004358:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004366:	461a      	mov	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	3301      	adds	r3, #1
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b0f      	cmp	r3, #15
 8004376:	d9dc      	bls.n	8004332 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	e034      	b.n	80043e8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004394:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800439c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b2:	461a      	mov	r2, r3
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3301      	adds	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043c4:	d80c      	bhi.n	80043e0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043dc:	d0ec      	beq.n	80043b8 <USB_StopHost+0xc8>
 80043de:	e000      	b.n	80043e2 <USB_StopHost+0xf2>
        break;
 80043e0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	3301      	adds	r3, #1
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b0f      	cmp	r3, #15
 80043ec:	d9c7      	bls.n	800437e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043f4:	461a      	mov	r2, r3
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004402:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff fd2c 	bl	8003e62 <USB_EnableGlobalInt>

  return ret;
 800440a:	7ffb      	ldrb	r3, [r7, #31]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3720      	adds	r7, #32
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f804 	bl	8004438 <USBH_HandleSof>
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b0b      	cmp	r3, #11
 8004448:	d10a      	bne.n	8004460 <USBH_HandleSof+0x28>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4798      	blx	r3
  }
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8004478:	bf00      	nop
}
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004494:	bf00      	nop
}
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f883 	bl	80045fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	791b      	ldrb	r3, [r3, #4]
 80044f8:	4619      	mov	r1, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f80b 	bl	8004516 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	795b      	ldrb	r3, [r3, #5]
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f805 	bl	8004516 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	2b0f      	cmp	r3, #15
 8004526:	d80d      	bhi.n	8004544 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	33e0      	adds	r3, #224	; 0xe0
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	33e0      	adds	r3, #224	; 0xe0
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ff57 	bl	8004414 <USBH_LL_IncTimer>
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff ff8f 	bl	80044a0 <USBH_LL_Connect>
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ff98 	bl	80044ce <USBH_LL_Disconnect>
}
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	460b      	mov	r3, r1
 80045b0:	70fb      	strb	r3, [r7, #3]
 80045b2:	4613      	mov	r3, r2
 80045b4:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff ff49 	bl	8004468 <USBH_LL_PortEnabled>
}
 80045d6:	bf00      	nop
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff ff49 	bl	8004484 <USBH_LL_PortDisabled>
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004610:	4618      	mov	r0, r3
 8004612:	f7fc ffd5 	bl	80015c0 <HAL_HCD_Stop>
 8004616:	4603      	mov	r3, r0
 8004618:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 f807 	bl	8004630 <USBH_Get_USB_Status>
 8004622:	4603      	mov	r3, r0
 8004624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004626:	7bbb      	ldrb	r3, [r7, #14]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	2b03      	cmp	r3, #3
 8004642:	d817      	bhi.n	8004674 <USBH_Get_USB_Status+0x44>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <USBH_Get_USB_Status+0x1c>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	0800465d 	.word	0x0800465d
 8004650:	08004663 	.word	0x08004663
 8004654:	08004669 	.word	0x08004669
 8004658:	0800466f 	.word	0x0800466f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]
    break;
 8004660:	e00b      	b.n	800467a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004662:	2302      	movs	r3, #2
 8004664:	73fb      	strb	r3, [r7, #15]
    break;
 8004666:	e008      	b.n	800467a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
    break;
 800466c:	e005      	b.n	800467a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800466e:	2302      	movs	r3, #2
 8004670:	73fb      	strb	r3, [r7, #15]
    break;
 8004672:	e002      	b.n	800467a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004674:	2302      	movs	r3, #2
 8004676:	73fb      	strb	r3, [r7, #15]
    break;
 8004678:	bf00      	nop
  }
  return usb_status;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4d0d      	ldr	r5, [pc, #52]	; (80046c0 <__libc_init_array+0x38>)
 800468c:	4c0d      	ldr	r4, [pc, #52]	; (80046c4 <__libc_init_array+0x3c>)
 800468e:	1b64      	subs	r4, r4, r5
 8004690:	10a4      	asrs	r4, r4, #2
 8004692:	2600      	movs	r6, #0
 8004694:	42a6      	cmp	r6, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	4d0b      	ldr	r5, [pc, #44]	; (80046c8 <__libc_init_array+0x40>)
 800469a:	4c0c      	ldr	r4, [pc, #48]	; (80046cc <__libc_init_array+0x44>)
 800469c:	f000 f820 	bl	80046e0 <_init>
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	2600      	movs	r6, #0
 80046a6:	42a6      	cmp	r6, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b0:	4798      	blx	r3
 80046b2:	3601      	adds	r6, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ba:	4798      	blx	r3
 80046bc:	3601      	adds	r6, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	08004718 	.word	0x08004718
 80046c4:	08004718 	.word	0x08004718
 80046c8:	08004718 	.word	0x08004718
 80046cc:	0800471c 	.word	0x0800471c

080046d0 <memset>:
 80046d0:	4402      	add	r2, r0
 80046d2:	4603      	mov	r3, r0
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d100      	bne.n	80046da <memset+0xa>
 80046d8:	4770      	bx	lr
 80046da:	f803 1b01 	strb.w	r1, [r3], #1
 80046de:	e7f9      	b.n	80046d4 <memset+0x4>

080046e0 <_init>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	bf00      	nop
 80046e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e6:	bc08      	pop	{r3}
 80046e8:	469e      	mov	lr, r3
 80046ea:	4770      	bx	lr

080046ec <_fini>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr
